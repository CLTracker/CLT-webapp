{"version":3,"sources":["webpack:///js/app.521de9d80b797ef7ea16.js","webpack:///./src/app/app.module.ts","webpack:///./~/@angular/material/@angular/material.es5.js","webpack:///./~/@angular/animations/@angular/animations/browser.es5.js","webpack:///./~/@angular/platform-browser/@angular/platform-browser/animations.es5.js","webpack:///./~/angular2-jwt/angular2-jwt.js","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/shared/route-guard-adm.service.ts","webpack:///./src/app/shared/route-guard-all.service.ts","webpack:///./src/app/shared/route-guard-org.service.ts","webpack:///./src/app/shared/route-guard-xhb.service.ts","webpack:///./src/main.ts","webpack:///./src/app/about/about.component.scss","webpack:///./src/app/app.component.scss","webpack:///./src/app/home/home.component.scss","webpack:///./src/app/about/about.component.html","webpack:///./src/app/app.component.html","webpack:///./src/app/home/home.component.html","webpack:///./src/app/shared/auth.service.ts","webpack:///./src/app/shared/index.ts","webpack:///./src/public/js/jquery.scrollex.min.js","webpack:///./~/@angular/forms/@angular/forms.es5.js","webpack:///./~/@angular/animations/@angular/animations.es5.js","webpack:///./src/app/about/about.component.ts","webpack:///./src/app/home/home.component.ts"],"names":["webpackJsonp","113","module","exports","__webpack_require__","Object","defineProperty","value","core_1","platform_browser_1","http_1","forms_1","material_1","animations_1","app_component_1","home_component_1","about_component_1","shared_1","app_routing_1","shared_2","hmr_1","AppModule","appRef","this","prototype","hmrOnInit","store","console","log","hmrOnDestroy","cmpLocation","components","map","cmp","location","nativeElement","disposeOldHosts","createNewHosts","removeNgStyles","hmrAfterDestroy","__decorate","NgModule","imports","BrowserModule","BrowserAnimationsModule","HttpModule","FormsModule","MaterialModule","routing","declarations","AppComponent","HomeComponent","AboutComponent","providers","RouteGuard","Auth","bootstrap","__metadata","ApplicationRef","121","__webpack_exports__","coerceBooleanProperty","enforceStyleRecalculation","element","window","getComputedStyle","getPropertyValue","distanceToFurthestCorner","x","y","rect","distX","Math","max","abs","left","right","distY","top","bottom","sqrt","SCROLL_DISPATCHER_PROVIDER_FACTORY","parentDispatcher","ngZone","ScrollDispatcher","VIEWPORT_RULER_PROVIDER_FACTORY","parentRuler","scrollDispatcher","ViewportRuler","formatCssUnit","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","OverlayContainer","hasGeometry","offsetWidth","offsetHeight","getClientRects","length","isNativeFormElement","nodeName","toLowerCase","isHiddenInput","isInputElement","type","isAnchorWithHref","isAnchorElement","hasAttribute","hasValidTabIndex","undefined","tabIndex","getAttribute","isNaN","parseInt","getTabIndexValue","isPotentiallyTabbableIOS","inputType","isPotentiallyFocusable","getWindow","node","ownerDocument","defaultView","LIVE_ANNOUNCER_PROVIDER_FACTORY","liveElement","LiveAnnouncer","getSupportedInputTypes","supportedInputTypes","featureTestInput_1","document","createElement","Set","filter","setAttribute","isFakeMousedownFromScreenReader","event","buttons","UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY","UniqueSelectionDispatcher","FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY","FocusOriginMonitor","applyCssTransform","transformValue","trim","style","transform","webkitTransform","coerceNumberProperty","fallbackValue","parseFloat","Number","clampValue","min","n","coerceToString","coerceToNumber","calc","exp","normalizeUnits","match","cloneSvg","svg","cloneNode","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","http","sanitizer","MdIconRegistry","clamp","v","polarToCartesian","radius","pathRadius","angleInDegrees","angleInRadians","DEGREE_IN_RADIANS","cos","sin","linearEase","currentTime","startValue","changeInValue","duration","materialEase","time","timeCubed","pow","timeQuad","getSvgArc","currentValue","rotation","largeArcFlag","startPoint","startAngle","MAX_ANGLE","endAngle","start","end","arcSweep","clamp$1","extendObject","dest","sources","_i","arguments","TypeError","_a","sources_1","source","key","hasOwnProperty","_applyConfigDefaults","config","MdSnackBarConfig","_applyConfigDefaults$1","MdDialogConfig","__WEBPACK_IMPORTED_MODULE_0__angular_core__","__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__","__WEBPACK_IMPORTED_MODULE_2__angular_common__","__WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__","__WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__","__WEBPACK_IMPORTED_MODULE_5_rxjs_add_observable_fromEvent__","__WEBPACK_IMPORTED_MODULE_6_rxjs_add_observable_merge__","__WEBPACK_IMPORTED_MODULE_7_rxjs_add_operator_auditTime__","__WEBPACK_IMPORTED_MODULE_8__angular_forms__","__WEBPACK_IMPORTED_MODULE_9__angular_animations__","__WEBPACK_IMPORTED_MODULE_10_rxjs_add_operator_startWith__","__WEBPACK_IMPORTED_MODULE_11_rxjs_add_operator_first__","__WEBPACK_IMPORTED_MODULE_12__angular_http__","__WEBPACK_IMPORTED_MODULE_13_rxjs_add_observable_forkJoin__","__WEBPACK_IMPORTED_MODULE_14_rxjs_add_observable_of__","__WEBPACK_IMPORTED_MODULE_15_rxjs_add_operator_map__","__WEBPACK_IMPORTED_MODULE_16_rxjs_add_operator_filter__","__WEBPACK_IMPORTED_MODULE_17_rxjs_add_operator_do__","__WEBPACK_IMPORTED_MODULE_18_rxjs_add_operator_share__","__WEBPACK_IMPORTED_MODULE_19_rxjs_add_operator_finally__","__WEBPACK_IMPORTED_MODULE_20_rxjs_add_operator_catch__","__WEBPACK_IMPORTED_MODULE_21_rxjs_add_observable_throw__","__WEBPACK_IMPORTED_MODULE_22_rxjs_add_operator_switchMap__","d","Dir","RtlModule","ObserveContentModule","ObserveContent","MdOptionModule","MdOption","Portal","BasePortalHost","ComponentPortal","TemplatePortal","PortalHostDirective","TemplatePortalDirective","PortalModule","DomPortalHost","Overlay","OVERLAY_PROVIDERS","FullscreenOverlayContainer","OverlayRef","OverlayState","ConnectedOverlayDirective","OverlayOrigin","OverlayModule","GestureConfig","LIVE_ANNOUNCER_ELEMENT_TOKEN","LIVE_ANNOUNCER_PROVIDER","InteractivityChecker","A11yModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MdLineModule","MdLine","MdLineSetter","MdError","CompatibilityModule","NoConflictStyleCompatibilityMode","MdCoreModule","PlatformModule","Platform","GlobalPositionStrategy","ConnectedPositionStrategy","ConnectionPositionPair","ScrollableViewProperties","ConnectedOverlayPositionChange","MdRipple","MD_RIPPLE_GLOBAL_OPTIONS","RippleRef","RippleState","RIPPLE_FADE_IN_DURATION","RIPPLE_FADE_OUT_DURATION","MdRippleModule","SelectionModel","SelectionChange","FocusTrap","FocusTrapFactory","FocusTrapDeprecatedDirective","FocusTrapDirective","StyleModule","TOUCH_BUFFER_MS","CdkMonitorFocus","FOCUS_ORIGIN_MONITOR_PROVIDER","UP_ARROW","DOWN_ARROW","RIGHT_ARROW","LEFT_ARROW","PAGE_UP","PAGE_DOWN","HOME","END","ENTER","SPACE","TAB","ESCAPE","BACKSPACE","DELETE","MATERIAL_COMPATIBILITY_MODE","MAT_ELEMENTS_SELECTOR","MD_ELEMENTS_SELECTOR","MatPrefixRejector","MdPrefixRejector","AnimationCurves","AnimationDurations","MdSelectionModule","MdPseudoCheckbox","MaterialRootModule","MdAutocompleteModule","MdAutocomplete","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MD_AUTOCOMPLETE_VALUE_ACCESSOR","MdAutocompleteTrigger","MdButtonModule","MdButtonCssMatStyler","MdRaisedButtonCssMatStyler","MdIconButtonCssMatStyler","MdFabCssMatStyler","MdMiniFabCssMatStyler","MdButton","MdAnchor","MdButtonToggleModule","MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MdButtonToggleChange","MdButtonToggleGroup","MdButtonToggleGroupMultiple","MdButtonToggle","MdCardModule","MdCardContent","MdCardTitle","MdCardSubtitle","MdCardActions","MdCardFooter","MdCardSmImage","MdCardMdImage","MdCardLgImage","MdCardImage","MdCardXlImage","MdCardAvatar","MdCard","MdCardHeader","MdCardTitleGroup","MdChipsModule","MdChipList","MdChip","MdCheckboxModule","MD_CHECKBOX_CONTROL_VALUE_ACCESSOR","TransitionCheckState","MdCheckboxChange","MdCheckbox","MdDialogModule","MD_DIALOG_DATA","MdDialog","MdDialogContainer","MdDialogClose","MdDialogTitle","MdDialogContent","MdDialogActions","MdDialogRef","MdGridListModule","MdGridList","MdIconModule","MdIconInvalidNameError","MdIcon","ICON_REGISTRY_PROVIDER","MdInputModule","MdTextareaAutosize","MdPlaceholder","MdHint","MdErrorDirective","MdPrefix","MdSuffix","MdInputDirective","MdInputContainer","MdInputContainerPlaceholderConflictError","MdInputContainerUnsupportedTypeError","MdInputContainerDuplicatedHintError","MdInputContainerMissingMdInputError","MdListModule","MdListDivider","LIST_TYPE_TOKEN","MdList","MdListCssMatStyler","MdNavListCssMatStyler","MdNavListTokenSetter","MdDividerCssMatStyler","MdListAvatarCssMatStyler","MdListIconCssMatStyler","MdListSubheaderCssMatStyler","MdListItem","MdMenuModule","fadeInItems","transformMenu","MdMenu","MdMenuItem","MdMenuTrigger","MdProgressBarModule","MdProgressBar","MdProgressSpinnerModule","MdProgressSpinnerCssMatStyler","MdProgressSpinner","MdSpinner","MdRadioModule","MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MdRadioChange","MdRadioGroup","MdRadioButton","MdSelectModule","fadeInContent","transformPanel","transformPlaceholder","SELECT_OPTION_HEIGHT","SELECT_PANEL_MAX_HEIGHT","SELECT_MAX_OPTIONS_DISPLAYED","SELECT_TRIGGER_HEIGHT","SELECT_OPTION_HEIGHT_ADJUSTMENT","SELECT_PANEL_PADDING_X","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_Y","SELECT_PANEL_VIEWPORT_PADDING","MdSelectChange","MdSelect","MdSidenavModule","MdDuplicatedSidenavError","MdSidenavToggleResult","MdSidenav","MdSidenavContainer","MdSliderModule","MD_SLIDER_VALUE_ACCESSOR","MdSliderChange","MdSlider","SliderRenderer","MdSlideToggleModule","MD_SLIDE_TOGGLE_VALUE_ACCESSOR","MdSlideToggleChange","MdSlideToggle","MdSnackBarModule","MdSnackBar","SHOW_ANIMATION","HIDE_ANIMATION","MdSnackBarContainer","MdSnackBarRef","SimpleSnackBar","MdTabsModule","MdInkBar","MdTabBody","MdTabHeader","MdTabLabelWrapper","MdTab","MdTabLabel","MdTabChangeEvent","MdTabGroup","MdTabNavBar","MdTabLink","MdTabLinkRipple","MdToolbarModule","MdToolbarRow","MdToolbar","MdTooltipModule","TOUCHEND_HIDE_DELAY","SCROLL_THROTTLE_MS","MdTooltip","TooltipComponent","OVERLAY_CONTAINER_PROVIDER","OverlayPositionBuilder","VIEWPORT_RULER_PROVIDER","SCROLL_DISPATCHER_PROVIDER","Scrollable","RippleRenderer","MdGridAvatarCssMatStyler","MdGridTile","MdGridTileFooterCssMatStyler","MdGridTileHeaderCssMatStyler","MdGridTileText","__extends","b","__","constructor","p","create","hasDoneGlobalChecks","isCompatibilityMode","Error","decorators","args","selector","ctorParameters","_document","i","_checkDoctype","_checkTheme","forRoot","ngModule","doctype","warn","testElement","classList","add","body","appendChild","display","removeChild","provide","useValue","host","[class.mat-line]","_lines","_renderer","_element","_this","_setLineClass","changes","subscribe","count","_resetClasses","_setClass","className","bool","setElementClass","_dir","dirChange","get","set","old","emit","enumerable","configurable","dir","exportAs","propDecorators","_elementRef","ngAfterContentInit","_observer","MutationObserver","mutations","forEach","observe","characterData","childList","subtree","ngOnDestroy","disconnect","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","state","fadeOut","fadeOutRipple","_ngZone","_ruler","_isMousedown","_triggerEvents","Map","_activeRipples","rippleConfig","rippleDisabled","_containerElement","onMousedown","bind","onMouseup","onMouseLeave","setTriggerElement","fadeInRipple","pageX","pageY","containerRect","getBoundingClientRect","centered","width","height","scrollPosition","getViewportScrollPosition","speedFactor","offsetX","offsetY","ripple","backgroundColor","color","transitionDuration","rippleRef","runTimeoutOutsideZone","persistent","delete","rippleEl","opacity","parentNode","fadeOutAll","_triggerElement","fn","removeEventListener","runOutsideAngular","addEventListener","delay","setTimeout","_scrolled","_globalSubscription","_scrolledCount","scrollableReferences","register","scrollable","scrollSubscription","elementScrolled","_notify","deregister","has","unsubscribe","scrolled","auditTimeInMs","callback","observable","asObservable","auditTime","merge","fromEvent","subscription","size","getScrollContainers","elementRef","scrollingContainers","scrollableContainsElement","push","scrollableElement","getElementRef","parentElement","next","deps","useFactory","_cacheViewportGeometry","getViewportRect","documentRect","_documentRect","innerHeight","innerWidth","scrollTop","scrollY","scrollLeft","scrollX","documentElement","ruler","globalOptions","_rippleRenderer","_globalOptions","ngOnChanges","trigger","disabled","launch","baseSpeedFactor","[class.mat-ripple]","[class.mat-ripple-unbounded]","unbounded","_color","encapsulation","None","styles","template","[class.mat-pseudo-checkbox]","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","_uniqueIdCounter","MdOptionSelectionChange","isUserInput","_isCompatibilityMode","_selected","_active","_disabled","_id","multiple","onSelectionChange","_getHostElement","textContent","select","_emitSelectionChangeEvent","deselect","focus","invokeElementMethod","setActiveStyles","setInactiveStyles","_handleKeydown","keyCode","_selectViaInteraction","_getTabIndex","role","[attr.tabindex]","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[id]","[attr.aria-selected]","[attr.aria-disabled]","[class.mat-option-disabled]","(click)","(keydown)","[class.mat-option]","_super","call","message","NullPortalError","PortalAlreadyAttachedError","PortalHostAlreadyDisposedError","UnknownPortalTypeError","NullPortalHostError","NoPortalAttachedError","attach","hasAttached","_attachedHost","detach","setAttachedHost","component","viewContainerRef","injector","locals","templateRef","_isDisposed","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","_invokeDisposeFn","dispose","setDisposeFn","_disposeFn","_componentFactoryResolver","_viewContainerRef","_portal","componentFactory","resolveComponentFactory","ref","createComponent","parentInjector","destroy","createEmbeddedView","clear","inputs","_deprecatedPortal","hasBackdrop","backdropClass","direction","_hostDomElement","_appRef","_defaultInjector","componentRef","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","rootNodes","rootNode","index","indexOf","remove","_portalHost","_pane","_state","_backdropElement","_backdropClick","attachResult","_updateStackingOrder","updateSize","updateDirection","updatePosition","_togglePointerEvents","_attachBackdrop","detachBackdrop","positionStrategy","backdropClick","getState","apply","minWidth","minHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","nextSibling","backdropToDetach","finishDetach_1","origin","overlay","originX","originY","overlayX","overlayY","connectionPair","scrollableViewProperties","_connectedTo","_originPos","_overlayPos","_viewportRuler","_offsetX","_offsetY","scrollables","_preferredPositions","_onPositionChange","_origin","withFallbackPosition","originRect","overlayRect","viewportRect","fallbackPoint","pos","originPoint","_getOriginConnectionPoint","overlayPoint","_getOverlayPoint","fitsInViewport","_setElementPosition","_lastConnectedPosition","getScrollableViewProperties","positionChange","Promise","resolve","visibleArea","recalculateLastPosition","lastPosition","withScrollableContainers","originPos","overlayPos","withDirection","withOffsetX","offset","withOffsetY","_getStartX","_isRtl","_getEndX","originStartX","originEndX","overlayStartX","overlayStartY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","originBounds","_getElementBounds","overlayBounds","scrollContainerBounds","isOriginClipped","isElementClipped","isOriginOutsideView","isElementOutsideView","isOverlayClipped","isOverlayOutsideView","elementBounds","containersBounds","some","containerBounds","outsideAbove","outsideBelow","outsideLeft","outsideRight","clippedAbove","clippedBelow","clippedLeft","clippedRight","boundingClientRect","overflows","reduce","currentOverflow","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","_wrapper","parentStyles","position","marginTop","marginLeft","marginBottom","marginRight","justifyContent","alignItems","global","connectedTo","_themeClass","getContainerElement","_createContainer","container","nextUniqueId","defaultState","_overlayContainer","_positionBuilder","_injector","state$$1","_createOverlayRef","_createPaneElement","pane","id","_createPortalHost","_scroll","_elementScrolled","ngOnInit","_scrollListener","listen","defaultPositionList","_overlay","_open","_hasBackdrop","_templatePortal","_position","_attachOverlay","_detachOverlay","_overlayRef","_destroyOverlay","_createOverlay","positions","_buildConfig","overlayConfig","_createPositionStrategy","strategy","_handlePositionChanges","_positionSubscription","onPositionChange","_backdropSubscription","open","hasV8BreakIterator","Intl","v8BreakIterator","EDGE","test","navigator","userAgent","TRIDENT","BLINK","chrome","CSS","WEBKIT","IOS","MSStream","FIREFOX","ANDROID","_platform","isDisabled","isVisible","visibility","isTabbable","frameElement","frameType","tabIndexValue","isFocusable","_checker","deferAnchors","_enabled","attachAnchors","val","_startAnchor","_endAnchor","_createAnchor","focusLastTabbableElement","focusFirstTabbableElement","focusFirstTabbableElementWhenReady","onMicrotaskEmpty","first","focusLastTabbableElementWhenReady","redirectToElement","querySelector","_getFirstTabbableElement","focusTargets","querySelectorAll","_getLastTabbableElement","root","children","childNodes","tabbableChild","nodeType","Node","ELEMENT_NODE","anchor","_focusTrapFactory","focusTrap","enabled","elementToken","_liveElement","_createLiveElement","announce","politeness","_removeLiveElement","liveEl","_adjustParentForFullscreenChange","_addFullscreenChangeListener","getFullscreenElement","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","recognizeWith","base","options","inheritances","recognizer","item","_isMulti","initiallySelectedValues","_emitChanges","_selection","_deselectedToEmit","_selectedToEmit","onChange","_markSelected","Array","from","values","_emitChangeEvent","_unmarkSelected","toggle","isSelected","_unmarkAll","isEmpty","hasValue","sort","predicate","selected","eventData","added","removed","_listeners","notify","name","listener","_windowFocused","_elementInfo","WeakMap","_registerDocumentEvents","monitor","renderer","checkChildren","info_1","subject","info","unlisten","focusListener","_onFocus","blurListener","_onBlur","stopMonitoring","elementInfo","complete","_setClasses","focusVia","_setOriginForCurrentEventQueue","_lastTouchTarget","_touchTimeout","clearTimeout","target","_wasCausedByTouch","focusTarget","contains","_lastFocusOrigin","relatedTarget","_focusOriginMonitor","cdkFocusChange","STANDARD_CURVE","DECELERATION_CURVE","ACCELERATION_CURVE","SHARP_CURVE","COMPLEX","ENTERING","EXITING","useExisting","multi","_uniqueIdCounter$1","_value","_name","_vertical","_isInitialized","_controlValueAccessorChangeFn","onTouched","_buttonToggles","_change","ngAfterViewInit","_updateButtonToggleNames","newValue","_updateSelectedButtonToggleFromValue","checked","isAlreadySelected","matchingButtonToggle","buttonToggle","writeValue","registerOnChange","registerOnTouched","setDisabledState","[class.mat-button-toggle-group]","[class.mat-button-toggle-vertical]","vertical","change","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_checked","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","_type","newCheckedState","_inputElement","_toggle","_onInputChange","stopPropagation","_onInputClick","[class.mat-button-toggle]","[class.mat-button]","[class.mat-raised-button]","[class.mat-icon-button]","[class.mat-fab]","[class.mat-mini-fab]","_isRoundButton","_hasAttributeWithPrefix","_isIconButton","_disableRipple","_updateColor","newColor","_setElementColor","isAdd","_isRippleDisabled","disableRipple","unprefixedAttributeNames","suffix","el","[disabled]","changeDetection","OnPush","focusOriginMonitor","_haltDisabledEvents","preventDefault","stopImmediatePropagation","[attr.disabled]","nextId","Init","Checked","Unchecked","Indeterminate","_changeDetectorRef","ariaLabel","ariaLabelledby","labelPosition","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_required","_focusedSubscription","focusOrigin","_focusedRipple","_ripple","then","markForCheck","indeterminate","changed","_transitionCheckState","newState","oldState","_getAnimationClassForCheckStateTransition","_onInputBlur","_removeFocusedRipple","_onInteractionEvent","animSuffix","[class.mat-checkbox]","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","required","align","_uniqueIdCounter$2","_radios","_updateRadioButtonNames","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","radio","[class.mat-radio-group]","radioGroup","_radioDispatcher","_labelPosition","_focusOriginMonitorSubscription","_focusedRippleRef","groupValueChanged","[class.mat-radio-button]","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","ListKeyManager","_items","_activeItemIndex","_tabOut","_wrap","withWrap","setActiveItem","_activeItem","toArray","onKeydown","setNextItemActive","setPreviousItemActive","setFirstItemActive","setLastItemActive","_setActiveItemByIndex","_setActiveItemByDelta","updateActiveItemIndex","delta","items","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","FocusKeyManager","activeItem","MdSelectDynamicMultipleError","MdSelectNonArrayValueError","_control","_panelOpen","_scrollTop","_multiple","_placeholderState","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_positions","_floatPlaceholder","onOpen","onClose","valueAccessor","_tabIndex","_placeholder","_triggerWidth","_getWidth","_selectionModel","option","_initKeyManager","_changeSubscription","startWith","_resetOptions","_setSelectionByValue","_dropSubscriptions","_tabSubscription","panelOpen","close","_calculateOverlayPosition","_floatPlaceholderState","_focusHost","selectedOptions","viewValue","reverse","join","_getTriggerRect","_onPanelDone","_focusCorrectOption","_onFadeInDone","_setScrollTop","overlayDir","overlayRef","overlayElement","isArray","_clearSelection","_selectValue","_sortValues","_setValueWidth","correspondingOption","find","skip","_keyManager","tabOut","_listenToOptions","_setOptionIds","_setOptionMultiple","_optionSubscription","optionSelectionChanges","_onSelect","wasSelected","_propagateChanges","valueToEmit","_selectedValueWidth","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","maxScroll","selectedIndex","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffset","_checkOverlayWithinViewport","_getPlaceholderAnimationState","floatPlaceholder","_getPlaceholderVisibility","placeholder","optionOffsetFromPanelTop","firstDisplayedIndex","selectedDisplayIndex","triggerRect","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[class.mat-select-disabled]","[class.mat-select]","(blur)","animations","nextId$1","_","_uniqueId","_slideRenderer","SlideToggleRenderer","_onInputFocusChange","_onChangeEvent","dragging","_setMousedown","_focusRipple","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","_previousChecked","dragPercentage","stopThumbDrag","[class.mat-slide-toggle]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","(mousedown)","_thumbEl","_thumbBarEl","_thumbBarWidth","clientWidth","distance","_getDragPercentage","dragX","percentage","useClass","_invert","_max","_min","_step","_thumbLabel","_tickInterval","input","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_lastChangeValue","_lastInputValue","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_clamp","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","_direction","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","getSliderDimensions","_updateTickIntervalPercent","_onClick","addFocus","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_emitValueIfChanged","_onSlide","center","_onSlideStart","_onSlideEnd","_onKeydown","_increment","_onKeyup","numSteps","step","posComponent","exactValue","_calculateValue","closestValue","round","_createChangeEvent","trackSize","pixelsPerStep","stepsPerTick","ceil","pixelsPerTick","[class.mat-slider]","(focus)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","tabindex","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","_sliderElement","animationFinished","_align","mode","_disableClose","_opened","onOpenStart","onCloseStart","onAlignChanged","_toggleAnimationPromise","_resolveToggleAnimationPromise","_elementFocusedBeforeSidenavWasOpened","activeElement","isFocusTrapEnabled","_focusTrap","HTMLElement","opened","isOpen","handleKeydown","disableClose","_onTransitionEnd","transitionEvent","propertyName","endsWith","[class.mat-sidenav]","(transitionend)","[attr.align]","[class.mat-sidenav-closed]","[class.mat-sidenav-closing]","[class.mat-sidenav-end]","[class.mat-sidenav-opened]","[class.mat-sidenav-opening]","[class.mat-sidenav-over]","[class.mat-sidenav-push]","[class.mat-sidenav-side]","_enableTransitions","_validateDrawers","_start","_end","_sidenavs","sidenav","_watchSidenavToggle","_watchSidenavAlign","_setContainerClass","_right","_left","_onBackdropClicked","_closeModalSidenav","_isShowingBackdrop","_isSidenavOpen","side","_getSidenavEffectiveWidth","_getMarginLeft","_getMarginRight","_getPositionLeft","_getPositionRight","_getPositionOffset","_getStyles","[class.mat-sidenav-container]","[class.mat-sidenav-transition]","[class.mat-list]","[class.mat-nav-list]","[class.mat-divider]","[class.mat-list-avatar]","[class.mat-list-icon]","[class.mat-subheader]","_listType","_hasFocus","avatar","_lineSetter","isRippleEnabled","_handleFocus","_handleBlur","[class.mat-list-item]","_hasAvatar","_rowspan","_colspan","_setStyle","property","setElementStyle","[class.mat-grid-tile]","rowspan","colspan","[class.mat-grid-avatar]","[class.mat-grid-tile-header]","[class.mat-grid-tile-footer]","MdGridListColsError","MdGridTileTooWideError","cols","listLength","MdGridListBadRatioError","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","row","col","TileStyler","_rows","init","gutterSize","_gutterSize","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","ngAfterContentChecked","_layoutTiles","_tileStyler","_tiles","_setListStyle","style$$1","[class.mat-grid-list]","rowHeight","[class.mat-card-content]","[class.mat-card-title]","[class.mat-card-subtitle]","[class.mat-card-actions]","[class.mat-card-footer]","[class.mat-card-sm-image]","[class.mat-card-md-image]","class.mat-card-lg-image","[class.mat-card-image]","[class.mat-card-xl-image]","[class.mat-card-avatar]","[class.mat-card]","[class.mat-card-header]","[class.mat-card-title-group]","onFocus","_addDefaultCSSClass","chip","String","toggleSelected","_handleClick","[class.mat-chip]","[class.mat-chip-selected]","_subscribed","_selectable","chips","_subscribeChips","_keydown","selectable","_toggleSelectOnFocusedChip","focusedIndex","activeItemIndex","_isValidIndex","focusedChip","_addChip","chipIndex","[class.mat-chip-list]","queries","MdIconNameNotFoundError","iconName","MdIconSvgTagNotFoundError","SvgIconConfig","url","svgElement","iconKey","namespace","_http","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconSet","addSvgIconSetInNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","RESOURCE_URL","of","_loadSvgIconFromConfig","do","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","throw","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catch","err","caught","forkJoin","ignoredResults","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconNode","tagName","str","div","innerHTML","req","response","text","finally","share","_mdIconRegistry","hostAriaLabel","_splitIconName","parts","changedInputs","keys","svgIcon","_setSvgElement","_usingFontIcon","_updateFontIconClasses","_updateAriaLabel","ngAfterViewChecked","_getAriaLabel","_previousAriaLabel","setElementAttribute","label","alt","fontIcon","layoutElement","projectNodes","elem","fontSetClass","fontSet","_previousFontSetClass","_previousFontIconClass","[class.mat-icon]","PI","[class.mat-progress-spinner]","_lastAnimationId","_mode","_interdeterminateInterval","interval","clearInterval","_cleanupIndeterminateAnimation","_animateCircle","_startIndeterminateAnimation","animateFrom","animateTo","ease","startTime","Date","now","_renderArc","animation_1","elapsedTime","rotationStartPoint","animate$$1","temp","interdeterminateInterval","setInterval","path","_path","[class.mat-spinner]","_bufferValue","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[class.mat-progress-bar]","MD_INPUT_INVALID_TYPES","nextUniqueId$1","[class.mat-hint]","[class.mat-right]","[class.mat-input-error]","_ngControl","focused","_placeholderChange","_neverEmptyInputTypes","t","_uid","_validateType","_isTextarea","setElementProperty","_isNeverEmpty","_isBadInput","_cachedUid","_onInput","validity","badInput","[class.mat-input-element]","[placeholder]","[required]","[attr.aria-describedby]","(input)","_parentForm","_parentFormGroup","_subscriptAnimationState","_hintLabel","_hintLabelId","_processHints","_mdInputChild","_validatePlaceholders","_hintChildren","detectChanges","_shouldForward","prop","control","_hasPlaceholder","_placeholderChild","_focusInput","_isErrorState","isInvalid","invalid","isTouched","touched","isSubmitted","submitted","_getDisplayedMessages","_errorChildren","_validateHints","_syncAriaDescribedby","startHint_1","endHint_1","hint","hintLabel","ids","startHint","endHint","ariaDescribedby","[class.mat-input-container]","[class.mat-input-invalid]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","dividerColor","_prefixChildren","_suffixChildren","minRows","maxRows","_cachedLineHeight","_cacheTextareaLineHeight","resizeToFitContent","textarea","textareaClone","rows","border","padding","maxHeight","scrollHeight","[style.min-height]","[style.max-height]","mdAutosizeMinRows","mdAutosizeMaxRows","announcementMessage","instance","containerInstance","_afterClosed","_onAction","_instance","onAction","dismiss","_onExit","_finishDismiss","closed","exit","_action","_afterOpened","afterDismissed","afterOpened","_onEnter","MdSnackBarContentAlreadyAttached","onExit","onEnter","animationState","snackBarConfig","extraClasses","cssClass","onAnimationEnd","toState","_completeExit","run","enter","[@state]","(@state.done)","snackBarRef","action","[class.mat-simple-snackbar]","_live","_parentSnackBar","_openedSnackBarRef","_snackBarRefAtThisLevel","openFromComponent","snackBarContainer","_attachSnackBarContainer","_attachSnackbarContent","simpleSnackBarRef","containerPortal","containerRef","contentRef","entryComponents","textLabel","_contentPortal","_content","templateLabel","nextId$2","_indexToSelect","_tabBodyWrapperHeight","_dynamicHeight","_selectedIndex","headerPosition","_onFocusChange","_onSelectChange","_groupId","selectChange","_tabs","tab","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","_tabBodyWrapper","_removeTabBodyWrapperHeight","clientHeight","[class.mat-tab-group]","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","selectedIndexChange","focusChange","getOffsetLeft","offsetLeft","getOffsetWidth","[class.mat-tab-disabled]","alignToElement","show","_getLeftPosition","_getElementWidth","hide","[class.mat-ink-bar]","_directionChange","_alignInkBar","updateActiveLink","_activeLinkChanged","_activeLinkElement","_inkBar","[class.mat-tab-nav-bar]","_mdTabNavBar","[class.mat-tab-link]","active","onCentering","onCentered","_canBeAnimated","_getLayoutDirection","_isCenterPosition","_onTranslateTabStarted","e","_onTranslateTabComplete","[class.mat-tab-body]","_focusIndex","_scrollDistance","_selectedIndexChanged","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_focusNextTab","_focusPreviousTab","focusIndex","_onContentChanges","_checkPaginationEnabled","_setTabFocus","containerEl","_tabListContainer","scrollWidth","_moveFocus","tabs","translateX","scrollDistance","_tabList","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","selectedLabelWrapper","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","[class.mat-toolbar-row]","[class.mat-toolbar]","MdTooltipInvalidPositionError","_scrollDispatcher","showDelay","hideDelay","_tooltipInstance","_disposeTooltip","_message","_setTooltipMessage","_createTooltip","_isTooltipVisible","afterHidden","_getOrigin","_getOverlayPosition","isDirectionLtr","isLtr","(longpress)","(touchend)","_positionDeprecated","_deprecatedMessage","_matMessage","_matPosition","_matDisabled","_matHideDelay","_matShowDelay","_visibility","_closeOnInteraction","_onHide","_hideTimeoutId","_setTransformOrigin","_showTimeoutId","_afterVisibilityAnimation","_handleBodyInteraction","(body:click)","MdMenuMissingError","MdMenuInvalidPositionX","MdMenuInvalidPositionY","_getDisabledAttr","_checkDisabled","[class.mat-menu-item]","posX","posY","deprecatedPosX","deprecatedPosY","_classList","positionX","positionY","overlapTrigger","_setPositionX","_setPositionY","setPositionClasses","_emitCloseEvent","classes","obj","focusFirstItem","_menuOpen","_openedByMouse","onMenuOpen","onMenuClose","menu","_checkMenu","closeMenu","destroyMenu","toggleMenu","openMenu","_subscribeToBackdrop","_initMenu","_resetMenu","_cleanUpSubscriptions","_setIsMenuOpen","_getOverlayConfig","_subscribeToPositions","overlayState","_getPosition","fallbackX","_b","fallbackOverlayY","fallbackOriginY","_handleMousedown","aria-haspopup","_deprecatedMdMenuTriggerFor","_deprecatedMatMenuTriggerFor","_matMenuTriggerFor","_containerInstance","_onAnimationStateChange","_result","componentInstance","dialogResult","_exit","afterClosed","_getPositionStrategy","DialogInjector","_parentInjector","_dialogRef","_data","token","notFoundValue","MdDialogContentAlreadyAttachedError","_elementFocusedBeforeDialogWasOpened","_trapFocus","_onAnimationDone","toFocus","animationStream","[class.mat-dialog-container]","[attr.role]","[@slideDialog]","(@slideDialog.done)","_parentDialog","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_boundKeydown","afterOpen","_afterOpen","afterAllClosed","_afterAllClosed","_openDialogs","componentOrTemplateRef","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_removeOpenDialog","closeAll","_getOverlayState","dialogConfig","userInjector","dialogInjector","data","splice","topDialog","[class.mat-dialog-title]","[class.mat-dialog-content]","[class.mat-dialog-actions]","ActiveDescendantKeyManager","_uniqueAutocompleteIdCounter","showPanel","panel","_setVisibility","_getClassList","mat-autocomplete-panel-below","mat-autocomplete-panel-above","mat-autocomplete-visible","mat-autocomplete-hidden","[class.mat-autocomplete]","displayWith","_zone","_inputContainer","_blurStream","_manuallyFloatingPlaceholder","autocomplete","_panelPositionSubscription","_destroyPanel","openPanel","_getHostWidth","_subscribeToClosingActions","closePanel","_resetPlaceholder","optionSelections","_setTriggerValue","activeOption","_scrollToOption","_handleInput","newlyFocusedTag","optionOffset","newScrollTop","onStable","switchMap","_resetPanel","panelClosingActions","_setValueAndClose","toDisplay","_clearPreviousSelectedOption","_positionStrategy","_subscribeToPositionChanges","_resetActiveItem","aria-autocomplete","aria-multiline","[attr.aria-activedescendant]","[attr.aria-expanded]","_matAutocomplete","MATERIAL_MODULES","132","parseTimeExpression","errors","easing","matches","durationMatch","ONE_SECOND","floor","delayMatch","delayUnit","delayVal","easingVal","normalizeStyles","normalizedStyles","copyStyles","readPrototype","destination","setStyles","eraseStyles","visitAnimationNode","visitor","context","visitState","visitTransition","visitSequence","visitGroup","visitAnimate","visitKeyframeSequence","visitStyle","parseTransitionExpr","transitionValue","expressions","parseInnerTransitionStr","eventStr","parseAnimationAlias","fromState","separator","makeLambdaFromStates","isFullAnyStateExpr","ANY_STATE","lhs","rhs","lhsMatch","rhsMatch","createTimelineInstruction","keyframes","totalTime","buildAnimationKeyframes","ast","startingStyles","finalStyles","normalizedAst","__WEBPACK_IMPORTED_MODULE_0__angular_animations__","AnimationTimelineVisitor","buildKeyframes","getOffset","o","createTransitionInstruction","triggerName","isRemovalTransition","fromStyles","toStyles","timelines","oneOrMoreTransitionsMatch","matchFns","currentState","nextState","validateAnimationSequence","AnimationValidatorVisitor","validate","buildTrigger","definitions","AnimationTriggerVisitor","getOrSetAsInMap","defaultValue","deleteFromArrayMap","arr","optimizeGroupPlayer","players","copyArray","validatePlayerEvent","eventName","listenOnPlayer","player","baseEvent","onStart","copyAnimationEvent","phaseName","onDone","makeAnimationEvent","normalizeTriggerValue","dashCaseToCamelCase","replace","DASH_CASE_REGEXP","m","toUpperCase","makeAnimationEvent$1","makeStorageProp","_computeStyle","_copyKeyframeStyles","newStyles","supportsWebAnimations","Element","AnimationDriver","AnimationEngine","AnimationStyleNormalizer","WebAnimationsStyleNormalizer","NoopAnimationDriver","DomAnimationEngine","NoopAnimationEngine","WebAnimationsDriver","animate","previousPlayers","NOOP","registerTrigger","onInsert","domFn","onRemove","setProperty","eventPhase","flush","AnimationTimelineContext","initialTimeline","previousNode","subContextCount","currentTimeline","TimelineBuilder","createSubContext","fork","currentAnimateTimings","transformIntoNewTimeline","newTime","incrementTime","forwardTime","timeline","hasStyling","tl","allowOnlyTimelineStyles","forwardFrame","snapshotCurrentStyles","steps","s","innerTimelines","furthestTime","innerContext","mergeTimelineCollectedStyles","timings","styleAst","newStyleData","_applyStyles","treatAsEmptyStep","limit","firstKeyframe","offsetGap","containsOffsets","innerTimeline","globalTimelineStyles","_previousKeyframe","_keyframes","_styleSummary","_backFill","_currentEmptyStepKeyframe","_localTimelineStyles","_globalTimelineStyles","_loadKeyframe","_currentKeyframe","_updateStyle","getFinalKeyframe","properties","details0","details1","finalKeyframes","targetKeyframe","lastKeyframe","keyframe","finalKeyframe","AnimationTransitionFactory","_triggerName","_stateStyles","animation","_animationAst","backupStateStyles","currentStateStyles","nextStateStyles","AnimationValidatorContext","astType","styleData","endTime","collectedEntry","collectedStyles","updateCollectedStyle","totalKeyframesWithOffsets","offsets","offsetsOutOfOrder","keyframesOutOfRange","previousOffset","generatedOffset","animateDuration","durationUpToThisFrame","AnimationTrigger","states","_transitionAsts","transitionFactories","stateName","exprs","expr","sequenceErrors","createFallbackInstruction","matchTransition","AnimationTriggerContext","transitions","def","_driver","_normalizer","_flaggedInserts","_queuedRemovals","_queuedTransitionAnimations","_activeTransitionAnimations","_activeElementAnimations","_elementTriggerStates","_triggers","_triggerListeners","_pendingListenerRemovals","q","activePlayers","lookupRef","oldValue","_onRemovalTransition","instruction","animateTransition","elementListeners","tuple","phase","_clearPendingListenerRemovals","tuples","elms","this_1","elm","activeTransitions","existingTransitions","existingPlayer","timelineInstruction","_buildPlayer","previousPlayer","elmTransitionMap","_queuePlayer","animateTimeline","instructions","onDestroy","_markPlayerAsActive","_normalizeKeyframes","normalizedKeyframes","kf","normalizedKeyframe","normalizedProp","normalizedValue","normalizePropertyName","normalizeStyleValue","_flushQueuedAnimations","this_2","parentLoop","state_1","shift","parent","listeners","hasStarted","play","leaveListeners","flushAgain","stateDetails_1","userProvidedProperty","normalizedProperty","NoopAnimationStyleNormalizer","Animation","errorMessage","buildTimelines","destinationStyles","driver","normalizer","unit","strVal","DIMENSIONAL_PROP_MAP","valAndSuffixMatch","_changes","_flaggedRemovals","_onDoneFns","_triggerStyles","stateMap","stateDef","storageProp","triggerStateStyles","fromStateStyles","toStateStyles","doRemove","handleListener","onStartCallbacks","onDoneCallbacks","listenersToKeep","l","doneFn","WebAnimationsPlayer","_onStartFns","_onDestroyFns","_initialized","_finished","_started","_destroyed","parentPlayer","_duration","_delay","previousStyles","_captureStyles","_onFinish","formattedKeyframe","previousStyleProps","startingKeyframe_1","missingStyleProps_1","self_1","_player","_triggerWebAnimation","_finalKeyframe","_resetDomPlayerState","pause","finish","reset","cancel","restart","setPosition","getPosition","playerOptions","previousWebAnimationPlayers","134","resolveElementFromTarget","parseTriggerCallbackName","dotIndex","substring","substr","namespaceify","namespaceId","deNamespaceify","instantiateSupportedAnimationDriver","__WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__","instantiateDefaultStyleNormalizer","instantiateRendererFactory","engine","zone","AnimationRendererFactory","NoopAnimationsModule","AnimationRenderer","BROWSER_ANIMATIONS_PROVIDERS","BROWSER_NOOP_ANIMATIONS_PROVIDERS","InjectableAnimationEngine","delegate","_engine","createRenderer","hostElement","_namespaceId","destroyNode","_flushPromise","createComment","createText","selectRootElement","selectorOrNode","removeAttribute","addClass","removeClass","flags","removeStyle","setValue","newChild","_queueFlush","refChild","oldChild","charAt","136","tokenNotExpired","tokenName","jwt","AuthConfigConsts","DEFAULT_TOKEN_NAME","localStorage","getItem","jwtHelper","JwtHelper","isTokenExpired","provideAuth","AuthHttp","Http","RequestOptions","AuthConfig","toObject","objectAssign","symbols","to","getOwnPropertySymbols","propIsEnumerable","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","k","metadata","__param","paramIndex","decorator","Observable_1","DEFAULT_HEADER_NAME","HEADER_PREFIX_BEARER","AuthConfigDefaults","headerName","headerPrefix","tokenGetter","noJwtError","noClientCheck","globalHeaders","noTokenScheme","_config","getConfig","AuthHttpError","defOpts","tokenStream","Observable","obs","mergeOptions","providedOpts","defaultOpts","newOptions","setGlobalHeaders","requestHelper","requestArgs","additionalOptions","request","Request","requestWithToken","headers","error","Headers","header","headerValue","fromPromise","mergeMap","jwtToken","method","RequestMethod","Get","post","Post","put","Put","Delete","patch","Patch","head","Head","Options","Injectable","urlBase64Decode","output","b64DecodeUnicode","b64decode","chars","bc","bs","buffer","idx","fromCharCode","decodeURIComponent","charCodeAt","slice","decodeToken","decoded","JSON","parse","getTokenExpirationDate","date","setUTCSeconds","offsetSeconds","valueOf","AUTH_PROVIDERS","propertyIsEnumerable","AuthModule","parentModule","Optional","SkipSelf","137","$","router_1","auth","router","title","loading","navigationInterceptor","$window","$body","on","userProfile","userType","$menu","$header","$banner","skel","vars","IEVersion","hasClass","scrollex","outerHeight","terminate","leave","_locked","_lock","_show","_hide","toggleClass","appendTo","attr","href_1","href","NavigationStart","NavigationEnd","NavigationCancel","NavigationError","gotoProfile","user_metadata","permissions","navigate","Component","Router","138","routes","loadChildren","require","oe","canActivate","RouterModule","139","auth_service_1","AdmRouteGuard","canActivateChild","route","refresh","140","authenticated","141","OrgRouteGuard","hasOrg","hasPermissions","142","XhbRouteGuard","143","main","platform_browser_dynamic_1","platformBrowserDynamic","bootstrapModule","app_module_1","MODULE_REF","enableProdMode","readyState","148","151","152","153","154","155","156","21","angular2_jwt_1","prod","Lock","Auth0Lock","theme","logo","primaryColor","languageDictionary","ImageUploadUrl","UsersInfoUrl","LoginUrl","ConferenceEditUrl","ConferenceInfoUrl","ExhibitorsInfoUrl","ExhibitorsUsersInfoUrl","ExhibitorEditUrl","NewsInfoUrl","NewsEditUrl","ScheduleInfoUrl","ScheduleEditUrl","authToken","sessionStorage","authResult","setItem","idToken","getProfile","profile","alert","stringify","redirectUrl","setProfile","loginOrganizer","loginExhibitor","loginAdministrator","getConferenceInfo","json","addExhibitor","getExhibitors","getNews","patchConference","postLogin","postNewsItem","deleteNewsItem","modifyNewsItem","getScheduleEvents","patchScheduleEvents","logout","removeItem","29","__export","394","jQuery","timeoutId","handler","a","u","h","extend","initialize","scroll","$element","unscrollex","removeData","53","isEmptyInputValue","isPresent","toObservable","__WEBPACK_IMPORTED_MODULE_2_rxjs_observable_fromPromise__","_executeValidators","validators","_executeAsyncValidators","_mergeErrors","arrayOfErrors","res","_isAndroid","__WEBPACK_IMPORTED_MODULE_4__angular_platform_browser__","getUserAgent","normalizeValidator","validator","normalizeAsyncValidator","unimplemented","_buildValueString","_extractId","valueString","_buildValueString$1","_extractId$1","controlPath","concat","setUpControl","_throwError","Validators","compose","asyncValidator","composeAsync","viewToModelUpdate","markAsDirty","emitModelToViewChange","markAsTouched","emitModelEvent","registerOnDisabledChange","_rawValidators","registerOnValidatorChange","updateValueAndValidity","_rawAsyncValidators","cleanUpControl","_noControlError","_clearChangeFns","setUpFormContainer","messageEnd","composeValidators","composeAsyncValidators","isPropertyUpdated","viewModel","isFirstChange","isBuiltInAccessor","BUILTIN_ACCESSORS","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","DefaultValueAccessor","_find","delimiter","FormGroup","controls","FormArray","at","coerceToValidator","coerceToAsyncValidator","list","_hasInvalidParent","FormGroupName","FormGroupDirective","FormArrayName","__WEBPACK_IMPORTED_MODULE_1_rxjs_observable_forkJoin__","__WEBPACK_IMPORTED_MODULE_3_rxjs_operator_map__","AbstractControlDirective","AbstractFormGroupDirective","CheckboxControlValueAccessor","ControlContainer","NG_VALUE_ACCESSOR","COMPOSITION_BUFFER_MODE","NgControl","NgControlStatus","NgControlStatusGroup","NgForm","NgModel","NgModelGroup","RadioControlValueAccessor","FormControlDirective","FormControlName","NgSelectOption","SelectControlValueAccessor","SelectMultipleControlValueAccessor","CheckboxRequiredValidator","EmailValidator","MaxLengthValidator","MinLengthValidator","PatternValidator","RequiredValidator","FormBuilder","AbstractControl","FormControl","NG_ASYNC_VALIDATORS","NG_VALIDATORS","VERSION","ReactiveFormsModule","InternalFormsSharedModule","REACTIVE_DRIVEN_DIRECTIVES","SHARED_FORM_DIRECTIVES","TEMPLATE_DRIVEN_DIRECTIVES","CHECKBOX_VALUE_ACCESSOR","DEFAULT_VALUE_ACCESSOR","AbstractControlStatus","ngControlStatusHost","formDirectiveProvider","formControlBinding","modelGroupProvider","NgNoValidate","NUMBER_VALUE_ACCESSOR","NumberValueAccessor","RADIO_VALUE_ACCESSOR","RadioControlRegistry","RANGE_VALUE_ACCESSOR","RangeValueAccessor","formControlBinding$1","controlNameBinding","formDirectiveProvider$1","formArrayNameProvider","formGroupNameProvider","SELECT_VALUE_ACCESSOR","NgSelectMultipleOption","SELECT_MULTIPLE_VALUE_ACCESSOR","CHECKBOX_REQUIRED_VALIDATOR","EMAIL_VALIDATOR","MAX_LENGTH_VALIDATOR","MIN_LENGTH_VALIDATOR","PATTERN_VALIDATOR","REQUIRED_VALIDATOR","valid","pending","pristine","dirty","untouched","statusChanges","valueChanges","hasError","errorCode","getError","EMAIL_REGEXP","requiredTrue","email","minLength","minlength","requiredLength","actualLength","maxLength","maxlength","pattern","nullValidator","regex","regexStr","RegExp","requiredPattern","actualValue","presentValidators","observables","(change)","_compositionMode","_composing","_compositionStart","_compositionEnd","(compositionstart)","(compositionend)","_parent","_accessors","accessor","_isSameGroup","fireUncheck","controlPair","_registry","_checkName","_fn","formControlName","_throwNameError","_optionMap","_idCounter","_compareWith","_getOptionId","_getOptionValue","_registerOption","compareWith","_select","_setElementValue","ngValue","optionSelectedStateSetter","ids_1","opt","_setSelected","_checkParentType","formDirective","addFormGroup","removeFormGroup","getFormGroup","_validators","_asyncValidators","cd","_cd","_onCollectionChange","_pristine","_touched","_onDisabledChange","_status","_errors","_valueChanges","_statusChanges","setValidators","newValidator","setAsyncValidators","clearValidators","clearAsyncValidators","onlySelf","markAsUntouched","_forEachChild","_updateTouched","markAsPristine","_updatePristine","markAsPending","disable","emitEvent","_updateValue","_updateAncestors","changeFn","enable","setParent","patchValue","_setInitialStatus","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","_updateTreeValidity","ctrl","_allControlsDisabled","_asyncValidationSubscription","setErrors","_updateControlsErrors","_initObservables","_anyControlsHaveStatus","cb","_anyControls","condition","status","_anyControlsDirty","_anyControlsTouched","_isBoxedValue","formState","_registerOnCollectionChange","_applyFormState","emitViewToModelChange","_setUpControls","registerControl","addControl","removeControl","setControl","controlName","_checkAllValuesPresent","_throwIfControlMissing","getRawValue","_reduceChildren","acc","_reduceValue","initValue","_registerControl","insert","removeAt","resolvedPromise","asyncValidators","_submitted","ngSubmit","form","_findContainer","getControl","group","updateModel","onSubmit","$event","onReset","resetForm","(submit)","(reset)","outputs","FormErrorExamples","formGroupName","formArrayName","ngModelGroup","ngModelWithFormGroup","TemplateDrivenErrors","modelParentException","formGroupNameException","missingNameException","modelGroupParentException","resolvedPromise$1","_registered","update","_checkForErrors","_setUpControl","_updateDisabled","model","_isStandalone","_setUpStandalone","standalone","disabledValue","ReactiveErrors","controlParentException","ngModelGroupException","missingFormException","groupParentException","arrayParentException","disabledAttrWarning","_isControlChanged","directives","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","addFormArray","removeFormArray","getFormArray","newCtrl","_oldForm","sync","async","_added","[attr.required]","_createValidator","_validator","[attr.minlength]","[attr.maxlength]","[attr.pattern]","controlsConfig","extra","_reduceControls","array","_createControl","controlConfig","novalidate","58","sequence","tokens","transition","stateChangeExpr","scheduleMicroTask","AUTO_STYLE","NoopAnimationPlayer","AnimationGroupPlayer","AnimationPlayer","_onStart","_players","total","62","63"],"mappings":"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","file":"js/app.521de9d80b797ef7ea16.js","sourcesContent":["webpackJsonp([6],{\n\n/***/ 113:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(4);\r\nvar platform_browser_1 = __webpack_require__(12);\r\nvar http_1 = __webpack_require__(19);\r\nvar forms_1 = __webpack_require__(53);\r\nvar material_1 = __webpack_require__(121);\r\nvar animations_1 = __webpack_require__(134);\r\nvar app_component_1 = __webpack_require__(137);\r\nvar home_component_1 = __webpack_require__(63);\r\nvar about_component_1 = __webpack_require__(62);\r\nvar shared_1 = __webpack_require__(29);\r\nvar app_routing_1 = __webpack_require__(138);\r\nvar shared_2 = __webpack_require__(29);\r\nvar hmr_1 = __webpack_require__(52);\r\nvar AppModule = (function () {\r\n    function AppModule(appRef) {\r\n        this.appRef = appRef;\r\n    }\r\n    AppModule.prototype.hmrOnInit = function (store) {\r\n        console.log('HMR store', store);\r\n    };\r\n    AppModule.prototype.hmrOnDestroy = function (store) {\r\n        var cmpLocation = this.appRef.components.map(function (cmp) { return cmp.location.nativeElement; });\r\n        // recreate elements\r\n        store.disposeOldHosts = hmr_1.createNewHosts(cmpLocation);\r\n        // remove styles\r\n        hmr_1.removeNgStyles();\r\n    };\r\n    AppModule.prototype.hmrAfterDestroy = function (store) {\r\n        // display new elements\r\n        store.disposeOldHosts();\r\n        delete store.disposeOldHosts;\r\n    };\r\n    return AppModule;\r\n}());\r\nAppModule = __decorate([\r\n    core_1.NgModule({\r\n        imports: [\r\n            platform_browser_1.BrowserModule,\r\n            animations_1.BrowserAnimationsModule,\r\n            http_1.HttpModule,\r\n            forms_1.FormsModule,\r\n            material_1.MaterialModule,\r\n            app_routing_1.routing\r\n        ],\r\n        declarations: [\r\n            app_component_1.AppComponent,\r\n            home_component_1.HomeComponent,\r\n            about_component_1.AboutComponent\r\n        ],\r\n        providers: [\r\n            shared_2.RouteGuard,\r\n            shared_1.Auth\r\n        ],\r\n        bootstrap: [app_component_1.AppComponent]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [core_1.ApplicationRef])\r\n], AppModule);\r\nexports.AppModule = AppModule;\r\n\n\n/***/ }),\n\n/***/ 121:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_common__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_add_observable_fromEvent__ = __webpack_require__(67);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_add_observable_fromEvent___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs_add_observable_fromEvent__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_add_observable_merge__ = __webpack_require__(59);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_add_observable_merge___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_rxjs_add_observable_merge__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_add_operator_auditTime__ = __webpack_require__(71);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_add_operator_auditTime___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_rxjs_add_operator_auditTime__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__angular_forms__ = __webpack_require__(53);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__angular_animations__ = __webpack_require__(58);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_rxjs_add_operator_startWith__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_rxjs_add_operator_startWith___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_rxjs_add_operator_startWith__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_rxjs_add_operator_first__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_rxjs_add_operator_first___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_rxjs_add_operator_first__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__angular_http__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_rxjs_add_observable_forkJoin__ = __webpack_require__(66);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_rxjs_add_observable_forkJoin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_rxjs_add_observable_forkJoin__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_rxjs_add_observable_of__ = __webpack_require__(69);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_rxjs_add_observable_of___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_rxjs_add_observable_of__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_rxjs_add_operator_map__ = __webpack_require__(55);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_rxjs_add_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_rxjs_add_operator_map__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_rxjs_add_operator_filter__ = __webpack_require__(54);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_rxjs_add_operator_filter___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_rxjs_add_operator_filter__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_rxjs_add_operator_do__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_rxjs_add_operator_do___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_rxjs_add_operator_do__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_rxjs_add_operator_share__ = __webpack_require__(57);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_rxjs_add_operator_share___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_rxjs_add_operator_share__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_rxjs_add_operator_finally__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_rxjs_add_operator_finally___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19_rxjs_add_operator_finally__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_rxjs_add_operator_catch__ = __webpack_require__(72);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_rxjs_add_operator_catch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20_rxjs_add_operator_catch__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_rxjs_add_observable_throw__ = __webpack_require__(70);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_rxjs_add_observable_throw___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21_rxjs_add_observable_throw__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_rxjs_add_operator_switchMap__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_rxjs_add_operator_switchMap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_22_rxjs_add_operator_switchMap__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Dir\", function() { return Dir; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RtlModule\", function() { return RtlModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ObserveContentModule\", function() { return ObserveContentModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ObserveContent\", function() { return ObserveContent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdOptionModule\", function() { return MdOptionModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdOption\", function() { return MdOption; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Portal\", function() { return Portal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasePortalHost\", function() { return BasePortalHost; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ComponentPortal\", function() { return ComponentPortal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TemplatePortal\", function() { return TemplatePortal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PortalHostDirective\", function() { return PortalHostDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TemplatePortalDirective\", function() { return TemplatePortalDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PortalModule\", function() { return PortalModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DomPortalHost\", function() { return DomPortalHost; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Overlay\", function() { return Overlay; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OVERLAY_PROVIDERS\", function() { return OVERLAY_PROVIDERS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OverlayContainer\", function() { return OverlayContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FullscreenOverlayContainer\", function() { return FullscreenOverlayContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OverlayRef\", function() { return OverlayRef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OverlayState\", function() { return OverlayState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConnectedOverlayDirective\", function() { return ConnectedOverlayDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OverlayOrigin\", function() { return OverlayOrigin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OverlayModule\", function() { return OverlayModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScrollDispatcher\", function() { return ScrollDispatcher; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GestureConfig\", function() { return GestureConfig; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LiveAnnouncer\", function() { return LiveAnnouncer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LIVE_ANNOUNCER_ELEMENT_TOKEN\", function() { return LIVE_ANNOUNCER_ELEMENT_TOKEN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LIVE_ANNOUNCER_PROVIDER\", function() { return LIVE_ANNOUNCER_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InteractivityChecker\", function() { return InteractivityChecker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isFakeMousedownFromScreenReader\", function() { return isFakeMousedownFromScreenReader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"A11yModule\", function() { return A11yModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UniqueSelectionDispatcher\", function() { return UniqueSelectionDispatcher; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UNIQUE_SELECTION_DISPATCHER_PROVIDER\", function() { return UNIQUE_SELECTION_DISPATCHER_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdLineModule\", function() { return MdLineModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdLine\", function() { return MdLine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdLineSetter\", function() { return MdLineSetter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdError\", function() { return MdError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"coerceBooleanProperty\", function() { return coerceBooleanProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"coerceNumberProperty\", function() { return coerceNumberProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CompatibilityModule\", function() { return CompatibilityModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NoConflictStyleCompatibilityMode\", function() { return NoConflictStyleCompatibilityMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCoreModule\", function() { return MdCoreModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PlatformModule\", function() { return PlatformModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Platform\", function() { return Platform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSupportedInputTypes\", function() { return getSupportedInputTypes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GlobalPositionStrategy\", function() { return GlobalPositionStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConnectedPositionStrategy\", function() { return ConnectedPositionStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConnectionPositionPair\", function() { return ConnectionPositionPair; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScrollableViewProperties\", function() { return ScrollableViewProperties; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConnectedOverlayPositionChange\", function() { return ConnectedOverlayPositionChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdRipple\", function() { return MdRipple; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MD_RIPPLE_GLOBAL_OPTIONS\", function() { return MD_RIPPLE_GLOBAL_OPTIONS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RippleRef\", function() { return RippleRef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RippleState\", function() { return RippleState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RIPPLE_FADE_IN_DURATION\", function() { return RIPPLE_FADE_IN_DURATION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RIPPLE_FADE_OUT_DURATION\", function() { return RIPPLE_FADE_OUT_DURATION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdRippleModule\", function() { return MdRippleModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SelectionModel\", function() { return SelectionModel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SelectionChange\", function() { return SelectionChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FocusTrap\", function() { return FocusTrap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FocusTrapFactory\", function() { return FocusTrapFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FocusTrapDeprecatedDirective\", function() { return FocusTrapDeprecatedDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FocusTrapDirective\", function() { return FocusTrapDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StyleModule\", function() { return StyleModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TOUCH_BUFFER_MS\", function() { return TOUCH_BUFFER_MS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FocusOriginMonitor\", function() { return FocusOriginMonitor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkMonitorFocus\", function() { return CdkMonitorFocus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\", function() { return FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FOCUS_ORIGIN_MONITOR_PROVIDER\", function() { return FOCUS_ORIGIN_MONITOR_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyCssTransform\", function() { return applyCssTransform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UP_ARROW\", function() { return UP_ARROW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOWN_ARROW\", function() { return DOWN_ARROW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RIGHT_ARROW\", function() { return RIGHT_ARROW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LEFT_ARROW\", function() { return LEFT_ARROW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PAGE_UP\", function() { return PAGE_UP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PAGE_DOWN\", function() { return PAGE_DOWN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HOME\", function() { return HOME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"END\", function() { return END; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ENTER\", function() { return ENTER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SPACE\", function() { return SPACE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAB\", function() { return TAB; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ESCAPE\", function() { return ESCAPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BACKSPACE\", function() { return BACKSPACE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DELETE\", function() { return DELETE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MATERIAL_COMPATIBILITY_MODE\", function() { return MATERIAL_COMPATIBILITY_MODE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_ELEMENTS_SELECTOR\", function() { return MAT_ELEMENTS_SELECTOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MD_ELEMENTS_SELECTOR\", function() { return MD_ELEMENTS_SELECTOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatPrefixRejector\", function() { return MatPrefixRejector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdPrefixRejector\", function() { return MdPrefixRejector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AnimationCurves\", function() { return AnimationCurves; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AnimationDurations\", function() { return AnimationDurations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSelectionModule\", function() { return MdSelectionModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdPseudoCheckbox\", function() { return MdPseudoCheckbox; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MaterialRootModule\", function() { return MaterialRootModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MaterialModule\", function() { return MaterialModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdAutocompleteModule\", function() { return MdAutocompleteModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdAutocomplete\", function() { return MdAutocomplete; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AUTOCOMPLETE_OPTION_HEIGHT\", function() { return AUTOCOMPLETE_OPTION_HEIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AUTOCOMPLETE_PANEL_HEIGHT\", function() { return AUTOCOMPLETE_PANEL_HEIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MD_AUTOCOMPLETE_VALUE_ACCESSOR\", function() { return MD_AUTOCOMPLETE_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdAutocompleteTrigger\", function() { return MdAutocompleteTrigger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdButtonModule\", function() { return MdButtonModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdButtonCssMatStyler\", function() { return MdButtonCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdRaisedButtonCssMatStyler\", function() { return MdRaisedButtonCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdIconButtonCssMatStyler\", function() { return MdIconButtonCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdFabCssMatStyler\", function() { return MdFabCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdMiniFabCssMatStyler\", function() { return MdMiniFabCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdButton\", function() { return MdButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdAnchor\", function() { return MdAnchor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdButtonToggleModule\", function() { return MdButtonToggleModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR\", function() { return MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdButtonToggleChange\", function() { return MdButtonToggleChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdButtonToggleGroup\", function() { return MdButtonToggleGroup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdButtonToggleGroupMultiple\", function() { return MdButtonToggleGroupMultiple; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdButtonToggle\", function() { return MdButtonToggle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardModule\", function() { return MdCardModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardContent\", function() { return MdCardContent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardTitle\", function() { return MdCardTitle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardSubtitle\", function() { return MdCardSubtitle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardActions\", function() { return MdCardActions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardFooter\", function() { return MdCardFooter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardSmImage\", function() { return MdCardSmImage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardMdImage\", function() { return MdCardMdImage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardLgImage\", function() { return MdCardLgImage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardImage\", function() { return MdCardImage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardXlImage\", function() { return MdCardXlImage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardAvatar\", function() { return MdCardAvatar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCard\", function() { return MdCard; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardHeader\", function() { return MdCardHeader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCardTitleGroup\", function() { return MdCardTitleGroup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdChipsModule\", function() { return MdChipsModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdChipList\", function() { return MdChipList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdChip\", function() { return MdChip; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCheckboxModule\", function() { return MdCheckboxModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MD_CHECKBOX_CONTROL_VALUE_ACCESSOR\", function() { return MD_CHECKBOX_CONTROL_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TransitionCheckState\", function() { return TransitionCheckState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCheckboxChange\", function() { return MdCheckboxChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdCheckbox\", function() { return MdCheckbox; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdDialogModule\", function() { return MdDialogModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MD_DIALOG_DATA\", function() { return MD_DIALOG_DATA; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdDialog\", function() { return MdDialog; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdDialogContainer\", function() { return MdDialogContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdDialogClose\", function() { return MdDialogClose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdDialogTitle\", function() { return MdDialogTitle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdDialogContent\", function() { return MdDialogContent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdDialogActions\", function() { return MdDialogActions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdDialogConfig\", function() { return MdDialogConfig; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdDialogRef\", function() { return MdDialogRef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdGridListModule\", function() { return MdGridListModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdGridList\", function() { return MdGridList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdIconModule\", function() { return MdIconModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdIconRegistry\", function() { return MdIconRegistry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdIconInvalidNameError\", function() { return MdIconInvalidNameError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdIcon\", function() { return MdIcon; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ICON_REGISTRY_PROVIDER_FACTORY\", function() { return ICON_REGISTRY_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ICON_REGISTRY_PROVIDER\", function() { return ICON_REGISTRY_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdInputModule\", function() { return MdInputModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTextareaAutosize\", function() { return MdTextareaAutosize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdPlaceholder\", function() { return MdPlaceholder; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdHint\", function() { return MdHint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdErrorDirective\", function() { return MdErrorDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdPrefix\", function() { return MdPrefix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSuffix\", function() { return MdSuffix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdInputDirective\", function() { return MdInputDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdInputContainer\", function() { return MdInputContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdInputContainerPlaceholderConflictError\", function() { return MdInputContainerPlaceholderConflictError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdInputContainerUnsupportedTypeError\", function() { return MdInputContainerUnsupportedTypeError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdInputContainerDuplicatedHintError\", function() { return MdInputContainerDuplicatedHintError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdInputContainerMissingMdInputError\", function() { return MdInputContainerMissingMdInputError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdListModule\", function() { return MdListModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdListDivider\", function() { return MdListDivider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LIST_TYPE_TOKEN\", function() { return LIST_TYPE_TOKEN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdList\", function() { return MdList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdListCssMatStyler\", function() { return MdListCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdNavListCssMatStyler\", function() { return MdNavListCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdNavListTokenSetter\", function() { return MdNavListTokenSetter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdDividerCssMatStyler\", function() { return MdDividerCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdListAvatarCssMatStyler\", function() { return MdListAvatarCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdListIconCssMatStyler\", function() { return MdListIconCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdListSubheaderCssMatStyler\", function() { return MdListSubheaderCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdListItem\", function() { return MdListItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdMenuModule\", function() { return MdMenuModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fadeInItems\", function() { return fadeInItems; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMenu\", function() { return transformMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdMenu\", function() { return MdMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdMenuItem\", function() { return MdMenuItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdMenuTrigger\", function() { return MdMenuTrigger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdProgressBarModule\", function() { return MdProgressBarModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdProgressBar\", function() { return MdProgressBar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdProgressSpinnerModule\", function() { return MdProgressSpinnerModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdProgressSpinnerCssMatStyler\", function() { return MdProgressSpinnerCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdProgressSpinner\", function() { return MdProgressSpinner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSpinner\", function() { return MdSpinner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdRadioModule\", function() { return MdRadioModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR\", function() { return MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdRadioChange\", function() { return MdRadioChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdRadioGroup\", function() { return MdRadioGroup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdRadioButton\", function() { return MdRadioButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSelectModule\", function() { return MdSelectModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fadeInContent\", function() { return fadeInContent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformPanel\", function() { return transformPanel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformPlaceholder\", function() { return transformPlaceholder; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_OPTION_HEIGHT\", function() { return SELECT_OPTION_HEIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_PANEL_MAX_HEIGHT\", function() { return SELECT_PANEL_MAX_HEIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_MAX_OPTIONS_DISPLAYED\", function() { return SELECT_MAX_OPTIONS_DISPLAYED; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_TRIGGER_HEIGHT\", function() { return SELECT_TRIGGER_HEIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_OPTION_HEIGHT_ADJUSTMENT\", function() { return SELECT_OPTION_HEIGHT_ADJUSTMENT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_PANEL_PADDING_X\", function() { return SELECT_PANEL_PADDING_X; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_MULTIPLE_PANEL_PADDING_X\", function() { return SELECT_MULTIPLE_PANEL_PADDING_X; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_PANEL_PADDING_Y\", function() { return SELECT_PANEL_PADDING_Y; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_PANEL_VIEWPORT_PADDING\", function() { return SELECT_PANEL_VIEWPORT_PADDING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSelectChange\", function() { return MdSelectChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSelect\", function() { return MdSelect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSidenavModule\", function() { return MdSidenavModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdDuplicatedSidenavError\", function() { return MdDuplicatedSidenavError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSidenavToggleResult\", function() { return MdSidenavToggleResult; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSidenav\", function() { return MdSidenav; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSidenavContainer\", function() { return MdSidenavContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSliderModule\", function() { return MdSliderModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MD_SLIDER_VALUE_ACCESSOR\", function() { return MD_SLIDER_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSliderChange\", function() { return MdSliderChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSlider\", function() { return MdSlider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SliderRenderer\", function() { return SliderRenderer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSlideToggleModule\", function() { return MdSlideToggleModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MD_SLIDE_TOGGLE_VALUE_ACCESSOR\", function() { return MD_SLIDE_TOGGLE_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSlideToggleChange\", function() { return MdSlideToggleChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSlideToggle\", function() { return MdSlideToggle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSnackBarModule\", function() { return MdSnackBarModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSnackBar\", function() { return MdSnackBar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SHOW_ANIMATION\", function() { return SHOW_ANIMATION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HIDE_ANIMATION\", function() { return HIDE_ANIMATION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSnackBarContainer\", function() { return MdSnackBarContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSnackBarConfig\", function() { return MdSnackBarConfig; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdSnackBarRef\", function() { return MdSnackBarRef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SimpleSnackBar\", function() { return SimpleSnackBar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTabsModule\", function() { return MdTabsModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdInkBar\", function() { return MdInkBar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTabBody\", function() { return MdTabBody; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTabHeader\", function() { return MdTabHeader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTabLabelWrapper\", function() { return MdTabLabelWrapper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTab\", function() { return MdTab; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTabLabel\", function() { return MdTabLabel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTabChangeEvent\", function() { return MdTabChangeEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTabGroup\", function() { return MdTabGroup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTabNavBar\", function() { return MdTabNavBar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTabLink\", function() { return MdTabLink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTabLinkRipple\", function() { return MdTabLinkRipple; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdToolbarModule\", function() { return MdToolbarModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdToolbarRow\", function() { return MdToolbarRow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdToolbar\", function() { return MdToolbar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTooltipModule\", function() { return MdTooltipModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TOUCHEND_HIDE_DELAY\", function() { return TOUCHEND_HIDE_DELAY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SCROLL_THROTTLE_MS\", function() { return SCROLL_THROTTLE_MS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdTooltip\", function() { return MdTooltip; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TooltipComponent\", function() { return TooltipComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵf\", function() { return LIVE_ANNOUNCER_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵg\", function() { return UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵb\", function() { return OVERLAY_CONTAINER_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵa\", function() { return OVERLAY_CONTAINER_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵk\", function() { return OverlayPositionBuilder; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵj\", function() { return VIEWPORT_RULER_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵi\", function() { return VIEWPORT_RULER_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵh\", function() { return ViewportRuler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵd\", function() { return SCROLL_DISPATCHER_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵc\", function() { return SCROLL_DISPATCHER_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵl\", function() { return Scrollable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵe\", function() { return RippleRenderer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵo\", function() { return MdGridAvatarCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵm\", function() { return MdGridTile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵq\", function() { return MdGridTileFooterCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵp\", function() { return MdGridTileHeaderCssMatStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵn\", function() { return MdGridTileText; });\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n  * @license Angular Material v2.0.0-beta.3\n  * Copyright (c) 2017 Google, Inc. https://material.angular.io/\n  * License: MIT\n  */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\nvar hasDoneGlobalChecks = false;\nvar MATERIAL_COMPATIBILITY_MODE = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"OpaqueToken\"]('md-compatibility-mode');\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\nvar MAT_ELEMENTS_SELECTOR = \"\\n  [mat-button],\\n  [mat-dialog-actions],\\n  [mat-dialog-close],\\n  [mat-dialog-content],\\n  [mat-dialog-title],\\n  [mat-fab],\\n  [mat-icon-button],\\n  [mat-menu-trigger-for],\\n  [mat-mini-fab],\\n  [mat-raised-button],\\n  [mat-tab-label],\\n  [mat-tab-link],\\n  [mat-tab-nav-bar],\\n  [matTooltip],\\n  mat-autocomplete,\\n  mat-button-toggle,\\n  mat-button-toggle-group,\\n  mat-button-toggle,\\n  mat-card,\\n  mat-card-actions,\\n  mat-card-content,\\n  mat-card-footer,\\n  mat-card-header,\\n  mat-card-subtitle,\\n  mat-card-title,\\n  mat-card-title-group,\\n  mat-checkbox,\\n  mat-chip,\\n  mat-dialog-actions,\\n  mat-dialog-container,\\n  mat-dialog-content,\\n  mat-divider,\\n  mat-grid-list,\\n  mat-grid-tile,\\n  mat-grid-tile-footer,\\n  mat-grid-tile-header,\\n  mat-hint,\\n  mat-icon,\\n  mat-list,\\n  mat-list-item,\\n  mat-menu,\\n  mat-nav-list,\\n  mat-option,\\n  mat-placeholder,\\n  mat-progress-bar,\\n  mat-pseudo-checkbox,\\n  mat-radio-button,\\n  mat-radio-group,\\n  mat-select,\\n  mat-sidenav,\\n  mat-sidenav-container,\\n  mat-slider,\\n  mat-spinner,\\n  mat-tab,\\n  mat-tab-group,\\n  mat-toolbar,\\n  mat-error\";\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\nvar MD_ELEMENTS_SELECTOR = \"\\n  [md-button],\\n  [md-dialog-actions],\\n  [md-dialog-close],\\n  [md-dialog-content],\\n  [md-dialog-title],\\n  [md-fab],\\n  [md-icon-button],\\n  [md-menu-trigger-for],\\n  [md-mini-fab],\\n  [md-raised-button],\\n  [md-tab-label],\\n  [md-tab-link],\\n  [md-tab-nav-bar],\\n  [mdTooltip],\\n  md-autocomplete,\\n  md-button-toggle,\\n  md-button-toggle-group,\\n  md-button-toggle,\\n  md-card,\\n  md-card-actions,\\n  md-card-content,\\n  md-card-footer,\\n  md-card-header,\\n  md-card-subtitle,\\n  md-card-title,\\n  md-card-title-group,\\n  md-checkbox,\\n  md-chip,\\n  md-dialog-actions,\\n  md-dialog-container,\\n  md-dialog-content,\\n  md-divider,\\n  md-grid-list,\\n  md-grid-tile,\\n  md-grid-tile-footer,\\n  md-grid-tile-header,\\n  md-hint,\\n  md-icon,\\n  md-list,\\n  md-list-item,\\n  md-menu,\\n  md-nav-list,\\n  md-option,\\n  md-placeholder,\\n  md-progress-bar,\\n  md-pseudo-checkbox,\\n  md-radio-button,\\n  md-radio-group,\\n  md-select,\\n  md-sidenav,\\n  md-sidenav-container,\\n  md-slider,\\n  md-spinner,\\n  md-tab,\\n  md-tab-group,\\n  md-toolbar,\\n  md-error\";\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nvar MatPrefixRejector = (function () {\n    /**\n     * @param {?} isCompatibilityMode\n     */\n    function MatPrefixRejector(isCompatibilityMode) {\n        if (!isCompatibilityMode) {\n            throw Error('The \"mat-\" prefix cannot be used out of ng-material v1 compatibility mode.');\n        }\n    }\n    return MatPrefixRejector;\n}());\nMatPrefixRejector.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{ selector: MAT_ELEMENTS_SELECTOR },] },\n];\n/**\n * @nocollapse\n */\nMatPrefixRejector.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [MATERIAL_COMPATIBILITY_MODE,] },] },\n]; };\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nvar MdPrefixRejector = (function () {\n    /**\n     * @param {?} isCompatibilityMode\n     */\n    function MdPrefixRejector(isCompatibilityMode) {\n        if (isCompatibilityMode) {\n            throw Error('The \"md-\" prefix cannot be used in ng-material v1 compatibility mode.');\n        }\n    }\n    return MdPrefixRejector;\n}());\nMdPrefixRejector.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{ selector: MD_ELEMENTS_SELECTOR },] },\n];\n/**\n * @nocollapse\n */\nMdPrefixRejector.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [MATERIAL_COMPATIBILITY_MODE,] },] },\n]; };\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nvar CompatibilityModule = (function () {\n    /**\n     * @param {?} _document\n     */\n    function CompatibilityModule(_document) {\n        this._document = _document;\n        if (!hasDoneGlobalChecks && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"isDevMode\"])()) {\n            this._checkDoctype();\n            this._checkTheme();\n            hasDoneGlobalChecks = true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    CompatibilityModule.forRoot = function () {\n        return {\n            ngModule: CompatibilityModule,\n            providers: [],\n        };\n    };\n    /**\n     * @return {?}\n     */\n    CompatibilityModule.prototype._checkDoctype = function () {\n        if (this._document && !this._document.doctype) {\n            console.warn('Current document does not have a doctype. This may cause ' +\n                'some Angular Material components not to behave as expected.');\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CompatibilityModule.prototype._checkTheme = function () {\n        if (this._document) {\n            var /** @type {?} */ testElement = this._document.createElement('div');\n            testElement.classList.add('mat-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n            if (getComputedStyle(testElement).display !== 'none') {\n                console.warn('Could not find Angular Material core theme. Most Material ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: https://material.angular.io/guide/theming');\n            }\n            this._document.body.removeChild(testElement);\n        }\n    };\n    return CompatibilityModule;\n}());\nCompatibilityModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                declarations: [MatPrefixRejector, MdPrefixRejector],\n                exports: [MatPrefixRejector, MdPrefixRejector],\n            },] },\n];\n/**\n * @nocollapse\n */\nCompatibilityModule.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__[\"DOCUMENT\"],] },] },\n]; };\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nvar NoConflictStyleCompatibilityMode = (function () {\n    function NoConflictStyleCompatibilityMode() {\n    }\n    return NoConflictStyleCompatibilityMode;\n}());\nNoConflictStyleCompatibilityMode.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                providers: [{\n                        provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n                    }],\n            },] },\n];\n/**\n * @nocollapse\n */\nNoConflictStyleCompatibilityMode.ctorParameters = function () { return []; };\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nvar MdLine = (function () {\n    function MdLine() {\n    }\n    return MdLine;\n}());\nMdLine.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-line], [mat-line]',\n                host: {\n                    '[class.mat-line]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdLine.ctorParameters = function () { return []; };\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nvar MdLineSetter = (function () {\n    /**\n     * @param {?} _lines\n     * @param {?} _renderer\n     * @param {?} _element\n     */\n    function MdLineSetter(_lines, _renderer, _element) {\n        var _this = this;\n        this._lines = _lines;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._setLineClass(this._lines.length);\n        this._lines.changes.subscribe(function () {\n            _this._setLineClass(_this._lines.length);\n        });\n    }\n    /**\n     * @param {?} count\n     * @return {?}\n     */\n    MdLineSetter.prototype._setLineClass = function (count) {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(\"mat-\" + count + \"-line\", true);\n        }\n        else if (count > 3) {\n            this._setClass(\"mat-multi-line\", true);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdLineSetter.prototype._resetClasses = function () {\n        this._setClass('mat-2-line', false);\n        this._setClass('mat-3-line', false);\n        this._setClass('mat-multi-line', false);\n    };\n    /**\n     * @param {?} className\n     * @param {?} bool\n     * @return {?}\n     */\n    MdLineSetter.prototype._setClass = function (className, bool) {\n        this._renderer.setElementClass(this._element.nativeElement, className, bool);\n    };\n    return MdLineSetter;\n}());\nvar MdLineModule = (function () {\n    function MdLineModule() {\n    }\n    return MdLineModule;\n}());\nMdLineModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [CompatibilityModule],\n                exports: [MdLine, CompatibilityModule],\n                declarations: [MdLine],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdLineModule.ctorParameters = function () { return []; };\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\nvar Dir = (function () {\n    function Dir() {\n        /** Layout direction of the element. */\n        this._dir = 'ltr';\n        /** Event emitted when the direction changes. */\n        this.dirChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n    }\n    Object.defineProperty(Dir.prototype, \"dir\", {\n        /**\n         * \\@docs-private\n         * @return {?}\n         */\n        get: function () {\n            return this._dir;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            var /** @type {?} */ old = this._dir;\n            this._dir = v;\n            if (old != this._dir) {\n                this.dirChange.emit();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dir.prototype, \"value\", {\n        /**\n         * Current layout direction of the element.\n         * @return {?}\n         */\n        get: function () { return this.dir; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.dir = v; },\n        enumerable: true,\n        configurable: true\n    });\n    return Dir;\n}());\nDir.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[dir]',\n                // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n                exportAs: '$implicit'\n            },] },\n];\n/**\n * @nocollapse\n */\nDir.ctorParameters = function () { return []; };\nDir.propDecorators = {\n    '_dir': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['dir',] },],\n    'dirChange': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'dir': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"HostBinding\"], args: ['attr.dir',] },],\n};\nvar RtlModule = (function () {\n    function RtlModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    RtlModule.forRoot = function () {\n        return {\n            ngModule: RtlModule,\n            providers: []\n        };\n    };\n    return RtlModule;\n}());\nRtlModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                exports: [Dir],\n                declarations: [Dir]\n            },] },\n];\n/**\n * @nocollapse\n */\nRtlModule.ctorParameters = function () { return []; };\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nvar ObserveContent = (function () {\n    /**\n     * @param {?} _elementRef\n     */\n    function ObserveContent(_elementRef) {\n        this._elementRef = _elementRef;\n        /** Event emitted for each change in the element's content. */\n        this.event = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n    }\n    /**\n     * @return {?}\n     */\n    ObserveContent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._observer = new MutationObserver(function (mutations) { return mutations.forEach(function () { return _this.event.emit(); }); });\n        this._observer.observe(this._elementRef.nativeElement, {\n            characterData: true,\n            childList: true,\n            subtree: true\n        });\n    };\n    /**\n     * @return {?}\n     */\n    ObserveContent.prototype.ngOnDestroy = function () {\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n    };\n    return ObserveContent;\n}());\nObserveContent.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[cdkObserveContent]'\n            },] },\n];\n/**\n * @nocollapse\n */\nObserveContent.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\nObserveContent.propDecorators = {\n    'event': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"], args: ['cdkObserveContent',] },],\n};\nvar ObserveContentModule = (function () {\n    function ObserveContentModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    ObserveContentModule.forRoot = function () {\n        return {\n            ngModule: ObserveContentModule,\n            providers: []\n        };\n    };\n    return ObserveContentModule;\n}());\nObserveContentModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                exports: [ObserveContent],\n                declarations: [ObserveContent]\n            },] },\n];\n/**\n * @nocollapse\n */\nObserveContentModule.ctorParameters = function () { return []; };\n// Due to a bug in the ChromeDriver, Angular keyboard events are not triggered by `sendKeys`\n// during E2E tests when using dot notation such as `(keydown.rightArrow)`. To get around this,\n// we are temporarily using a single (keydown) handler.\n// See: https://github.com/angular/angular/issues/9419\nvar UP_ARROW = 38;\nvar DOWN_ARROW = 40;\nvar RIGHT_ARROW = 39;\nvar LEFT_ARROW = 37;\nvar PAGE_UP = 33;\nvar PAGE_DOWN = 34;\nvar HOME = 36;\nvar END = 35;\nvar ENTER = 13;\nvar SPACE = 32;\nvar TAB = 9;\nvar ESCAPE = 27;\nvar BACKSPACE = 8;\nvar DELETE = 46;\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n * @param {?} value\n * @return {?}\n */\nfunction coerceBooleanProperty(value) {\n    return value != null && \"\" + value !== 'false';\n}\nvar RippleState = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n/**\n * Reference to a previously launched ripple element.\n */\nvar RippleRef = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} element\n     * @param {?} config\n     */\n    function RippleRef(_renderer, element, config) {\n        this._renderer = _renderer;\n        this.element = element;\n        this.config = config;\n        /** Current state of the ripple reference. */\n        this.state = RippleState.HIDDEN;\n    }\n    /**\n     * Fades out the ripple element.\n     * @return {?}\n     */\n    RippleRef.prototype.fadeOut = function () {\n        this._renderer.fadeOutRipple(this);\n    };\n    return RippleRef;\n}());\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nvar RIPPLE_FADE_IN_DURATION = 450;\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nvar RIPPLE_FADE_OUT_DURATION = 400;\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nvar RippleRenderer = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} _ruler\n     */\n    function RippleRenderer(_elementRef, _ngZone, _ruler) {\n        this._ngZone = _ngZone;\n        this._ruler = _ruler;\n        this._isMousedown = false;\n        this._triggerEvents = new Map();\n        this._activeRipples = new Set();\n        /** Ripple config for all ripples created by events. */\n        this.rippleConfig = {};\n        /** Whether mouse ripples should be created or not. */\n        this.rippleDisabled = false;\n        this._containerElement = _elementRef.nativeElement;\n        // Specify events which need to be registered on the trigger.\n        this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n        this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n        this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n        // By default use the host element as trigger element.\n        this.setTriggerElement(this._containerElement);\n    }\n    /**\n     * Fades in a ripple at the given coordinates.\n     * @param {?} pageX\n     * @param {?} pageY\n     * @param {?=} config\n     * @return {?}\n     */\n    RippleRenderer.prototype.fadeInRipple = function (pageX, pageY, config) {\n        var _this = this;\n        if (config === void 0) { config = {}; }\n        var /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n        if (config.centered) {\n            pageX = containerRect.left + containerRect.width / 2;\n            pageY = containerRect.top + containerRect.height / 2;\n        }\n        else {\n            // Subtract scroll values from the coordinates because calculations below\n            // are always relative to the viewport rectangle.\n            var /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n            pageX -= scrollPosition.left;\n            pageY -= scrollPosition.top;\n        }\n        var /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n        var /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n        var /** @type {?} */ offsetX = pageX - containerRect.left;\n        var /** @type {?} */ offsetY = pageY - containerRect.top;\n        var /** @type {?} */ ripple = document.createElement('div');\n        ripple.classList.add('mat-ripple-element');\n        ripple.style.left = offsetX - radius + \"px\";\n        ripple.style.top = offsetY - radius + \"px\";\n        ripple.style.height = radius * 2 + \"px\";\n        ripple.style.width = radius * 2 + \"px\";\n        // If the color is not set, the default CSS color will be used.\n        ripple.style.backgroundColor = config.color;\n        ripple.style.transitionDuration = duration + \"ms\";\n        this._containerElement.appendChild(ripple);\n        // By default the browser does not recalculate the styles of dynamically created\n        // ripple elements. This is critical because then the `scale` would not animate properly.\n        enforceStyleRecalculation(ripple);\n        ripple.style.transform = 'scale(1)';\n        // Exposed reference to the ripple that will be returned.\n        var /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n        rippleRef.state = RippleState.FADING_IN;\n        // Add the ripple reference to the list of all active ripples.\n        this._activeRipples.add(rippleRef);\n        // Wait for the ripple element to be completely faded in.\n        // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n        this.runTimeoutOutsideZone(function () {\n            rippleRef.state = RippleState.VISIBLE;\n            if (!config.persistent && !_this._isMousedown) {\n                rippleRef.fadeOut();\n            }\n        }, duration);\n        return rippleRef;\n    };\n    /**\n     * Fades out a ripple reference.\n     * @param {?} rippleRef\n     * @return {?}\n     */\n    RippleRenderer.prototype.fadeOutRipple = function (rippleRef) {\n        // For ripples that are not active anymore, don't re-un the fade-out animation.\n        if (!this._activeRipples.delete(rippleRef)) {\n            return;\n        }\n        var /** @type {?} */ rippleEl = rippleRef.element;\n        rippleEl.style.transitionDuration = RIPPLE_FADE_OUT_DURATION + \"ms\";\n        rippleEl.style.opacity = '0';\n        rippleRef.state = RippleState.FADING_OUT;\n        // Once the ripple faded out, the ripple can be safely removed from the DOM.\n        this.runTimeoutOutsideZone(function () {\n            rippleRef.state = RippleState.HIDDEN;\n            rippleEl.parentNode.removeChild(rippleEl);\n        }, RIPPLE_FADE_OUT_DURATION);\n    };\n    /**\n     * Fades out all currently active ripples.\n     * @return {?}\n     */\n    RippleRenderer.prototype.fadeOutAll = function () {\n        this._activeRipples.forEach(function (ripple) { return ripple.fadeOut(); });\n    };\n    /**\n     * Sets the trigger element and registers the mouse events.\n     * @param {?} element\n     * @return {?}\n     */\n    RippleRenderer.prototype.setTriggerElement = function (element) {\n        var _this = this;\n        // Remove all previously register event listeners from the trigger element.\n        if (this._triggerElement) {\n            this._triggerEvents.forEach(function (fn, type) { return _this._triggerElement.removeEventListener(type, fn); });\n        }\n        if (element) {\n            // If the element is not null, register all event listeners on the trigger element.\n            this._ngZone.runOutsideAngular(function () {\n                _this._triggerEvents.forEach(function (fn, type) { return element.addEventListener(type, fn); });\n            });\n        }\n        this._triggerElement = element;\n    };\n    /**\n     * Listener being called on mousedown event.\n     * @param {?} event\n     * @return {?}\n     */\n    RippleRenderer.prototype.onMousedown = function (event) {\n        if (!this.rippleDisabled) {\n            this._isMousedown = true;\n            this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n        }\n    };\n    /**\n     * Listener being called on mouseup event.\n     * @return {?}\n     */\n    RippleRenderer.prototype.onMouseup = function () {\n        this._isMousedown = false;\n        // Fade-out all ripples that are completely visible and not persistent.\n        this._activeRipples.forEach(function (ripple) {\n            if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n                ripple.fadeOut();\n            }\n        });\n    };\n    /**\n     * Listener being called on mouseleave event.\n     * @return {?}\n     */\n    RippleRenderer.prototype.onMouseLeave = function () {\n        if (this._isMousedown) {\n            this.onMouseup();\n        }\n    };\n    /**\n     * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n     * @param {?} fn\n     * @param {?=} delay\n     * @return {?}\n     */\n    RippleRenderer.prototype.runTimeoutOutsideZone = function (fn, delay) {\n        if (delay === void 0) { delay = 0; }\n        this._ngZone.runOutsideAngular(function () { return setTimeout(fn, delay); });\n    };\n    return RippleRenderer;\n}());\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element) {\n    // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n    // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x, y, rect) {\n    var /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n    var /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n    return Math.sqrt(distX * distX + distY * distY);\n}\n/** Time in ms to throttle the scrolling events by default. */\nvar DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nvar ScrollDispatcher = (function () {\n    /**\n     * @param {?} _ngZone\n     */\n    function ScrollDispatcher(_ngZone) {\n        this._ngZone = _ngZone;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollableReferences = new Map();\n    }\n    /**\n     * Registers a Scrollable with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event in its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.register = function (scrollable) {\n        var _this = this;\n        var /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(function () { return _this._notify(); });\n        this.scrollableReferences.set(scrollable, scrollSubscription);\n    };\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.deregister = function (scrollable) {\n        if (this.scrollableReferences.has(scrollable)) {\n            this.scrollableReferences.get(scrollable).unsubscribe();\n            this.scrollableReferences.delete(scrollable);\n        }\n    };\n    /**\n     * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     * @param {?=} auditTimeInMs\n     * @param {?=} callback\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.scrolled = function (auditTimeInMs, callback) {\n        var _this = this;\n        if (auditTimeInMs === void 0) { auditTimeInMs = DEFAULT_SCROLL_TIME; }\n        // In the case of a 0ms delay, use an observable without auditTime\n        // since it does add a perceptible delay in processing overhead.\n        var /** @type {?} */ observable = auditTimeInMs > 0 ?\n            this._scrolled.asObservable().auditTime(auditTimeInMs) :\n            this._scrolled.asObservable();\n        this._scrolledCount++;\n        if (!this._globalSubscription) {\n            this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n                return __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"].merge(__WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"].fromEvent(window.document, 'scroll'), __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"].fromEvent(window, 'resize')).subscribe(function () { return _this._notify(); });\n            });\n        }\n        // Note that we need to do the subscribing from here, in order to be able to remove\n        // the global event listeners once there are no more subscriptions.\n        var /** @type {?} */ subscription = observable.subscribe(callback);\n        subscription.add(function () {\n            _this._scrolledCount--;\n            if (_this._globalSubscription && !_this.scrollableReferences.size && !_this._scrolledCount) {\n                _this._globalSubscription.unsubscribe();\n                _this._globalSubscription = null;\n            }\n        });\n        return subscription;\n    };\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.getScrollContainers = function (elementRef) {\n        var _this = this;\n        var /** @type {?} */ scrollingContainers = [];\n        this.scrollableReferences.forEach(function (subscription, scrollable) {\n            if (_this.scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    };\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.scrollableContainsElement = function (scrollable, elementRef) {\n        var /** @type {?} */ element = elementRef.nativeElement;\n        var /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = element.parentElement);\n    };\n    /**\n     * Sends a notification that a scroll event has been fired.\n     * @return {?}\n     */\n    ScrollDispatcher.prototype._notify = function () {\n        this._scrolled.next();\n    };\n    return ScrollDispatcher;\n}());\nScrollDispatcher.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nScrollDispatcher.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n]; };\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @return {?}\n */\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone) {\n    return parentDispatcher || new ScrollDispatcher(ngZone);\n}\nvar SCROLL_DISPATCHER_PROVIDER = {\n    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n    provide: ScrollDispatcher,\n    deps: [[new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SkipSelf\"](), ScrollDispatcher], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"]],\n    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nvar ViewportRuler = (function () {\n    /**\n     * @param {?} scrollDispatcher\n     */\n    function ViewportRuler(scrollDispatcher) {\n        var _this = this;\n        // Initially cache the document rectangle.\n        this._cacheViewportGeometry();\n        // Subscribe to scroll and resize events and update the document rectangle on changes.\n        scrollDispatcher.scrolled(null, function () { return _this._cacheViewportGeometry(); });\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @param {?=} documentRect\n     * @return {?}\n     */\n    ViewportRuler.prototype.getViewportRect = function (documentRect) {\n        if (documentRect === void 0) { documentRect = this._documentRect; }\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        var /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n        var /** @type {?} */ height = window.innerHeight;\n        var /** @type {?} */ width = window.innerWidth;\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height: height,\n            width: width,\n        };\n    };\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @param {?=} documentRect\n     * @return {?}\n     */\n    ViewportRuler.prototype.getViewportScrollPosition = function (documentRect) {\n        if (documentRect === void 0) { documentRect = this._documentRect; }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        var /** @type {?} */ top = -documentRect.top || document.body.scrollTop || window.scrollY || 0;\n        var /** @type {?} */ left = -documentRect.left || document.body.scrollLeft || window.scrollX || 0;\n        return { top: top, left: left };\n    };\n    /**\n     * Caches the latest client rectangle of the document element.\n     * @return {?}\n     */\n    ViewportRuler.prototype._cacheViewportGeometry = function () {\n        this._documentRect = document.documentElement.getBoundingClientRect();\n    };\n    return ViewportRuler;\n}());\nViewportRuler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nViewportRuler.ctorParameters = function () { return [\n    { type: ScrollDispatcher, },\n]; };\n/**\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, scrollDispatcher) {\n    return parentRuler || new ViewportRuler(scrollDispatcher);\n}\nvar VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SkipSelf\"](), ViewportRuler], ScrollDispatcher],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n/** OpaqueToken that can be used to specify the global ripple options. */\nvar MD_RIPPLE_GLOBAL_OPTIONS = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"OpaqueToken\"]('md-ripple-global-options');\nvar MdRipple = (function () {\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} ruler\n     * @param {?} globalOptions\n     */\n    function MdRipple(elementRef, ngZone, ruler, \n        // Type needs to be `any` because of https://github.com/angular/angular/issues/12631\n        globalOptions) {\n        /**\n         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n         * will be the distance from the center of the ripple to the furthest corner of the host element's\n         * bounding rectangle.\n         */\n        this.radius = 0;\n        /**\n         * If set, the normal duration of ripple animations is divided by this value. For example,\n         * setting it to 0.5 will cause the animations to take twice as long.\n         * A changed speedFactor will not modify the fade-out duration of the ripples.\n         */\n        this.speedFactor = 1;\n        this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler);\n        this._globalOptions = globalOptions ? globalOptions : {};\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MdRipple.prototype.ngOnChanges = function (changes) {\n        if (changes['trigger'] && this.trigger) {\n            this._rippleRenderer.setTriggerElement(this.trigger);\n        }\n        this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n        this._rippleRenderer.rippleConfig = this.rippleConfig;\n    };\n    /**\n     * @return {?}\n     */\n    MdRipple.prototype.ngOnDestroy = function () {\n        // Set the trigger element to null to cleanup all listeners.\n        this._rippleRenderer.setTriggerElement(null);\n    };\n    /**\n     * Launches a manual ripple at the specified position.\n     * @param {?} pageX\n     * @param {?} pageY\n     * @param {?=} config\n     * @return {?}\n     */\n    MdRipple.prototype.launch = function (pageX, pageY, config) {\n        if (config === void 0) { config = this.rippleConfig; }\n        return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n    };\n    /**\n     * Fades out all currently showing ripple elements.\n     * @return {?}\n     */\n    MdRipple.prototype.fadeOutAll = function () {\n        this._rippleRenderer.fadeOutAll();\n    };\n    Object.defineProperty(MdRipple.prototype, \"rippleConfig\", {\n        /**\n         * Ripple configuration from the directive's input values.\n         * @return {?}\n         */\n        get: function () {\n            return {\n                centered: this.centered,\n                speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n                radius: this.radius,\n                color: this.color\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MdRipple;\n}());\nMdRipple.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n                exportAs: 'mdRipple',\n                host: {\n                    '[class.mat-ripple]': 'true',\n                    '[class.mat-ripple-unbounded]': 'unbounded'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdRipple.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n    { type: ViewportRuler, },\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [MD_RIPPLE_GLOBAL_OPTIONS,] },] },\n]; };\nMdRipple.propDecorators = {\n    'trigger': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdRippleTrigger',] },],\n    'centered': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdRippleCentered',] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdRippleDisabled',] },],\n    'radius': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdRippleRadius',] },],\n    'speedFactor': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdRippleSpeedFactor',] },],\n    'color': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdRippleColor',] },],\n    'unbounded': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdRippleUnbounded',] },],\n};\nvar MdRippleModule = (function () {\n    function MdRippleModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdRippleModule.forRoot = function () {\n        return {\n            ngModule: MdRippleModule,\n            providers: []\n        };\n    };\n    return MdRippleModule;\n}());\nMdRippleModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [CompatibilityModule],\n                exports: [MdRipple, CompatibilityModule],\n                declarations: [MdRipple],\n                providers: [VIEWPORT_RULER_PROVIDER, SCROLL_DISPATCHER_PROVIDER],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdRippleModule.ctorParameters = function () { return []; };\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nvar MdPseudoCheckbox = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     */\n    function MdPseudoCheckbox(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        /** Display state of the checkbox. */\n        this.state = 'unchecked';\n        /** Whether the checkbox is disabled. */\n        this.disabled = false;\n        this.color = 'accent';\n    }\n    Object.defineProperty(MdPseudoCheckbox.prototype, \"color\", {\n        /**\n         * Color of the checkbox.\n         * @return {?}\n         */\n        get: function () { return this._color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (value) {\n                var /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n                this._renderer.setElementClass(nativeElement, \"mat-\" + this.color, false);\n                this._renderer.setElementClass(nativeElement, \"mat-\" + value, true);\n                this._color = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    return MdPseudoCheckbox;\n}());\nMdPseudoCheckbox.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n                styles: [\".mat-pseudo-checkbox{width:20px;height:20px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;transition:border-color 90ms cubic-bezier(0,0,.2,.1),background-color 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:'';border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:9px;left:2px;width:16px;opacity:1}.mat-pseudo-checkbox-checked::after{top:5px;left:3px;width:12px;height:5px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1} /*# sourceMappingURL=pseudo-checkbox.css.map */ \"],\n                template: '',\n                host: {\n                    '[class.mat-pseudo-checkbox]': 'true',\n                    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n                    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n                    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdPseudoCheckbox.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n]; };\nMdPseudoCheckbox.propDecorators = {\n    'state': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'color': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\nvar MdSelectionModule = (function () {\n    function MdSelectionModule() {\n    }\n    return MdSelectionModule;\n}());\nMdSelectionModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                exports: [MdPseudoCheckbox],\n                declarations: [MdPseudoCheckbox]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSelectionModule.ctorParameters = function () { return []; };\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nvar _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nvar MdOptionSelectionChange = (function () {\n    /**\n     * @param {?} source\n     * @param {?=} isUserInput\n     */\n    function MdOptionSelectionChange(source, isUserInput) {\n        if (isUserInput === void 0) { isUserInput = false; }\n        this.source = source;\n        this.isUserInput = isUserInput;\n    }\n    return MdOptionSelectionChange;\n}());\n/**\n * Single option inside of a `<md-select>` element.\n */\nvar MdOption = (function () {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _isCompatibilityMode\n     */\n    function MdOption(_element, _renderer, _isCompatibilityMode) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._isCompatibilityMode = _isCompatibilityMode;\n        this._selected = false;\n        this._active = false;\n        this._disabled = false;\n        this._id = \"md-option-\" + _uniqueIdCounter++;\n        /** Whether the wrapping component is in multiple selection mode. */\n        this.multiple = false;\n        /** Event emitted when the option is selected or deselected. */\n        this.onSelectionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n    }\n    Object.defineProperty(MdOption.prototype, \"id\", {\n        /**\n         * The unique ID of the option.\n         * @return {?}\n         */\n        get: function () { return this._id; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdOption.prototype, \"selected\", {\n        /**\n         * Whether or not the option is currently selected.\n         * @return {?}\n         */\n        get: function () { return this._selected; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdOption.prototype, \"disabled\", {\n        /**\n         * Whether the option is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdOption.prototype, \"active\", {\n        /**\n         * Whether or not the option is currently active and ready to be selected.\n         * An active option displays styles as if it is focused, but the\n         * focus is actually retained somewhere else. This comes in handy\n         * for components like autocomplete where focus must remain on the input.\n         * @return {?}\n         */\n        get: function () {\n            return this._active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdOption.prototype, \"viewValue\", {\n        /**\n         * The displayed value of the option. It is necessary to show the selected option in the\n         * select's trigger.\n         * @return {?}\n         */\n        get: function () {\n            // TODO(kara): Add input property alternative for node envs.\n            return this._getHostElement().textContent.trim();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Selects the option.\n     * @return {?}\n     */\n    MdOption.prototype.select = function () {\n        this._selected = true;\n        this._emitSelectionChangeEvent();\n    };\n    /**\n     * Deselects the option.\n     * @return {?}\n     */\n    MdOption.prototype.deselect = function () {\n        this._selected = false;\n        this._emitSelectionChangeEvent();\n    };\n    /**\n     * Sets focus onto this option.\n     * @return {?}\n     */\n    MdOption.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n    };\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     * @return {?}\n     */\n    MdOption.prototype.setActiveStyles = function () {\n        this._active = true;\n    };\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     * @return {?}\n     */\n    MdOption.prototype.setInactiveStyles = function () {\n        this._active = false;\n    };\n    /**\n     * Ensures the option is selected when activated from the keyboard.\n     * @param {?} event\n     * @return {?}\n     */\n    MdOption.prototype._handleKeydown = function (event) {\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this._selectViaInteraction();\n        }\n    };\n    /**\n     * Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.\n     * @return {?}\n     */\n    MdOption.prototype._selectViaInteraction = function () {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._emitSelectionChangeEvent(true);\n        }\n    };\n    /**\n     * Returns the correct tabindex for the option depending on disabled state.\n     * @return {?}\n     */\n    MdOption.prototype._getTabIndex = function () {\n        return this.disabled ? '-1' : '0';\n    };\n    /**\n     * Fetches the host DOM element.\n     * @return {?}\n     */\n    MdOption.prototype._getHostElement = function () {\n        return this._element.nativeElement;\n    };\n    /**\n     * Emits the selection change event.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    MdOption.prototype._emitSelectionChangeEvent = function (isUserInput) {\n        if (isUserInput === void 0) { isUserInput = false; }\n        this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n    };\n    ;\n    return MdOption;\n}());\nMdOption.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-option, mat-option',\n                host: {\n                    'role': 'option',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[class.mat-selected]': 'selected',\n                    '[class.mat-option-multiple]': 'multiple',\n                    '[class.mat-active]': 'active',\n                    '[id]': 'id',\n                    '[attr.aria-selected]': 'selected.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[class.mat-option-disabled]': 'disabled',\n                    '(click)': '_selectViaInteraction()',\n                    '(keydown)': '_handleKeydown($event)',\n                    '[class.mat-option]': 'true',\n                },\n                template: \"<span [ngSwitch]=\\\"_isCompatibilityMode\\\" *ngIf=\\\"multiple\\\"> <mat-pseudo-checkbox class=\\\"mat-option-pseudo-checkbox\\\" *ngSwitchCase=\\\"true\\\" [state]=\\\"selected ? 'checked' : ''\\\" color=\\\"primary\\\"></mat-pseudo-checkbox> <md-pseudo-checkbox class=\\\"mat-option-pseudo-checkbox\\\" *ngSwitchDefault [state]=\\\"selected ? 'checked' : ''\\\" color=\\\"primary\\\"></md-pseudo-checkbox> </span> <ng-content></ng-content> <div class=\\\"mat-option-ripple\\\" *ngIf=\\\"!disabled\\\" md-ripple [mdRippleTrigger]=\\\"_getHostElement()\\\"> </div> \",\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None\n            },] },\n];\n/**\n * @nocollapse\n */\nMdOption.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [MATERIAL_COMPATIBILITY_MODE,] },] },\n]; };\nMdOption.propDecorators = {\n    'value': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'onSelectionChange': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\nvar MdOptionModule = (function () {\n    function MdOptionModule() {\n    }\n    /**\n     * @return {?}\n     */\n    MdOptionModule.forRoot = function () {\n        return {\n            ngModule: MdOptionModule,\n            providers: []\n        };\n    };\n    return MdOptionModule;\n}());\nMdOptionModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [MdRippleModule, __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"], MdSelectionModule],\n                exports: [MdOption],\n                declarations: [MdOption]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdOptionModule.ctorParameters = function () { return []; };\n/**\n * Wrapper around Error that sets the error message.\n * \\@docs-private\n */\nvar MdError = (function (_super) {\n    __extends(MdError, _super);\n    /**\n     * @param {?} value\n     */\n    function MdError(value) {\n        var _this = _super.call(this) || this;\n        _this.message = value;\n        return _this;\n    }\n    return MdError;\n}(Error));\n/**\n * Exception thrown when attempting to attach a null portal to a host.\n * \\@docs-private\n */\nvar NullPortalError = (function (_super) {\n    __extends(NullPortalError, _super);\n    function NullPortalError() {\n        return _super.call(this, 'Must provide a portal to attach') || this;\n    }\n    return NullPortalError;\n}(MdError));\n/**\n * Exception thrown when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n */\nvar PortalAlreadyAttachedError = (function (_super) {\n    __extends(PortalAlreadyAttachedError, _super);\n    function PortalAlreadyAttachedError() {\n        return _super.call(this, 'Host already has a portal attached') || this;\n    }\n    return PortalAlreadyAttachedError;\n}(MdError));\n/**\n * Exception thrown when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n */\nvar PortalHostAlreadyDisposedError = (function (_super) {\n    __extends(PortalHostAlreadyDisposedError, _super);\n    function PortalHostAlreadyDisposedError() {\n        return _super.call(this, 'This PortalHost has already been disposed') || this;\n    }\n    return PortalHostAlreadyDisposedError;\n}(MdError));\n/**\n * Exception thrown when attempting to attach an unknown portal type.\n * \\@docs-private\n */\nvar UnknownPortalTypeError = (function (_super) {\n    __extends(UnknownPortalTypeError, _super);\n    function UnknownPortalTypeError() {\n        return _super.call(this, 'Attempting to attach an unknown Portal type. ' +\n            'BasePortalHost accepts either a ComponentPortal or a TemplatePortal.') || this;\n    }\n    return UnknownPortalTypeError;\n}(MdError));\n/**\n * Exception thrown when attempting to attach a portal to a null host.\n * \\@docs-private\n */\nvar NullPortalHostError = (function (_super) {\n    __extends(NullPortalHostError, _super);\n    function NullPortalHostError() {\n        return _super.call(this, 'Attempting to attach a portal to a null PortalHost') || this;\n    }\n    return NullPortalHostError;\n}(MdError));\n/**\n * Exception thrown when attempting to detach a portal that is not attached.\n * \\@docs-private\n */\nvar NoPortalAttachedError = (function (_super) {\n    __extends(NoPortalAttachedError, _super);\n    function NoPortalAttachedError() {\n        return _super.call(this, 'Attempting to detach a portal that is not attached to a host') || this;\n    }\n    return NoPortalAttachedError;\n}(MdError));\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nvar Portal = (function () {\n    function Portal() {\n    }\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.attach = function (host) {\n        if (host == null) {\n            throw new NullPortalHostError();\n        }\n        if (host.hasAttached()) {\n            throw new PortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return (host.attach(this));\n    };\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    Portal.prototype.detach = function () {\n        var /** @type {?} */ host = this._attachedHost;\n        if (host == null) {\n            throw new NoPortalAttachedError();\n        }\n        this._attachedHost = null;\n        return host.detach();\n    };\n    Object.defineProperty(Portal.prototype, \"isAttached\", {\n        /**\n         * Whether this portal is attached to a host.\n         * @return {?}\n         */\n        get: function () {\n            return this._attachedHost != null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n     * the PortalHost when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.setAttachedHost = function (host) {\n        this._attachedHost = host;\n    };\n    return Portal;\n}());\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nvar ComponentPortal = (function (_super) {\n    __extends(ComponentPortal, _super);\n    /**\n     * @param {?} component\n     * @param {?=} viewContainerRef\n     * @param {?=} injector\n     */\n    function ComponentPortal(component, viewContainerRef, injector) {\n        if (viewContainerRef === void 0) { viewContainerRef = null; }\n        if (injector === void 0) { injector = null; }\n        var _this = _super.call(this) || this;\n        _this.component = component;\n        _this.viewContainerRef = viewContainerRef;\n        _this.injector = injector;\n        return _this;\n    }\n    return ComponentPortal;\n}(Portal));\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nvar TemplatePortal = (function (_super) {\n    __extends(TemplatePortal, _super);\n    /**\n     * @param {?} template\n     * @param {?} viewContainerRef\n     */\n    function TemplatePortal(template, viewContainerRef) {\n        var _this = _super.call(this) || this;\n        /**\n         * Additional locals for the instantiated embedded view.\n         * These locals can be seen as \"exports\" for the template, such as how ngFor has\n         * index / event / odd.\n         * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n         */\n        _this.locals = new Map();\n        _this.templateRef = template;\n        _this.viewContainerRef = viewContainerRef;\n        return _this;\n    }\n    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.templateRef.elementRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} host\n     * @param {?=} locals\n     * @return {?}\n     */\n    TemplatePortal.prototype.attach = function (host, locals) {\n        this.locals = locals == null ? new Map() : locals;\n        return _super.prototype.attach.call(this, host);\n    };\n    /**\n     * @return {?}\n     */\n    TemplatePortal.prototype.detach = function () {\n        this.locals = new Map();\n        return _super.prototype.detach.call(this);\n    };\n    return TemplatePortal;\n}(Portal));\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\n * ComponentPortal or a TemplatePortal.\n * @abstract\n */\nvar BasePortalHost = (function () {\n    function BasePortalHost() {\n        this._isDisposed = false;\n    }\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    BasePortalHost.prototype.hasAttached = function () {\n        return !!this._attachedPortal;\n    };\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalHost.prototype.attach = function (portal) {\n        if (!portal) {\n            throw new NullPortalError();\n        }\n        if (this.hasAttached()) {\n            throw new PortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throw new PortalHostAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throw new UnknownPortalTypeError();\n    };\n    /**\n     * @abstract\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalHost.prototype.attachComponentPortal = function (portal) { };\n    /**\n     * @abstract\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalHost.prototype.attachTemplatePortal = function (portal) { };\n    /**\n     * @return {?}\n     */\n    BasePortalHost.prototype.detach = function () {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    };\n    /**\n     * @return {?}\n     */\n    BasePortalHost.prototype.dispose = function () {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    BasePortalHost.prototype.setDisposeFn = function (fn) {\n        this._disposeFn = fn;\n    };\n    /**\n     * @return {?}\n     */\n    BasePortalHost.prototype._invokeDisposeFn = function () {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    };\n    return BasePortalHost;\n}());\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n *\n * Usage:\n * <ng-template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </ng-template>\n */\nvar TemplatePortalDirective = (function (_super) {\n    __extends(TemplatePortalDirective, _super);\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    function TemplatePortalDirective(templateRef, viewContainerRef) {\n        return _super.call(this, templateRef, viewContainerRef) || this;\n    }\n    return TemplatePortalDirective;\n}(TemplatePortal));\nTemplatePortalDirective.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n            },] },\n];\n/**\n * @nocollapse\n */\nTemplatePortalDirective.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"TemplateRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewContainerRef\"], },\n]; };\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * <ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nvar PortalHostDirective = (function (_super) {\n    __extends(PortalHostDirective, _super);\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _viewContainerRef\n     */\n    function PortalHostDirective(_componentFactoryResolver, _viewContainerRef) {\n        var _this = _super.call(this) || this;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._viewContainerRef = _viewContainerRef;\n        return _this;\n    }\n    Object.defineProperty(PortalHostDirective.prototype, \"_deprecatedPortal\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.portal; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.portal = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PortalHostDirective.prototype, \"portal\", {\n        /**\n         * Portal associated with the Portal host.\n         * @return {?}\n         */\n        get: function () {\n            return this._portal;\n        },\n        /**\n         * @param {?} portal\n         * @return {?}\n         */\n        set: function (portal) {\n            if (this.hasAttached()) {\n                _super.prototype.detach.call(this);\n            }\n            if (portal) {\n                _super.prototype.attach.call(this, portal);\n            }\n            this._portal = portal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    PortalHostDirective.prototype.ngOnDestroy = function () {\n        _super.prototype.dispose.call(this);\n        this._portal = null;\n    };\n    /**\n     * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal host.\n     * @return {?}\n     */\n    PortalHostDirective.prototype.attachComponentPortal = function (portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalHost.\n        var /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        var /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        var /** @type {?} */ ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.parentInjector);\n        _super.prototype.setDisposeFn.call(this, function () { return ref.destroy(); });\n        this._portal = portal;\n        return ref;\n    };\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @param {?} portal Portal to be attached.\n     * @return {?}\n     */\n    PortalHostDirective.prototype.attachTemplatePortal = function (portal) {\n        var _this = this;\n        portal.setAttachedHost(this);\n        this._viewContainerRef.createEmbeddedView(portal.templateRef);\n        _super.prototype.setDisposeFn.call(this, function () { return _this._viewContainerRef.clear(); });\n        this._portal = portal;\n        // TODO(jelbourn): return locals from view\n        return new Map();\n    };\n    return PortalHostDirective;\n}(BasePortalHost));\nPortalHostDirective.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                inputs: ['portal: cdkPortalHost']\n            },] },\n];\n/**\n * @nocollapse\n */\nPortalHostDirective.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ComponentFactoryResolver\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewContainerRef\"], },\n]; };\nPortalHostDirective.propDecorators = {\n    '_deprecatedPortal': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['portalHost',] },],\n};\nvar PortalModule = (function () {\n    function PortalModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    PortalModule.forRoot = function () {\n        return {\n            ngModule: PortalModule,\n            providers: []\n        };\n    };\n    return PortalModule;\n}());\nPortalModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                exports: [TemplatePortalDirective, PortalHostDirective],\n                declarations: [TemplatePortalDirective, PortalHostDirective],\n            },] },\n];\n/**\n * @nocollapse\n */\nPortalModule.ctorParameters = function () { return []; };\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nvar OverlayState = (function () {\n    function OverlayState() {\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop **/\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /** The direction of the text in the overlay panel. */\n        this.direction = 'ltr';\n        // TODO(jelbourn): configuration still to add\n        // - focus trap\n        // - disable pointer events\n        // - z-index\n    }\n    return OverlayState;\n}());\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nvar DomPortalHost = (function (_super) {\n    __extends(DomPortalHost, _super);\n    /**\n     * @param {?} _hostDomElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _defaultInjector\n     */\n    function DomPortalHost(_hostDomElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        var _this = _super.call(this) || this;\n        _this._hostDomElement = _hostDomElement;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._appRef = _appRef;\n        _this._defaultInjector = _defaultInjector;\n        return _this;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?}\n     */\n    DomPortalHost.prototype.attachComponentPortal = function (portal) {\n        var _this = this;\n        var /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        var /** @type {?} */ componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.parentInjector);\n            this.setDisposeFn(function () { return componentRef.destroy(); });\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(function () {\n                _this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    };\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param {?} portal Portal to be attached.\n     * @return {?}\n     */\n    DomPortalHost.prototype.attachTemplatePortal = function (portal) {\n        var _this = this;\n        var /** @type {?} */ viewContainer = portal.viewContainerRef;\n        var /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef);\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\n        // To move the view to the specified host element. We just re-append the existing root nodes.\n        viewRef.rootNodes.forEach(function (rootNode) { return _this._hostDomElement.appendChild(rootNode); });\n        this.setDisposeFn((function () {\n            var /** @type {?} */ index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return new Map();\n    };\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    DomPortalHost.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        if (this._hostDomElement.parentNode != null) {\n            this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n        }\n    };\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    DomPortalHost.prototype._getComponentRootNode = function (componentRef) {\n        return (((componentRef.hostView)).rootNodes[0]);\n    };\n    return DomPortalHost;\n}(BasePortalHost));\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nvar OverlayRef = (function () {\n    /**\n     * @param {?} _portalHost\n     * @param {?} _pane\n     * @param {?} _state\n     * @param {?} _ngZone\n     */\n    function OverlayRef(_portalHost, _pane, _state, _ngZone) {\n        this._portalHost = _portalHost;\n        this._pane = _pane;\n        this._state = _state;\n        this._ngZone = _ngZone;\n        this._backdropElement = null;\n        this._backdropClick = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n    }\n    Object.defineProperty(OverlayRef.prototype, \"overlayElement\", {\n        /**\n         * The overlay's HTML element\n         * @return {?}\n         */\n        get: function () {\n            return this._pane;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attaches the overlay to a portal instance and adds the backdrop.\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    OverlayRef.prototype.attach = function (portal) {\n        var /** @type {?} */ attachResult = this._portalHost.attach(portal);\n        // Update the pane element with the given state configuration.\n        this._updateStackingOrder();\n        this.updateSize();\n        this.updateDirection();\n        this.updatePosition();\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._state.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        return attachResult;\n    };\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} Resolves when the overlay has been detached.\n     */\n    OverlayRef.prototype.detach = function () {\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        return this._portalHost.detach();\n    };\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    OverlayRef.prototype.dispose = function () {\n        if (this._state.positionStrategy) {\n            this._state.positionStrategy.dispose();\n        }\n        this.detachBackdrop();\n        this._portalHost.dispose();\n    };\n    /**\n     * Checks whether the overlay has been attached.\n     * @return {?}\n     */\n    OverlayRef.prototype.hasAttached = function () {\n        return this._portalHost.hasAttached();\n    };\n    /**\n     * Returns an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    OverlayRef.prototype.backdropClick = function () {\n        return this._backdropClick.asObservable();\n    };\n    /**\n     * Gets the current state config of the overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.getState = function () {\n        return this._state;\n    };\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    OverlayRef.prototype.updatePosition = function () {\n        if (this._state.positionStrategy) {\n            this._state.positionStrategy.apply(this._pane);\n        }\n    };\n    /**\n     * Updates the text direction of the overlay panel. *\n     * @return {?}\n     */\n    OverlayRef.prototype.updateDirection = function () {\n        this._pane.setAttribute('dir', this._state.direction);\n    };\n    /**\n     * Updates the size of the overlay based on the overlay config.\n     * @return {?}\n     */\n    OverlayRef.prototype.updateSize = function () {\n        if (this._state.width || this._state.width === 0) {\n            this._pane.style.width = formatCssUnit(this._state.width);\n        }\n        if (this._state.height || this._state.height === 0) {\n            this._pane.style.height = formatCssUnit(this._state.height);\n        }\n        if (this._state.minWidth || this._state.minWidth === 0) {\n            this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n        }\n        if (this._state.minHeight || this._state.minHeight === 0) {\n            this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n        }\n    };\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    OverlayRef.prototype._togglePointerEvents = function (enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    };\n    /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype._attachBackdrop = function () {\n        var _this = this;\n        this._backdropElement = document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        this._backdropElement.classList.add(this._state.backdropClass);\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._pane.parentElement.insertBefore(this._backdropElement, this._pane);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', function () { return _this._backdropClick.next(null); });\n        // Add class to fade-in the backdrop after one frame.\n        requestAnimationFrame(function () {\n            if (_this._backdropElement) {\n                _this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n            }\n        });\n    };\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n    OverlayRef.prototype._updateStackingOrder = function () {\n        if (this._pane.nextSibling) {\n            this._pane.parentNode.appendChild(this._pane);\n        }\n    };\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.detachBackdrop = function () {\n        var _this = this;\n        var /** @type {?} */ backdropToDetach = this._backdropElement;\n        if (backdropToDetach) {\n            var /** @type {?} */ finishDetach_1 = function () {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (_this._backdropElement == backdropToDetach) {\n                    _this._backdropElement = null;\n                }\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            backdropToDetach.classList.remove(this._state.backdropClass);\n            backdropToDetach.addEventListener('transitionend', finishDetach_1);\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            this._ngZone.runOutsideAngular(function () {\n                setTimeout(finishDetach_1, 500);\n            });\n        }\n    };\n    return OverlayRef;\n}());\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value) {\n    return typeof value === 'string' ? (value) : value + \"px\";\n}\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nvar ConnectionPositionPair = (function () {\n    /**\n     * @param {?} origin\n     * @param {?} overlay\n     */\n    function ConnectionPositionPair(origin, overlay) {\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n    return ConnectionPositionPair;\n}());\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nvar ScrollableViewProperties = (function () {\n    function ScrollableViewProperties() {\n    }\n    return ScrollableViewProperties;\n}());\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nvar ConnectedOverlayPositionChange = (function () {\n    /**\n     * @param {?} connectionPair\n     * @param {?} scrollableViewProperties\n     */\n    function ConnectedOverlayPositionChange(connectionPair, scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n    return ConnectedOverlayPositionChange;\n}());\n/**\n * @nocollapse\n */\nConnectedOverlayPositionChange.ctorParameters = function () { return [\n    { type: ConnectionPositionPair, },\n    { type: ScrollableViewProperties, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n]; };\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nvar ConnectedPositionStrategy = (function () {\n    /**\n     * @param {?} _connectedTo\n     * @param {?} _originPos\n     * @param {?} _overlayPos\n     * @param {?} _viewportRuler\n     */\n    function ConnectedPositionStrategy(_connectedTo, _originPos, _overlayPos, _viewportRuler) {\n        this._connectedTo = _connectedTo;\n        this._originPos = _originPos;\n        this._overlayPos = _overlayPos;\n        this._viewportRuler = _viewportRuler;\n        this._dir = 'ltr';\n        this._offsetX = 0;\n        this._offsetY = 0;\n        this.scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        this._onPositionChange = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n        this._origin = this._connectedTo.nativeElement;\n        this.withFallbackPosition(_originPos, _overlayPos);\n    }\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"_isRtl\", {\n        /**\n         * Whether the we're dealing with an RTL context\n         * @return {?}\n         */\n        get: function () {\n            return this._dir === 'rtl';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"onPositionChange\", {\n        /**\n         * Emits an event when the connection point changes.\n         * @return {?}\n         */\n        get: function () {\n            return this._onPositionChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         * @return {?}\n         */\n        get: function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * To be used to for any cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.dispose = function () { };\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     *\n     * @param {?} element Element to which to apply the CSS styles.\n     * @return {?} Resolves when the styles have been applied.\n     */\n    ConnectedPositionStrategy.prototype.apply = function (element) {\n        // Cache the overlay pane element in case re-calculating position is necessary\n        this._pane = element;\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        var /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n        var /** @type {?} */ overlayRect = element.getBoundingClientRect();\n        // We use the viewport rect to determine whether a position would go off-screen.\n        var /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n        // Fallback point if none of the fallbacks fit into the viewport.\n        var /** @type {?} */ fallbackPoint = null;\n        // We want to place the overlay in the first of the preferred positions such that the\n        // overlay fits on-screen.\n        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {\n            var pos = _a[_i];\n            // Get the (x, y) point of connection on the origin, and then use that to get the\n            // (top, left) coordinate for the overlay at `pos`.\n            var /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n            var /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n            // If the overlay in the calculated position fits on-screen, put it there and we're done.\n            if (overlayPoint.fitsInViewport) {\n                this._setElementPosition(element, overlayPoint);\n                // Save the last connected position in case the position needs to be re-calculated.\n                this._lastConnectedPosition = pos;\n                // Notify that the position has been changed along with its change properties.\n                var /** @type {?} */ scrollableViewProperties = this.getScrollableViewProperties(element);\n                var /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n                this._onPositionChange.next(positionChange);\n                return Promise.resolve(null);\n            }\n            else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n                fallbackPoint = overlayPoint;\n            }\n        }\n        // If none of the preferred positions were in the viewport, take the one\n        // with the largest visible area.\n        this._setElementPosition(element, fallbackPoint);\n        return Promise.resolve(null);\n    };\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.recalculateLastPosition = function () {\n        var /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n        var /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n        var /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n        var /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n        var /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n        var /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n        this._setElementPosition(this._pane, overlayPoint);\n    };\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {\n        this.scrollables = scrollables;\n    };\n    /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos) {\n        this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n        return this;\n    };\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withDirection = function (dir) {\n        this._dir = dir;\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetX = function (offset) {\n        this._offsetX = offset;\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetY = function (offset) {\n        this._offsetY = offset;\n        return this;\n    };\n    /**\n     * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n     * @param {?} rect\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getStartX = function (rect) {\n        return this._isRtl ? rect.right : rect.left;\n    };\n    /**\n     * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n     * @param {?} rect\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getEndX = function (rect) {\n        return this._isRtl ? rect.left : rect.right;\n    };\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getOriginConnectionPoint = function (originRect, pos) {\n        var /** @type {?} */ originStartX = this._getStartX(originRect);\n        var /** @type {?} */ originEndX = this._getEndX(originRect);\n        var /** @type {?} */ x;\n        if (pos.originX == 'center') {\n            x = originStartX + (originRect.width / 2);\n        }\n        else {\n            x = pos.originX == 'start' ? originStartX : originEndX;\n        }\n        var /** @type {?} */ y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x: x, y: y };\n    };\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected, as well as how much of the element\n     * would be inside the viewport at that position.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} viewportRect\n     * @param {?} pos\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, viewportRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n        // relative to the origin point.\n        var /** @type {?} */ overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n        }\n        var /** @type {?} */ overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        var /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n        var /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n        // How much the overlay would overflow at this position, on each side.\n        var /** @type {?} */ leftOverflow = 0 - x;\n        var /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n        var /** @type {?} */ topOverflow = 0 - y;\n        var /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n        // Visible parts of the element on each axis.\n        var /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n        var /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n        // The area of the element that's within the viewport.\n        var /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n        var /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n        return { x: x, y: y, fitsInViewport: fitsInViewport, visibleArea: visibleArea };\n    };\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @param {?} overlay\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.getScrollableViewProperties = function (overlay) {\n        var _this = this;\n        var /** @type {?} */ originBounds = this._getElementBounds(this._origin);\n        var /** @type {?} */ overlayBounds = this._getElementBounds(overlay);\n        var /** @type {?} */ scrollContainerBounds = this.scrollables.map(function (scrollable) {\n            return _this._getElementBounds(scrollable.getElementRef().nativeElement);\n        });\n        return {\n            isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),\n            isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    };\n    /**\n     * Whether the element is completely out of the view of any of the containers.\n     * @param {?} elementBounds\n     * @param {?} containersBounds\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.isElementOutsideView = function (elementBounds, containersBounds) {\n        return containersBounds.some(function (containerBounds) {\n            var /** @type {?} */ outsideAbove = elementBounds.bottom < containerBounds.top;\n            var /** @type {?} */ outsideBelow = elementBounds.top > containerBounds.bottom;\n            var /** @type {?} */ outsideLeft = elementBounds.right < containerBounds.left;\n            var /** @type {?} */ outsideRight = elementBounds.left > containerBounds.right;\n            return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n        });\n    };\n    /**\n     * Whether the element is clipped by any of the containers.\n     * @param {?} elementBounds\n     * @param {?} containersBounds\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.isElementClipped = function (elementBounds, containersBounds) {\n        return containersBounds.some(function (containerBounds) {\n            var /** @type {?} */ clippedAbove = elementBounds.top < containerBounds.top;\n            var /** @type {?} */ clippedBelow = elementBounds.bottom > containerBounds.bottom;\n            var /** @type {?} */ clippedLeft = elementBounds.left < containerBounds.left;\n            var /** @type {?} */ clippedRight = elementBounds.right > containerBounds.right;\n            return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n        });\n    };\n    /**\n     * Physically positions the overlay element to the given coordinate.\n     * @param {?} element\n     * @param {?} overlayPoint\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._setElementPosition = function (element, overlayPoint) {\n        element.style.left = overlayPoint.x + 'px';\n        element.style.top = overlayPoint.y + 'px';\n    };\n    /**\n     * Returns the bounding positions of the provided element with respect to the viewport.\n     * @param {?} element\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getElementBounds = function (element) {\n        var /** @type {?} */ boundingClientRect = element.getBoundingClientRect();\n        return {\n            top: boundingClientRect.top,\n            right: boundingClientRect.left + boundingClientRect.width,\n            bottom: boundingClientRect.top + boundingClientRect.height,\n            left: boundingClientRect.left\n        };\n    };\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._subtractOverflows = function (length) {\n        var overflows = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            overflows[_i - 1] = arguments[_i];\n        }\n        return overflows.reduce(function (currentValue, currentOverflow) {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    };\n    return ConnectedPositionStrategy;\n}());\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nvar GlobalPositionStrategy = (function () {\n    function GlobalPositionStrategy() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?} value New top offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.top = function (value) {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?} value New left offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.left = function (value) {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?} value New bottom offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.bottom = function (value) {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?} value New right offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.right = function (value) {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param {?} value New width for the overlay\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.width = function (value) {\n        this._width = value;\n        // When the width is 100%, we should reset the `left` and the offset,\n        // in order to ensure that the element is flush against the viewport edge.\n        if (value === '100%') {\n            this.left('0px');\n        }\n        return this;\n    };\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param {?} value New height for the overlay\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.height = function (value) {\n        this._height = value;\n        // When the height is 100%, we should reset the `top` and the offset,\n        // in order to ensure that the element is flush against the viewport edge.\n        if (value === '100%') {\n            this.top('0px');\n        }\n        return this;\n    };\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {\n        if (offset === void 0) { offset = ''; }\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    };\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.centerVertically = function (offset) {\n        if (offset === void 0) { offset = ''; }\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    };\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     *\n     * @param {?} element Element to which to apply the CSS.\n     * @return {?} Resolved when the styles have been applied.\n     */\n    GlobalPositionStrategy.prototype.apply = function (element) {\n        if (!this._wrapper) {\n            this._wrapper = document.createElement('div');\n            this._wrapper.classList.add('cdk-global-overlay-wrapper');\n            element.parentNode.insertBefore(this._wrapper, element);\n            this._wrapper.appendChild(element);\n        }\n        var /** @type {?} */ styles = element.style;\n        var /** @type {?} */ parentStyles = ((element.parentNode)).style;\n        styles.position = this._cssPosition;\n        styles.marginTop = this._topOffset;\n        styles.marginLeft = this._leftOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        styles.width = this._width;\n        styles.height = this._height;\n        parentStyles.justifyContent = this._justifyContent;\n        parentStyles.alignItems = this._alignItems;\n        return Promise.resolve(null);\n    };\n    /**\n     * Removes the wrapper element from the DOM.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.dispose = function () {\n        if (this._wrapper && this._wrapper.parentNode) {\n            this._wrapper.parentNode.removeChild(this._wrapper);\n            this._wrapper = null;\n        }\n    };\n    return GlobalPositionStrategy;\n}());\n/**\n * Builder for overlay position strategy.\n */\nvar OverlayPositionBuilder = (function () {\n    /**\n     * @param {?} _viewportRuler\n     */\n    function OverlayPositionBuilder(_viewportRuler) {\n        this._viewportRuler = _viewportRuler;\n    }\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.global = function () {\n        return new GlobalPositionStrategy();\n    };\n    /**\n     * Creates a relative position strategy.\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n    };\n    return OverlayPositionBuilder;\n}());\nOverlayPositionBuilder.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nOverlayPositionBuilder.ctorParameters = function () { return [\n    { type: ViewportRuler, },\n]; };\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nvar OverlayContainer = (function () {\n    function OverlayContainer() {\n    }\n    Object.defineProperty(OverlayContainer.prototype, \"themeClass\", {\n        /**\n         * Base theme to be applied to all overlay-based components.\n         * @return {?}\n         */\n        get: function () { return this._themeClass; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._containerElement) {\n                this._containerElement.classList.remove(this._themeClass);\n                if (value) {\n                    this._containerElement.classList.add(value);\n                }\n            }\n            this._themeClass = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This method returns the overlay container element.  It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    OverlayContainer.prototype.getContainerElement = function () {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    };\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    OverlayContainer.prototype._createContainer = function () {\n        var /** @type {?} */ container = document.createElement('div');\n        container.classList.add('cdk-overlay-container');\n        if (this._themeClass) {\n            container.classList.add(this._themeClass);\n        }\n        document.body.appendChild(container);\n        this._containerElement = container;\n    };\n    return OverlayContainer;\n}());\nOverlayContainer.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nOverlayContainer.ctorParameters = function () { return []; };\n/**\n * @param {?} parentContainer\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer) {\n    return parentContainer || new OverlayContainer();\n}\nvar OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [[new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SkipSelf\"](), OverlayContainer]],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n/** Next overlay unique ID. */\nvar nextUniqueId = 0;\n/** The default state for newly created overlays. */\nvar defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nvar Overlay = (function () {\n    /**\n     * @param {?} _overlayContainer\n     * @param {?} _componentFactoryResolver\n     * @param {?} _positionBuilder\n     * @param {?} _appRef\n     * @param {?} _injector\n     * @param {?} _ngZone\n     */\n    function Overlay(_overlayContainer, _componentFactoryResolver, _positionBuilder, _appRef, _injector, _ngZone) {\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n    }\n    /**\n     * Creates an overlay.\n     * @param {?=} state State to apply to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    Overlay.prototype.create = function (state$$1) {\n        if (state$$1 === void 0) { state$$1 = defaultState; }\n        return this._createOverlayRef(this._createPaneElement(), state$$1);\n    };\n    /**\n     * Returns a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?}\n     */\n    Overlay.prototype.position = function () {\n        return this._positionBuilder;\n    };\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @return {?} Newly-created pane element\n     */\n    Overlay.prototype._createPaneElement = function () {\n        var /** @type {?} */ pane = document.createElement('div');\n        pane.id = \"cdk-overlay-\" + nextUniqueId++;\n        pane.classList.add('cdk-overlay-pane');\n        this._overlayContainer.getContainerElement().appendChild(pane);\n        return pane;\n    };\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal host.\n     * @return {?} A portal host for the given DOM element.\n     */\n    Overlay.prototype._createPortalHost = function (pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    };\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param {?} pane DOM element for the overlay\n     * @param {?} state\n     * @return {?}\n     */\n    Overlay.prototype._createOverlayRef = function (pane, state$$1) {\n        return new OverlayRef(this._createPortalHost(pane), pane, state$$1, this._ngZone);\n    };\n    return Overlay;\n}());\nOverlay.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nOverlay.ctorParameters = function () { return [\n    { type: OverlayContainer, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ComponentFactoryResolver\"], },\n    { type: OverlayPositionBuilder, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ApplicationRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injector\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n]; };\n/** Providers for Overlay and its related injectables. */\nvar OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    VIEWPORT_RULER_PROVIDER,\n    SCROLL_DISPATCHER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n];\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nvar Scrollable = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _scroll\n     * @param {?} _ngZone\n     * @param {?} _renderer\n     */\n    function Scrollable(_elementRef, _scroll, _ngZone, _renderer) {\n        this._elementRef = _elementRef;\n        this._scroll = _scroll;\n        this._ngZone = _ngZone;\n        this._renderer = _renderer;\n        this._elementScrolled = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n    }\n    /**\n     * @return {?}\n     */\n    Scrollable.prototype.ngOnInit = function () {\n        var _this = this;\n        this._scrollListener = this._ngZone.runOutsideAngular(function () {\n            return _this._renderer.listen(_this.getElementRef().nativeElement, 'scroll', function (event) {\n                _this._elementScrolled.next(event);\n            });\n        });\n        this._scroll.register(this);\n    };\n    /**\n     * @return {?}\n     */\n    Scrollable.prototype.ngOnDestroy = function () {\n        this._scroll.deregister(this);\n        if (this._scrollListener) {\n            this._scrollListener();\n            this._scrollListener = null;\n        }\n    };\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    Scrollable.prototype.elementScrolled = function () {\n        return this._elementScrolled.asObservable();\n    };\n    /**\n     * @return {?}\n     */\n    Scrollable.prototype.getElementRef = function () {\n        return this._elementRef;\n    };\n    return Scrollable;\n}());\nScrollable.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[cdk-scrollable]'\n            },] },\n];\n/**\n * @nocollapse\n */\nScrollable.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: ScrollDispatcher, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n]; };\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nvar defaultPositionList = [\n    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n];\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nvar OverlayOrigin = (function () {\n    /**\n     * @param {?} elementRef\n     */\n    function OverlayOrigin(elementRef) {\n        this.elementRef = elementRef;\n    }\n    return OverlayOrigin;\n}());\nOverlayOrigin.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin]',\n                exportAs: 'cdkOverlayOrigin',\n            },] },\n];\n/**\n * @nocollapse\n */\nOverlayOrigin.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nvar ConnectedOverlayDirective = (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     * @param {?} _dir\n     */\n    function ConnectedOverlayDirective(_overlay, templateRef, viewContainerRef, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._open = false;\n        this._hasBackdrop = false;\n        this._offsetX = 0;\n        this._offsetY = 0;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    }\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"offsetX\", {\n        /**\n         * The offset in pixels for the overlay connection point on the x-axis\n         * @return {?}\n         */\n        get: function () {\n            return this._offsetX;\n        },\n        /**\n         * @param {?} offsetX\n         * @return {?}\n         */\n        set: function (offsetX) {\n            this._offsetX = offsetX;\n            if (this._position) {\n                this._position.withOffsetX(offsetX);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"offsetY\", {\n        /**\n         * The offset in pixels for the overlay connection point on the y-axis\n         * @return {?}\n         */\n        get: function () {\n            return this._offsetY;\n        },\n        /**\n         * @param {?} offsetY\n         * @return {?}\n         */\n        set: function (offsetY) {\n            this._offsetY = offsetY;\n            if (this._position) {\n                this._position.withOffsetY(offsetY);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"hasBackdrop\", {\n        /**\n         * Whether or not the overlay should attach a backdrop.\n         * @return {?}\n         */\n        get: function () {\n            return this._hasBackdrop;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._hasBackdrop = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"open\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._open;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            value ? this._attachOverlay() : this._detachOverlay();\n            this._open = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"overlayRef\", {\n        /**\n         * The associated overlay reference.\n         * @return {?}\n         */\n        get: function () {\n            return this._overlayRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"dir\", {\n        /**\n         * The element's layout direction.\n         * @return {?}\n         */\n        get: function () {\n            return this._dir ? this._dir.value : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype.ngOnDestroy = function () {\n        this._destroyOverlay();\n    };\n    /**\n     * Creates an overlay\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._createOverlay = function () {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n    };\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._buildConfig = function () {\n        var /** @type {?} */ overlayConfig = new OverlayState();\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        overlayConfig.hasBackdrop = this.hasBackdrop;\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        this._position = (this._createPositionStrategy());\n        overlayConfig.positionStrategy = this._position;\n        return overlayConfig;\n    };\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._createPositionStrategy = function () {\n        var /** @type {?} */ pos = this.positions[0];\n        var /** @type {?} */ originPoint = { originX: pos.originX, originY: pos.originY };\n        var /** @type {?} */ overlayPoint = { overlayX: pos.overlayX, overlayY: pos.overlayY };\n        var /** @type {?} */ strategy = this._overlay.position()\n            .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n            .withOffsetX(this.offsetX)\n            .withOffsetY(this.offsetY);\n        this._handlePositionChanges(strategy);\n        return strategy;\n    };\n    /**\n     * @param {?} strategy\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._handlePositionChanges = function (strategy) {\n        var _this = this;\n        for (var /** @type {?} */ i = 1; i < this.positions.length; i++) {\n            strategy.withFallbackPosition({ originX: this.positions[i].originX, originY: this.positions[i].originY }, { overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY });\n        }\n        this._positionSubscription =\n            strategy.onPositionChange.subscribe(function (pos) { return _this.positionChange.emit(pos); });\n    };\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._attachOverlay = function () {\n        var _this = this;\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        this._position.withDirection(this.dir);\n        this._overlayRef.getState().direction = this.dir;\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {\n                _this.backdropClick.emit();\n            });\n        }\n    };\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._detachOverlay = function () {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        if (this._backdropSubscription) {\n            this._backdropSubscription.unsubscribe();\n            this._backdropSubscription = null;\n        }\n    };\n    /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._destroyOverlay = function () {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        if (this._backdropSubscription) {\n            this._backdropSubscription.unsubscribe();\n        }\n        if (this._positionSubscription) {\n            this._positionSubscription.unsubscribe();\n        }\n    };\n    return ConnectedOverlayDirective;\n}());\nConnectedOverlayDirective.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay]',\n                exportAs: 'cdkConnectedOverlay'\n            },] },\n];\n/**\n * @nocollapse\n */\nConnectedOverlayDirective.ctorParameters = function () { return [\n    { type: Overlay, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"TemplateRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewContainerRef\"], },\n    { type: Dir, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n]; };\nConnectedOverlayDirective.propDecorators = {\n    'origin': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'positions': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'offsetX': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'offsetY': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'width': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'height': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'minWidth': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'minHeight': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'backdropClass': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'hasBackdrop': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'open': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'backdropClick': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'positionChange': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'attach': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'detach': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\nvar OverlayModule = (function () {\n    function OverlayModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    OverlayModule.forRoot = function () {\n        return {\n            ngModule: OverlayModule,\n            providers: [],\n        };\n    };\n    return OverlayModule;\n}());\nOverlayModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [PortalModule],\n                exports: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],\n                declarations: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],\n                providers: [OVERLAY_PROVIDERS],\n            },] },\n];\n/**\n * @nocollapse\n */\nOverlayModule.ctorParameters = function () { return []; };\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nvar hasV8BreakIterator = typeof (window) !== 'undefined' ?\n    (window.Intl && ((window.Intl)).v8BreakIterator) :\n    (typeof (Intl) !== 'undefined' && ((Intl)).v8BreakIterator);\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n * \\@docs-private\n */\nvar Platform = (function () {\n    function Platform() {\n        /** Layout Engines */\n        this.EDGE = /(edge)/i.test(navigator.userAgent);\n        this.TRIDENT = /(msie|trident)/i.test(navigator.userAgent);\n        // EdgeHTML and Trident mock Blink specific things and need to excluded from this check.\n        this.BLINK = !!(window.chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT;\n        // Webkit is part of the userAgent in EdgeHTML Blink and Trident, so we need to\n        // ensure that Webkit runs standalone and is not use as another engines base.\n        this.WEBKIT = /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n        /** Browsers and Platform Types */\n        this.IOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n        this.FIREFOX = /(firefox|minefield)/i.test(navigator.userAgent);\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n        this.ANDROID = /android/i.test(navigator.userAgent) && !this.TRIDENT;\n    }\n    return Platform;\n}());\nPlatform.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nPlatform.ctorParameters = function () { return []; };\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nvar InteractivityChecker = (function () {\n    /**\n     * @param {?} _platform\n     */\n    function InteractivityChecker(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is disabled.\n     */\n    InteractivityChecker.prototype.isDisabled = function (element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    };\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @param {?} element\n     * @return {?} Whether the element is visible.\n     */\n    InteractivityChecker.prototype.isVisible = function (element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    };\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is tabbable.\n     */\n    InteractivityChecker.prototype.isTabbable = function (element) {\n        var /** @type {?} */ frameElement = (getWindow(element).frameElement);\n        if (frameElement) {\n            var /** @type {?} */ frameType = frameElement && frameElement.nodeName.toLowerCase();\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n            if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n                return false;\n            }\n            // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n            if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        var /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n        var /** @type {?} */ tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe') {\n            // The frames may be tabbable depending on content, but it's not possibly to reliably\n            // investigate the content of the frames.\n            return false;\n        }\n        if (nodeName === 'audio') {\n            if (!element.hasAttribute('controls')) {\n                // By default an <audio> element without the controls enabled is not tabbable.\n                return false;\n            }\n            else if (this._platform.BLINK) {\n                // In Blink <audio controls> elements are always tabbable.\n                return true;\n            }\n        }\n        if (nodeName === 'video') {\n            if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n                // In Trident a <video> element without the controls enabled is not tabbable.\n                return false;\n            }\n            else if (this._platform.BLINK || this._platform.FIREFOX) {\n                // In Chrome and Firefox <video controls> elements are always tabbable.\n                return true;\n            }\n        }\n        if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n            // In all Blink and WebKit based browsers <object> elements are never tabbable.\n            return false;\n        }\n        // In iOS the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        return element.tabIndex >= 0;\n    };\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is focusable.\n     */\n    InteractivityChecker.prototype.isFocusable = function (element) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n    };\n    return InteractivityChecker;\n}());\nInteractivityChecker.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nInteractivityChecker.ctorParameters = function () { return [\n    { type: Platform, },\n]; };\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element) {\n    var /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n    return nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an <input type=\"hidden\">.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    var /** @type {?} */ tabIndex = element.getAttribute('tabindex');\n    // IE11 parses tabindex=\"\" as the value \"-32768\"\n    if (tabIndex == '-32768') {\n        return false;\n    }\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    var /** @type {?} */ tabIndex = parseInt(element.getAttribute('tabindex'), 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element) {\n    var /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n    var /** @type {?} */ inputType = nodeName === 'input' && ((element)).type;\n    return inputType === 'text'\n        || inputType === 'password'\n        || nodeName === 'select'\n        || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node) {\n    return node.ownerDocument.defaultView || window;\n}\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * NOTE: This class currently uses a very simple (naive) approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\n * This will be replaced with a more intelligent solution before the library is considered stable.\n */\nvar FocusTrap = (function () {\n    /**\n     * @param {?} _element\n     * @param {?} _checker\n     * @param {?} _ngZone\n     * @param {?=} deferAnchors\n     */\n    function FocusTrap(_element, _checker, _ngZone, deferAnchors) {\n        if (deferAnchors === void 0) { deferAnchors = false; }\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    Object.defineProperty(FocusTrap.prototype, \"enabled\", {\n        /**\n         * Whether the focus trap is active.\n         * @return {?}\n         */\n        get: function () { return this._enabled; },\n        /**\n         * @param {?} val\n         * @return {?}\n         */\n        set: function (val) {\n            this._enabled = val;\n            if (this._startAnchor && this._endAnchor) {\n                this._startAnchor.tabIndex = this._endAnchor.tabIndex = this._enabled ? 0 : -1;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroys the focus trap by cleaning up the anchors.\n     * @return {?}\n     */\n    FocusTrap.prototype.destroy = function () {\n        if (this._startAnchor && this._startAnchor.parentNode) {\n            this._startAnchor.parentNode.removeChild(this._startAnchor);\n        }\n        if (this._endAnchor && this._endAnchor.parentNode) {\n            this._endAnchor.parentNode.removeChild(this._endAnchor);\n        }\n        this._startAnchor = this._endAnchor = null;\n    };\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @return {?}\n     */\n    FocusTrap.prototype.attachAnchors = function () {\n        var _this = this;\n        if (!this._startAnchor) {\n            this._startAnchor = this._createAnchor();\n        }\n        if (!this._endAnchor) {\n            this._endAnchor = this._createAnchor();\n        }\n        this._ngZone.runOutsideAngular(function () {\n            _this._startAnchor.addEventListener('focus', function () { return _this.focusLastTabbableElement(); });\n            _this._endAnchor.addEventListener('focus', function () { return _this.focusFirstTabbableElement(); });\n            _this._element.parentNode.insertBefore(_this._startAnchor, _this._element);\n            _this._element.parentNode.insertBefore(_this._endAnchor, _this._element.nextSibling);\n        });\n    };\n    /**\n     * Waits for microtask queue to empty, then focuses\n     * the first tabbable element within the focus trap region.\n     * @return {?}\n     */\n    FocusTrap.prototype.focusFirstTabbableElementWhenReady = function () {\n        var _this = this;\n        this._ngZone.onMicrotaskEmpty.first().subscribe(function () { return _this.focusFirstTabbableElement(); });\n    };\n    /**\n     * Waits for microtask queue to empty, then focuses\n     * the last tabbable element within the focus trap region.\n     * @return {?}\n     */\n    FocusTrap.prototype.focusLastTabbableElementWhenReady = function () {\n        var _this = this;\n        this._ngZone.onMicrotaskEmpty.first().subscribe(function () { return _this.focusLastTabbableElement(); });\n    };\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @return {?}\n     */\n    FocusTrap.prototype.focusFirstTabbableElement = function () {\n        var /** @type {?} */ redirectToElement = (this._element.querySelector('[cdk-focus-start]')) ||\n            this._getFirstTabbableElement(this._element);\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n    };\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @return {?}\n     */\n    FocusTrap.prototype.focusLastTabbableElement = function () {\n        var /** @type {?} */ focusTargets = this._element.querySelectorAll('[cdk-focus-end]');\n        var /** @type {?} */ redirectToElement = null;\n        if (focusTargets.length) {\n            redirectToElement = (focusTargets[focusTargets.length - 1]);\n        }\n        else {\n            redirectToElement = this._getLastTabbableElement(this._element);\n        }\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n    };\n    /**\n     * Get the first tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n    FocusTrap.prototype._getFirstTabbableElement = function (root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n        // back to `childNodes` which includes text nodes, comments etc.\n        var /** @type {?} */ children = root.children || root.childNodes;\n        for (var /** @type {?} */ i = 0; i < children.length; i++) {\n            var /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n                this._getFirstTabbableElement(/** @type {?} */ (children[i])) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    };\n    /**\n     * Get the last tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n    FocusTrap.prototype._getLastTabbableElement = function (root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        var /** @type {?} */ children = root.children || root.childNodes;\n        for (var /** @type {?} */ i = children.length - 1; i >= 0; i--) {\n            var /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n                this._getLastTabbableElement(/** @type {?} */ (children[i])) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    };\n    /**\n     * Creates an anchor element.\n     * @return {?}\n     */\n    FocusTrap.prototype._createAnchor = function () {\n        var /** @type {?} */ anchor = document.createElement('div');\n        anchor.tabIndex = this._enabled ? 0 : -1;\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        return anchor;\n    };\n    return FocusTrap;\n}());\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nvar FocusTrapFactory = (function () {\n    /**\n     * @param {?} _checker\n     * @param {?} _ngZone\n     */\n    function FocusTrapFactory(_checker, _ngZone) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n    }\n    /**\n     * @param {?} element\n     * @param {?=} deferAnchors\n     * @return {?}\n     */\n    FocusTrapFactory.prototype.create = function (element, deferAnchors) {\n        if (deferAnchors === void 0) { deferAnchors = false; }\n        return new FocusTrap(element, this._checker, this._ngZone, deferAnchors);\n    };\n    return FocusTrapFactory;\n}());\nFocusTrapFactory.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nFocusTrapFactory.ctorParameters = function () { return [\n    { type: InteractivityChecker, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n]; };\n/**\n * Directive for trapping focus within a region.\n * @deprecated\n */\nvar FocusTrapDeprecatedDirective = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     */\n    function FocusTrapDeprecatedDirective(_elementRef, _focusTrapFactory) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    Object.defineProperty(FocusTrapDeprecatedDirective.prototype, \"disabled\", {\n        /**\n         * Whether the focus trap is active.\n         * @return {?}\n         */\n        get: function () { return !this.focusTrap.enabled; },\n        /**\n         * @param {?} val\n         * @return {?}\n         */\n        set: function (val) {\n            this.focusTrap.enabled = !coerceBooleanProperty(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FocusTrapDeprecatedDirective.prototype.ngOnDestroy = function () {\n        this.focusTrap.destroy();\n    };\n    /**\n     * @return {?}\n     */\n    FocusTrapDeprecatedDirective.prototype.ngAfterContentInit = function () {\n        this.focusTrap.attachAnchors();\n    };\n    return FocusTrapDeprecatedDirective;\n}());\nFocusTrapDeprecatedDirective.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'cdk-focus-trap',\n            },] },\n];\n/**\n * @nocollapse\n */\nFocusTrapDeprecatedDirective.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: FocusTrapFactory, },\n]; };\nFocusTrapDeprecatedDirective.propDecorators = {\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * Directive for trapping focus within a region.\n */\nvar FocusTrapDirective = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     */\n    function FocusTrapDirective(_elementRef, _focusTrapFactory) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    Object.defineProperty(FocusTrapDirective.prototype, \"enabled\", {\n        /**\n         * Whether the focus trap is active.\n         * @return {?}\n         */\n        get: function () { return this.focusTrap.enabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this.focusTrap.enabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FocusTrapDirective.prototype.ngOnDestroy = function () {\n        this.focusTrap.destroy();\n    };\n    /**\n     * @return {?}\n     */\n    FocusTrapDirective.prototype.ngAfterContentInit = function () {\n        this.focusTrap.attachAnchors();\n    };\n    return FocusTrapDirective;\n}());\nFocusTrapDirective.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[cdkTrapFocus]',\n                exportAs: 'cdkTrapFocus',\n            },] },\n];\n/**\n * @nocollapse\n */\nFocusTrapDirective.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: FocusTrapFactory, },\n]; };\nFocusTrapDirective.propDecorators = {\n    'enabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['cdkTrapFocus',] },],\n};\nvar LIVE_ANNOUNCER_ELEMENT_TOKEN = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"OpaqueToken\"]('liveAnnouncerElement');\nvar LiveAnnouncer = (function () {\n    /**\n     * @param {?} elementToken\n     */\n    function LiveAnnouncer(elementToken) {\n        // We inject the live element as `any` because the constructor signature cannot reference\n        // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n        // causes TypeScript to preserve the constructor signature types.\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    /**\n     * Announces a message to screenreaders.\n     * @param {?} message Message to be announced to the screenreader\n     * @param {?=} politeness The politeness of the announcer element\n     * @return {?}\n     */\n    LiveAnnouncer.prototype.announce = function (message, politeness) {\n        var _this = this;\n        if (politeness === void 0) { politeness = 'polite'; }\n        this._liveElement.textContent = '';\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        setTimeout(function () { return _this._liveElement.textContent = message; }, 100);\n    };\n    /**\n     * Removes the aria-live element from the DOM.\n     * @return {?}\n     */\n    LiveAnnouncer.prototype._removeLiveElement = function () {\n        if (this._liveElement && this._liveElement.parentNode) {\n            this._liveElement.parentNode.removeChild(this._liveElement);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    LiveAnnouncer.prototype._createLiveElement = function () {\n        var /** @type {?} */ liveEl = document.createElement('div');\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        document.body.appendChild(liveEl);\n        return liveEl;\n    };\n    return LiveAnnouncer;\n}());\nLiveAnnouncer.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nLiveAnnouncer.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] },] },\n]; };\n/**\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_PROVIDER_FACTORY(parentDispatcher, liveElement) {\n    return parentDispatcher || new LiveAnnouncer(liveElement);\n}\nvar LIVE_ANNOUNCER_PROVIDER = {\n    // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n    provide: LiveAnnouncer,\n    deps: [\n        [new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SkipSelf\"](), LiveAnnouncer],\n        [new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"](LIVE_ANNOUNCER_ELEMENT_TOKEN)]\n    ],\n    useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\nvar supportedInputTypes;\n/**\n * @return {?} The input types supported by this browser.\n */\nfunction getSupportedInputTypes() {\n    if (!supportedInputTypes) {\n        var /** @type {?} */ featureTestInput_1 = document.createElement('input');\n        supportedInputTypes = new Set([\n            // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n            // first changing it to something else:\n            // The specified value \"\" does not conform to the required format.\n            // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n            'color',\n            'button',\n            'checkbox',\n            'date',\n            'datetime-local',\n            'email',\n            'file',\n            'hidden',\n            'image',\n            'month',\n            'number',\n            'password',\n            'radio',\n            'range',\n            'reset',\n            'search',\n            'submit',\n            'tel',\n            'text',\n            'time',\n            'url',\n            'week',\n        ].filter(function (value) {\n            featureTestInput_1.setAttribute('type', value);\n            return featureTestInput_1.type === value;\n        }));\n    }\n    return supportedInputTypes;\n}\nvar PlatformModule = (function () {\n    function PlatformModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    PlatformModule.forRoot = function () {\n        return {\n            ngModule: PlatformModule,\n            providers: [],\n        };\n    };\n    return PlatformModule;\n}());\nPlatformModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                providers: [Platform]\n            },] },\n];\n/**\n * @nocollapse\n */\nPlatformModule.ctorParameters = function () { return []; };\nvar A11yModule = (function () {\n    function A11yModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    A11yModule.forRoot = function () {\n        return {\n            ngModule: A11yModule,\n            providers: [],\n        };\n    };\n    return A11yModule;\n}());\nA11yModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [__WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"], PlatformModule],\n                declarations: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n                exports: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n                providers: [InteractivityChecker, FocusTrapFactory, LIVE_ANNOUNCER_PROVIDER]\n            },] },\n];\n/**\n * @nocollapse\n */\nA11yModule.ctorParameters = function () { return []; };\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nvar FullscreenOverlayContainer = (function (_super) {\n    __extends(FullscreenOverlayContainer, _super);\n    function FullscreenOverlayContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._createContainer = function () {\n        var _this = this;\n        _super.prototype._createContainer.call(this);\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(function () { return _this._adjustParentForFullscreenChange(); });\n    };\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = function () {\n        if (!this._containerElement) {\n            return;\n        }\n        var /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n        var /** @type {?} */ parent = fullscreenElement || document.body;\n        parent.appendChild(this._containerElement);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._addFullscreenChangeListener = function (fn) {\n        if (document.fullscreenEnabled) {\n            document.addEventListener('fullscreenchange', fn);\n        }\n        else if (document.webkitFullscreenEnabled) {\n            document.addEventListener('webkitfullscreenchange', fn);\n        }\n        else if (((document)).mozFullScreenEnabled) {\n            document.addEventListener('mozfullscreenchange', fn);\n        }\n        else if (((document)).msFullscreenEnabled) {\n            document.addEventListener('MSFullscreenChange', fn);\n        }\n    };\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype.getFullscreenElement = function () {\n        return document.fullscreenElement ||\n            document.webkitFullscreenElement ||\n            ((document)).mozFullScreenElement ||\n            ((document)).msFullscreenElement ||\n            null;\n    };\n    return FullscreenOverlayContainer;\n}(OverlayContainer));\nFullscreenOverlayContainer.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nFullscreenOverlayContainer.ctorParameters = function () { return []; };\nvar GestureConfig = (function (_super) {\n    __extends(GestureConfig, _super);\n    function GestureConfig() {\n        var _this = _super.call(this) || this;\n        _this._hammer = typeof window !== 'undefined' ? ((window)).Hammer : null;\n        /* List of new event names to add to the gesture support list */\n        _this.events = _this._hammer ? [\n            'longpress',\n            'slide',\n            'slidestart',\n            'slideend',\n            'slideright',\n            'slideleft'\n        ] : [];\n        if (!_this._hammer && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"isDevMode\"])()) {\n            console.warn('Could not find HammerJS. Certain Angular Material ' +\n                'components may not work correctly.');\n        }\n        return _this;\n    }\n    /**\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n     *\n     * Our gesture names come from the Material Design gestures spec:\n     * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n     *\n     * More information on default recognizers can be found in Hammer docs:\n     * http://hammerjs.github.io/recognizer-pan/\n     * http://hammerjs.github.io/recognizer-press/\n     *\n     * @param {?} element Element to which to assign the new HammerJS gestures.\n     * @return {?} Newly-created HammerJS instance.\n     */\n    GestureConfig.prototype.buildHammer = function (element) {\n        var /** @type {?} */ mc = new this._hammer(element);\n        // Default Hammer Recognizers.\n        var /** @type {?} */ pan = new this._hammer.Pan();\n        var /** @type {?} */ swipe = new this._hammer.Swipe();\n        var /** @type {?} */ press = new this._hammer.Press();\n        // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n        // Otherwise the previous `recognizeWith` will be dropped.\n        // TODO: Confirm threshold numbers with Material Design UX Team\n        var /** @type {?} */ slide = this._createRecognizer(pan, { event: 'slide', threshold: 0 }, swipe);\n        var /** @type {?} */ longpress = this._createRecognizer(press, { event: 'longpress', time: 500 });\n        // Overwrite the default `pan` event to use the swipe event.\n        pan.recognizeWith(swipe);\n        // Add customized gestures to Hammer manager\n        mc.add([swipe, press, pan, slide, longpress]);\n        return (mc);\n    };\n    /**\n     * Creates a new recognizer, without affecting the default recognizers of HammerJS\n     * @param {?} base\n     * @param {?} options\n     * @param {...?} inheritances\n     * @return {?}\n     */\n    GestureConfig.prototype._createRecognizer = function (base, options) {\n        var inheritances = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            inheritances[_i - 2] = arguments[_i];\n        }\n        var /** @type {?} */ recognizer = new ((base.constructor))(options);\n        inheritances.push(base);\n        inheritances.forEach(function (item) { return recognizer.recognizeWith(item); });\n        return recognizer;\n    };\n    return GestureConfig;\n}(__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__[\"HammerGestureConfig\"]));\nGestureConfig.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nGestureConfig.ctorParameters = function () { return []; };\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nvar SelectionModel = (function () {\n    /**\n     * @param {?=} _isMulti\n     * @param {?=} initiallySelectedValues\n     * @param {?=} _emitChanges\n     */\n    function SelectionModel(_isMulti, initiallySelectedValues, _emitChanges) {\n        if (_isMulti === void 0) { _isMulti = false; }\n        if (_emitChanges === void 0) { _emitChanges = true; }\n        var _this = this;\n        this._isMulti = _isMulti;\n        this._emitChanges = _emitChanges;\n        this._selection = new Set();\n        this._deselectedToEmit = [];\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.onChange = this._emitChanges ? new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]() : null;\n        if (initiallySelectedValues) {\n            if (_isMulti) {\n                initiallySelectedValues.forEach(function (value) { return _this._markSelected(value); });\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    Object.defineProperty(SelectionModel.prototype, \"selected\", {\n        /**\n         * Selected value(s).\n         * @return {?}\n         */\n        get: function () {\n            if (!this._selected) {\n                this._selected = Array.from(this._selection.values());\n            }\n            return this._selected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Selects a value or an array of values.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.select = function (value) {\n        this._markSelected(value);\n        this._emitChangeEvent();\n    };\n    /**\n     * Deselects a value or an array of values.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.deselect = function (value) {\n        this._unmarkSelected(value);\n        this._emitChangeEvent();\n    };\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.toggle = function (value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    };\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    SelectionModel.prototype.clear = function () {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    };\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.isSelected = function (value) {\n        return this._selection.has(value);\n    };\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    SelectionModel.prototype.isEmpty = function () {\n        return this._selection.size === 0;\n    };\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    SelectionModel.prototype.hasValue = function () {\n        return !this.isEmpty();\n    };\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    SelectionModel.prototype.sort = function (predicate) {\n        if (this._isMulti && this.selected) {\n            this._selected.sort(predicate);\n        }\n    };\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @return {?}\n     */\n    SelectionModel.prototype._emitChangeEvent = function () {\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            var /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n            this.onChange.next(eventData);\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n        this._selected = null;\n    };\n    /**\n     * Selects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype._markSelected = function (value) {\n        if (!this.isSelected(value)) {\n            if (!this._isMulti) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    };\n    /**\n     * Deselects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype._unmarkSelected = function (value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    };\n    /**\n     * Clears out the selected values.\n     * @return {?}\n     */\n    SelectionModel.prototype._unmarkAll = function () {\n        var _this = this;\n        if (!this.isEmpty()) {\n            this._selection.forEach(function (value) { return _this._unmarkSelected(value); });\n        }\n    };\n    return SelectionModel;\n}());\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nvar SelectionChange = (function () {\n    /**\n     * @param {?=} added\n     * @param {?=} removed\n     */\n    function SelectionChange(added, removed) {\n        this.added = added;\n        this.removed = removed;\n    }\n    return SelectionChange;\n}());\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nfunction isFakeMousedownFromScreenReader(event) {\n    return event.buttons === 0;\n}\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nvar UniqueSelectionDispatcher = (function () {\n    function UniqueSelectionDispatcher() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    UniqueSelectionDispatcher.prototype.notify = function (id, name) {\n        for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {\n            var listener = _a[_i];\n            listener(id, name);\n        }\n    };\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?}\n     */\n    UniqueSelectionDispatcher.prototype.listen = function (listener) {\n        this._listeners.push(listener);\n    };\n    return UniqueSelectionDispatcher;\n}());\nUniqueSelectionDispatcher.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nUniqueSelectionDispatcher.ctorParameters = function () { return []; };\n/**\n * @param {?} parentDispatcher\n * @return {?}\n */\nfunction UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(parentDispatcher) {\n    return parentDispatcher || new UniqueSelectionDispatcher();\n}\nvar UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n    // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n    provide: UniqueSelectionDispatcher,\n    deps: [[new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SkipSelf\"](), UniqueSelectionDispatcher]],\n    useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nvar TOUCH_BUFFER_MS = 650;\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nvar FocusOriginMonitor = (function () {\n    /**\n     * @param {?} _ngZone\n     */\n    function FocusOriginMonitor(_ngZone) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        this._origin = null;\n        this._windowFocused = false;\n        this._elementInfo = new WeakMap();\n        this._ngZone.runOutsideAngular(function () { return _this._registerDocumentEvents(); });\n    }\n    /**\n     * Monitors focus on an element and applies appropriate CSS classes.\n     * @param {?} element The element to monitor\n     * @param {?} renderer The renderer to use to apply CSS classes to the element.\n     * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n     * @return {?} An observable that emits when the focus state of the element changes.\n     *     When the element is blurred, null will be emitted.\n     */\n    FocusOriginMonitor.prototype.monitor = function (element, renderer, checkChildren) {\n        var _this = this;\n        // Check if we're already monitoring this element.\n        if (this._elementInfo.has(element)) {\n            var /** @type {?} */ info_1 = this._elementInfo.get(element);\n            info_1.checkChildren = checkChildren;\n            return info_1.subject.asObservable();\n        }\n        // Create monitored element info.\n        var /** @type {?} */ info = {\n            unlisten: null,\n            checkChildren: checkChildren,\n            renderer: renderer,\n            subject: new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]()\n        };\n        this._elementInfo.set(element, info);\n        // Start listening. We need to listen in capture phase since focus events don't bubble.\n        var /** @type {?} */ focusListener = function (event) { return _this._onFocus(event, element); };\n        var /** @type {?} */ blurListener = function (event) { return _this._onBlur(event, element); };\n        this._ngZone.runOutsideAngular(function () {\n            element.addEventListener('focus', focusListener, true);\n            element.addEventListener('blur', blurListener, true);\n        });\n        // Create an unlisten function for later.\n        info.unlisten = function () {\n            element.removeEventListener('focus', focusListener, true);\n            element.removeEventListener('blur', blurListener, true);\n        };\n        return info.subject.asObservable();\n    };\n    /**\n     * Stops monitoring an element and removes all focus classes.\n     * @param {?} element The element to stop monitoring.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype.stopMonitoring = function (element) {\n        var /** @type {?} */ elementInfo = this._elementInfo.get(element);\n        if (elementInfo) {\n            elementInfo.unlisten();\n            elementInfo.subject.complete();\n            this._setClasses(element, null);\n            this._elementInfo.delete(element);\n        }\n    };\n    /**\n     * Focuses the element via the specified focus origin.\n     * @param {?} element The element to focus.\n     * @param {?} renderer The renderer to use to invoke the focus method on the element.\n     * @param {?} origin The focus origin.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype.focusVia = function (element, renderer, origin) {\n        this._setOriginForCurrentEventQueue(origin);\n        renderer.invokeElementMethod(element, 'focus');\n    };\n    /**\n     * Register necessary event listeners on the document and window.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._registerDocumentEvents = function () {\n        var _this = this;\n        // Note: we listen to events in the capture phase so we can detect them even if the user stops\n        // propagation.\n        // On keydown record the origin and clear any touch event that may be in progress.\n        document.addEventListener('keydown', function () {\n            _this._lastTouchTarget = null;\n            _this._setOriginForCurrentEventQueue('keyboard');\n        }, true);\n        // On mousedown record the origin only if there is not touch target, since a mousedown can\n        // happen as a result of a touch event.\n        document.addEventListener('mousedown', function () {\n            if (!_this._lastTouchTarget) {\n                _this._setOriginForCurrentEventQueue('mouse');\n            }\n        }, true);\n        // When the touchstart event fires the focus event is not yet in the event queue. This means\n        // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n        // see if a focus happens.\n        document.addEventListener('touchstart', function (event) {\n            if (_this._touchTimeout != null) {\n                clearTimeout(_this._touchTimeout);\n            }\n            _this._lastTouchTarget = event.target;\n            _this._touchTimeout = setTimeout(function () { return _this._lastTouchTarget = null; }, TOUCH_BUFFER_MS);\n        }, true);\n        // Make a note of when the window regains focus, so we can restore the origin info for the\n        // focused element.\n        window.addEventListener('focus', function () {\n            _this._windowFocused = true;\n            setTimeout(function () { return _this._windowFocused = false; }, 0);\n        });\n    };\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param {?} element The element to update the classes on.\n     * @param {?} origin The focus origin.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._setClasses = function (element, origin) {\n        var /** @type {?} */ renderer = this._elementInfo.get(element).renderer;\n        renderer.setElementClass(element, 'cdk-focused', !!origin);\n        renderer.setElementClass(element, 'cdk-touch-focused', origin === 'touch');\n        renderer.setElementClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n        renderer.setElementClass(element, 'cdk-mouse-focused', origin === 'mouse');\n        renderer.setElementClass(element, 'cdk-program-focused', origin === 'program');\n    };\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @param {?} origin The origin to set.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._setOriginForCurrentEventQueue = function (origin) {\n        var _this = this;\n        this._origin = origin;\n        setTimeout(function () { return _this._origin = null; }, 0);\n    };\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param {?} event The focus event to check.\n     * @return {?} Whether the event was caused by a touch.\n     */\n    FocusOriginMonitor.prototype._wasCausedByTouch = function (event) {\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n        // Consider the following dom structure:\n        //\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\n        //   <div #child (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // If the user touches the #child element and the #parent is programmatically focused as a\n        // result, this code will still consider it to have been caused by the touch event and will\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n        // relatively small edge-case that can be worked around by using\n        // focusVia(parentEl, renderer,  'program') to focus the parent element.\n        //\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\n        // for the first focus event after the touchstart, and then the first blur event after that\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\n        // touchstart.\n        var /** @type {?} */ focusTarget = event.target;\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    };\n    /**\n     * Handles focus events on a registered element.\n     * @param {?} event The focus event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._onFocus = function (event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        if (!this._elementInfo.get(element).checkChildren && element !== event.target) {\n            return;\n        }\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\n        //    the element from before the window blurred.\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n        // 3) The element was programmatically focused, in which case we should mark the origin as\n        //    'program'.\n        if (!this._origin) {\n            if (this._windowFocused && this._lastFocusOrigin) {\n                this._origin = this._lastFocusOrigin;\n            }\n            else if (this._wasCausedByTouch(event)) {\n                this._origin = 'touch';\n            }\n            else {\n                this._origin = 'program';\n            }\n        }\n        this._setClasses(element, this._origin);\n        this._elementInfo.get(element).subject.next(this._origin);\n        this._lastFocusOrigin = this._origin;\n        this._origin = null;\n    };\n    /**\n     * Handles blur events on a registered element.\n     * @param {?} event The blur event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._onBlur = function (event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        if (this._elementInfo.get(element).checkChildren && event.relatedTarget instanceof Node &&\n            element.contains(event.relatedTarget)) {\n            return;\n        }\n        this._setClasses(element, null);\n        this._elementInfo.get(element).subject.next(null);\n    };\n    return FocusOriginMonitor;\n}());\nFocusOriginMonitor.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nFocusOriginMonitor.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n]; };\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nvar CdkMonitorFocus = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusOriginMonitor\n     * @param {?} renderer\n     */\n    function CdkMonitorFocus(_elementRef, _focusOriginMonitor, renderer) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        this.cdkFocusChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(function (origin) { return _this.cdkFocusChange.emit(origin); });\n    }\n    /**\n     * @return {?}\n     */\n    CdkMonitorFocus.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n    };\n    return CdkMonitorFocus;\n}());\nCdkMonitorFocus.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n            },] },\n];\n/**\n * @nocollapse\n */\nCdkMonitorFocus.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: FocusOriginMonitor, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n]; };\nCdkMonitorFocus.propDecorators = {\n    'cdkFocusChange': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @return {?}\n */\nfunction FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone) {\n    return parentDispatcher || new FocusOriginMonitor(ngZone);\n}\nvar FOCUS_ORIGIN_MONITOR_PROVIDER = {\n    // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n    provide: FocusOriginMonitor,\n    deps: [[new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SkipSelf\"](), FocusOriginMonitor], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"]],\n    useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nfunction applyCssTransform(element, transformValue) {\n    // It's important to trim the result, because the browser will ignore the set operation\n    // if the string contains only whitespace.\n    var /** @type {?} */ value = transformValue.trim();\n    element.style.transform = value;\n    element.style.webkitTransform = value;\n}\nvar StyleModule = (function () {\n    function StyleModule() {\n    }\n    return StyleModule;\n}());\nStyleModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                declarations: [CdkMonitorFocus],\n                exports: [CdkMonitorFocus],\n                providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],\n            },] },\n];\n/**\n * @nocollapse\n */\nStyleModule.ctorParameters = function () { return []; };\n/**\n * \\@docs-private\n */\nvar AnimationCurves = (function () {\n    function AnimationCurves() {\n    }\n    return AnimationCurves;\n}());\nAnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\nAnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\nAnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\nAnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n/**\n * \\@docs-private\n */\nvar AnimationDurations = (function () {\n    function AnimationDurations() {\n    }\n    return AnimationDurations;\n}());\nAnimationDurations.COMPLEX = '375ms';\nAnimationDurations.ENTERING = '225ms';\nAnimationDurations.EXITING = '195ms';\n/**\n * Coerces a data-bound value (typically a string) to a number.\n * @param {?} value\n * @param {?=} fallbackValue\n * @return {?}\n */\nfunction coerceNumberProperty(value, fallbackValue) {\n    if (fallbackValue === void 0) { fallbackValue = 0; }\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return isNaN(parseFloat(/** @type {?} */ (value))) || isNaN(Number(value)) ? fallbackValue : Number(value);\n}\nvar MdCoreModule = (function () {\n    function MdCoreModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdCoreModule.forRoot = function () {\n        return {\n            ngModule: MdCoreModule,\n            providers: [],\n        };\n    };\n    return MdCoreModule;\n}());\nMdCoreModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [\n                    MdLineModule,\n                    RtlModule,\n                    MdRippleModule,\n                    ObserveContentModule,\n                    PortalModule,\n                    OverlayModule,\n                    A11yModule,\n                    MdOptionModule,\n                    MdSelectionModule,\n                ],\n                exports: [\n                    MdLineModule,\n                    RtlModule,\n                    MdRippleModule,\n                    ObserveContentModule,\n                    PortalModule,\n                    OverlayModule,\n                    A11yModule,\n                    MdOptionModule,\n                    MdSelectionModule,\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCoreModule.ctorParameters = function () { return []; };\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nvar MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: __WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"NG_VALUE_ACCESSOR\"],\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return MdButtonToggleGroup; }),\n    multi: true\n};\nvar _uniqueIdCounter$1 = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nvar MdButtonToggleChange = (function () {\n    function MdButtonToggleChange() {\n    }\n    return MdButtonToggleChange;\n}());\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nvar MdButtonToggleGroup = (function () {\n    function MdButtonToggleGroup() {\n        this._value = null;\n        this._name = \"md-button-toggle-group-\" + _uniqueIdCounter$1++;\n        this._disabled = null;\n        this._vertical = false;\n        this._selected = null;\n        this._isInitialized = false;\n        this._controlValueAccessorChangeFn = function (value) { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this.onTouched = function () { };\n        /** Child button toggle buttons. */\n        this._buttonToggles = null;\n        this._change = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n    }\n    /**\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.ngAfterViewInit = function () {\n        this._isInitialized = true;\n    };\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"name\", {\n        /**\n         * `name` attribute for the underlying `input` element.\n         * @return {?}\n         */\n        get: function () {\n            return this._name;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._name = value;\n            this._updateButtonToggleNames();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"disabled\", {\n        /**\n         * Whether the toggle group is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"vertical\", {\n        /**\n         * Whether the toggle group is vertical.\n         * @return {?}\n         */\n        get: function () {\n            return this._vertical;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._vertical = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"value\", {\n        /**\n         * Value of the toggle group.\n         * @return {?}\n         */\n        get: function () {\n            return this._value;\n        },\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        set: function (newValue) {\n            if (this._value != newValue) {\n                this._value = newValue;\n                this._updateSelectedButtonToggleFromValue();\n                // Only emit a change event if the view is completely initialized.\n                // We don't want to emit a change event for the initial values.\n                if (this._isInitialized) {\n                    this._emitChangeEvent();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"selected\", {\n        /**\n         * Whether the toggle group is selected.\n         * @return {?}\n         */\n        get: function () {\n            return this._selected;\n        },\n        /**\n         * @param {?} selected\n         * @return {?}\n         */\n        set: function (selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n            if (selected && !selected.checked) {\n                selected.checked = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"change\", {\n        /**\n         * Event emitted when the group's value changes.\n         * @return {?}\n         */\n        get: function () {\n            return this._change.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype._updateButtonToggleNames = function () {\n        var _this = this;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(function (toggle) {\n                toggle.name = _this._name;\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype._updateSelectedButtonToggleFromValue = function () {\n        var _this = this;\n        var /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n        if (this._buttonToggles != null && !isAlreadySelected) {\n            var /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(function (buttonToggle) { return buttonToggle.value == _this._value; })[0];\n            if (matchingButtonToggle) {\n                this.selected = matchingButtonToggle;\n            }\n            else if (this.value == null) {\n                this.selected = null;\n                this._buttonToggles.forEach(function (buttonToggle) {\n                    buttonToggle.checked = false;\n                });\n            }\n        }\n    };\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdButtonToggleChange();\n        event.source = this._selected;\n        event.value = this._value;\n        this._controlValueAccessorChangeFn(event.value);\n        this._change.emit(event);\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * Registers a callback that will be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn On change callback function.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback that will be triggered when the control has been touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn On touch callback function.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the component should be disabled.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    return MdButtonToggleGroup;\n}());\nMdButtonToggleGroup.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n                providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n                host: {\n                    '[class.mat-button-toggle-group]': 'true',\n                    'role': 'radiogroup',\n                    '[class.mat-button-toggle-vertical]': 'vertical'\n                },\n                exportAs: 'mdButtonToggleGroup',\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButtonToggleGroup.ctorParameters = function () { return []; };\nMdButtonToggleGroup.propDecorators = {\n    '_buttonToggles': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return MdButtonToggle; }),] },],\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'vertical': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'value': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'selected': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'change': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nvar MdButtonToggleGroupMultiple = (function () {\n    function MdButtonToggleGroupMultiple() {\n        this._disabled = null;\n        this._vertical = false;\n    }\n    Object.defineProperty(MdButtonToggleGroupMultiple.prototype, \"disabled\", {\n        /**\n         * Whether the toggle group is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = (value != null && value !== false) ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroupMultiple.prototype, \"vertical\", {\n        /**\n         * Whether the toggle group is vertical.\n         * @return {?}\n         */\n        get: function () {\n            return this._vertical;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._vertical = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MdButtonToggleGroupMultiple;\n}());\nMdButtonToggleGroupMultiple.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n                exportAs: 'mdButtonToggleGroup',\n                host: {\n                    '[class.mat-button-toggle-group]': 'true',\n                    '[class.mat-button-toggle-vertical]': 'vertical'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButtonToggleGroupMultiple.ctorParameters = function () { return []; };\nMdButtonToggleGroupMultiple.propDecorators = {\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'vertical': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * Single button inside of a toggle group.\n */\nvar MdButtonToggle = (function () {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} toggleGroupMultiple\n     * @param {?} _buttonToggleDispatcher\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _focusOriginMonitor\n     */\n    function MdButtonToggle(toggleGroup, toggleGroupMultiple, _buttonToggleDispatcher, _renderer, _elementRef, _focusOriginMonitor) {\n        var _this = this;\n        this._buttonToggleDispatcher = _buttonToggleDispatcher;\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        this._checked = false;\n        this._disabled = null;\n        this._value = null;\n        this._isSingleSelector = null;\n        this._change = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        this.buttonToggleGroup = toggleGroup;\n        this.buttonToggleGroupMultiple = toggleGroupMultiple;\n        if (this.buttonToggleGroup) {\n            _buttonToggleDispatcher.listen(function (id, name) {\n                if (id != _this.id && name == _this.name) {\n                    _this.checked = false;\n                }\n            });\n            this._type = 'radio';\n            this.name = this.buttonToggleGroup.name;\n            this._isSingleSelector = true;\n        }\n        else {\n            // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n            // toggled on or off.\n            this._type = 'checkbox';\n            this._isSingleSelector = false;\n        }\n    }\n    Object.defineProperty(MdButtonToggle.prototype, \"inputId\", {\n        /**\n         * Unique ID for the underlying `input` element.\n         * @return {?}\n         */\n        get: function () {\n            return this.id + \"-input\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggle.prototype, \"checked\", {\n        /**\n         * Whether the button is checked.\n         * @return {?}\n         */\n        get: function () {\n            return this._checked;\n        },\n        /**\n         * @param {?} newCheckedState\n         * @return {?}\n         */\n        set: function (newCheckedState) {\n            if (this._isSingleSelector) {\n                if (newCheckedState) {\n                    // Notify all button toggles with the same name (in the same group) to un-check.\n                    this._buttonToggleDispatcher.notify(this.id, this.name);\n                }\n            }\n            this._checked = newCheckedState;\n            if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n                this.buttonToggleGroup.selected = this;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggle.prototype, \"value\", {\n        /**\n         * MdButtonToggleGroup reads this to assign its own value.\n         * @return {?}\n         */\n        get: function () {\n            return this._value;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._value != value) {\n                if (this.buttonToggleGroup != null && this.checked) {\n                    this.buttonToggleGroup.value = value;\n                }\n                this._value = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggle.prototype, \"disabled\", {\n        /**\n         * Whether the button is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n                (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = (value != null && value !== false) ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggle.prototype, \"change\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._change.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdButtonToggle.prototype.ngOnInit = function () {\n        if (this.id == null) {\n            this.id = \"md-button-toggle-\" + _uniqueIdCounter$1++;\n        }\n        if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n            this._checked = true;\n        }\n        this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n    };\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n    MdButtonToggle.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');\n    };\n    /**\n     * Toggle the state of the current button toggle.\n     * @return {?}\n     */\n    MdButtonToggle.prototype._toggle = function () {\n        this.checked = !this.checked;\n    };\n    /**\n     * Checks the button toggle due to an interaction with the underlying native input.\n     * @param {?} event\n     * @return {?}\n     */\n    MdButtonToggle.prototype._onInputChange = function (event) {\n        event.stopPropagation();\n        if (this._isSingleSelector) {\n            // Propagate the change one-way via the group, which will in turn mark this\n            // button toggle as checked.\n            this.checked = true;\n            this.buttonToggleGroup.selected = this;\n            this.buttonToggleGroup.onTouched();\n        }\n        else {\n            this._toggle();\n        }\n        // Emit a change event when the native input does.\n        this._emitChangeEvent();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdButtonToggle.prototype._onInputClick = function (event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /**\n     * Dispatch change event with current value.\n     * @return {?}\n     */\n    MdButtonToggle.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdButtonToggleChange();\n        event.source = this;\n        event.value = this._value;\n        this._change.emit(event);\n    };\n    return MdButtonToggle;\n}());\nMdButtonToggle.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-button-toggle, mat-button-toggle',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-button-toggle-label\\\"> <input #input class=\\\"mat-button-toggle-input cdk-visually-hidden\\\" [type]=\\\"_type\\\" [id]=\\\"inputId\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [name]=\\\"name\\\" (change)=\\\"_onInputChange($event)\\\" (click)=\\\"_onInputClick($event)\\\"> <div class=\\\"mat-button-toggle-label-content\\\"> <ng-content></ng-content> </div> </label> <!-- the touchstart handler prevents the overlay from capturing the initial tap on touch devices --> <div class=\\\"mat-button-toggle-focus-overlay\\\" (touchstart)=\\\"$event.preventDefault()\\\"></div> \",\n                styles: [\".mat-button-toggle-group{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);position:relative;display:inline-flex;flex-direction:row;border-radius:2px;cursor:pointer;white-space:nowrap}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle-disabled .mat-button-toggle-label-content{cursor:default}.mat-button-toggle{white-space:nowrap;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;position:relative}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;cursor:pointer}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;position:absolute;top:0;left:0;right:0;bottom:0} /*# sourceMappingURL=button-toggle.css.map */ \"],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                host: {\n                    '[class.mat-button-toggle]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButtonToggle.ctorParameters = function () { return [\n    { type: MdButtonToggleGroup, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n    { type: MdButtonToggleGroupMultiple, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n    { type: UniqueSelectionDispatcher, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: FocusOriginMonitor, },\n]; };\nMdButtonToggle.propDecorators = {\n    '_inputElement': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: ['input',] },],\n    'id': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"HostBinding\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'checked': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"HostBinding\"], args: ['class.mat-button-toggle-checked',] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'value': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"HostBinding\"], args: ['class.mat-button-toggle-disabled',] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'change': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\nvar MdButtonToggleModule = (function () {\n    function MdButtonToggleModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdButtonToggleModule.forRoot = function () {\n        return {\n            ngModule: MdButtonToggleModule,\n            providers: []\n        };\n    };\n    return MdButtonToggleModule;\n}());\nMdButtonToggleModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [__WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"FormsModule\"], CompatibilityModule],\n                exports: [\n                    MdButtonToggleGroup,\n                    MdButtonToggleGroupMultiple,\n                    MdButtonToggle,\n                    CompatibilityModule,\n                ],\n                declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n                providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, FocusOriginMonitor]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButtonToggleModule.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdButtonCssMatStyler = (function () {\n    function MdButtonCssMatStyler() {\n    }\n    return MdButtonCssMatStyler;\n}());\nMdButtonCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\n                host: {\n                    '[class.mat-button]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButtonCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdRaisedButtonCssMatStyler = (function () {\n    function MdRaisedButtonCssMatStyler() {\n    }\n    return MdRaisedButtonCssMatStyler;\n}());\nMdRaisedButtonCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'button[md-raised-button], button[mat-raised-button], ' +\n                    'a[md-raised-button], a[mat-raised-button]',\n                host: {\n                    '[class.mat-raised-button]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdRaisedButtonCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdIconButtonCssMatStyler = (function () {\n    function MdIconButtonCssMatStyler() {\n    }\n    return MdIconButtonCssMatStyler;\n}());\nMdIconButtonCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\n                host: {\n                    '[class.mat-icon-button]': 'true',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdIconButtonCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdFabCssMatStyler = (function () {\n    function MdFabCssMatStyler() {\n    }\n    return MdFabCssMatStyler;\n}());\nMdFabCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\n                host: {\n                    '[class.mat-fab]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdFabCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdMiniFabCssMatStyler = (function () {\n    function MdMiniFabCssMatStyler() {\n    }\n    return MdMiniFabCssMatStyler;\n}());\nMdMiniFabCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\n                host: {\n                    '[class.mat-mini-fab]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdMiniFabCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Material design button.\n */\nvar MdButton = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _focusOriginMonitor\n     */\n    function MdButton(_elementRef, _renderer, _focusOriginMonitor) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        /** Whether the button is round. */\n        this._isRoundButton = this._hasAttributeWithPrefix('fab', 'mini-fab');\n        /** Whether the button is icon button. */\n        this._isIconButton = this._hasAttributeWithPrefix('icon-button');\n        this._disableRipple = false;\n        this._disabled = null;\n        this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n    }\n    Object.defineProperty(MdButton.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect for this button is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this._disableRipple = coerceBooleanProperty(v); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButton.prototype, \"disabled\", {\n        /**\n         * Whether the button is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value) ? true : null; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdButton.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n    };\n    Object.defineProperty(MdButton.prototype, \"color\", {\n        /**\n         * The color of the button. Can be `primary`, `accent`, or `warn`.\n         * @return {?}\n         */\n        get: function () { return this._color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._updateColor(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdButton.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdButton.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this._renderer.setElementClass(this._getHostElement(), \"mat-\" + color, isAdd);\n        }\n    };\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n    MdButton.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n    };\n    /**\n     * @return {?}\n     */\n    MdButton.prototype._getHostElement = function () {\n        return this._elementRef.nativeElement;\n    };\n    /**\n     * @return {?}\n     */\n    MdButton.prototype._isRippleDisabled = function () {\n        return this.disableRipple || this.disabled;\n    };\n    /**\n     * Gets whether the button has one of the given attributes\n     * with either an 'md-' or 'mat-' prefix.\n     * @param {...?} unprefixedAttributeNames\n     * @return {?}\n     */\n    MdButton.prototype._hasAttributeWithPrefix = function () {\n        var _this = this;\n        var unprefixedAttributeNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            unprefixedAttributeNames[_i] = arguments[_i];\n        }\n        return unprefixedAttributeNames.some(function (suffix) {\n            var /** @type {?} */ el = _this._getHostElement();\n            return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n        });\n    };\n    return MdButton;\n}());\nMdButton.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'button[md-button], button[md-raised-button], button[md-icon-button],' +\n                    'button[md-fab], button[md-mini-fab],' +\n                    'button[mat-button], button[mat-raised-button], button[mat-icon-button],' +\n                    'button[mat-fab], button[mat-mini-fab]',\n                host: {\n                    '[disabled]': 'disabled',\n                },\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span> <div md-ripple *ngIf=\\\"!_isRippleDisabled()\\\" class=\\\"mat-button-ripple\\\" [class.mat-button-ripple-round]=\\\"_isRoundButton || _isIconButton\\\" [mdRippleCentered]=\\\"_isIconButton\\\" [mdRippleTrigger]=\\\"_getHostElement()\\\"></div> <!-- the touchstart handler prevents the overlay from capturing the initial tap on touch devices --> <div class=\\\"mat-button-focus-overlay\\\" (touchstart)=\\\"$event.preventDefault()\\\"></div> \",\n                styles: [\".mat-button,.mat-fab,.mat-icon-button,.mat-mini-fab,.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-weight:500;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px}[disabled].mat-button,[disabled].mat-fab,[disabled].mat-icon-button,[disabled].mat-mini-fab,[disabled].mat-raised-button{cursor:default}.cdk-keyboard-focused.mat-button .mat-button-focus-overlay,.cdk-keyboard-focused.mat-fab .mat-button-focus-overlay,.cdk-keyboard-focused.mat-icon-button .mat-button-focus-overlay,.cdk-keyboard-focused.mat-mini-fab .mat-button-focus-overlay,.cdk-keyboard-focused.mat-raised-button .mat-button-focus-overlay{opacity:1}.mat-button::-moz-focus-inner,.mat-fab::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-mini-fab::-moz-focus-inner,.mat-raised-button::-moz-focus-inner{border:0}.mat-fab,.mat-mini-fab,.mat-raised-button{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-fab:not([disabled]):active,.mat-mini-fab:not([disabled]):active,.mat-raised-button:not([disabled]):active{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}[disabled].mat-fab,[disabled].mat-mini-fab,[disabled].mat-raised-button{box-shadow:none}.mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{transition:none;opacity:0}.mat-button:hover .mat-button-focus-overlay{opacity:1}.mat-fab{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab:not([disabled]):active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-fab .mat-icon,.mat-fab i{padding:16px 0;line-height:24px}.mat-mini-fab{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab:not([disabled]):active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-mini-fab .mat-icon,.mat-mini-fab i{padding:8px 0;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button,.mat-icon-button,.mat-raised-button{color:currentColor}.mat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*{vertical-align:middle}.mat-button-focus-overlay,.mat-button-ripple{position:absolute;top:0;left:0;bottom:0;right:0}.mat-button-focus-overlay{background-color:rgba(0,0,0,.12);border-radius:inherit;pointer-events:none;opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}@media screen and (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:rgba(255,255,255,.5)}}.mat-button-ripple-round{border-radius:50%;z-index:1}@media screen and (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}} /*# sourceMappingURL=button.css.map */ \"],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectionStrategy\"].OnPush,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButton.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: FocusOriginMonitor, },\n]; };\nMdButton.propDecorators = {\n    'disableRipple': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'color': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * Raised Material design button.\n */\nvar MdAnchor = (function (_super) {\n    __extends(MdAnchor, _super);\n    /**\n     * @param {?} elementRef\n     * @param {?} renderer\n     * @param {?} focusOriginMonitor\n     */\n    function MdAnchor(elementRef, renderer, focusOriginMonitor) {\n        return _super.call(this, elementRef, renderer, focusOriginMonitor) || this;\n    }\n    Object.defineProperty(MdAnchor.prototype, \"tabIndex\", {\n        /**\n         * \\@docs-private\n         * @return {?}\n         */\n        get: function () {\n            return this.disabled ? -1 : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdAnchor.prototype, \"_isAriaDisabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.disabled ? 'true' : 'false';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdAnchor.prototype._haltDisabledEvents = function (event) {\n        // A disabled button shouldn't apply any actions\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    };\n    return MdAnchor;\n}(MdButton));\nMdAnchor.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: \"a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]\",\n                host: {\n                    '[attr.disabled]': 'disabled',\n                    '[attr.aria-disabled]': '_isAriaDisabled',\n                    '(click)': '_haltDisabledEvents($event)',\n                },\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span> <div md-ripple *ngIf=\\\"!_isRippleDisabled()\\\" class=\\\"mat-button-ripple\\\" [class.mat-button-ripple-round]=\\\"_isRoundButton || _isIconButton\\\" [mdRippleCentered]=\\\"_isIconButton\\\" [mdRippleTrigger]=\\\"_getHostElement()\\\"></div> <!-- the touchstart handler prevents the overlay from capturing the initial tap on touch devices --> <div class=\\\"mat-button-focus-overlay\\\" (touchstart)=\\\"$event.preventDefault()\\\"></div> \",\n                styles: [\".mat-button,.mat-fab,.mat-icon-button,.mat-mini-fab,.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-weight:500;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px}[disabled].mat-button,[disabled].mat-fab,[disabled].mat-icon-button,[disabled].mat-mini-fab,[disabled].mat-raised-button{cursor:default}.cdk-keyboard-focused.mat-button .mat-button-focus-overlay,.cdk-keyboard-focused.mat-fab .mat-button-focus-overlay,.cdk-keyboard-focused.mat-icon-button .mat-button-focus-overlay,.cdk-keyboard-focused.mat-mini-fab .mat-button-focus-overlay,.cdk-keyboard-focused.mat-raised-button .mat-button-focus-overlay{opacity:1}.mat-button::-moz-focus-inner,.mat-fab::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-mini-fab::-moz-focus-inner,.mat-raised-button::-moz-focus-inner{border:0}.mat-fab,.mat-mini-fab,.mat-raised-button{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-fab:not([disabled]):active,.mat-mini-fab:not([disabled]):active,.mat-raised-button:not([disabled]):active{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}[disabled].mat-fab,[disabled].mat-mini-fab,[disabled].mat-raised-button{box-shadow:none}.mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{transition:none;opacity:0}.mat-button:hover .mat-button-focus-overlay{opacity:1}.mat-fab{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab:not([disabled]):active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-fab .mat-icon,.mat-fab i{padding:16px 0;line-height:24px}.mat-mini-fab{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab:not([disabled]):active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-mini-fab .mat-icon,.mat-mini-fab i{padding:8px 0;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button,.mat-icon-button,.mat-raised-button{color:currentColor}.mat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*{vertical-align:middle}.mat-button-focus-overlay,.mat-button-ripple{position:absolute;top:0;left:0;bottom:0;right:0}.mat-button-focus-overlay{background-color:rgba(0,0,0,.12);border-radius:inherit;pointer-events:none;opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}@media screen and (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:rgba(255,255,255,.5)}}.mat-button-ripple-round{border-radius:50%;z-index:1}@media screen and (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}} /*# sourceMappingURL=button.css.map */ \"],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None\n            },] },\n];\n/**\n * @nocollapse\n */\nMdAnchor.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: FocusOriginMonitor, },\n]; };\nMdAnchor.propDecorators = {\n    'tabIndex': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"HostBinding\"], args: ['tabIndex',] },],\n};\nvar MdButtonModule = (function () {\n    function MdButtonModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdButtonModule.forRoot = function () {\n        return {\n            ngModule: MdButtonModule,\n            providers: []\n        };\n    };\n    return MdButtonModule;\n}());\nMdButtonModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [\n                    __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"],\n                    MdRippleModule,\n                    CompatibilityModule,\n                    StyleModule,\n                ],\n                exports: [\n                    MdButton,\n                    MdAnchor,\n                    CompatibilityModule,\n                    MdButtonCssMatStyler,\n                    MdRaisedButtonCssMatStyler,\n                    MdIconButtonCssMatStyler,\n                    MdFabCssMatStyler,\n                    MdMiniFabCssMatStyler,\n                ],\n                declarations: [\n                    MdButton,\n                    MdAnchor,\n                    MdButtonCssMatStyler,\n                    MdRaisedButtonCssMatStyler,\n                    MdIconButtonCssMatStyler,\n                    MdFabCssMatStyler,\n                    MdMiniFabCssMatStyler,\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButtonModule.ctorParameters = function () { return []; };\n/** Monotonically increasing integer used to auto-generate unique ids for checkbox components. */\nvar nextId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nvar MD_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: __WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"NG_VALUE_ACCESSOR\"],\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return MdCheckbox; }),\n    multi: true\n};\nvar TransitionCheckState = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n/**\n * Change event object emitted by MdCheckbox.\n */\nvar MdCheckboxChange = (function () {\n    function MdCheckboxChange() {\n    }\n    return MdCheckboxChange;\n}());\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nvar MdCheckbox = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _focusOriginMonitor\n     */\n    function MdCheckbox(_renderer, _elementRef, _changeDetectorRef, _focusOriginMonitor) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        /** A unique id for the checkbox. If one is not supplied, it is auto-generated. */\n        this.id = \"md-checkbox-\" + ++nextId;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        this.labelPosition = 'after';\n        this._disabled = false;\n        /** Tabindex value that is passed to the underlying input element. */\n        this.tabIndex = 0;\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        this.change = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        this.indeterminateChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * \\@docs-private\n         */\n        this.onTouched = function () { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = TransitionCheckState.Init;\n        this._checked = false;\n        this._indeterminate = false;\n        this._controlValueAccessorChangeFn = function (value) { };\n        this.color = 'accent';\n    }\n    Object.defineProperty(MdCheckbox.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect for this checkbox is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"inputId\", {\n        /**\n         * ID of the native input element inside `<md-checkbox>`\n         * @return {?}\n         */\n        get: function () {\n            return \"input-\" + this.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"required\", {\n        /**\n         * Whether the checkbox is required.\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"align\", {\n        /**\n         * Whether or not the checkbox should appear before or after the label.\n         * @deprecated\n         * @return {?}\n         */\n        get: function () {\n            // align refers to the checkbox relative to the label, while labelPosition refers to the\n            // label relative to the checkbox. As such, they are inverted.\n            return this.labelPosition == 'after' ? 'start' : 'end';\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this.labelPosition = (v == 'start') ? 'after' : 'before';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"disabled\", {\n        /**\n         * Whether the checkbox is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdCheckbox.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this._focusedSubscription = this._focusOriginMonitor\n            .monitor(this._inputElement.nativeElement, this._renderer, false)\n            .subscribe(function (focusOrigin) {\n            if (!_this._focusedRipple && (focusOrigin === 'keyboard' || focusOrigin === 'program')) {\n                _this._focusedRipple = _this._ripple.launch(0, 0, { persistent: true, centered: true });\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdCheckbox.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n    };\n    Object.defineProperty(MdCheckbox.prototype, \"checked\", {\n        /**\n         * Whether the checkbox is checked. Note that setting `checked` will immediately set\n         * `indeterminate` to false.\n         * @return {?}\n         */\n        get: function () {\n            return this._checked;\n        },\n        /**\n         * @param {?} checked\n         * @return {?}\n         */\n        set: function (checked) {\n            var _this = this;\n            if (checked != this.checked) {\n                if (this._indeterminate) {\n                    Promise.resolve().then(function () {\n                        _this._indeterminate = false;\n                        _this.indeterminateChange.emit(_this._indeterminate);\n                    });\n                }\n                this._checked = checked;\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"indeterminate\", {\n        /**\n         * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n         * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n         * checkable items. Note that whenever `checked` is set, indeterminate is immediately set to\n         * false. This differs from the web platform in that indeterminate state on native\n         * checkboxes is only remove when the user manually checks the checkbox (rather than setting the\n         * `checked` property programmatically). However, we feel that this behavior is more accommodating\n         * to the way consumers would envision using this component.\n         * @return {?}\n         */\n        get: function () {\n            return this._indeterminate;\n        },\n        /**\n         * @param {?} indeterminate\n         * @return {?}\n         */\n        set: function (indeterminate) {\n            var /** @type {?} */ changed = indeterminate != this._indeterminate;\n            this._indeterminate = indeterminate;\n            if (changed) {\n                if (this._indeterminate) {\n                    this._transitionCheckState(TransitionCheckState.Indeterminate);\n                }\n                else {\n                    this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n                }\n                this.indeterminateChange.emit(this._indeterminate);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"color\", {\n        /**\n         * The color of the button. Can be `primary`, `accent`, or `warn`.\n         * @return {?}\n         */\n        get: function () { return this._color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._updateColor(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdCheckbox.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdCheckbox.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this._renderer.setElementClass(this._elementRef.nativeElement, \"mat-\" + color, isAdd);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdCheckbox.prototype._isRippleDisabled = function () {\n        return this.disableRipple || this.disabled;\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    MdCheckbox.prototype.writeValue = function (value) {\n        this.checked = !!value;\n    };\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Function to be called on change.\n     * @return {?}\n     */\n    MdCheckbox.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback to be triggered when the control has been touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be triggered when the checkbox is touched.\n     * @return {?}\n     */\n    MdCheckbox.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the checkbox should be disabled.\n     * @return {?}\n     */\n    MdCheckbox.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * @param {?} newState\n     * @return {?}\n     */\n    MdCheckbox.prototype._transitionCheckState = function (newState) {\n        var /** @type {?} */ oldState = this._currentCheckState;\n        var /** @type {?} */ renderer = this._renderer;\n        var /** @type {?} */ elementRef = this._elementRef;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, false);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, true);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdCheckbox.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    };\n    /**\n     * Informs the component when we lose focus in order to style accordingly\n     * @return {?}\n     */\n    MdCheckbox.prototype._onInputBlur = function () {\n        this._removeFocusedRipple();\n        this.onTouched();\n    };\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    MdCheckbox.prototype.toggle = function () {\n        this.checked = !this.checked;\n    };\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    MdCheckbox.prototype._onInputClick = function (event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        this._removeFocusedRipple();\n        if (!this.disabled) {\n            this.toggle();\n            this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n    };\n    /**\n     * Focuses the checkbox.\n     * @return {?}\n     */\n    MdCheckbox.prototype.focus = function () {\n        this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'program');\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdCheckbox.prototype._onInteractionEvent = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    };\n    /**\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    MdCheckbox.prototype._getAnimationClassForCheckStateTransition = function (oldState, newState) {\n        var /** @type {?} */ animSuffix;\n        switch (oldState) {\n            case TransitionCheckState.Init:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === TransitionCheckState.Checked) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == TransitionCheckState.Indeterminate) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case TransitionCheckState.Unchecked:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case TransitionCheckState.Checked:\n                animSuffix = newState === TransitionCheckState.Unchecked ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case TransitionCheckState.Indeterminate:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n        }\n        return \"mat-checkbox-anim-\" + animSuffix;\n    };\n    /**\n     * Fades out the focused state ripple.\n     * @return {?}\n     */\n    MdCheckbox.prototype._removeFocusedRipple = function () {\n        if (this._focusedRipple) {\n            this._focusedRipple.fadeOut();\n            this._focusedRipple = null;\n        }\n    };\n    return MdCheckbox;\n}());\nMdCheckbox.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-checkbox, mat-checkbox',\n                template: \"<label class=\\\"mat-checkbox-layout\\\" #label> <div class=\\\"mat-checkbox-inner-container\\\"> <input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (blur)=\\\"_onInputBlur()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"> <div md-ripple *ngIf=\\\"!_isRippleDisabled()\\\" class=\\\"mat-checkbox-ripple\\\" [mdRippleTrigger]=\\\"label\\\" [mdRippleCentered]=\\\"true\\\"></div> <div class=\\\"mat-checkbox-frame\\\"></div> <div class=\\\"mat-checkbox-background\\\"> <svg version=\\\"1.1\\\" class=\\\"mat-checkbox-checkmark\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"> <path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/> </svg> <!-- Element for rendering the indeterminate state checkbox. --> <div class=\\\"mat-checkbox-mixedmark\\\"></div> </div> </div> <span class=\\\"mat-checkbox-label\\\"> <ng-content></ng-content> </span> </label> \",\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-checkmark,.mat-checkbox-frame{bottom:0;left:0;position:absolute;right:0;top:0}.mat-checkbox-checkmark,.mat-checkbox-mixedmark{width:calc(100% - 4px)}.mat-checkbox-background,.mat-checkbox-frame{border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-checkbox-label{cursor:pointer}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex}.mat-checkbox-inner-container{display:inline-block;height:20px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:20px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-layout .mat-checkbox-label{line-height:24px}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}.mat-checkbox-checkmark{width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.66667px}.mat-checkbox-mixedmark{height:2px;opacity:0;transform:scaleX(0) rotate(0)}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox-ripple{position:absolute;left:-15px;top:-15px;right:-15px;bottom:-15px;border-radius:50%;z-index:1;pointer-events:none} /*# sourceMappingURL=checkbox.css.map */ \"],\n                host: {\n                    '[class.mat-checkbox]': 'true',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                },\n                providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectionStrategy\"].OnPush\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCheckbox.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectorRef\"], },\n    { type: FocusOriginMonitor, },\n]; };\nMdCheckbox.propDecorators = {\n    'ariaLabel': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['aria-label',] },],\n    'ariaLabelledby': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['aria-labelledby',] },],\n    'id': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'disableRipple': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'required': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'align': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'labelPosition': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'tabIndex': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'change': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'indeterminateChange': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'value': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    '_inputElement': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: ['input',] },],\n    '_ripple': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: [MdRipple,] },],\n    'checked': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'indeterminate': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'color': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\nvar MdCheckboxModule = (function () {\n    function MdCheckboxModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdCheckboxModule.forRoot = function () {\n        return {\n            ngModule: MdCheckboxModule,\n            providers: []\n        };\n    };\n    return MdCheckboxModule;\n}());\nMdCheckboxModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [__WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"], MdRippleModule, CompatibilityModule],\n                exports: [MdCheckbox, CompatibilityModule],\n                declarations: [MdCheckbox],\n                providers: [FocusOriginMonitor]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCheckboxModule.ctorParameters = function () { return []; };\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nvar MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: __WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"NG_VALUE_ACCESSOR\"],\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return MdRadioGroup; }),\n    multi: true\n};\nvar _uniqueIdCounter$2 = 0;\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nvar MdRadioChange = (function () {\n    function MdRadioChange() {\n    }\n    return MdRadioChange;\n}());\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nvar MdRadioGroup = (function () {\n    function MdRadioGroup() {\n        this._value = null;\n        this._name = \"md-radio-group-\" + _uniqueIdCounter$2++;\n        this._disabled = false;\n        this._selected = null;\n        this._isInitialized = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = function (value) { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * \\@docs-private\n         */\n        this.onTouched = function () { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Child radio buttons. */\n        this._radios = null;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this.labelPosition = 'after';\n    }\n    Object.defineProperty(MdRadioGroup.prototype, \"name\", {\n        /**\n         * Name of the radio button group. All radio buttons inside this group will use this name.\n         * @return {?}\n         */\n        get: function () { return this._name; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._name = value;\n            this._updateRadioButtonNames();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioGroup.prototype, \"align\", {\n        /**\n         * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n         * @deprecated\n         * @return {?}\n         */\n        get: function () {\n            // align refers to the checkbox relative to the label, while labelPosition refers to the\n            // label relative to the checkbox. As such, they are inverted.\n            return this.labelPosition == 'after' ? 'start' : 'end';\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this.labelPosition = (v == 'start') ? 'after' : 'before';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioGroup.prototype, \"disabled\", {\n        /**\n         * Whether the radio button is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            // The presence of *any* disabled value makes the component disabled, *except* for false.\n            this._disabled = (value != null && value !== false) ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioGroup.prototype, \"value\", {\n        /**\n         * Value of the radio button.\n         * @return {?}\n         */\n        get: function () { return this._value; },\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        set: function (newValue) {\n            if (this._value != newValue) {\n                // Set this before proceeding to ensure no circular loop occurs with selection.\n                this._value = newValue;\n                this._updateSelectedRadioFromValue();\n                this._checkSelectedRadioButton();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdRadioGroup.prototype._checkSelectedRadioButton = function () {\n        if (this.selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    };\n    Object.defineProperty(MdRadioGroup.prototype, \"selected\", {\n        /**\n         * Whether the radio button is selected.\n         * @return {?}\n         */\n        get: function () { return this._selected; },\n        /**\n         * @param {?} selected\n         * @return {?}\n         */\n        set: function (selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n            this._checkSelectedRadioButton();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n    MdRadioGroup.prototype.ngAfterContentInit = function () {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MdRadioGroup.\n        this._isInitialized = true;\n    };\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n    MdRadioGroup.prototype._touch = function () {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioGroup.prototype._updateRadioButtonNames = function () {\n        var _this = this;\n        if (this._radios) {\n            this._radios.forEach(function (radio) {\n                radio.name = _this.name;\n            });\n        }\n    };\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @return {?}\n     */\n    MdRadioGroup.prototype._updateSelectedRadioFromValue = function () {\n        var _this = this;\n        // If the value already matches the selected radio, do nothing.\n        var /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(function (radio) {\n                radio.checked = _this.value == radio.value;\n                if (radio.checked) {\n                    _this._selected = radio;\n                }\n            });\n        }\n    };\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    MdRadioGroup.prototype._emitChangeEvent = function () {\n        if (this._isInitialized) {\n            var /** @type {?} */ event = new MdRadioChange();\n            event.source = this._selected;\n            event.value = this._value;\n            this.change.emit(event);\n        }\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    MdRadioGroup.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MdRadioGroup.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MdRadioGroup.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n    MdRadioGroup.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    return MdRadioGroup;\n}());\nMdRadioGroup.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-radio-group, mat-radio-group',\n                providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n                host: {\n                    'role': 'radiogroup',\n                    '[class.mat-radio-group]': 'true',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdRadioGroup.ctorParameters = function () { return []; };\nMdRadioGroup.propDecorators = {\n    'change': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    '_radios': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return MdRadioButton; }),] },],\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'align': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'labelPosition': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'value': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'selected': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * A radio-button. May be inside of\n */\nvar MdRadioButton = (function () {\n    /**\n     * @param {?} radioGroup\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _focusOriginMonitor\n     * @param {?} _radioDispatcher\n     */\n    function MdRadioButton(radioGroup, _elementRef, _renderer, _focusOriginMonitor, _radioDispatcher) {\n        var _this = this;\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        /** The unique ID for the radio button. */\n        this.id = \"md-radio-\" + _uniqueIdCounter$2++;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        this._checked = false;\n        this._value = null;\n        this.radioGroup = radioGroup;\n        _radioDispatcher.listen(function (id, name) {\n            if (id != _this.id && name == _this.name) {\n                _this.checked = false;\n            }\n        });\n    }\n    Object.defineProperty(MdRadioButton.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect for this radio button is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"checked\", {\n        /**\n         * Whether this radio button is checked.\n         * @return {?}\n         */\n        get: function () {\n            return this._checked;\n        },\n        /**\n         * @param {?} newCheckedState\n         * @return {?}\n         */\n        set: function (newCheckedState) {\n            if (this._checked != newCheckedState) {\n                this._checked = newCheckedState;\n                if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n                    this.radioGroup.selected = this;\n                }\n                else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n                    // When unchecking the selected radio button, update the selected radio\n                    // property on the group.\n                    this.radioGroup.selected = null;\n                }\n                if (newCheckedState) {\n                    // Notify all radio buttons with the same name to un-check.\n                    this._radioDispatcher.notify(this.id, this.name);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"value\", {\n        /**\n         * The value of this radio button.\n         * @return {?}\n         */\n        get: function () {\n            return this._value;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._value != value) {\n                this._value = value;\n                if (this.radioGroup != null) {\n                    if (!this.checked) {\n                        // Update checked when the value changed to match the radio group's value\n                        this.checked = this.radioGroup.value == value;\n                    }\n                    if (this.checked) {\n                        this.radioGroup.selected = this;\n                    }\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"align\", {\n        /**\n         * Whether or not the radio-button should appear before or after the label.\n         * @deprecated\n         * @return {?}\n         */\n        get: function () {\n            // align refers to the checkbox relative to the label, while labelPosition refers to the\n            // label relative to the checkbox. As such, they are inverted.\n            return this.labelPosition == 'after' ? 'start' : 'end';\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this.labelPosition = (v == 'start') ? 'after' : 'before';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"labelPosition\", {\n        /**\n         * Whether the label should appear after or before the radio button. Defaults to 'after'\n         * @return {?}\n         */\n        get: function () {\n            return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._labelPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"disabled\", {\n        /**\n         * Whether the radio button is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            // The presence of *any* disabled value makes the component disabled, *except* for false.\n            this._disabled = (value != null && value !== false) ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"inputId\", {\n        /**\n         * ID of the native input element inside `<md-radio-button>`\n         * @return {?}\n         */\n        get: function () {\n            return this.id + \"-input\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focuses the radio button.\n     * @return {?}\n     */\n    MdRadioButton.prototype.focus = function () {\n        this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'keyboard');\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype.ngOnInit = function () {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this._focusOriginMonitorSubscription = this._focusOriginMonitor\n            .monitor(this._inputElement.nativeElement, this._renderer, false)\n            .subscribe(function (focusOrigin) {\n            if (focusOrigin === 'keyboard' && !_this._focusedRippleRef) {\n                _this._focusedRippleRef = _this._ripple.launch(0, 0, { persistent: true, centered: true });\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n    };\n    /**\n     * Dispatch change event with current value.\n     * @return {?}\n     */\n    MdRadioButton.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdRadioChange();\n        event.source = this;\n        event.value = this._value;\n        this.change.emit(event);\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype._isRippleDisabled = function () {\n        return this.disableRipple || this.disabled;\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype._onInputBlur = function () {\n        if (this._focusedRippleRef) {\n            this._focusedRippleRef.fadeOut();\n            this._focusedRippleRef = null;\n        }\n        if (this.radioGroup) {\n            this.radioGroup._touch();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdRadioButton.prototype._onInputClick = function (event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n    MdRadioButton.prototype._onInputChange = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        var /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            this.radioGroup._touch();\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    };\n    return MdRadioButton;\n}());\nMdRadioButton.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-radio-button, mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content --> <!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. --> <label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label> <!-- The actual 'radio' part of the control. --> <div class=\\\"mat-radio-container\\\"> <div class=\\\"mat-radio-outer-circle\\\"></div> <div class=\\\"mat-radio-inner-circle\\\"></div> <div md-ripple *ngIf=\\\"!_isRippleDisabled()\\\" class=\\\"mat-radio-ripple\\\" [mdRippleTrigger]=\\\"label\\\" [mdRippleCentered]=\\\"true\\\"></div> </div> <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\" [id]=\\\"inputId\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [name]=\\\"name\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onInputChange($event)\\\" (blur)=\\\"_onInputBlur()\\\" (click)=\\\"_onInputClick($event)\\\"> <!-- The label content for radio control. --> <div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\"> <ng-content></ng-content> </div> </label> \",\n                styles: [\".mat-radio-button{display:inline-block;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif}.mat-radio-label{cursor:pointer;display:inline-flex;align-items:baseline;white-space:nowrap}.mat-radio-container{box-sizing:border-box;display:inline-block;height:20px;position:relative;width:20px;top:2px}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;transform:scale(0);width:20px}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}.mat-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-ripple{position:absolute;left:-15px;top:-15px;right:-15px;bottom:-15px;border-radius:50%;z-index:1;pointer-events:none} /*# sourceMappingURL=radio.css.map */ \"],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                host: {\n                    '[class.mat-radio-button]': 'true',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[attr.id]': 'id',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdRadioButton.ctorParameters = function () { return [\n    { type: MdRadioGroup, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: FocusOriginMonitor, },\n    { type: UniqueSelectionDispatcher, },\n]; };\nMdRadioButton.propDecorators = {\n    'id': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'ariaLabel': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['aria-label',] },],\n    'ariaLabelledby': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['aria-labelledby',] },],\n    'disableRipple': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'checked': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'value': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'align': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'labelPosition': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'change': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    '_ripple': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: [MdRipple,] },],\n    '_inputElement': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: ['input',] },],\n};\nvar MdRadioModule = (function () {\n    function MdRadioModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdRadioModule.forRoot = function () {\n        return {\n            ngModule: MdRadioModule,\n            providers: [],\n        };\n    };\n    return MdRadioModule;\n}());\nMdRadioModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [__WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"], MdRippleModule, CompatibilityModule],\n                exports: [MdRadioGroup, MdRadioButton, CompatibilityModule],\n                providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, FocusOriginMonitor],\n                declarations: [MdRadioGroup, MdRadioButton],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdRadioModule.ctorParameters = function () { return []; };\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nvar ListKeyManager = (function () {\n    /**\n     * @param {?} _items\n     */\n    function ListKeyManager(_items) {\n        this._items = _items;\n        this._activeItemIndex = null;\n        this._tabOut = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n        this._wrap = false;\n    }\n    /**\n     * Turns on wrapping mode, which ensures that the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     *\n     * @return {?} The ListKeyManager that the method was called on.\n     */\n    ListKeyManager.prototype.withWrap = function () {\n        this._wrap = true;\n        return this;\n    };\n    /**\n     * Sets the active item to the item at the index specified.\n     *\n     * @param {?} index The index of the item to be set as active.\n     * @return {?}\n     */\n    ListKeyManager.prototype.setActiveItem = function (index) {\n        this._activeItemIndex = index;\n        this._activeItem = this._items.toArray()[index];\n    };\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param {?} event Keyboard event to be used for determining which element should be active.\n     * @return {?}\n     */\n    ListKeyManager.prototype.onKeydown = function (event) {\n        switch (event.keyCode) {\n            case DOWN_ARROW:\n                this.setNextItemActive();\n                break;\n            case UP_ARROW:\n                this.setPreviousItemActive();\n                break;\n            case HOME:\n                this.setFirstItemActive();\n                break;\n            case END:\n                this.setLastItemActive();\n                break;\n            case TAB:\n                // Note that we shouldn't prevent the default action on tab.\n                this._tabOut.next(null);\n                return;\n            default:\n                return;\n        }\n        event.preventDefault();\n    };\n    Object.defineProperty(ListKeyManager.prototype, \"activeItemIndex\", {\n        /**\n         * Returns the index of the currently active item.\n         * @return {?}\n         */\n        get: function () {\n            return this._activeItemIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListKeyManager.prototype, \"activeItem\", {\n        /**\n         * Returns the currently active item.\n         * @return {?}\n         */\n        get: function () {\n            return this._activeItem;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the active item to the first enabled item in the list.\n     * @return {?}\n     */\n    ListKeyManager.prototype.setFirstItemActive = function () {\n        this._setActiveItemByIndex(0, 1);\n    };\n    /**\n     * Sets the active item to the last enabled item in the list.\n     * @return {?}\n     */\n    ListKeyManager.prototype.setLastItemActive = function () {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    };\n    /**\n     * Sets the active item to the next enabled item in the list.\n     * @return {?}\n     */\n    ListKeyManager.prototype.setNextItemActive = function () {\n        this._activeItemIndex === null ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    };\n    /**\n     * Sets the active item to a previous enabled item in the list.\n     * @return {?}\n     */\n    ListKeyManager.prototype.setPreviousItemActive = function () {\n        this._activeItemIndex === null && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    };\n    /**\n     * Allows setting of the activeItemIndex without any other effects.\n     * @param {?} index The new activeItemIndex.\n     * @return {?}\n     */\n    ListKeyManager.prototype.updateActiveItemIndex = function (index) {\n        this._activeItemIndex = index;\n    };\n    Object.defineProperty(ListKeyManager.prototype, \"tabOut\", {\n        /**\n         * Observable that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         * @return {?}\n         */\n        get: function () {\n            return this._tabOut.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     * @param {?} delta\n     * @param {?=} items\n     * @return {?}\n     */\n    ListKeyManager.prototype._setActiveItemByDelta = function (delta, items) {\n        if (items === void 0) { items = this._items.toArray(); }\n        this._wrap ? this._setActiveInWrapMode(delta, items)\n            : this._setActiveInDefaultMode(delta, items);\n    };\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     * @param {?} delta\n     * @param {?} items\n     * @return {?}\n     */\n    ListKeyManager.prototype._setActiveInWrapMode = function (delta, items) {\n        // when active item would leave menu, wrap to beginning or end\n        this._activeItemIndex =\n            (this._activeItemIndex + delta + items.length) % items.length;\n        // skip all disabled menu items recursively until an enabled one is reached\n        if (items[this._activeItemIndex].disabled) {\n            this._setActiveInWrapMode(delta, items);\n        }\n        else {\n            this.setActiveItem(this._activeItemIndex);\n        }\n    };\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     * @param {?} delta\n     * @param {?} items\n     * @return {?}\n     */\n    ListKeyManager.prototype._setActiveInDefaultMode = function (delta, items) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta, items);\n    };\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     * @param {?} index\n     * @param {?} fallbackDelta\n     * @param {?=} items\n     * @return {?}\n     */\n    ListKeyManager.prototype._setActiveItemByIndex = function (index, fallbackDelta, items) {\n        if (items === void 0) { items = this._items.toArray(); }\n        if (!items[index]) {\n            return;\n        }\n        while (items[index].disabled) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    };\n    return ListKeyManager;\n}());\nvar FocusKeyManager = (function (_super) {\n    __extends(FocusKeyManager, _super);\n    /**\n     * @param {?} items\n     */\n    function FocusKeyManager(items) {\n        return _super.call(this, items) || this;\n    }\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds focuses the newly active item.\n     * @param {?} index\n     * @return {?}\n     */\n    FocusKeyManager.prototype.setActiveItem = function (index) {\n        _super.prototype.setActiveItem.call(this, index);\n        this.activeItem.focus();\n    };\n    return FocusKeyManager;\n}(ListKeyManager));\n/**\n * The following are all the animations for the md-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material md-select animation.\n */\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nvar transformPlaceholder = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"a\" /* trigger */])('transformPlaceholder', [\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('floating-ltr', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({\n        top: '-22px',\n        left: '-2px',\n        transform: \"scale(0.75)\"\n    })),\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('floating-rtl', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({\n        top: '-22px',\n        left: '2px',\n        transform: \"scale(0.75)\"\n    })),\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('* => *', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])(\"400ms cubic-bezier(0.25, 0.8, 0.25, 1)\"))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n *\n * When the panel is attached to the DOM, it expands its width 32px, scales it up to\n * 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n *\n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nvar transformPanel = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"a\" /* trigger */])('transformPanel', [\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('showing', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({\n        opacity: 1,\n        minWidth: 'calc(100% + 32px)',\n        transform: \"scaleY(1)\"\n    })),\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('void => *', [\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({\n            opacity: 0,\n            minWidth: '100%',\n            transform: \"scaleY(0)\"\n        }),\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])(\"150ms cubic-bezier(0.25, 0.8, 0.25, 1)\")\n    ]),\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('* => void', [\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])('250ms 100ms linear', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ opacity: 0 }))\n    ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nvar fadeInContent = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"a\" /* trigger */])('fadeInContent', [\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('showing', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ opacity: 1 })),\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('void => showing', [\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ opacity: 0 }),\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])(\"150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)\")\n    ])\n]);\n/**\n * Exception thrown when attempting to change a select's `multiple` option after initialization.\n * \\@docs-private\n */\nvar MdSelectDynamicMultipleError = (function (_super) {\n    __extends(MdSelectDynamicMultipleError, _super);\n    function MdSelectDynamicMultipleError() {\n        return _super.call(this, 'Cannot change `multiple` mode of select after initialization.') || this;\n    }\n    return MdSelectDynamicMultipleError;\n}(MdError));\n/**\n * Exception thrown when attempting to assign a non-array value to a select in `multiple` mode.\n * Note that `undefined` and `null` are still valid values to allow for resetting the value.\n * \\@docs-private\n */\nvar MdSelectNonArrayValueError = (function (_super) {\n    __extends(MdSelectNonArrayValueError, _super);\n    function MdSelectNonArrayValueError() {\n        return _super.call(this, 'Cannot assign truthy non-array value to select in `multiple` mode.') || this;\n    }\n    return MdSelectNonArrayValueError;\n}(MdError));\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The fixed height of every option element. */\nvar SELECT_OPTION_HEIGHT = 48;\n/** The max height of the select's overlay panel */\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/** The max number of options visible at once in the select panel. */\nvar SELECT_MAX_OPTIONS_DISPLAYED = 5;\n/** The fixed height of the select's trigger element. */\nvar SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n * (SELECT_OPTION_HEIGHT (48) - SELECT_TRIGGER_HEIGHT (30)) / 2 = 9\n */\nvar SELECT_OPTION_HEIGHT_ADJUSTMENT = 9;\n/** The panel's padding on the x-axis */\nvar SELECT_PANEL_PADDING_X = 16;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nvar SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nvar SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nvar SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n */\nvar MdSelectChange = (function () {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    function MdSelectChange(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n    return MdSelectChange;\n}());\nvar MdSelect = (function () {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _viewportRuler\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _control\n     * @param {?} tabIndex\n     */\n    function MdSelect(_element, _renderer, _viewportRuler, _changeDetectorRef, _dir, _control, tabIndex) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._control = _control;\n        this._panelOpen = false;\n        this._required = false;\n        this._disabled = false;\n        this._scrollTop = 0;\n        this._multiple = false;\n        this._placeholderState = '';\n        /** View -> model callback called when value changes */\n        this._onChange = function (value) { };\n        /** View -> model callback called when select has been touched */\n        this._onTouched = function () { };\n        /** The IDs of child options to be passed to the aria-owns attribute. */\n        this._optionIds = '';\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /** Whether the panel's animation is done. */\n        this._panelDoneAnimating = false;\n        /**\n         * The x-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text when\n         * the panel opens. Will change based on LTR or RTL text direction.\n         */\n        this._offsetX = 0;\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        this._floatPlaceholder = 'auto';\n        /** Aria label of the select. If not specified, the placeholder will be used as label. */\n        this.ariaLabel = '';\n        /** Input that can be used to specify the `aria-labelledby` attribute. */\n        this.ariaLabelledby = '';\n        /** Event emitted when the select has been opened. */\n        this.onOpen = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when the select has been closed. */\n        this.onClose = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when the selected value has been changed by the user. */\n        this.change = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        if (this._control) {\n            this._control.valueAccessor = this;\n        }\n        this._tabIndex = parseInt(tabIndex) || 0;\n    }\n    Object.defineProperty(MdSelect.prototype, \"placeholder\", {\n        /**\n         * Placeholder to be shown if no value has been selected.\n         * @return {?}\n         */\n        get: function () { return this._placeholder; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            var _this = this;\n            this._placeholder = value;\n            // Must wait to record the trigger width to ensure placeholder width is included.\n            Promise.resolve(null).then(function () { return _this._triggerWidth = _this._getWidth(); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"disabled\", {\n        /**\n         * Whether the component is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"required\", {\n        /**\n         * Whether the component is required.\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"multiple\", {\n        /**\n         * Whether the user should be allowed to select multiple options.\n         * @return {?}\n         */\n        get: function () { return this._multiple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._selectionModel) {\n                throw new MdSelectDynamicMultipleError();\n            }\n            this._multiple = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"floatPlaceholder\", {\n        /**\n         * Whether to float the placeholder text.\n         * @return {?}\n         */\n        get: function () { return this._floatPlaceholder; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._floatPlaceholder = value || 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"tabIndex\", {\n        /**\n         * Tab index for the select element.\n         * @return {?}\n         */\n        get: function () { return this._disabled ? -1 : this._tabIndex; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (typeof value !== 'undefined') {\n                this._tabIndex = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"optionSelectionChanges\", {\n        /**\n         * Combined stream of all of the child options' change events.\n         * @return {?}\n         */\n        get: function () {\n            return __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"].merge.apply(__WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"], this.options.map(function (option) { return option.onSelectionChange; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSelect.prototype.ngOnInit = function () {\n        this._selectionModel = new SelectionModel(this.multiple, null, false);\n    };\n    /**\n     * @return {?}\n     */\n    MdSelect.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._initKeyManager();\n        this._changeSubscription = this.options.changes.startWith(null).subscribe(function () {\n            _this._resetOptions();\n            if (_this._control) {\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve(null).then(function () { return _this._setSelectionByValue(_this._control.value); });\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdSelect.prototype.ngOnDestroy = function () {\n        this._dropSubscriptions();\n        if (this._changeSubscription) {\n            this._changeSubscription.unsubscribe();\n        }\n        if (this._tabSubscription) {\n            this._tabSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    MdSelect.prototype.toggle = function () {\n        this.panelOpen ? this.close() : this.open();\n    };\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    MdSelect.prototype.open = function () {\n        if (this.disabled || !this.options.length) {\n            return;\n        }\n        this._calculateOverlayPosition();\n        this._placeholderState = this._floatPlaceholderState();\n        this._panelOpen = true;\n    };\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    MdSelect.prototype.close = function () {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            if (this._selectionModel.isEmpty()) {\n                this._placeholderState = '';\n            }\n            this._focusHost();\n        }\n    };\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    MdSelect.prototype.writeValue = function (value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    };\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    MdSelect.prototype.registerOnChange = function (fn) {\n        this._onChange = fn;\n    };\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    MdSelect.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    MdSelect.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    Object.defineProperty(MdSelect.prototype, \"panelOpen\", {\n        /**\n         * Whether or not the overlay panel is open.\n         * @return {?}\n         */\n        get: function () {\n            return this._panelOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"selected\", {\n        /**\n         * The currently selected option.\n         * @return {?}\n         */\n        get: function () {\n            return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"triggerValue\", {\n        /**\n         * The value displayed in the trigger.\n         * @return {?}\n         */\n        get: function () {\n            if (this._multiple) {\n                var /** @type {?} */ selectedOptions = this._selectionModel.selected.map(function (option) { return option.viewValue; });\n                if (this._isRtl()) {\n                    selectedOptions.reverse();\n                }\n                // TODO(crisbeto): delimiter should be configurable for proper localization.\n                return selectedOptions.join(', ');\n            }\n            return this._selectionModel.selected[0].viewValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    MdSelect.prototype._isRtl = function () {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    };\n    /**\n     * The width of the trigger element. This is necessary to match\n     * the overlay width to the trigger width.\n     * @return {?}\n     */\n    MdSelect.prototype._getWidth = function () {\n        return this._getTriggerRect().width;\n    };\n    /**\n     * Ensures the panel opens if activated by the keyboard.\n     * @param {?} event\n     * @return {?}\n     */\n    MdSelect.prototype._handleKeydown = function (event) {\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this.open();\n        }\n    };\n    /**\n     * When the panel element is finished transforming in (though not fading in), it\n     * emits an event and focuses an option if the panel is open.\n     * @return {?}\n     */\n    MdSelect.prototype._onPanelDone = function () {\n        if (this.panelOpen) {\n            this._focusCorrectOption();\n            this.onOpen.emit();\n        }\n        else {\n            this.onClose.emit();\n            this._panelDoneAnimating = false;\n        }\n    };\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     * @return {?}\n     */\n    MdSelect.prototype._onFadeInDone = function () {\n        this._panelDoneAnimating = this.panelOpen;\n    };\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    MdSelect.prototype._onBlur = function () {\n        if (!this.panelOpen) {\n            this._onTouched();\n        }\n    };\n    /**\n     * Sets the scroll position of the scroll container. This must be called after\n     * the overlay pane is attached or the scroll container element will not yet be\n     * present in the DOM.\n     * @return {?}\n     */\n    MdSelect.prototype._setScrollTop = function () {\n        var /** @type {?} */ scrollContainer = this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel');\n        scrollContainer.scrollTop = this._scrollTop;\n    };\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @param {?} value\n     * @return {?}\n     */\n    MdSelect.prototype._setSelectionByValue = function (value) {\n        var _this = this;\n        var /** @type {?} */ isArray = Array.isArray(value);\n        if (this.multiple && value && !isArray) {\n            throw new MdSelectNonArrayValueError();\n        }\n        if (isArray) {\n            this._clearSelection();\n            value.forEach(function (currentValue) { return _this._selectValue(currentValue); });\n            this._sortValues();\n        }\n        else if (!this._selectValue(value)) {\n            this._clearSelection();\n        }\n        this._setValueWidth();\n        if (this._selectionModel.isEmpty()) {\n            this._placeholderState = '';\n        }\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Finds and selects and option based on its value.\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    MdSelect.prototype._selectValue = function (value) {\n        var /** @type {?} */ correspondingOption = this.options.find(function (option) { return option.value === value; });\n        if (correspondingOption) {\n            correspondingOption.select();\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    };\n    /**\n     * Clears the select trigger and deselects every option in the list.\n     * @param {?=} skip Option that should not be deselected.\n     * @return {?}\n     */\n    MdSelect.prototype._clearSelection = function (skip) {\n        this._selectionModel.clear();\n        this.options.forEach(function (option) {\n            if (option !== skip) {\n                option.deselect();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdSelect.prototype._getTriggerRect = function () {\n        return this.trigger.nativeElement.getBoundingClientRect();\n    };\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @return {?}\n     */\n    MdSelect.prototype._initKeyManager = function () {\n        var _this = this;\n        this._keyManager = new FocusKeyManager(this.options);\n        this._tabSubscription = this._keyManager.tabOut.subscribe(function () { return _this.close(); });\n    };\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @return {?}\n     */\n    MdSelect.prototype._resetOptions = function () {\n        this._dropSubscriptions();\n        this._listenToOptions();\n        this._setOptionIds();\n        this._setOptionMultiple();\n    };\n    /**\n     * Listens to user-generated selection events on each option.\n     * @return {?}\n     */\n    MdSelect.prototype._listenToOptions = function () {\n        var _this = this;\n        this._optionSubscription = this.optionSelectionChanges\n            .filter(function (event) { return event.isUserInput; })\n            .subscribe(function (event) {\n            _this._onSelect(event.source);\n            _this._setValueWidth();\n            if (!_this.multiple) {\n                _this.close();\n            }\n        });\n    };\n    /**\n     * Invoked when an option is clicked.\n     * @param {?} option\n     * @return {?}\n     */\n    MdSelect.prototype._onSelect = function (option) {\n        var /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n        if (this.multiple) {\n            this._selectionModel.toggle(option);\n            wasSelected ? option.deselect() : option.select();\n            this._sortValues();\n        }\n        else {\n            this._clearSelection(option);\n            this._selectionModel.select(option);\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n    };\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @return {?}\n     */\n    MdSelect.prototype._sortValues = function () {\n        var _this = this;\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.options.forEach(function (option) {\n                if (option.selected) {\n                    _this._selectionModel.select(option);\n                }\n            });\n        }\n    };\n    /**\n     * Unsubscribes from all option subscriptions.\n     * @return {?}\n     */\n    MdSelect.prototype._dropSubscriptions = function () {\n        if (this._optionSubscription) {\n            this._optionSubscription.unsubscribe();\n            this._optionSubscription = null;\n        }\n    };\n    /**\n     * Emits change event to set the model value.\n     * @return {?}\n     */\n    MdSelect.prototype._propagateChanges = function () {\n        var /** @type {?} */ valueToEmit = Array.isArray(this.selected) ?\n            this.selected.map(function (option) { return option.value; }) :\n            this.selected.value;\n        this._onChange(valueToEmit);\n        this.change.emit(new MdSelectChange(this, valueToEmit));\n    };\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @return {?}\n     */\n    MdSelect.prototype._setOptionIds = function () {\n        this._optionIds = this.options.map(function (option) { return option.id; }).join(' ');\n    };\n    /**\n     * Sets the `multiple` property on each option. The promise is necessary\n     * in order to avoid Angular errors when modifying the property after init.\n     * TODO: there should be a better way of doing this.\n     * @return {?}\n     */\n    MdSelect.prototype._setOptionMultiple = function () {\n        var _this = this;\n        if (this.multiple) {\n            Promise.resolve(null).then(function () {\n                _this.options.forEach(function (option) { return option.multiple = _this.multiple; });\n            });\n        }\n    };\n    /**\n     * Must set the width of the selected option's value programmatically\n     * because it is absolutely positioned and otherwise will not clip\n     * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n     * @return {?}\n     */\n    MdSelect.prototype._setValueWidth = function () {\n        this._selectedValueWidth = this._triggerWidth - 13;\n    };\n    /**\n     * Focuses the selected item. If no option is selected, it will focus\n     * the first item instead.\n     * @return {?}\n     */\n    MdSelect.prototype._focusCorrectOption = function () {\n        if (this._selectionModel.isEmpty()) {\n            this._keyManager.setFirstItemActive();\n        }\n        else {\n            this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0]));\n        }\n    };\n    /**\n     * Focuses the host element when the panel closes.\n     * @return {?}\n     */\n    MdSelect.prototype._focusHost = function () {\n        this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');\n    };\n    /**\n     * Gets the index of the provided option in the option list.\n     * @param {?} option\n     * @return {?}\n     */\n    MdSelect.prototype._getOptionIndex = function (option) {\n        return this.options.reduce(function (result, current, index) {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    };\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @return {?}\n     */\n    MdSelect.prototype._calculateOverlayPosition = function () {\n        this._offsetX = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X : SELECT_PANEL_PADDING_X;\n        if (!this._isRtl()) {\n            this._offsetX *= -1;\n        }\n        var /** @type {?} */ panelHeight = Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n        var /** @type {?} */ scrollContainerHeight = this.options.length * SELECT_OPTION_HEIGHT;\n        // The farthest the panel can be scrolled before it hits the bottom\n        var /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n        if (this._selectionModel.hasValue()) {\n            var /** @type {?} */ selectedIndex = this._getOptionIndex(this._selectionModel.selected[0]);\n            // We must maintain a scroll buffer so the selected option will be scrolled to the\n            // center of the overlay panel rather than the top.\n            var /** @type {?} */ scrollBuffer = panelHeight / 2;\n            this._scrollTop = this._calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll);\n            this._offsetY = this._calculateOverlayOffset(selectedIndex, scrollBuffer, maxScroll);\n        }\n        else {\n            // If no option is selected, the panel centers on the first option. In this case,\n            // we must only adjust for the height difference between the option element\n            // and the trigger element, then multiply it by -1 to ensure the panel moves\n            // in the correct direction up the page.\n            this._offsetY = (SELECT_OPTION_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1;\n        }\n        this._checkOverlayWithinViewport(maxScroll);\n    };\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MdSelect.prototype._calculateOverlayScroll = function (selectedIndex, scrollBuffer, maxScroll) {\n        var /** @type {?} */ optionOffsetFromScrollTop = SELECT_OPTION_HEIGHT * selectedIndex;\n        var /** @type {?} */ halfOptionHeight = SELECT_OPTION_HEIGHT / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        var /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return clampValue(0, optimalScrollPosition, maxScroll);\n    };\n    /**\n     * Figures out the appropriate animation state for the placeholder.\n     * @return {?}\n     */\n    MdSelect.prototype._getPlaceholderAnimationState = function () {\n        if (this.floatPlaceholder === 'never') {\n            return '';\n        }\n        if (this.floatPlaceholder === 'always') {\n            return this._floatPlaceholderState();\n        }\n        return this._placeholderState;\n    };\n    /**\n     * Determines the CSS `visibility` of the placeholder element.\n     * @return {?}\n     */\n    MdSelect.prototype._getPlaceholderVisibility = function () {\n        return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ?\n            'visible' : 'hidden';\n    };\n    Object.defineProperty(MdSelect.prototype, \"_ariaLabel\", {\n        /**\n         * Returns the aria-label of the select component.\n         * @return {?}\n         */\n        get: function () {\n            // If an ariaLabelledby value has been set, the select should not overwrite the\n            // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n            return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MdSelect.prototype._calculateOverlayOffset = function (selectedIndex, scrollBuffer, maxScroll) {\n        var /** @type {?} */ optionOffsetFromPanelTop;\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * SELECT_OPTION_HEIGHT;\n        }\n        else if (this._scrollTop === maxScroll) {\n            var /** @type {?} */ firstDisplayedIndex = this.options.length - SELECT_MAX_OPTIONS_DISPLAYED;\n            var /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop =\n                selectedDisplayIndex * SELECT_OPTION_HEIGHT + SELECT_PANEL_PADDING_Y;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - SELECT_OPTION_HEIGHT / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height\n        // difference, multiplied by -1 to ensure that the overlay moves in the correct\n        // direction up the page.\n        return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n    };\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MdSelect.prototype._checkOverlayWithinViewport = function (maxScroll) {\n        var /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n        var /** @type {?} */ triggerRect = this._getTriggerRect();\n        var /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        var /** @type {?} */ bottomSpaceAvailable = viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        var /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n        var /** @type {?} */ totalPanelHeight = Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n        var /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    };\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    MdSelect.prototype._adjustPanelUp = function (panelHeightBottom, bottomSpaceAvailable) {\n        var /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = \"50% bottom 0px\";\n        }\n    };\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MdSelect.prototype._adjustPanelDown = function (panelHeightTop, topSpaceAvailable, maxScroll) {\n        var /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = \"50% top 0px\";\n            return;\n        }\n    };\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @return {?}\n     */\n    MdSelect.prototype._getOriginBasedOnOption = function () {\n        var /** @type {?} */ originY = Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_OPTION_HEIGHT / 2;\n        return \"50% \" + originY + \"px 0px\";\n    };\n    /**\n     * Figures out the floating placeholder state value.\n     * @return {?}\n     */\n    MdSelect.prototype._floatPlaceholderState = function () {\n        return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n    };\n    return MdSelect;\n}());\nMdSelect.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-select, mat-select',\n                template: \"<div class=\\\"mat-select-trigger\\\" cdk-overlay-origin (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger> <span class=\\\"mat-select-placeholder\\\" [class.mat-floating-placeholder]=\\\"_selectionModel.hasValue()\\\" [@transformPlaceholder]=\\\"_getPlaceholderAnimationState()\\\" [style.visibility]=\\\"_getPlaceholderVisibility()\\\" [style.width.px]=\\\"_selectedValueWidth\\\"> {{ placeholder }} </span> <span class=\\\"mat-select-value\\\" *ngIf=\\\"_selectionModel.hasValue()\\\"> <span class=\\\"mat-select-value-text\\\">{{ triggerValue }}</span> </span> <span class=\\\"mat-select-arrow\\\"></span> <span class=\\\"mat-select-underline\\\"></span> </div> <ng-template cdk-connected-overlay [origin]=\\\"origin\\\" [open]=\\\"panelOpen\\\" hasBackdrop (backdropClick)=\\\"close()\\\" backdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [positions]=\\\"_positions\\\" [minWidth]=\\\"_triggerWidth\\\" [offsetY]=\\\"_offsetY\\\" [offsetX]=\\\"_offsetX\\\" (attach)=\\\"_setScrollTop()\\\"> <div class=\\\"mat-select-panel\\\" [@transformPanel]=\\\"'showing'\\\" (@transformPanel.done)=\\\"_onPanelDone()\\\" (keydown)=\\\"_keyManager.onKeydown($event)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [class.mat-select-panel-done-animating]=\\\"_panelDoneAnimating\\\"> <div class=\\\"mat-select-content\\\" [@fadeInContent]=\\\"'showing'\\\" (@fadeInContent.done)=\\\"_onFadeInDone()\\\"> <ng-content></ng-content> </div> </div> </ng-template> \",\n                styles: [\".mat-select{display:inline-block;outline:0;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif}.mat-select-trigger{display:flex;align-items:center;height:30px;min-width:112px;cursor:pointer;position:relative;box-sizing:border-box;font-size:16px}[aria-disabled=true] .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-underline{position:absolute;bottom:0;left:0;right:0;height:1px}[aria-disabled=true] .mat-select-underline{background-image:linear-gradient(to right,rgba(0,0,0,.26) 0,rgba(0,0,0,.26) 33%,transparent 0);background-size:4px 1px;background-repeat:repeat-x;background-color:transparent;background-position:0 bottom}.mat-select-placeholder{position:relative;padding:0 2px;transform-origin:left top;flex-grow:1}.mat-select-placeholder.mat-floating-placeholder{top:-22px;left:-2px;text-align:left;transform:scale(.75)}[dir=rtl] .mat-select-placeholder{transform-origin:right top}[dir=rtl] .mat-select-placeholder.mat-floating-placeholder{left:2px;text-align:right}[aria-required=true] .mat-select-placeholder::after{content:'*'}.mat-select-value{position:absolute;max-width:calc(100% - 18px);flex-grow:1;top:0;left:0;bottom:0;display:flex;align-items:center}[dir=rtl] .mat-select-value{left:auto;right:0}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;line-height:30px}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%}@media screen and (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}} /*# sourceMappingURL=select.css.map */ \"],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                host: {\n                    'role': 'listbox',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_ariaLabel',\n                    '[attr.aria-labelledby]': 'ariaLabelledby',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': '_control?.invalid || \"false\"',\n                    '[attr.aria-owns]': '_optionIds',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select]': 'true',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    transformPlaceholder,\n                    transformPanel,\n                    fadeInContent\n                ],\n                exportAs: 'mdSelect',\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSelect.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: ViewportRuler, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectorRef\"], },\n    { type: Dir, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n    { type: __WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"NgControl\"], decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Attribute\"], args: ['tabindex',] },] },\n]; };\nMdSelect.propDecorators = {\n    'trigger': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: ['trigger',] },],\n    'overlayDir': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: [ConnectedOverlayDirective,] },],\n    'options': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [MdOption,] },],\n    'placeholder': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'required': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'multiple': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'floatPlaceholder': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'tabIndex': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'ariaLabel': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['aria-label',] },],\n    'ariaLabelledby': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['aria-labelledby',] },],\n    'onOpen': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'onClose': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'change': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min, n, max) {\n    return Math.min(Math.max(min, n), max);\n}\nvar MdSelectModule = (function () {\n    function MdSelectModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdSelectModule.forRoot = function () {\n        return {\n            ngModule: MdSelectModule,\n            providers: []\n        };\n    };\n    return MdSelectModule;\n}());\nMdSelectModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [\n                    __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"],\n                    OverlayModule,\n                    MdOptionModule,\n                    CompatibilityModule,\n                ],\n                exports: [MdSelect, MdOptionModule, CompatibilityModule],\n                declarations: [MdSelect],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSelectModule.ctorParameters = function () { return []; };\nvar MD_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: __WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"NG_VALUE_ACCESSOR\"],\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return MdSlideToggle; }),\n    multi: true\n};\nvar MdSlideToggleChange = (function () {\n    function MdSlideToggleChange() {\n    }\n    return MdSlideToggleChange;\n}());\n// Increasing integer for generating unique ids for slide-toggle components.\nvar nextId$1 = 0;\n/**\n * Two-state control, which can be also called `switch`.\n */\nvar MdSlideToggle = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _focusOriginMonitor\n     */\n    function MdSlideToggle(_elementRef, _renderer, _focusOriginMonitor) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._uniqueId = \"md-slide-toggle-\" + ++nextId$1;\n        this._checked = false;\n        this._isMousedown = false;\n        this._slideRenderer = null;\n        this._disabled = false;\n        this._required = false;\n        this._disableRipple = false;\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Used to specify the tabIndex value for the underlying input element. */\n        this.tabIndex = 0;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        this._change = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = this._change.asObservable();\n    }\n    Object.defineProperty(MdSlideToggle.prototype, \"disabled\", {\n        /**\n         * Whether the slide-toggle is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlideToggle.prototype, \"required\", {\n        /**\n         * Whether the slide-toggle is required.\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlideToggle.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect for this slide-toggle is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlideToggle.prototype, \"inputId\", {\n        /**\n         * Returns the unique id for the visual hidden input.\n         * @return {?}\n         */\n        get: function () { return (this.id || this._uniqueId) + \"-input\"; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._slideRenderer = new SlideToggleRenderer(this._elementRef);\n        this._focusOriginMonitor\n            .monitor(this._inputElement.nativeElement, this._renderer, false)\n            .subscribe(function (focusOrigin) { return _this._onInputFocusChange(focusOrigin); });\n    };\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n    };\n    /**\n     * The onChangeEvent method will be also called on click.\n     * This is because everything for the slide-toggle is wrapped inside of a label,\n     * which triggers a onChange event on click.\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onChangeEvent = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.\n        if (!this.disabled && !this._slideRenderer.dragging) {\n            this.toggle();\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onInputClick = function (event) {\n        this.onTouched();\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype._setMousedown = function () {\n        var _this = this;\n        // We only *show* the focus style when focus has come to the button via the keyboard.\n        // The Material Design spec is silent on this topic, and without doing this, the\n        // button continues to look :active after clicking.\n        // @see http://marcysutton.com/button-focus-hell/\n        this._isMousedown = true;\n        setTimeout(function () { return _this._isMousedown = false; }, 100);\n    };\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    MdSlideToggle.prototype.writeValue = function (value) {\n        this.checked = value;\n    };\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    MdSlideToggle.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    MdSlideToggle.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    MdSlideToggle.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * Focuses the slide-toggle.\n     * @return {?}\n     */\n    MdSlideToggle.prototype.focus = function () {\n        this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'program');\n    };\n    Object.defineProperty(MdSlideToggle.prototype, \"checked\", {\n        /**\n         * Whether the slide-toggle is checked.\n         * @return {?}\n         */\n        get: function () { return !!this._checked; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this.checked !== !!value) {\n                this._checked = value;\n                this.onChange(this._checked);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlideToggle.prototype, \"color\", {\n        /**\n         * The color of the slide-toggle. Can be primary, accent, or warn.\n         * @return {?}\n         */\n        get: function () { return this._color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._updateColor(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    MdSlideToggle.prototype.toggle = function () {\n        this.checked = !this.checked;\n    };\n    /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onInputFocusChange = function (focusOrigin) {\n        if (!this._focusRipple && focusOrigin === 'keyboard') {\n            // For keyboard focus show a persistent ripple as focus indicator.\n            this._focusRipple = this._ripple.launch(0, 0, { persistent: true, centered: true });\n        }\n        else if (!focusOrigin) {\n            this.onTouched();\n            // Fade out and clear the focus ripple if one is currently present.\n            if (this._focusRipple) {\n                this._focusRipple.fadeOut();\n                this._focusRipple = null;\n            }\n        }\n    };\n    /**\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdSlideToggle.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdSlideToggle.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this._renderer.setElementClass(this._elementRef.nativeElement, \"mat-\" + color, isAdd);\n        }\n    };\n    /**\n     * Emits the change event to the `change` output EventEmitter\n     * @return {?}\n     */\n    MdSlideToggle.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdSlideToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._change.emit(event);\n    };\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onDragStart = function () {\n        if (!this.disabled) {\n            this._slideRenderer.startThumbDrag(this.checked);\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onDrag = function (event) {\n        if (this._slideRenderer.dragging) {\n            this._slideRenderer.updateThumbPosition(event.deltaX);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onDragEnd = function () {\n        var _this = this;\n        if (this._slideRenderer.dragging) {\n            var /** @type {?} */ _previousChecked = this.checked;\n            this.checked = this._slideRenderer.dragPercentage > 50;\n            if (_previousChecked !== this.checked) {\n                this._emitChangeEvent();\n            }\n            // The drag should be stopped outside of the current event handler, because otherwise the\n            // click event will be fired before and will revert the drag change.\n            setTimeout(function () { return _this._slideRenderer.stopThumbDrag(); });\n        }\n    };\n    return MdSlideToggle;\n}());\nMdSlideToggle.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-slide-toggle, mat-slide-toggle',\n                host: {\n                    '[class.mat-slide-toggle]': 'true',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '(mousedown)': '_setMousedown()'\n                },\n                template: \"<label class=\\\"mat-slide-toggle-label\\\" #label> <div class=\\\"mat-slide-toggle-bar\\\"> <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [tabIndex]=\\\"tabIndex\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onChangeEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"> <div class=\\\"mat-slide-toggle-thumb-container\\\" (slidestart)=\\\"_onDragStart()\\\" (slide)=\\\"_onDrag($event)\\\" (slideend)=\\\"_onDragEnd()\\\"> <div class=\\\"mat-slide-toggle-thumb\\\"></div> <div class=\\\"mat-slide-toggle-ripple\\\" md-ripple [mdRippleTrigger]=\\\"label\\\" [mdRippleCentered]=\\\"true\\\" [mdRippleDisabled]=\\\"disableRipple || disabled\\\"> </div> </div> </div> <span class=\\\"mat-slide-toggle-content\\\"> <ng-content></ng-content> </span> </label> \",\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;line-height:24px;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-content{font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-weight:500}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;cursor:pointer}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging{transition-duration:0s}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:solid 1px #000}}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;border-radius:8px}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-bar{background:#fff}}.mat-slide-toggle-input{bottom:0;left:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}.mat-slide-toggle-ripple{position:absolute;top:-13px;left:-13px;height:46px;width:46px;border-radius:50%;z-index:1;pointer-events:none} /*# sourceMappingURL=slide-toggle.css.map */ \"],\n                providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectionStrategy\"].OnPush\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSlideToggle.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: FocusOriginMonitor, },\n]; };\nMdSlideToggle.propDecorators = {\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'id': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'tabIndex': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'labelPosition': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'ariaLabel': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['aria-label',] },],\n    'ariaLabelledby': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['aria-labelledby',] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'required': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'disableRipple': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'change': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    '_inputElement': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: ['input',] },],\n    '_ripple': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: [MdRipple,] },],\n    'checked': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'color': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nvar SlideToggleRenderer = (function () {\n    /**\n     * @param {?} _elementRef\n     */\n    function SlideToggleRenderer(_elementRef) {\n        this._elementRef = _elementRef;\n        /** Whether the thumb is currently being dragged. */\n        this.dragging = false;\n        this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n        this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n    /**\n     * Initializes the drag of the slide-toggle.\n     * @param {?} checked\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype.startThumbDrag = function (checked) {\n        if (this.dragging) {\n            return;\n        }\n        this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n        this._thumbEl.classList.add('mat-dragging');\n        this._previousChecked = checked;\n        this.dragging = true;\n    };\n    /**\n     * Resets the current drag and returns the new checked value.\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype.stopThumbDrag = function () {\n        if (!this.dragging) {\n            return;\n        }\n        this.dragging = false;\n        this._thumbEl.classList.remove('mat-dragging');\n        // Reset the transform because the component will take care of the thumb position after drag.\n        applyCssTransform(this._thumbEl, '');\n        return this.dragPercentage > 50;\n    };\n    /**\n     * Updates the thumb containers position from the specified distance.\n     * @param {?} distance\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype.updateThumbPosition = function (distance) {\n        this.dragPercentage = this._getDragPercentage(distance);\n        // Calculate the moved distance based on the thumb bar width.\n        var /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n        applyCssTransform(this._thumbEl, \"translate3d(\" + dragX + \"px, 0, 0)\");\n    };\n    /**\n     * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n     * @param {?} distance\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype._getDragPercentage = function (distance) {\n        var /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n        // When the toggle was initially checked, then we have to start the drag at the end.\n        if (this._previousChecked) {\n            percentage += 100;\n        }\n        return Math.max(0, Math.min(percentage, 100));\n    };\n    return SlideToggleRenderer;\n}());\nvar MdSlideToggleModule = (function () {\n    function MdSlideToggleModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdSlideToggleModule.forRoot = function () {\n        return {\n            ngModule: MdSlideToggleModule,\n            providers: []\n        };\n    };\n    return MdSlideToggleModule;\n}());\nMdSlideToggleModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [__WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"FormsModule\"], MdRippleModule, CompatibilityModule],\n                exports: [MdSlideToggle, CompatibilityModule],\n                declarations: [MdSlideToggle],\n                providers: [\n                    FOCUS_ORIGIN_MONITOR_PROVIDER,\n                    { provide: __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__[\"HAMMER_GESTURE_CONFIG\"], useClass: GestureConfig }\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSlideToggleModule.ctorParameters = function () { return []; };\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nvar MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\nvar DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\nvar MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\nvar MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nvar MD_SLIDER_VALUE_ACCESSOR = {\n    provide: __WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"NG_VALUE_ACCESSOR\"],\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return MdSlider; }),\n    multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nvar MdSliderChange = (function () {\n    function MdSliderChange() {\n    }\n    return MdSliderChange;\n}());\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nvar MdSlider = (function () {\n    /**\n     * @param {?} renderer\n     * @param {?} _elementRef\n     * @param {?} _focusOriginMonitor\n     * @param {?} _dir\n     */\n    function MdSlider(renderer, _elementRef, _focusOriginMonitor, _dir) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        this._dir = _dir;\n        this._disabled = false;\n        this._invert = false;\n        this._max = 100;\n        this._min = 0;\n        this._step = 1;\n        this._thumbLabel = false;\n        this._tickInterval = 0;\n        this._value = null;\n        this._vertical = false;\n        this.color = 'accent';\n        /** Event emitted when the slider value has changed. */\n        this.change = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when the slider thumb moves. */\n        this.input = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this.onTouched = function () { };\n        this._percent = 0;\n        /**\n         * Whether or not the thumb is sliding.\n         * Used to determine if there should be a transition for the thumb and fill track.\n         */\n        this._isSliding = false;\n        /**\n         * Whether or not the slider is active (clicked or sliding).\n         * Used to shrink and grow the thumb as according to the Material Design spec.\n         */\n        this._isActive = false;\n        this._tickIntervalPercent = 0;\n        this._renderer = null;\n        this._sliderDimensions = null;\n        this._controlValueAccessorChangeFn = function () { };\n        this._lastChangeValue = null;\n        this._lastInputValue = null;\n        this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, true)\n            .subscribe(function (origin) { return _this._isActive = !!origin && origin !== 'keyboard'; });\n        this._renderer = new SliderRenderer(this._elementRef);\n    }\n    Object.defineProperty(MdSlider.prototype, \"disabled\", {\n        /**\n         * Whether or not the slider is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"invert\", {\n        /**\n         * Whether the slider is inverted.\n         * @return {?}\n         */\n        get: function () { return this._invert; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._invert = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"max\", {\n        /**\n         * The maximum value that the slider can have.\n         * @return {?}\n         */\n        get: function () {\n            return this._max;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._max = coerceNumberProperty(v, this._max);\n            this._percent = this._calculatePercentage(this._value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"min\", {\n        /**\n         * The minimum value that the slider can have.\n         * @return {?}\n         */\n        get: function () {\n            return this._min;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._min = coerceNumberProperty(v, this._min);\n            // If the value wasn't explicitly set by the user, set it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            this._percent = this._calculatePercentage(this._value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"step\", {\n        /**\n         * The values at which the thumb will snap.\n         * @return {?}\n         */\n        get: function () { return this._step; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._step = coerceNumberProperty(v, this._step);\n            if (this._step % 1 !== 0) {\n                this._roundLabelTo = this._step.toString().split('.').pop().length;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"thumbLabel\", {\n        /**\n         * Whether or not to show the thumb label.\n         * @return {?}\n         */\n        get: function () { return this._thumbLabel; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._thumbLabel = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_thumbLabelDeprecated\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this._thumbLabel; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._thumbLabel = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"tickInterval\", {\n        /**\n         * How often to show ticks. Relative to the step so that a tick always appears on a step.\n         * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n         * @return {?}\n         */\n        get: function () { return this._tickInterval; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (value === 'auto') {\n                this._tickInterval = 'auto';\n            }\n            else if (typeof value === 'number' || typeof value === 'string') {\n                this._tickInterval = coerceNumberProperty(value, /** @type {?} */ (this._tickInterval));\n            }\n            else {\n                this._tickInterval = 0;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_tickIntervalDeprecated\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.tickInterval; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.tickInterval = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"value\", {\n        /**\n         * Value of the slider.\n         * @return {?}\n         */\n        get: function () {\n            // If the value needs to be read and it is still uninitialized, initialize it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            return this._value;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._value = coerceNumberProperty(v, this._value);\n            this._percent = this._calculatePercentage(this._value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"vertical\", {\n        /**\n         * Whether the slider is vertical.\n         * @return {?}\n         */\n        get: function () { return this._vertical; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._vertical = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"displayValue\", {\n        /**\n         * The value to be used for display purposes.\n         * @return {?}\n         */\n        get: function () {\n            // Note that this could be improved further by rounding something like 0.999 to 1 or\n            // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n            // every change detection cycle.\n            if (this._roundLabelTo && this.value % 1 !== 0) {\n                return this.value.toFixed(this._roundLabelTo);\n            }\n            return this.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"percent\", {\n        /**\n         * The percentage of the slider that coincides with the value.\n         * @return {?}\n         */\n        get: function () { return this._clamp(this._percent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_invertAxis\", {\n        /**\n         * Whether the axis of the slider is inverted.\n         * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n         * @return {?}\n         */\n        get: function () {\n            // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n            // top. However from a y-axis standpoint this is inverted.\n            return this.vertical ? !this.invert : this.invert;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_isMinValue\", {\n        /**\n         * Whether the slider is at its minimum value.\n         * @return {?}\n         */\n        get: function () {\n            return this.percent === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_thumbGap\", {\n        /**\n         * The amount of space to leave between the slider thumb and the track fill & track background\n         * elements.\n         * @return {?}\n         */\n        get: function () {\n            if (this.disabled) {\n                return DISABLED_THUMB_GAP;\n            }\n            if (this._isMinValue && !this.thumbLabel) {\n                return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n            }\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_trackBackgroundStyles\", {\n        /**\n         * CSS styles for the track background element.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            var /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n            return {\n                'transform': \"translate\" + axis + \"(\" + sign + this._thumbGap + \"px) scale\" + axis + \"(\" + (1 - this.percent) + \")\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_trackFillStyles\", {\n        /**\n         * CSS styles for the track fill element.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            var /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n            return {\n                'transform': \"translate\" + axis + \"(\" + sign + this._thumbGap + \"px) scale\" + axis + \"(\" + this.percent + \")\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_ticksContainerStyles\", {\n        /**\n         * CSS styles for the ticks container element.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the ticks container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            var /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n            var /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n            return {\n                'transform': \"translate\" + axis + \"(\" + sign + offset + \"%)\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_ticksStyles\", {\n        /**\n         * CSS styles for the ticks element.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n            var /** @type {?} */ backgroundSize = this.vertical ? \"2px \" + tickSize + \"%\" : tickSize + \"% 2px\";\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            // Depending on the direction we pushed the ticks container, push the ticks the opposite\n            // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n            // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n            var /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n            var /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n            var /** @type {?} */ styles = {\n                'backgroundSize': backgroundSize,\n                // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n                'transform': \"translateZ(0) translate\" + axis + \"(\" + sign + tickSize / 2 + \"%)\" + rotate\n            };\n            if (this._isMinValue && this._thumbGap) {\n                var /** @type {?} */ side = this.vertical ?\n                    (this._invertAxis ? 'Bottom' : 'Top') :\n                    (this._invertAxis ? 'Right' : 'Left');\n                styles[\"padding\" + side] = this._thumbGap + \"px\";\n            }\n            return styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_thumbContainerStyles\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the thumb container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            var /** @type {?} */ invertOffset = (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n            var /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n            return {\n                'transform': \"translate\" + axis + \"(-\" + offset + \"%)\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_invertMouseCoords\", {\n        /**\n         * Whether mouse events should be converted to a slider position by calculating their distance\n         * from the right or bottom edge of the slider as opposed to the top or left.\n         * @return {?}\n         */\n        get: function () {\n            return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_direction\", {\n        /**\n         * The language direction for this slider element.\n         * @return {?}\n         */\n        get: function () {\n            return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onMouseenter = function () {\n        if (this.disabled) {\n            return;\n        }\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._renderer.getSliderDimensions();\n        this._updateTickIntervalPercent();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlider.prototype._onClick = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        this._isSliding = false;\n        this._renderer.addFocus();\n        this._updateValueFromPosition({ x: event.clientX, y: event.clientY });\n        /* Emits a change and input event if the value changed. */\n        this._emitInputEvent();\n        this._emitValueIfChanged();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlider.prototype._onSlide = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        // Prevent the slide from selecting anything else.\n        event.preventDefault();\n        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });\n        // Native range elements always emit `input` events when the value changed while sliding.\n        this._emitInputEvent();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlider.prototype._onSlideStart = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        // Simulate mouseenter in case this is a mobile device.\n        this._onMouseenter();\n        event.preventDefault();\n        this._isSliding = true;\n        this._renderer.addFocus();\n        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onSlideEnd = function () {\n        this._isSliding = false;\n        this._emitValueIfChanged();\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onFocus = function () {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._renderer.getSliderDimensions();\n        this._updateTickIntervalPercent();\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onBlur = function () {\n        this.onTouched();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlider.prototype._onKeydown = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case PAGE_UP:\n                this._increment(10);\n                break;\n            case PAGE_DOWN:\n                this._increment(-10);\n                break;\n            case END:\n                this.value = this.max;\n                break;\n            case HOME:\n                this.value = this.min;\n                break;\n            case LEFT_ARROW:\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                // sighted users, therefore we do not swap the meaning.\n                this._increment(this._direction == 'rtl' ? 1 : -1);\n                break;\n            case UP_ARROW:\n                this._increment(1);\n                break;\n            case RIGHT_ARROW:\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                this._increment(this._direction == 'rtl' ? -1 : 1);\n                break;\n            case DOWN_ARROW:\n                this._increment(-1);\n                break;\n            default:\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                // it.\n                return;\n        }\n        this._isSliding = true;\n        event.preventDefault();\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onKeyup = function () {\n        this._isSliding = false;\n    };\n    /**\n     * Increments the slider by the given number of steps (negative number decrements).\n     * @param {?} numSteps\n     * @return {?}\n     */\n    MdSlider.prototype._increment = function (numSteps) {\n        this.value = this._clamp(this.value + this.step * numSteps, this.min, this.max);\n        this._emitInputEvent();\n        this._emitValueIfChanged();\n    };\n    /**\n     * Calculate the new value from the new physical location. The value will always be snapped.\n     * @param {?} pos\n     * @return {?}\n     */\n    MdSlider.prototype._updateValueFromPosition = function (pos) {\n        if (!this._sliderDimensions) {\n            return;\n        }\n        var /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        var /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        var /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n        // The exact value is calculated from the event and used to find the closest snap value.\n        var /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n        if (this._invertMouseCoords) {\n            percent = 1 - percent;\n        }\n        var /** @type {?} */ exactValue = this._calculateValue(percent);\n        // This calculation finds the closest step by finding the closest whole number divisible by the\n        // step relative to the min.\n        var /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n        // The value needs to snap to the min and max.\n        this.value = this._clamp(closestValue, this.min, this.max);\n    };\n    /**\n     * Emits a change event if the current value is different from the last emitted value.\n     * @return {?}\n     */\n    MdSlider.prototype._emitValueIfChanged = function () {\n        if (this.value != this._lastChangeValue) {\n            var /** @type {?} */ event = this._createChangeEvent();\n            this._lastChangeValue = this.value;\n            this._controlValueAccessorChangeFn(this.value);\n            this.change.emit(event);\n        }\n    };\n    /**\n     * Emits an input event when the current value is different from the last emitted value.\n     * @return {?}\n     */\n    MdSlider.prototype._emitInputEvent = function () {\n        if (this.value != this._lastInputValue) {\n            var /** @type {?} */ event = this._createChangeEvent();\n            this._lastInputValue = this.value;\n            this.input.emit(event);\n        }\n    };\n    /**\n     * Updates the amount of space between ticks as a percentage of the width of the slider.\n     * @return {?}\n     */\n    MdSlider.prototype._updateTickIntervalPercent = function () {\n        if (!this.tickInterval) {\n            return;\n        }\n        if (this.tickInterval == 'auto') {\n            var /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            var /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n            var /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n            var /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n            this._tickIntervalPercent = pixelsPerTick / trackSize;\n        }\n        else {\n            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n        }\n    };\n    /**\n     * Creates a slider change object from the specified value.\n     * @param {?=} value\n     * @return {?}\n     */\n    MdSlider.prototype._createChangeEvent = function (value) {\n        if (value === void 0) { value = this.value; }\n        var /** @type {?} */ event = new MdSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n    };\n    /**\n     * Calculates the percentage of the slider that a value is.\n     * @param {?} value\n     * @return {?}\n     */\n    MdSlider.prototype._calculatePercentage = function (value) {\n        return (value - this.min) / (this.max - this.min);\n    };\n    /**\n     * Calculates the value a percentage of the slider corresponds to.\n     * @param {?} percentage\n     * @return {?}\n     */\n    MdSlider.prototype._calculateValue = function (percentage) {\n        return this.min + percentage * (this.max - this.min);\n    };\n    /**\n     * Return a number between two numbers.\n     * @param {?} value\n     * @param {?=} min\n     * @param {?=} max\n     * @return {?}\n     */\n    MdSlider.prototype._clamp = function (value, min, max) {\n        if (min === void 0) { min = 0; }\n        if (max === void 0) { max = 1; }\n        return Math.max(min, Math.min(value, max));\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    MdSlider.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * Registers a callback to eb triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MdSlider.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MdSlider.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    MdSlider.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    return MdSlider;\n}());\nMdSlider.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-slider, mat-slider',\n                providers: [MD_SLIDER_VALUE_ACCESSOR],\n                host: {\n                    '[class.mat-slider]': 'true',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                    '(click)': '_onClick($event)',\n                    '(keydown)': '_onKeydown($event)',\n                    '(keyup)': '_onKeyup()',\n                    '(mouseenter)': '_onMouseenter()',\n                    '(slide)': '_onSlide($event)',\n                    '(slideend)': '_onSlideEnd()',\n                    '(slidestart)': '_onSlideStart($event)',\n                    'role': 'slider',\n                    'tabindex': '0',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.aria-valuemax]': 'max',\n                    '[attr.aria-valuemin]': 'min',\n                    '[attr.aria-valuenow]': 'value',\n                    '[class.mat-primary]': 'color == \"primary\"',\n                    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n                    '[class.mat-warn]': 'color == \"warn\"',\n                    '[class.mat-slider-disabled]': 'disabled',\n                    '[class.mat-slider-has-ticks]': 'tickInterval',\n                    '[class.mat-slider-horizontal]': '!vertical',\n                    '[class.mat-slider-axis-inverted]': '_invertAxis',\n                    '[class.mat-slider-sliding]': '_isSliding',\n                    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                    '[class.mat-slider-vertical]': 'vertical',\n                    '[class.mat-slider-min-value]': '_isMinValue',\n                    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n                },\n                template: \"<div class=\\\"mat-slider-wrapper\\\"> <div class=\\\"mat-slider-track-wrapper\\\"> <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_trackBackgroundStyles\\\"></div> <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div> </div> <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\"> <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div> </div> <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\"> <div class=\\\"mat-slider-focus-ring\\\"></div> <div class=\\\"mat-slider-thumb\\\"></div> <div class=\\\"mat-slider-thumb-label\\\"> <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span> </div> </div> </div> \",\n                styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:0;vertical-align:middle}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{box-sizing:border-box;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.cdk-keyboard-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(.7);transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),border-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform .4s cubic-bezier(.25,.8,.25,1),border-radius .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label-text{z-index:1;font-size:12px;font-weight:700;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-sliding .mat-slider-thumb-container,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-track-fill{transition-duration:0s}.mat-slider-has-ticks .mat-slider-wrapper::after{content:'';position:absolute;border:0 solid rgba(0,0,0,.6);opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.cdk-focused .mat-slider-thumb-label-text{opacity:1}.cdk-mouse-focused .mat-slider-thumb,.cdk-program-focused .mat-slider-thumb,.cdk-touch-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.mat-slider-horizontal .mat-slider-ticks{background:repeating-linear-gradient(to right,rgba(0,0,0,.6),rgba(0,0,0,.6) 2px,transparent 0,transparent) repeat;background:-moz-repeating-linear-gradient(.0001deg,rgba(0,0,0,.6),rgba(0,0,0,.6) 2px,transparent 0,transparent) repeat;background-clip:content-box;height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{background:repeating-linear-gradient(to bottom,rgba(0,0,0,.6),rgba(0,0,0,.6) 2px,transparent 0,transparent) repeat;background-clip:content-box;width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%} /*# sourceMappingURL=slider.css.map */ \"],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSlider.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: FocusOriginMonitor, },\n    { type: Dir, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n]; };\nMdSlider.propDecorators = {\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'invert': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'max': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'min': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'step': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'thumbLabel': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    '_thumbLabelDeprecated': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['thumb-label',] },],\n    'tickInterval': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    '_tickIntervalDeprecated': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['tick-interval',] },],\n    'value': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'vertical': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'color': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'change': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'input': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n * \\@docs-private\n */\nvar SliderRenderer = (function () {\n    /**\n     * @param {?} elementRef\n     */\n    function SliderRenderer(elementRef) {\n        this._sliderElement = elementRef.nativeElement;\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     * @return {?}\n     */\n    SliderRenderer.prototype.getSliderDimensions = function () {\n        var /** @type {?} */ wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');\n        return wrapperElement.getBoundingClientRect();\n    };\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     * @return {?}\n     */\n    SliderRenderer.prototype.addFocus = function () {\n        this._sliderElement.focus();\n    };\n    return SliderRenderer;\n}());\nvar MdSliderModule = (function () {\n    function MdSliderModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdSliderModule.forRoot = function () {\n        return {\n            ngModule: MdSliderModule,\n            providers: []\n        };\n    };\n    return MdSliderModule;\n}());\nMdSliderModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [__WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"], __WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"FormsModule\"], CompatibilityModule, StyleModule, RtlModule],\n                exports: [MdSlider, CompatibilityModule],\n                declarations: [MdSlider],\n                providers: [{ provide: __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__[\"HAMMER_GESTURE_CONFIG\"], useClass: GestureConfig }]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSliderModule.ctorParameters = function () { return []; };\n/**\n * Exception thrown when two MdSidenav are matching the same side.\n */\nvar MdDuplicatedSidenavError = (function (_super) {\n    __extends(MdDuplicatedSidenavError, _super);\n    /**\n     * @param {?} align\n     */\n    function MdDuplicatedSidenavError(align) {\n        return _super.call(this, \"A sidenav was already declared for 'align=\\\"\" + align + \"\\\"'\") || this;\n    }\n    return MdDuplicatedSidenavError;\n}(MdError));\n/**\n * Sidenav toggle promise result.\n */\nvar MdSidenavToggleResult = (function () {\n    /**\n     * @param {?} type\n     * @param {?} animationFinished\n     */\n    function MdSidenavToggleResult(type, animationFinished) {\n        this.type = type;\n        this.animationFinished = animationFinished;\n    }\n    return MdSidenavToggleResult;\n}());\n/**\n * <md-sidenav> component.\n *\n * This component corresponds to the drawer of the sidenav.\n *\n * Please refer to README.md for examples on how to use it.\n */\nvar MdSidenav = (function () {\n    /**\n     * @param {?} _elementRef The DOM element reference. Used for transition and width calculation.\n     *     If not available we do not hook on transitions.\n     * @param {?} _renderer\n     * @param {?} _focusTrapFactory\n     */\n    function MdSidenav(_elementRef, _renderer, _focusTrapFactory) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._align = 'start';\n        /** Mode of the sidenav; whether 'over' or 'side'. */\n        this.mode = 'over';\n        this._disableClose = false;\n        /** Whether the sidenav is opened. */\n        this._opened = false;\n        /** Event emitted when the sidenav is being opened. Use this to synchronize animations. */\n        this.onOpenStart = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when the sidenav is fully opened. */\n        this.onOpen = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when the sidenav is being closed. Use this to synchronize animations. */\n        this.onCloseStart = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when the sidenav is fully closed. */\n        this.onClose = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when the sidenav alignment changes. */\n        this.onAlignChanged = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        this._toggleAnimationPromise = null;\n        this._resolveToggleAnimationPromise = null;\n        this._elementFocusedBeforeSidenavWasOpened = null;\n        this.onOpen.subscribe(function () {\n            _this._elementFocusedBeforeSidenavWasOpened = document.activeElement;\n            if (_this.isFocusTrapEnabled && _this._focusTrap) {\n                _this._focusTrap.focusFirstTabbableElementWhenReady();\n            }\n        });\n        this.onClose.subscribe(function () {\n            if (_this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {\n                _this._renderer.invokeElementMethod(_this._elementFocusedBeforeSidenavWasOpened, 'focus');\n            }\n            else {\n                _this._renderer.invokeElementMethod(_this._elementRef.nativeElement, 'blur');\n            }\n            _this._elementFocusedBeforeSidenavWasOpened = null;\n        });\n    }\n    Object.defineProperty(MdSidenav.prototype, \"align\", {\n        /**\n         * Direction which the sidenav is aligned in.\n         * @return {?}\n         */\n        get: function () { return this._align; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            // Make sure we have a valid value.\n            value = (value == 'end') ? 'end' : 'start';\n            if (value != this._align) {\n                this._align = value;\n                this.onAlignChanged.emit();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"disableClose\", {\n        /**\n         * Whether the sidenav can be closed with the escape key or not.\n         * @return {?}\n         */\n        get: function () { return this._disableClose; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableClose = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"isFocusTrapEnabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            // The focus trap is only enabled when the sidenav is open in any mode other than side.\n            return this.opened && this.mode !== 'side';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSidenav.prototype.ngAfterContentInit = function () {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._focusTrap.enabled = this.isFocusTrapEnabled;\n        // This can happen when the sidenav is set to opened in\n        // the template and the transition hasn't ended.\n        if (this._toggleAnimationPromise) {\n            this._resolveToggleAnimationPromise(true);\n            this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenav.prototype.ngOnDestroy = function () {\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    };\n    Object.defineProperty(MdSidenav.prototype, \"opened\", {\n        /**\n         * Whether the sidenav is opened. We overload this because we trigger an event when it\n         * starts or end.\n         * @return {?}\n         */\n        get: function () { return this._opened; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this.toggle(coerceBooleanProperty(v));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Open this sidenav, and return a Promise that will resolve when it's fully opened (or get\n     * rejected if it didn't).\n     * @return {?}\n     */\n    MdSidenav.prototype.open = function () {\n        return this.toggle(true);\n    };\n    /**\n     * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get\n     * rejected if it didn't).\n     * @return {?}\n     */\n    MdSidenav.prototype.close = function () {\n        return this.toggle(false);\n    };\n    /**\n     * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or\n     * close() when it's closed.\n     * @param {?=} isOpen Whether the sidenav should be open.\n     * @return {?} Resolves with the result of whether the sidenav was opened or closed.\n     */\n    MdSidenav.prototype.toggle = function (isOpen) {\n        var _this = this;\n        if (isOpen === void 0) { isOpen = !this.opened; }\n        // Shortcut it if we're already opened.\n        if (isOpen === this.opened) {\n            return this._toggleAnimationPromise ||\n                Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));\n        }\n        this._opened = isOpen;\n        if (this._focusTrap) {\n            this._focusTrap.enabled = this.isFocusTrapEnabled;\n        }\n        if (isOpen) {\n            this.onOpenStart.emit();\n        }\n        else {\n            this.onCloseStart.emit();\n        }\n        if (this._toggleAnimationPromise) {\n            this._resolveToggleAnimationPromise(false);\n        }\n        this._toggleAnimationPromise = new Promise(function (resolve) {\n            _this._resolveToggleAnimationPromise = function (animationFinished) { return resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished)); };\n        });\n        return this._toggleAnimationPromise;\n    };\n    /**\n     * Handles the keyboard events.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    MdSidenav.prototype.handleKeydown = function (event) {\n        if (event.keyCode === ESCAPE && !this.disableClose) {\n            this.close();\n            event.stopPropagation();\n        }\n    };\n    /**\n     * When transition has finished, set the internal state for classes and emit the proper event.\n     * The event passed is actually of type TransitionEvent, but that type is not available in\n     * Android so we use any.\n     * @param {?} transitionEvent\n     * @return {?}\n     */\n    MdSidenav.prototype._onTransitionEnd = function (transitionEvent) {\n        if (transitionEvent.target == this._elementRef.nativeElement\n            && transitionEvent.propertyName.endsWith('transform')) {\n            if (this._opened) {\n                this.onOpen.emit();\n            }\n            else {\n                this.onClose.emit();\n            }\n            if (this._toggleAnimationPromise) {\n                this._resolveToggleAnimationPromise(true);\n                this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n            }\n        }\n    };\n    Object.defineProperty(MdSidenav.prototype, \"_isClosing\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return !this._opened && !!this._toggleAnimationPromise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_isOpening\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._opened && !!this._toggleAnimationPromise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_isClosed\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return !this._opened && !this._toggleAnimationPromise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_isOpened\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._opened && !this._toggleAnimationPromise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_isEnd\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.align == 'end';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_modeSide\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'side';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_modeOver\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'over';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_modePush\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'push';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_width\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this._elementRef.nativeElement) {\n                return this._elementRef.nativeElement.offsetWidth;\n            }\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MdSidenav;\n}());\nMdSidenav.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-sidenav, mat-sidenav',\n                // TODO(mmalerba): move template to separate file.\n                template: \"<ng-content></ng-content> \",\n                host: {\n                    '[class.mat-sidenav]': 'true',\n                    '(transitionend)': '_onTransitionEnd($event)',\n                    '(keydown)': 'handleKeydown($event)',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-sidenav-closed]': '_isClosed',\n                    '[class.mat-sidenav-closing]': '_isClosing',\n                    '[class.mat-sidenav-end]': '_isEnd',\n                    '[class.mat-sidenav-opened]': '_isOpened',\n                    '[class.mat-sidenav-opening]': '_isOpening',\n                    '[class.mat-sidenav-over]': '_modeOver',\n                    '[class.mat-sidenav-push]': '_modePush',\n                    '[class.mat-sidenav-side]': '_modeSide',\n                    'tabIndex': '-1'\n                },\n                changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectionStrategy\"].OnPush,\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSidenav.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: FocusTrapFactory, },\n]; };\nMdSidenav.propDecorators = {\n    'align': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'mode': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'disableClose': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'onOpenStart': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"], args: ['open-start',] },],\n    'onOpen': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"], args: ['open',] },],\n    'onCloseStart': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"], args: ['close-start',] },],\n    'onClose': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"], args: ['close',] },],\n    'onAlignChanged': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"], args: ['align-changed',] },],\n    'opened': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * <md-sidenav-container> component.\n *\n * This is the parent component to one or two <md-sidenav>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nvar MdSidenavContainer = (function () {\n    /**\n     * @param {?} _dir\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _ngZone\n     */\n    function MdSidenavContainer(_dir, _element, _renderer, _ngZone) {\n        var _this = this;\n        this._dir = _dir;\n        this._element = _element;\n        this._renderer = _renderer;\n        this._ngZone = _ngZone;\n        /** Event emitted when the sidenav backdrop is clicked. */\n        this.backdropClick = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Whether to enable open/close trantions. */\n        this._enableTransitions = false;\n        // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n        // properties to point to the proper start/end.\n        if (_dir != null) {\n            _dir.dirChange.subscribe(function () { return _this._validateDrawers(); });\n        }\n    }\n    Object.defineProperty(MdSidenavContainer.prototype, \"start\", {\n        /**\n         * The sidenav child with the `start` alignment.\n         * @return {?}\n         */\n        get: function () { return this._start; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenavContainer.prototype, \"end\", {\n        /**\n         * The sidenav child with the `end` alignment.\n         * @return {?}\n         */\n        get: function () { return this._end; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        // On changes, assert on consistency.\n        this._sidenavs.changes.subscribe(function () { return _this._validateDrawers(); });\n        this._sidenavs.forEach(function (sidenav) {\n            _this._watchSidenavToggle(sidenav);\n            _this._watchSidenavAlign(sidenav);\n        });\n        this._validateDrawers();\n        // Give the view a chance to render the initial state, then enable transitions.\n        this._ngZone.onMicrotaskEmpty.first().subscribe(function () { return _this._enableTransitions = true; });\n    };\n    /**\n     * Subscribes to sidenav events in order to set a class on the main container element when the\n     * sidenav is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     * @param {?} sidenav\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._watchSidenavToggle = function (sidenav) {\n        var _this = this;\n        if (!sidenav || sidenav.mode === 'side') {\n            return;\n        }\n        sidenav.onOpen.subscribe(function () { return _this._setContainerClass(sidenav, true); });\n        sidenav.onClose.subscribe(function () { return _this._setContainerClass(sidenav, false); });\n    };\n    /**\n     * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align\n     * changes.\n     * @param {?} sidenav\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._watchSidenavAlign = function (sidenav) {\n        var _this = this;\n        if (!sidenav) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping sides at the same time.\n        sidenav.onAlignChanged.subscribe(function () { return _this._ngZone.onMicrotaskEmpty.first().subscribe(function () { return _this._validateDrawers(); }); });\n    };\n    /**\n     * Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element.\n     * @param {?} sidenav\n     * @param {?} bool\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._setContainerClass = function (sidenav, bool) {\n        this._renderer.setElementClass(this._element.nativeElement, 'mat-sidenav-opened', bool);\n    };\n    /**\n     * Validate the state of the sidenav children components.\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._validateDrawers = function () {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end sidenav.\n        // NOTE: We must call toArray on _sidenavs even though it's iterable\n        // (see https://github.com/Microsoft/TypeScript/issues/3164).\n        for (var _i = 0, _a = this._sidenavs.toArray(); _i < _a.length; _i++) {\n            var sidenav = _a[_i];\n            if (sidenav.align == 'end') {\n                if (this._end != null) {\n                    throw new MdDuplicatedSidenavError('end');\n                }\n                this._end = sidenav;\n            }\n            else {\n                if (this._start != null) {\n                    throw new MdDuplicatedSidenavError('start');\n                }\n                this._start = sidenav;\n            }\n        }\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir == null || this._dir.value == 'ltr') {\n            this._left = this._start;\n            this._right = this._end;\n        }\n        else {\n            this._left = this._end;\n            this._right = this._start;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._onBackdropClicked = function () {\n        this.backdropClick.emit();\n        this._closeModalSidenav();\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._closeModalSidenav = function () {\n        // Close all open sidenav's where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(function (sidenav) { return sidenav && !sidenav.disableClose && sidenav.mode !== 'side'; })\n            .forEach(function (sidenav) { return sidenav.close(); });\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._isShowingBackdrop = function () {\n        return (this._isSidenavOpen(this._start) && this._start.mode != 'side')\n            || (this._isSidenavOpen(this._end) && this._end.mode != 'side');\n    };\n    /**\n     * @param {?} side\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._isSidenavOpen = function (side) {\n        return side != null && side.opened;\n    };\n    /**\n     * Return the width of the sidenav, if it's in the proper mode and opened.\n     * This may relayout the view, so do not call this often.\n     * @param {?} sidenav\n     * @param {?} mode\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getSidenavEffectiveWidth = function (sidenav, mode) {\n        return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getMarginLeft = function () {\n        return this._getSidenavEffectiveWidth(this._left, 'side');\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getMarginRight = function () {\n        return this._getSidenavEffectiveWidth(this._right, 'side');\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getPositionLeft = function () {\n        return this._getSidenavEffectiveWidth(this._left, 'push');\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getPositionRight = function () {\n        return this._getSidenavEffectiveWidth(this._right, 'push');\n    };\n    /**\n     * Returns the horizontal offset for the content area.  There should never be a value for both\n     * left and right, so by subtracting the right value from the left value, we should always get\n     * the appropriate offset.\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getPositionOffset = function () {\n        return this._getPositionLeft() - this._getPositionRight();\n    };\n    /**\n     * This is using [ngStyle] rather than separate [style...] properties because [style.transform]\n     * doesn't seem to work right now.\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getStyles = function () {\n        return {\n            marginLeft: this._getMarginLeft() + \"px\",\n            marginRight: this._getMarginRight() + \"px\",\n            transform: \"translate3d(\" + this._getPositionOffset() + \"px, 0, 0)\"\n        };\n    };\n    return MdSidenavContainer;\n}());\nMdSidenavContainer.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-sidenav-container, mat-sidenav-container',\n                // Do not use ChangeDetectionStrategy.OnPush. It does not work for this component because\n                // technically it is a sibling of MdSidenav (on the content tree) and isn't updated when MdSidenav\n                // changes its state.\n                template: \"<div class=\\\"mat-sidenav-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" [class.mat-sidenav-shown]=\\\"_isShowingBackdrop()\\\"></div> <ng-content select=\\\"md-sidenav, mat-sidenav\\\"></ng-content> <div class=\\\"mat-sidenav-content\\\" [ngStyle]=\\\"_getStyles()\\\" cdk-scrollable> <ng-content></ng-content> </div> \",\n                styles: [\".mat-sidenav-container{position:relative;transform:translate3d(0,0,0);box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-sidenav-container[fullscreen]{position:absolute;top:0;left:0;right:0;bottom:0}.mat-sidenav-container[fullscreen].mat-sidenav-opened{overflow:hidden}.mat-sidenav-backdrop{position:absolute;top:0;left:0;right:0;bottom:0;display:block;z-index:2;visibility:hidden}.mat-sidenav-backdrop.mat-sidenav-shown{visibility:visible}@media screen and (-ms-high-contrast:active){.mat-sidenav-backdrop{opacity:.5}}.mat-sidenav-content{position:relative;transform:translate3d(0,0,0);display:block;height:100%;overflow:auto}.mat-sidenav{position:relative;transform:translate3d(0,0,0);display:block;position:absolute;top:0;bottom:0;z-index:3;min-width:5vw;outline:0;box-sizing:border-box;height:100%;overflow-y:auto;transform:translate3d(-100%,0,0)}.mat-sidenav.mat-sidenav-closed{visibility:hidden}.mat-sidenav.mat-sidenav-opened,.mat-sidenav.mat-sidenav-opening{transform:translate3d(0,0,0)}.mat-sidenav.mat-sidenav-side{z-index:1}.mat-sidenav.mat-sidenav-end{right:0;transform:translate3d(100%,0,0)}.mat-sidenav.mat-sidenav-end.mat-sidenav-closed{visibility:hidden}.mat-sidenav.mat-sidenav-end.mat-sidenav-opened,.mat-sidenav.mat-sidenav-end.mat-sidenav-opening{transform:translate3d(0,0,0)}[dir=rtl] .mat-sidenav{transform:translate3d(100%,0,0)}[dir=rtl] .mat-sidenav.mat-sidenav-closed{visibility:hidden}[dir=rtl] .mat-sidenav.mat-sidenav-opened,[dir=rtl] .mat-sidenav.mat-sidenav-opening{transform:translate3d(0,0,0)}[dir=rtl] .mat-sidenav.mat-sidenav-end{left:0;right:auto;transform:translate3d(-100%,0,0)}[dir=rtl] .mat-sidenav.mat-sidenav-end.mat-sidenav-closed{visibility:hidden}[dir=rtl] .mat-sidenav.mat-sidenav-end.mat-sidenav-opened,[dir=rtl] .mat-sidenav.mat-sidenav-end.mat-sidenav-opening{transform:translate3d(0,0,0)}.mat-sidenav.mat-sidenav-opened:not(.mat-sidenav-side),.mat-sidenav.mat-sidenav-opening:not(.mat-sidenav-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)} /*# sourceMappingURL=sidenav.css.map */ \",\n                    \".mat-sidenav-transition .mat-sidenav{transition:transform .4s cubic-bezier(.25,.8,.25,1)}.mat-sidenav-transition .mat-sidenav-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-sidenav-transition .mat-sidenav-backdrop.mat-sidenav-shown{transition:background-color .4s cubic-bezier(.25,.8,.25,1)} /*# sourceMappingURL=sidenav-transitions.css.map */ \"],\n                host: {\n                    '[class.mat-sidenav-container]': 'true',\n                    '[class.mat-sidenav-transition]': '_enableTransitions',\n                },\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSidenavContainer.ctorParameters = function () { return [\n    { type: Dir, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n]; };\nMdSidenavContainer.propDecorators = {\n    '_sidenavs': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [MdSidenav,] },],\n    'backdropClick': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\nvar MdSidenavModule = (function () {\n    function MdSidenavModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdSidenavModule.forRoot = function () {\n        return {\n            ngModule: MdSidenavModule,\n            providers: []\n        };\n    };\n    return MdSidenavModule;\n}());\nMdSidenavModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [__WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"], CompatibilityModule, A11yModule, OverlayModule],\n                exports: [MdSidenavContainer, MdSidenav, CompatibilityModule],\n                declarations: [MdSidenavContainer, MdSidenav],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSidenavModule.ctorParameters = function () { return []; };\nvar MdListDivider = (function () {\n    function MdListDivider() {\n    }\n    return MdListDivider;\n}());\nMdListDivider.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-divider, mat-divider'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListDivider.ctorParameters = function () { return []; };\n/**\n * Token used to inject the list type into child MdListItem components so they can know whether\n * they're in a nav list (and thus should use an MdRipple).\n */\nvar LIST_TYPE_TOKEN = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"OpaqueToken\"]('list_type');\nvar NORMAL_LIST_TYPE = 'normal_list_type';\nvar NAV_LIST_TYPE = 'nav_list_type';\nvar MdList = (function () {\n    function MdList() {\n    }\n    return MdList;\n}());\nMdList.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n                host: {\n                    'role': 'list'\n                },\n                template: '<ng-content></ng-content>',\n                styles: [\".mat-list,.mat-nav-list{padding-top:8px;display:block}.mat-list .mat-subheader,.mat-nav-list .mat-subheader{display:block;box-sizing:border-box;height:48px;padding:16px;margin:0;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-size:14px;font-weight:500}.mat-list .mat-subheader:first-child,.mat-nav-list .mat-subheader:first-child{margin-top:-8px}.mat-list .mat-list-item,.mat-nav-list .mat-list-item{display:block}.mat-list .mat-list-item .mat-list-item-content,.mat-nav-list .mat-list-item .mat-list-item-content{display:flex;flex-direction:row;align-items:center;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;box-sizing:border-box;font-size:16px;height:48px;padding:0 16px;position:relative}.mat-list .mat-list-item.mat-list-item-avatar .mat-list-item-content,.mat-nav-list .mat-list-item.mat-list-item-avatar .mat-list-item-content{height:56px}.mat-list .mat-list-item.mat-2-line .mat-list-item-content,.mat-nav-list .mat-list-item.mat-2-line .mat-list-item-content{height:72px}.mat-list .mat-list-item.mat-3-line .mat-list-item-content,.mat-nav-list .mat-list-item.mat-3-line .mat-list-item-content{height:88px}.mat-list .mat-list-item.mat-multi-line .mat-list-item-content,.mat-nav-list .mat-list-item.mat-multi-line .mat-list-item-content{height:100%;padding:8px 16px}.mat-list .mat-list-item .mat-list-text,.mat-nav-list .mat-list-item .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0 16px}.mat-list .mat-list-item .mat-list-text>*,.mat-nav-list .mat-list-item .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list .mat-list-item .mat-list-text:empty,.mat-nav-list .mat-list-item .mat-list-text:empty{display:none}.mat-list .mat-list-item .mat-list-text:first-child,.mat-nav-list .mat-list-item .mat-list-text:first-child{padding:0}.mat-list .mat-list-item .mat-list-avatar,.mat-nav-list .mat-list-item .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%}.mat-list .mat-list-item .mat-list-icon,.mat-nav-list .mat-list-item .mat-list-icon{width:24px;height:24px;border-radius:50%;padding:4px}.mat-list .mat-list-item .mat-line,.mat-nav-list .mat-list-item .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list .mat-list-item .mat-line:nth-child(n+2),.mat-nav-list .mat-list-item .mat-line:nth-child(n+2){font-size:14px}.mat-list[dense],.mat-nav-list[dense]{padding-top:4px;display:block}.mat-list[dense] .mat-subheader,.mat-nav-list[dense] .mat-subheader{display:block;box-sizing:border-box;height:40px;padding:16px;margin:0;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-size:13px;font-weight:500}.mat-list[dense] .mat-subheader:first-child,.mat-nav-list[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list[dense] .mat-list-item,.mat-nav-list[dense] .mat-list-item{display:block}.mat-list[dense] .mat-list-item .mat-list-item-content,.mat-nav-list[dense] .mat-list-item .mat-list-item-content{display:flex;flex-direction:row;align-items:center;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;box-sizing:border-box;font-size:13px;height:40px;padding:0 16px;position:relative}.mat-list[dense] .mat-list-item.mat-list-item-avatar .mat-list-item-content,.mat-nav-list[dense] .mat-list-item.mat-list-item-avatar .mat-list-item-content{height:48px}.mat-list[dense] .mat-list-item.mat-2-line .mat-list-item-content,.mat-nav-list[dense] .mat-list-item.mat-2-line .mat-list-item-content{height:60px}.mat-list[dense] .mat-list-item.mat-3-line .mat-list-item-content,.mat-nav-list[dense] .mat-list-item.mat-3-line .mat-list-item-content{height:76px}.mat-list[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-nav-list[dense] .mat-list-item.mat-multi-line .mat-list-item-content{height:100%;padding:8px 16px}.mat-list[dense] .mat-list-item .mat-list-text,.mat-nav-list[dense] .mat-list-item .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0 16px}.mat-list[dense] .mat-list-item .mat-list-text>*,.mat-nav-list[dense] .mat-list-item .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list[dense] .mat-list-item .mat-list-text:empty,.mat-nav-list[dense] .mat-list-item .mat-list-text:empty{display:none}.mat-list[dense] .mat-list-item .mat-list-text:first-child,.mat-nav-list[dense] .mat-list-item .mat-list-text:first-child{padding:0}.mat-list[dense] .mat-list-item .mat-list-avatar,.mat-nav-list[dense] .mat-list-item .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%}.mat-list[dense] .mat-list-item .mat-list-icon,.mat-nav-list[dense] .mat-list-item .mat-list-icon{width:24px;height:24px;border-radius:50%;padding:4px}.mat-list[dense] .mat-list-item .mat-line,.mat-nav-list[dense] .mat-list-item .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list[dense] .mat-list-item .mat-line:nth-child(n+2),.mat-nav-list[dense] .mat-list-item .mat-line:nth-child(n+2){font-size:13px}.mat-divider{display:block;border-top-style:solid;border-top-width:1px;margin:0}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item-content{cursor:pointer}.mat-nav-list .mat-list-item-content.mat-list-item-focus,.mat-nav-list .mat-list-item-content:hover{outline:0} /*# sourceMappingURL=list.css.map */ \"],\n                providers: [{ provide: LIST_TYPE_TOKEN, useValue: NORMAL_LIST_TYPE }],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None\n            },] },\n];\n/**\n * @nocollapse\n */\nMdList.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdListCssMatStyler = (function () {\n    function MdListCssMatStyler() {\n    }\n    return MdListCssMatStyler;\n}());\nMdListCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-list, mat-list',\n                host: {\n                    '[class.mat-list]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdNavListCssMatStyler = (function () {\n    function MdNavListCssMatStyler() {\n    }\n    return MdNavListCssMatStyler;\n}());\nMdNavListCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-nav-list, mat-nav-list',\n                host: {\n                    '[class.mat-nav-list]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdNavListCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive to set the ListType token to NAV_LIST_TYPE.\n */\nvar MdNavListTokenSetter = (function () {\n    function MdNavListTokenSetter() {\n    }\n    return MdNavListTokenSetter;\n}());\nMdNavListTokenSetter.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-nav-list, mat-nav-list',\n                providers: [{ provide: LIST_TYPE_TOKEN, useValue: NAV_LIST_TYPE }],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdNavListTokenSetter.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdDividerCssMatStyler = (function () {\n    function MdDividerCssMatStyler() {\n    }\n    return MdDividerCssMatStyler;\n}());\nMdDividerCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-divider, mat-divider',\n                host: {\n                    '[class.mat-divider]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDividerCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdListAvatarCssMatStyler = (function () {\n    function MdListAvatarCssMatStyler() {\n    }\n    return MdListAvatarCssMatStyler;\n}());\nMdListAvatarCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-list-avatar], [mat-list-avatar]',\n                host: {\n                    '[class.mat-list-avatar]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListAvatarCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdListIconCssMatStyler = (function () {\n    function MdListIconCssMatStyler() {\n    }\n    return MdListIconCssMatStyler;\n}());\nMdListIconCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-list-icon], [mat-list-icon]',\n                host: {\n                    '[class.mat-list-icon]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListIconCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdListSubheaderCssMatStyler = (function () {\n    function MdListSubheaderCssMatStyler() {\n    }\n    return MdListSubheaderCssMatStyler;\n}());\nMdListSubheaderCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-subheader], [mat-subheader]',\n                host: {\n                    '[class.mat-subheader]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListSubheaderCssMatStyler.ctorParameters = function () { return []; };\nvar MdListItem = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _listType\n     */\n    function MdListItem(_renderer, _element, _listType) {\n        this._renderer = _renderer;\n        this._element = _element;\n        this._listType = _listType;\n        /**\n         * Whether the ripple effect on click should be disabled. This applies only to list items that\n         * are children of an md-nav-list; md-list items never have ripples.\n         */\n        this.disableRipple = false;\n        this._hasFocus = false;\n    }\n    Object.defineProperty(MdListItem.prototype, \"_hasAvatar\", {\n        /**\n         * @param {?} avatar\n         * @return {?}\n         */\n        set: function (avatar) {\n            this._renderer.setElementClass(this._element.nativeElement, 'mat-list-item-avatar', avatar != null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdListItem.prototype.ngAfterContentInit = function () {\n        this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n    };\n    /**\n     * Whether this list item should show a ripple effect when clicked.\n     * @return {?}\n     */\n    MdListItem.prototype.isRippleEnabled = function () {\n        return !this.disableRipple && (this._listType === NAV_LIST_TYPE);\n    };\n    /**\n     * @return {?}\n     */\n    MdListItem.prototype._handleFocus = function () {\n        this._hasFocus = true;\n    };\n    /**\n     * @return {?}\n     */\n    MdListItem.prototype._handleBlur = function () {\n        this._hasFocus = false;\n    };\n    return MdListItem;\n}());\nMdListItem.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n                host: {\n                    'role': 'listitem',\n                    '(focus)': '_handleFocus()',\n                    '(blur)': '_handleBlur()',\n                    '[class.mat-list-item]': 'true',\n                },\n                template: \"<div class=\\\"mat-list-item-content\\\" [class.mat-list-item-focus]=\\\"_hasFocus\\\" md-ripple [mdRippleDisabled]=\\\"!isRippleEnabled()\\\"> <ng-content select=\\\"[md-list-avatar],[md-list-icon], [mat-list-avatar], [mat-list-icon]\\\"></ng-content> <div class=\\\"mat-list-text\\\"><ng-content select=\\\"[md-line], [mat-line]\\\"></ng-content></div> <ng-content></ng-content> </div> \",\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListItem.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [LIST_TYPE_TOKEN,] },] },\n]; };\nMdListItem.propDecorators = {\n    'disableRipple': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    '_lines': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [MdLine,] },],\n    '_hasAvatar': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChild\"], args: [MdListAvatarCssMatStyler,] },],\n};\nvar MdListModule = (function () {\n    function MdListModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdListModule.forRoot = function () {\n        return {\n            ngModule: MdListModule,\n            providers: []\n        };\n    };\n    return MdListModule;\n}());\nMdListModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [MdLineModule, MdRippleModule, CompatibilityModule],\n                exports: [\n                    MdList,\n                    MdListItem,\n                    MdListDivider,\n                    MdListAvatarCssMatStyler,\n                    MdLineModule,\n                    CompatibilityModule,\n                    MdListIconCssMatStyler,\n                    MdListCssMatStyler,\n                    MdNavListCssMatStyler,\n                    MdDividerCssMatStyler,\n                    MdListSubheaderCssMatStyler,\n                    MdNavListTokenSetter,\n                ],\n                declarations: [\n                    MdList,\n                    MdListItem,\n                    MdListDivider,\n                    MdListAvatarCssMatStyler,\n                    MdListIconCssMatStyler,\n                    MdListCssMatStyler,\n                    MdNavListCssMatStyler,\n                    MdDividerCssMatStyler,\n                    MdListSubheaderCssMatStyler,\n                    MdNavListTokenSetter,\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListModule.ctorParameters = function () { return []; };\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nfunction coerceToString(value) {\n    return \"\" + (value || '');\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nfunction coerceToNumber(value) {\n    return typeof value === 'string' ? parseInt(value, 10) : value;\n}\nvar MdGridTile = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     */\n    function MdGridTile(_renderer, _element) {\n        this._renderer = _renderer;\n        this._element = _element;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    Object.defineProperty(MdGridTile.prototype, \"rowspan\", {\n        /**\n         * Amount of rows that the grid tile takes up.\n         * @return {?}\n         */\n        get: function () { return this._rowspan; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._rowspan = coerceToNumber(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdGridTile.prototype, \"colspan\", {\n        /**\n         * Amount of columns that the grid tile takes up.\n         * @return {?}\n         */\n        get: function () { return this._colspan; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._colspan = coerceToNumber(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    MdGridTile.prototype._setStyle = function (property, value) {\n        this._renderer.setElementStyle(this._element.nativeElement, property, value);\n    };\n    return MdGridTile;\n}());\nMdGridTile.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-grid-tile, mat-grid-tile',\n                host: {\n                    'role': 'listitem',\n                    '[class.mat-grid-tile]': 'true',\n                },\n                template: \"<!-- TODO(kara): Revisit why this is a figure.--> <figure class=\\\"mat-figure\\\"> <ng-content></ng-content> </figure>\",\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{display:flex;position:absolute;align-items:center;justify-content:center;height:100%;top:0;right:0;bottom:0;left:0;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;font-size:16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer .mat-line,.mat-grid-tile .mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile .mat-grid-tile-footer .mat-line:nth-child(n+2),.mat-grid-tile .mat-grid-tile-header .mat-line:nth-child(n+2){font-size:12px}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none} /*# sourceMappingURL=grid-list.css.map */ \"],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridTile.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\nMdGridTile.propDecorators = {\n    'rowspan': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'colspan': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\nvar MdGridTileText = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     */\n    function MdGridTileText(_renderer, _element) {\n        this._renderer = _renderer;\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    MdGridTileText.prototype.ngAfterContentInit = function () {\n        this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n    };\n    return MdGridTileText;\n}());\nMdGridTileText.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[md-grid-avatar], [mat-grid-avatar]\\\"></ng-content> <div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[md-line], [mat-line]\\\"></ng-content></div> <ng-content></ng-content> \"\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridTileText.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\nMdGridTileText.propDecorators = {\n    '_lines': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [MdLine,] },],\n};\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdGridAvatarCssMatStyler = (function () {\n    function MdGridAvatarCssMatStyler() {\n    }\n    return MdGridAvatarCssMatStyler;\n}());\nMdGridAvatarCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-grid-avatar], [mat-grid-avatar]',\n                host: {\n                    '[class.mat-grid-avatar]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridAvatarCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdGridTileHeaderCssMatStyler = (function () {\n    function MdGridTileHeaderCssMatStyler() {\n    }\n    return MdGridTileHeaderCssMatStyler;\n}());\nMdGridTileHeaderCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-grid-tile-header, mat-grid-tile-header',\n                host: {\n                    '[class.mat-grid-tile-header]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridTileHeaderCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdGridTileFooterCssMatStyler = (function () {\n    function MdGridTileFooterCssMatStyler() {\n    }\n    return MdGridTileFooterCssMatStyler;\n}());\nMdGridTileFooterCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n                host: {\n                    '[class.mat-grid-tile-footer]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridTileFooterCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Exception thrown when cols property is missing from grid-list\n * \\@docs-private\n */\nvar MdGridListColsError = (function (_super) {\n    __extends(MdGridListColsError, _super);\n    function MdGridListColsError() {\n        return _super.call(this, \"md-grid-list: must pass in number of columns. Example: <md-grid-list cols=\\\"3\\\">\") || this;\n    }\n    return MdGridListColsError;\n}(MdError));\n/**\n * Exception thrown when a tile's colspan is longer than the number of cols in list\n * \\@docs-private\n */\nvar MdGridTileTooWideError = (function (_super) {\n    __extends(MdGridTileTooWideError, _super);\n    /**\n     * @param {?} cols\n     * @param {?} listLength\n     */\n    function MdGridTileTooWideError(cols, listLength) {\n        return _super.call(this, \"md-grid-list: tile with colspan \" + cols + \" is wider than grid with cols=\\\"\" + listLength + \"\\\".\") || this;\n    }\n    return MdGridTileTooWideError;\n}(MdError));\n/**\n * Exception thrown when an invalid ratio is passed in as a rowHeight\n * \\@docs-private\n */\nvar MdGridListBadRatioError = (function (_super) {\n    __extends(MdGridListBadRatioError, _super);\n    /**\n     * @param {?} value\n     */\n    function MdGridListBadRatioError(value) {\n        return _super.call(this, \"md-grid-list: invalid ratio given for row-height: \\\"\" + value + \"\\\"\") || this;\n    }\n    return MdGridListBadRatioError;\n}(MdError));\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nvar TileCoordinator = (function () {\n    /**\n     * @param {?} numColumns\n     * @param {?} tiles\n     */\n    function TileCoordinator(numColumns, tiles) {\n        var _this = this;\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(function (tile) { return _this._trackTile(tile); });\n    }\n    Object.defineProperty(TileCoordinator.prototype, \"rowCount\", {\n        /**\n         * Gets the total number of rows occupied by tiles\n         * @return {?}\n         */\n        get: function () { return this.rowIndex + 1; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileCoordinator.prototype, \"rowspan\", {\n        /**\n         * Gets the total span of rows occupied by tiles.\n         * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ lastRowMax = Math.max.apply(Math, this.tracker);\n            // if any of the tiles has a rowspan that pushes it beyond the total row count,\n            // add the difference to the rowcount\n            return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Calculates the row and col position of a tile.\n     * @param {?} tile\n     * @return {?}\n     */\n    TileCoordinator.prototype._trackTile = function (tile) {\n        // Find a gap large enough for this tile.\n        var /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    };\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @param {?} tileCols\n     * @return {?}\n     */\n    TileCoordinator.prototype._findMatchingGap = function (tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw new MdGridTileTooWideError(tileCols, this.tracker.length);\n        }\n        // Start index is inclusive, end index is exclusive.\n        var /** @type {?} */ gapStartIndex = -1;\n        var /** @type {?} */ gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n        } while (gapEndIndex - gapStartIndex < tileCols);\n        return gapStartIndex;\n    };\n    /**\n     * Move \"down\" to the next row.\n     * @return {?}\n     */\n    TileCoordinator.prototype._nextRow = function () {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (var /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    };\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    TileCoordinator.prototype._findGapEndIndex = function (gapStartIndex) {\n        for (var /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    };\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    TileCoordinator.prototype._markTilePosition = function (start, tile) {\n        for (var /** @type {?} */ i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    };\n    return TileCoordinator;\n}());\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nvar TilePosition = (function () {\n    /**\n     * @param {?} row\n     * @param {?} col\n     */\n    function TilePosition(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n    return TilePosition;\n}());\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n */\nvar TileStyler = (function () {\n    function TileStyler() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    TileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    };\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    TileStyler.prototype.getBaseTileSize = function (sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return \"(\" + sizePercent + \"% - ( \" + this._gutterSize + \" * \" + gutterFraction + \" ))\";\n    };\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    TileStyler.prototype.getTilePosition = function (baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return calc(\"(\" + baseSize + \" + \" + this._gutterSize + \") * \" + offset);\n    };\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    TileStyler.prototype.getTileSize = function (baseSize, span) {\n        return \"(\" + baseSize + \" * \" + span + \") + (\" + (span - 1) + \" * \" + this._gutterSize + \")\";\n    };\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    TileStyler.prototype.setStyle = function (tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        var /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        var /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    };\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    TileStyler.prototype.setColStyles = function (tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        var /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        var /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    };\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    TileStyler.prototype.getGutterSpan = function () {\n        return this._gutterSize + \" * (\" + this._rowspan + \" - 1)\";\n    };\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    TileStyler.prototype.getTileSpan = function (tileHeight) {\n        return this._rowspan + \" * \" + this.getTileSize(tileHeight, 1);\n    };\n    /**\n     * Sets the vertical placement of the tile in the list.\n     * This method will be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    TileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) { };\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method will be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    TileStyler.prototype.getComputedHeight = function () { return null; };\n    return TileStyler;\n}());\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nvar FixedTileStyler = (function (_super) {\n    __extends(FixedTileStyler, _super);\n    /**\n     * @param {?} fixedRowHeight\n     */\n    function FixedTileStyler(fixedRowHeight) {\n        var _this = _super.call(this) || this;\n        _this.fixedRowHeight = fixedRowHeight;\n        return _this;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    FixedTileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {\n        _super.prototype.init.call(this, gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n    };\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    FixedTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    };\n    /**\n     * @return {?}\n     */\n    FixedTileStyler.prototype.getComputedHeight = function () {\n        return [\n            'height', calc(this.getTileSpan(this.fixedRowHeight) + \" + \" + this.getGutterSpan())\n        ];\n    };\n    return FixedTileStyler;\n}(TileStyler));\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nvar RatioTileStyler = (function (_super) {\n    __extends(RatioTileStyler, _super);\n    /**\n     * @param {?} value\n     */\n    function RatioTileStyler(value) {\n        var _this = _super.call(this) || this;\n        _this._parseRatio(value);\n        return _this;\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    RatioTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {\n        var /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use paddingTop and marginTop to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    };\n    /**\n     * @return {?}\n     */\n    RatioTileStyler.prototype.getComputedHeight = function () {\n        return [\n            'paddingBottom', calc(this.getTileSpan(this.baseTileHeight) + \" + \" + this.getGutterSpan())\n        ];\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RatioTileStyler.prototype._parseRatio = function (value) {\n        var /** @type {?} */ ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw new MdGridListBadRatioError(value);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    };\n    return RatioTileStyler;\n}(TileStyler));\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * \\@docs-private\n */\nvar FitTileStyler = (function (_super) {\n    __extends(FitTileStyler, _super);\n    function FitTileStyler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    FitTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {\n        // Percent of the available vertical space that one row takes up.\n        var /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        var /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        var /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    };\n    return FitTileStyler;\n}(TileStyler));\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) { return \"calc(\" + exp + \")\"; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nvar MD_FIT_MODE = 'fit';\nvar MdGridList = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    function MdGridList(_renderer, _element, _dir) {\n        this._renderer = _renderer;\n        this._element = _element;\n        this._dir = _dir;\n        this._gutter = '1px';\n    }\n    Object.defineProperty(MdGridList.prototype, \"cols\", {\n        /**\n         * Amount of columns in the grid list.\n         * @return {?}\n         */\n        get: function () { return this._cols; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._cols = coerceToNumber(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdGridList.prototype, \"gutterSize\", {\n        /**\n         * Size of the grid list's gutter in pixels.\n         * @return {?}\n         */\n        get: function () { return this._gutter; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._gutter = coerceToString(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdGridList.prototype, \"rowHeight\", {\n        /**\n         * Set internal representation of row height from the user-provided value.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._rowHeight = coerceToString(value);\n            this._setTileStyler();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdGridList.prototype.ngOnInit = function () {\n        this._checkCols();\n        this._checkRowHeight();\n    };\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    MdGridList.prototype.ngAfterContentChecked = function () {\n        this._layoutTiles();\n    };\n    /**\n     * Throw a friendly error if cols property is missing\n     * @return {?}\n     */\n    MdGridList.prototype._checkCols = function () {\n        if (!this.cols) {\n            throw new MdGridListColsError();\n        }\n    };\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @return {?}\n     */\n    MdGridList.prototype._checkRowHeight = function () {\n        if (!this._rowHeight) {\n            this._tileStyler = new RatioTileStyler('1:1');\n        }\n    };\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @return {?}\n     */\n    MdGridList.prototype._setTileStyler = function () {\n        if (this._rowHeight === MD_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(this._rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(this._rowHeight);\n        }\n    };\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @return {?}\n     */\n    MdGridList.prototype._layoutTiles = function () {\n        var _this = this;\n        var /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n        var /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        this._tiles.forEach(function (tile, index) {\n            var /** @type {?} */ pos = tracker.positions[index];\n            _this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    };\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    MdGridList.prototype._setListStyle = function (style$$1) {\n        if (style$$1) {\n            this._renderer.setElementStyle(this._element.nativeElement, style$$1[0], style$$1[1]);\n        }\n    };\n    return MdGridList;\n}());\nMdGridList.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-grid-list, mat-grid-list',\n                template: \"<div> <ng-content></ng-content> </div>\",\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{display:flex;position:absolute;align-items:center;justify-content:center;height:100%;top:0;right:0;bottom:0;left:0;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;font-size:16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer .mat-line,.mat-grid-tile .mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile .mat-grid-tile-footer .mat-line:nth-child(n+2),.mat-grid-tile .mat-grid-tile-header .mat-line:nth-child(n+2){font-size:12px}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none} /*# sourceMappingURL=grid-list.css.map */ \"],\n                host: {\n                    'role': 'list',\n                    '[class.mat-grid-list]': 'true',\n                },\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridList.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: Dir, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n]; };\nMdGridList.propDecorators = {\n    '_tiles': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [MdGridTile,] },],\n    'cols': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'gutterSize': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'rowHeight': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\nvar MdGridListModule = (function () {\n    function MdGridListModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdGridListModule.forRoot = function () {\n        return {\n            ngModule: MdGridListModule,\n            providers: []\n        };\n    };\n    return MdGridListModule;\n}());\nMdGridListModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [MdLineModule, CompatibilityModule],\n                exports: [\n                    MdGridList,\n                    MdGridTile,\n                    MdGridTileText,\n                    MdLineModule,\n                    CompatibilityModule,\n                    MdGridTileHeaderCssMatStyler,\n                    MdGridTileFooterCssMatStyler,\n                    MdGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MdGridList,\n                    MdGridTile,\n                    MdGridTileText,\n                    MdGridTileHeaderCssMatStyler,\n                    MdGridTileFooterCssMatStyler,\n                    MdGridAvatarCssMatStyler\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridListModule.ctorParameters = function () { return []; };\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardContent = (function () {\n    function MdCardContent() {\n    }\n    return MdCardContent;\n}());\nMdCardContent.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-card-content, mat-card-content',\n                host: {\n                    '[class.mat-card-content]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardContent.ctorParameters = function () { return []; };\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardTitle = (function () {\n    function MdCardTitle() {\n    }\n    return MdCardTitle;\n}());\nMdCardTitle.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-card-title, mat-card-title',\n                host: {\n                    '[class.mat-card-title]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardTitle.ctorParameters = function () { return []; };\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardSubtitle = (function () {\n    function MdCardSubtitle() {\n    }\n    return MdCardSubtitle;\n}());\nMdCardSubtitle.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-card-subtitle, mat-card-subtitle',\n                host: {\n                    '[class.mat-card-subtitle]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardSubtitle.ctorParameters = function () { return []; };\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardActions = (function () {\n    function MdCardActions() {\n    }\n    return MdCardActions;\n}());\nMdCardActions.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-card-actions, mat-card-actions',\n                host: {\n                    '[class.mat-card-actions]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardActions.ctorParameters = function () { return []; };\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardFooter = (function () {\n    function MdCardFooter() {\n    }\n    return MdCardFooter;\n}());\nMdCardFooter.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-card-footer, mat-card-footer',\n                host: {\n                    '[class.mat-card-footer]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardFooter.ctorParameters = function () { return []; };\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardSmImage = (function () {\n    function MdCardSmImage() {\n    }\n    return MdCardSmImage;\n}());\nMdCardSmImage.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-card-sm-image], [mat-card-sm-image]',\n                host: {\n                    '[class.mat-card-sm-image]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardSmImage.ctorParameters = function () { return []; };\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardMdImage = (function () {\n    function MdCardMdImage() {\n    }\n    return MdCardMdImage;\n}());\nMdCardMdImage.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-card-md-image], [mat-card-md-image]',\n                host: {\n                    '[class.mat-card-md-image]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardMdImage.ctorParameters = function () { return []; };\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardLgImage = (function () {\n    function MdCardLgImage() {\n    }\n    return MdCardLgImage;\n}());\nMdCardLgImage.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-card-lg-image], [mat-card-lg-image]',\n                host: {\n                    'class.mat-card-lg-image': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardLgImage.ctorParameters = function () { return []; };\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardImage = (function () {\n    function MdCardImage() {\n    }\n    return MdCardImage;\n}());\nMdCardImage.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-card-image], [mat-card-image]',\n                host: {\n                    '[class.mat-card-image]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardImage.ctorParameters = function () { return []; };\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardXlImage = (function () {\n    function MdCardXlImage() {\n    }\n    return MdCardXlImage;\n}());\nMdCardXlImage.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-card-xl-image], [mat-card-xl-image]',\n                host: {\n                    '[class.mat-card-xl-image]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardXlImage.ctorParameters = function () { return []; };\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardAvatar = (function () {\n    function MdCardAvatar() {\n    }\n    return MdCardAvatar;\n}());\nMdCardAvatar.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-card-avatar], [mat-card-avatar]',\n                host: {\n                    '[class.mat-card-avatar]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardAvatar.ctorParameters = function () { return []; };\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nvar MdCard = (function () {\n    function MdCard() {\n    }\n    return MdCard;\n}());\nMdCard.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-card, mat-card',\n                template: \"<ng-content></ng-content> \",\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);will-change:box-shadow;display:block;position:relative;padding:24px;border-radius:2px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif}.mat-card:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-card{outline:solid 1px}}.mat-card-flat{box-shadow:none}.mat-card-actions,.mat-card-content,.mat-card-subtitle,.mat-card-title{display:block;margin-bottom:16px}.mat-card-title{font-size:24px;font-weight:400}.mat-card-subtitle{font-size:14px}.mat-card-content{font-size:14px}.mat-card-actions{margin-left:-16px;margin-right:-16px;padding:8px 0}.mat-card-actions[align=end]{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 48px);margin:0 -24px 16px -24px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-footer{position:absolute;width:100%;min-height:5px;bottom:0;left:0}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button{margin:0 4px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header-text{margin:0 8px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0}.mat-card-header .mat-card-title{font-size:14px}.mat-card-lg-image,.mat-card-md-image,.mat-card-sm-image{margin:-8px 0}.mat-card-title-group{display:flex;justify-content:space-between;margin:0 -8px}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}@media (max-width:600px){.mat-card{padding:24px 16px}.mat-card-actions{margin-left:-8px;margin-right:-8px}.mat-card-image{width:calc(100% + 32px);margin:16px -16px}.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}.mat-card-header{margin:-8px 0 0 0}}.mat-card-content>:first-child,.mat-card>:first-child{margin-top:0}.mat-card-content>:last-child,.mat-card>:last-child{margin-bottom:0}.mat-card-image:first-child{margin-top:-24px}.mat-card>.mat-card-actions:last-child{margin-bottom:-16px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child{margin-left:0;margin-right:0}.mat-card-subtitle:not(:first-child),.mat-card-title:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px} /*# sourceMappingURL=card.css.map */ \"],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectionStrategy\"].OnPush,\n                host: {\n                    '[class.mat-card]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCard.ctorParameters = function () { return []; };\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nvar MdCardHeader = (function () {\n    function MdCardHeader() {\n    }\n    return MdCardHeader;\n}());\nMdCardHeader.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-card-header, mat-card-header',\n                template: \"<ng-content select=\\\"[md-card-avatar], [mat-card-avatar]\\\"></ng-content> <div class=\\\"mat-card-header-text\\\"> <ng-content select=\\\"md-card-title, mat-card-title, md-card-subtitle, mat-card-subtitle\\\"></ng-content> </div> <ng-content></ng-content> \",\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectionStrategy\"].OnPush,\n                host: {\n                    '[class.mat-card-header]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardHeader.ctorParameters = function () { return []; };\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nvar MdCardTitleGroup = (function () {\n    function MdCardTitleGroup() {\n    }\n    return MdCardTitleGroup;\n}());\nMdCardTitleGroup.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-card-title-group, mat-card-title-group',\n                template: \"<div> <ng-content select=\\\"md-card-title, mat-card-title, md-card-subtitle, mat-card-subtitle\\\"></ng-content> </div> <ng-content select=\\\"img\\\"></ng-content> <ng-content></ng-content> \",\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectionStrategy\"].OnPush,\n                host: {\n                    '[class.mat-card-title-group]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardTitleGroup.ctorParameters = function () { return []; };\nvar MdCardModule = (function () {\n    function MdCardModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdCardModule.forRoot = function () {\n        return {\n            ngModule: MdCardModule,\n            providers: []\n        };\n    };\n    return MdCardModule;\n}());\nMdCardModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [CompatibilityModule],\n                exports: [\n                    MdCard,\n                    MdCardHeader,\n                    MdCardTitleGroup,\n                    MdCardContent,\n                    MdCardTitle,\n                    MdCardSubtitle,\n                    MdCardActions,\n                    MdCardFooter,\n                    MdCardSmImage,\n                    MdCardMdImage,\n                    MdCardLgImage,\n                    MdCardImage,\n                    MdCardXlImage,\n                    MdCardAvatar,\n                    CompatibilityModule,\n                ],\n                declarations: [\n                    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n                    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\n                    MdCardXlImage, MdCardAvatar,\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardModule.ctorParameters = function () { return []; };\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nvar MdChip = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdChip(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /** Whether or not the chip is disabled. Disabled chips cannot be focused. */\n        this._disabled = null;\n        /** Whether or not the chip is selected. */\n        this._selected = false;\n        /** The palette color of selected chips. */\n        this._color = 'primary';\n        /** Emitted when the chip is focused. */\n        this.onFocus = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Emitted when the chip is selected. */\n        this.select = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Emitted when the chip is deselected. */\n        this.deselect = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Emitted when the chip is destroyed. */\n        this.destroy = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n    }\n    /**\n     * @return {?}\n     */\n    MdChip.prototype.ngOnInit = function () {\n        this._addDefaultCSSClass();\n        this._updateColor(this._color);\n    };\n    /**\n     * @return {?}\n     */\n    MdChip.prototype.ngOnDestroy = function () {\n        this.destroy.emit({ chip: this });\n    };\n    Object.defineProperty(MdChip.prototype, \"disabled\", {\n        /**\n         * Whether or not the chip is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled;\n        },\n        /**\n         * Sets the disabled state of the chip.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value) ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdChip.prototype, \"_isAriaDisabled\", {\n        /**\n         * A String representation of the current disabled state.\n         * @return {?}\n         */\n        get: function () {\n            return String(coerceBooleanProperty(this.disabled));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdChip.prototype, \"selected\", {\n        /**\n         * Whether or not this chip is selected.\n         * @return {?}\n         */\n        get: function () {\n            return this._selected;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._selected = coerceBooleanProperty(value);\n            if (this._selected) {\n                this.select.emit({ chip: this });\n            }\n            else {\n                this.deselect.emit({ chip: this });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Toggles the current selected state of this chip.\n     * @return {?} Whether the chip is selected.\n     */\n    MdChip.prototype.toggleSelected = function () {\n        this.selected = !this.selected;\n        return this.selected;\n    };\n    Object.defineProperty(MdChip.prototype, \"color\", {\n        /**\n         * The color of the chip. Can be `primary`, `accent`, or `warn`.\n         * @return {?}\n         */\n        get: function () {\n            return this._color;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._updateColor(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    MdChip.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');\n        this.onFocus.emit({ chip: this });\n    };\n    /**\n     * Ensures events fire properly upon click.\n     * @param {?} event\n     * @return {?}\n     */\n    MdChip.prototype._handleClick = function (event) {\n        // Check disabled\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else {\n            this.focus();\n        }\n    };\n    /**\n     * Initializes the appropriate CSS classes based on the chip type (basic or standard).\n     * @return {?}\n     */\n    MdChip.prototype._addDefaultCSSClass = function () {\n        var /** @type {?} */ el = this._elementRef.nativeElement;\n        // Always add the `mat-chip` class\n        el.classList.add('mat-chip');\n        // If we are a basic chip, also add the `mat-basic-chip` class for :not() targeting\n        if (el.nodeName.toLowerCase() == 'mat-basic-chip' || el.hasAttribute('mat-basic-chip') ||\n            el.nodeName.toLowerCase() == 'md-basic-chip' || el.hasAttribute('md-basic-chip')) {\n            el.classList.add('mat-basic-chip');\n        }\n    };\n    /**\n     * Updates the private _color variable and the native element.\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdChip.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * Sets the mat-color on the native element.\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdChip.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this._renderer.setElementClass(this._elementRef.nativeElement, \"mat-\" + color, isAdd);\n        }\n    };\n    return MdChip;\n}());\nMdChip.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{\n                selector: \"md-basic-chip, [md-basic-chip], md-chip, [md-chip],\\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\",\n                template: \"<ng-content></ng-content>\",\n                host: {\n                    '[class.mat-chip]': 'true',\n                    'tabindex': '-1',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[attr.disabled]': 'disabled',\n                    '[attr.aria-disabled]': '_isAriaDisabled',\n                    '(click)': '_handleClick($event)'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdChip.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\nMdChip.propDecorators = {\n    'select': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'deselect': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'destroy': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'selected': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'color': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n *\n * Example:\n *\n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\nvar MdChipList = (function () {\n    /**\n     * @param {?} _elementRef\n     */\n    function MdChipList(_elementRef) {\n        this._elementRef = _elementRef;\n        this._subscribed = new WeakMap();\n        /** Whether or not the chip is selectable. */\n        this._selectable = true;\n    }\n    /**\n     * @return {?}\n     */\n    MdChipList.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._keyManager = new FocusKeyManager(this.chips).withWrap();\n        // Go ahead and subscribe all of the initial chips\n        this._subscribeChips(this.chips);\n        // When the list changes, re-subscribe\n        this.chips.changes.subscribe(function (chips) {\n            _this._subscribeChips(chips);\n        });\n    };\n    Object.defineProperty(MdChipList.prototype, \"selectable\", {\n        /**\n         * Whether or not this chip is selectable. When a chip is not selectable,\n         * it's selected state is always ignored.\n         * @return {?}\n         */\n        get: function () {\n            return this._selectable;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._selectable = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Programmatically focus the chip list. This in turn focuses the first\n     * non-disabled chip in this chip list.\n     * @return {?}\n     */\n    MdChipList.prototype.focus = function () {\n        // TODO: ARIA says this should focus the first `selected` chip.\n        this._keyManager.setFirstItemActive();\n    };\n    /**\n     * Passes relevant key presses to our key manager.\n     * @param {?} event\n     * @return {?}\n     */\n    MdChipList.prototype._keydown = function (event) {\n        var /** @type {?} */ target = (event.target);\n        // If they are on a chip, check for space/left/right, otherwise pass to our key manager\n        if (target && target.classList.contains('mat-chip')) {\n            switch (event.keyCode) {\n                case SPACE:\n                    // If we are selectable, toggle the focused chip\n                    if (this.selectable) {\n                        this._toggleSelectOnFocusedChip();\n                    }\n                    // Always prevent space from scrolling the page since the list has focus\n                    event.preventDefault();\n                    break;\n                case LEFT_ARROW:\n                    this._keyManager.setPreviousItemActive();\n                    event.preventDefault();\n                    break;\n                case RIGHT_ARROW:\n                    this._keyManager.setNextItemActive();\n                    event.preventDefault();\n                    break;\n                default:\n                    this._keyManager.onKeydown(event);\n            }\n        }\n    };\n    /**\n     * Toggles the selected state of the currently focused chip.\n     * @return {?}\n     */\n    MdChipList.prototype._toggleSelectOnFocusedChip = function () {\n        // Allow disabling of chip selection\n        if (!this.selectable) {\n            return;\n        }\n        var /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n        if (this._isValidIndex(focusedIndex)) {\n            var /** @type {?} */ focusedChip = this.chips.toArray()[focusedIndex];\n            if (focusedChip) {\n                focusedChip.toggleSelected();\n            }\n        }\n    };\n    /**\n     * Iterate through the list of chips and add them to our list of\n     * subscribed chips.\n     *\n     * @param {?} chips The list of chips to be subscribed.\n     * @return {?}\n     */\n    MdChipList.prototype._subscribeChips = function (chips) {\n        var _this = this;\n        chips.forEach(function (chip) { return _this._addChip(chip); });\n    };\n    /**\n     * Add a specific chip to our subscribed list. If the chip has\n     * already been subscribed, this ensures it is only subscribed\n     * once.\n     *\n     * @param {?} chip The chip to be subscribed (or checked for existing\n     * subscription).\n     * @return {?}\n     */\n    MdChipList.prototype._addChip = function (chip) {\n        var _this = this;\n        // If we've already been subscribed to a parent, do nothing\n        if (this._subscribed.has(chip)) {\n            return;\n        }\n        // Watch for focus events outside of the keyboard navigation\n        chip.onFocus.subscribe(function () {\n            var /** @type {?} */ chipIndex = _this.chips.toArray().indexOf(chip);\n            if (_this._isValidIndex(chipIndex)) {\n                _this._keyManager.updateActiveItemIndex(chipIndex);\n            }\n        });\n        // On destroy, remove the item from our list, and check focus\n        chip.destroy.subscribe(function () {\n            var /** @type {?} */ chipIndex = _this.chips.toArray().indexOf(chip);\n            if (_this._isValidIndex(chipIndex)) {\n                // Check whether the chip is the last item\n                if (chipIndex < _this.chips.length - 1) {\n                    _this._keyManager.setActiveItem(chipIndex);\n                }\n                else if (chipIndex - 1 >= 0) {\n                    _this._keyManager.setActiveItem(chipIndex - 1);\n                }\n            }\n            _this._subscribed.delete(chip);\n            chip.destroy.unsubscribe();\n        });\n        this._subscribed.set(chip, true);\n    };\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    MdChipList.prototype._isValidIndex = function (index) {\n        return index >= 0 && index < this.chips.length;\n    };\n    return MdChipList;\n}());\nMdChipList.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-chip-list, mat-chip-list',\n                template: \"<div class=\\\"mat-chip-list-wrapper\\\"><ng-content></ng-content></div>\",\n                host: {\n                    // Properties\n                    'tabindex': '0',\n                    'role': 'listbox',\n                    '[class.mat-chip-list]': 'true',\n                    // Events\n                    '(focus)': 'focus()',\n                    '(keydown)': '_keydown($event)'\n                },\n                queries: {\n                    chips: new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"](MdChip)\n                },\n                styles: [\".mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:flex-start}.mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip){margin:0 3px 0 3px}.mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):first-child{margin-left:0;margin-right:3px}[dir=rtl] .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):first-child{margin-left:3px;margin-right:0}.mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):last-child{margin-left:3px;margin-right:0}[dir=rtl] .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):last-child{margin-left:0;margin-right:3px}.mat-chip:not(.mat-basic-chip){display:inline-block;padding:8px 12px 8px 12px;border-radius:24px;font-size:13px;line-height:16px}.mat-chip-list-stacked .mat-chip-list-wrapper{display:block}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip){display:block;margin:0;margin-bottom:8px}[dir=rtl] .mat-chip-list-stacked .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip){margin:0;margin-bottom:8px}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):last-child,[dir=rtl] .mat-chip-list-stacked .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):last-child{margin-bottom:0} /*# sourceMappingURL=chips.css.map */ \"],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectionStrategy\"].OnPush\n            },] },\n];\n/**\n * @nocollapse\n */\nMdChipList.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\nMdChipList.propDecorators = {\n    'selectable': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\nvar MdChipsModule = (function () {\n    function MdChipsModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdChipsModule.forRoot = function () {\n        return {\n            ngModule: MdChipsModule,\n            providers: []\n        };\n    };\n    return MdChipsModule;\n}());\nMdChipsModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [],\n                exports: [MdChipList, MdChip],\n                declarations: [MdChipList, MdChip]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdChipsModule.ctorParameters = function () { return []; };\n/**\n * Exception thrown when attempting to load an icon with a name that cannot be found.\n * \\@docs-private\n */\nvar MdIconNameNotFoundError = (function (_super) {\n    __extends(MdIconNameNotFoundError, _super);\n    /**\n     * @param {?} iconName\n     */\n    function MdIconNameNotFoundError(iconName) {\n        return _super.call(this, \"Unable to find icon with the name \\\"\" + iconName + \"\\\"\") || this;\n    }\n    return MdIconNameNotFoundError;\n}(MdError));\n/**\n * Exception thrown when attempting to load SVG content that does not contain the expected\n * <svg> tag.\n * \\@docs-private\n */\nvar MdIconSvgTagNotFoundError = (function (_super) {\n    __extends(MdIconSvgTagNotFoundError, _super);\n    function MdIconSvgTagNotFoundError() {\n        return _super.call(this, '<svg> tag not found') || this;\n    }\n    return MdIconSvgTagNotFoundError;\n}(MdError));\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nvar SvgIconConfig = (function () {\n    /**\n     * @param {?} url\n     */\n    function SvgIconConfig(url) {\n        this.url = url;\n        this.svgElement = null;\n    }\n    return SvgIconConfig;\n}());\n/** Returns the cache key to use for an icon namespace and name. */\nvar iconKey = function (namespace, name) { return namespace + ':' + name; };\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nvar MdIconRegistry = (function () {\n    /**\n     * @param {?} _http\n     * @param {?} _sanitizer\n     */\n    function MdIconRegistry(_http, _sanitizer) {\n        this._http = _http;\n        this._sanitizer = _sanitizer;\n        this._svgIconConfigs = new Map();\n        this._iconSetConfigs = new Map();\n        this._cachedIconsByUrl = new Map();\n        this._inProgressUrlFetches = new Map();\n        this._fontCssClassesByAlias = new Map();\n        this._defaultFontSetClass = 'material-icons';\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n    MdIconRegistry.prototype.addSvgIcon = function (iconName, url) {\n        return this.addSvgIconInNamespace('', iconName, url);\n    };\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n    MdIconRegistry.prototype.addSvgIconInNamespace = function (namespace, iconName, url) {\n        var /** @type {?} */ key = iconKey(namespace, iconName);\n        this._svgIconConfigs.set(key, new SvgIconConfig(url));\n        return this;\n    };\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param {?} url\n     * @return {?}\n     */\n    MdIconRegistry.prototype.addSvgIconSet = function (url) {\n        return this.addSvgIconSetInNamespace('', url);\n    };\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @return {?}\n     */\n    MdIconRegistry.prototype.addSvgIconSetInNamespace = function (namespace, url) {\n        var /** @type {?} */ config = new SvgIconConfig(url);\n        if (this._iconSetConfigs.has(namespace)) {\n            this._iconSetConfigs.get(namespace).push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    };\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the <md-icon> element.\n     *\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {?}\n     */\n    MdIconRegistry.prototype.registerFontClassAlias = function (alias, className) {\n        if (className === void 0) { className = alias; }\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    };\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n    MdIconRegistry.prototype.classNameForFontAlias = function (alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    };\n    /**\n     * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param {?} className\n     * @return {?}\n     */\n    MdIconRegistry.prototype.setDefaultFontSetClass = function (className) {\n        this._defaultFontSetClass = className;\n        return this;\n    };\n    /**\n     * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n    MdIconRegistry.prototype.getDefaultFontSetClass = function () {\n        return this._defaultFontSetClass;\n    };\n    /**\n     * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n    MdIconRegistry.prototype.getSvgIconFromUrl = function (safeUrl) {\n        var _this = this;\n        var /** @type {?} */ url = this._sanitizer.sanitize(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SecurityContext\"].RESOURCE_URL, safeUrl);\n        if (this._cachedIconsByUrl.has(url)) {\n            return __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"].of(cloneSvg(this._cachedIconsByUrl.get(url)));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(url))\n            .do(function (svg) { return _this._cachedIconsByUrl.set(url, svg); })\n            .map(function (svg) { return cloneSvg(svg); });\n    };\n    /**\n     * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an MdIconNameNotFoundError.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n    MdIconRegistry.prototype.getNamedSvgIcon = function (name, namespace) {\n        if (namespace === void 0) { namespace = ''; }\n        // Return (copy of) cached icon if possible.\n        var /** @type {?} */ key = iconKey(namespace, name);\n        if (this._svgIconConfigs.has(key)) {\n            return this._getSvgFromConfig(this._svgIconConfigs.get(key));\n        }\n        // See if we have any icon sets registered for the namespace.\n        var /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"].throw(new MdIconNameNotFoundError(key));\n    };\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @param {?} config\n     * @return {?}\n     */\n    MdIconRegistry.prototype._getSvgFromConfig = function (config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"].of(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config)\n                .do(function (svg) { return config.svgElement = svg; })\n                .map(function (svg) { return cloneSvg(svg); });\n        }\n    };\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * MdIconNameNotFoundError if no icon with the specified name can be found.\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    MdIconRegistry.prototype._getSvgFromIconSetConfigs = function (name, iconSetConfigs) {\n        var _this = this;\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        var /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"].of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        var /** @type {?} */ iconSetFetchRequests = iconSetConfigs\n            .filter(function (iconSetConfig) { return !iconSetConfig.svgElement; })\n            .map(function (iconSetConfig) { return _this._loadSvgIconSetFromConfig(iconSetConfig)\n            .catch(function (err, caught) {\n            var /** @type {?} */ url = _this._sanitizer.sanitize(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SecurityContext\"].RESOURCE_URL, iconSetConfig.url);\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(\"Loading icon set URL: \" + url + \" failed: \" + err);\n            return __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"].of(null);\n        })\n            .do(function (svg) {\n            // Cache SVG element.\n            if (svg) {\n                iconSetConfig.svgElement = svg;\n            }\n        }); });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"].forkJoin(iconSetFetchRequests)\n            .map(function (ignoredResults) {\n            var /** @type {?} */ foundIcon = _this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw new MdIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        });\n    };\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    MdIconRegistry.prototype._extractIconWithNameFromAnySet = function (iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (var /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n            var /** @type {?} */ config = iconSetConfigs[i];\n            if (config.svgElement) {\n                var /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n    MdIconRegistry.prototype._loadSvgIconFromConfig = function (config) {\n        var _this = this;\n        return this._fetchUrl(config.url)\n            .map(function (svgText) { return _this._createSvgElementForSingleIcon(svgText); });\n    };\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n    MdIconRegistry.prototype._loadSvgIconSetFromConfig = function (config) {\n        var _this = this;\n        // TODO: Document that icons should only be loaded from trusted sources.\n        return this._fetchUrl(config.url)\n            .map(function (svgText) { return _this._svgElementFromString(svgText); });\n    };\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @param {?} responseText\n     * @return {?}\n     */\n    MdIconRegistry.prototype._createSvgElementForSingleIcon = function (responseText) {\n        var /** @type {?} */ svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg);\n        return svg;\n    };\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @return {?}\n     */\n    MdIconRegistry.prototype._extractSvgIconFromSet = function (iconSet, iconName) {\n        var /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n        if (!iconNode) {\n            return null;\n        }\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconNode.tagName.toLowerCase() == 'svg') {\n            return this._setSvgAttributes(/** @type {?} */ (iconNode.cloneNode(true)));\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        var /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconNode.cloneNode(true));\n        return this._setSvgAttributes(svg);\n    };\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @param {?} str\n     * @return {?}\n     */\n    MdIconRegistry.prototype._svgElementFromString = function (str) {\n        // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n        // creating an element from an HTML string.\n        var /** @type {?} */ div = document.createElement('DIV');\n        div.innerHTML = str;\n        var /** @type {?} */ svg = (div.querySelector('svg'));\n        if (!svg) {\n            throw new MdIconSvgTagNotFoundError();\n        }\n        return svg;\n    };\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @param {?} svg\n     * @return {?}\n     */\n    MdIconRegistry.prototype._setSvgAttributes = function (svg) {\n        if (!svg.getAttribute('xmlns')) {\n            svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        }\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        return svg;\n    };\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @param {?} safeUrl\n     * @return {?}\n     */\n    MdIconRegistry.prototype._fetchUrl = function (safeUrl) {\n        var _this = this;\n        var /** @type {?} */ url = this._sanitizer.sanitize(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SecurityContext\"].RESOURCE_URL, safeUrl);\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        if (this._inProgressUrlFetches.has(url)) {\n            return this._inProgressUrlFetches.get(url);\n        }\n        // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n        // Observable. Figure out why and fix it.\n        var /** @type {?} */ req = (this._http.get(url)\n            .map(function (response) { return response.text(); })\n            .finally(function () {\n            _this._inProgressUrlFetches.delete(url);\n        })\n            .share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    };\n    return MdIconRegistry;\n}());\nMdIconRegistry.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nMdIconRegistry.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_12__angular_http__[\"Http\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__[\"DomSanitizer\"], },\n]; };\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n    return (svg.cloneNode(true));\n}\n/**\n * Exception thrown when an invalid icon name is passed to an md-icon component.\n */\nvar MdIconInvalidNameError = (function (_super) {\n    __extends(MdIconInvalidNameError, _super);\n    /**\n     * @param {?} iconName\n     */\n    function MdIconInvalidNameError(iconName) {\n        return _super.call(this, \"Invalid icon name: \\\"\" + iconName + \"\\\"\") || this;\n    }\n    return MdIconInvalidNameError;\n}(MdError));\n/**\n * Component to display an icon. It can be used in the following ways:\n * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined\n *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.\n *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its\n *   server must be configured to allow cross-domain requests.\n *   Example:\n *     <md-icon svgSrc=\"assets/arrow.svg\"></md-icon>\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nvar MdIcon = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _mdIconRegistry\n     */\n    function MdIcon(_elementRef, _renderer, _mdIconRegistry) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._mdIconRegistry = _mdIconRegistry;\n        /** Screenreader label for the icon. */\n        this.hostAriaLabel = '';\n    }\n    Object.defineProperty(MdIcon.prototype, \"color\", {\n        /**\n         * Color of the icon.\n         * @return {?}\n         */\n        get: function () { return this._color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._updateColor(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdIcon.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdIcon.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this._renderer.setElementClass(this._elementRef.nativeElement, \"mat-\" + color, isAdd);\n        }\n    };\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws a MdIconInvalidNameError if the name contains two or more ':' separators.\n     * Examples:\n     *   'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws MdIconInvalidNameError)\n     * @param {?} iconName\n     * @return {?}\n     */\n    MdIcon.prototype._splitIconName = function (iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        var /** @type {?} */ parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                // Use default namespace.\n                return ['', parts[0]];\n            case 2:\n                return (parts);\n            default:\n                throw new MdIconInvalidNameError(iconName);\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MdIcon.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        var /** @type {?} */ changedInputs = Object.keys(changes);\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {\n            if (this.svgIcon) {\n                var _a = this._splitIconName(this.svgIcon), namespace = _a[0], iconName = _a[1];\n                this._mdIconRegistry.getNamedSvgIcon(iconName, namespace).first().subscribe(function (svg) { return _this._setSvgElement(svg); }, function (err) { return console.log(\"Error retrieving icon: \" + err.message); });\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n        this._updateAriaLabel();\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype.ngOnInit = function () {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype.ngAfterViewChecked = function () {\n        // Update aria label here because it may depend on the projected text content.\n        // (e.g. <md-icon>home</md-icon> should use 'home').\n        this._updateAriaLabel();\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype._updateAriaLabel = function () {\n        var /** @type {?} */ ariaLabel = this._getAriaLabel();\n        if (ariaLabel && ariaLabel !== this._previousAriaLabel) {\n            this._previousAriaLabel = ariaLabel;\n            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-label', ariaLabel);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype._getAriaLabel = function () {\n        // If the parent provided an aria-label attribute value, use it as-is. Otherwise look for a\n        // reasonable value from the alt attribute, font icon name, SVG icon name, or (for ligatures)\n        // the text content of the directive.\n        var /** @type {?} */ label = this.hostAriaLabel ||\n            this.alt ||\n            this.fontIcon ||\n            this._splitIconName(this.svgIcon)[1];\n        if (label) {\n            return label;\n        }\n        // The \"content\" of an SVG icon is not a useful label.\n        if (this._usingFontIcon()) {\n            var /** @type {?} */ text = this._elementRef.nativeElement.textContent;\n            if (text) {\n                return text;\n            }\n        }\n        // TODO: Warn here in dev mode.\n        return null;\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype._usingFontIcon = function () {\n        return !this.svgIcon;\n    };\n    /**\n     * @param {?} svg\n     * @return {?}\n     */\n    MdIcon.prototype._setSvgElement = function (svg) {\n        var /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n        // Remove existing child nodes and add the new SVG element.\n        // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,\n        // but it fails in IE11: https://github.com/angular/angular/issues/6327\n        layoutElement.innerHTML = '';\n        this._renderer.projectNodes(layoutElement, [svg]);\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype._updateFontIconClasses = function () {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        var /** @type {?} */ elem = this._elementRef.nativeElement;\n        var /** @type {?} */ fontSetClass = this.fontSet ?\n            this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n            this._mdIconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                this._renderer.setElementClass(elem, this._previousFontSetClass, false);\n            }\n            if (fontSetClass) {\n                this._renderer.setElementClass(elem, fontSetClass, true);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                this._renderer.setElementClass(elem, this._previousFontIconClass, false);\n            }\n            if (this.fontIcon) {\n                this._renderer.setElementClass(elem, this.fontIcon, true);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    };\n    return MdIcon;\n}());\nMdIcon.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ template: '<ng-content></ng-content>',\n                selector: 'md-icon, mat-icon',\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px} /*# sourceMappingURL=icon.css.map */ \"],\n                host: {\n                    'role': 'img',\n                    '[class.mat-icon]': 'true',\n                },\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectionStrategy\"].OnPush,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdIcon.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: MdIconRegistry, },\n]; };\nMdIcon.propDecorators = {\n    'svgIcon': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'fontSet': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'fontIcon': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'alt': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'hostAriaLabel': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['aria-label',] },],\n    'color': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, http, sanitizer) {\n    return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\nvar ICON_REGISTRY_PROVIDER = {\n    // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MdIconRegistry,\n    deps: [[new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SkipSelf\"](), MdIconRegistry], __WEBPACK_IMPORTED_MODULE_12__angular_http__[\"Http\"], __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__[\"DomSanitizer\"]],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\nvar MdIconModule = (function () {\n    function MdIconModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdIconModule.forRoot = function () {\n        return {\n            ngModule: MdIconModule,\n            providers: [],\n        };\n    };\n    return MdIconModule;\n}());\nMdIconModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [__WEBPACK_IMPORTED_MODULE_12__angular_http__[\"HttpModule\"], CompatibilityModule],\n                exports: [MdIcon, CompatibilityModule],\n                declarations: [MdIcon],\n                providers: [ICON_REGISTRY_PROVIDER],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdIconModule.ctorParameters = function () { return []; };\n// TODO(josephperrott): Benchpress tests.\n/** A single degree in radians. */\nvar DEGREE_IN_RADIANS = Math.PI / 180;\n/** Duration of the indeterminate animation. */\nvar DURATION_INDETERMINATE = 667;\n/** Duration of the indeterminate animation. */\nvar DURATION_DETERMINATE = 225;\n/** Start animation value of the indeterminate animation */\nvar startIndeterminate = 3;\n/** End animation value of the indeterminate animation */\nvar endIndeterminate = 80;\n/* Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden. */\nvar MAX_ANGLE = 359.99 / 100;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdProgressSpinnerCssMatStyler = (function () {\n    function MdProgressSpinnerCssMatStyler() {\n    }\n    return MdProgressSpinnerCssMatStyler;\n}());\nMdProgressSpinnerCssMatStyler.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-progress-spinner, mat-progress-spinner',\n                host: {\n                    '[class.mat-progress-spinner]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdProgressSpinnerCssMatStyler.ctorParameters = function () { return []; };\n/**\n * <md-progress-spinner> component.\n */\nvar MdProgressSpinner = (function () {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     */\n    function MdProgressSpinner(_ngZone, _elementRef, _renderer) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._lastAnimationId = 0;\n        this._mode = 'determinate';\n        this._color = 'primary';\n    }\n    Object.defineProperty(MdProgressSpinner.prototype, \"_ariaValueMin\", {\n        /**\n         * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n         * because voiceover does not report the progress indicator as indeterminate if the aria min\n         * and/or max value are number values.\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'determinate' ? 0 : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressSpinner.prototype, \"_ariaValueMax\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'determinate' ? 100 : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressSpinner.prototype, \"interdeterminateInterval\", {\n        /**\n         * \\@docs-private\n         * @return {?}\n         */\n        get: function () {\n            return this._interdeterminateInterval;\n        },\n        /**\n         * \\@docs-private\n         * @param {?} interval\n         * @return {?}\n         */\n        set: function (interval) {\n            clearInterval(this._interdeterminateInterval);\n            this._interdeterminateInterval = interval;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clean up any animations that were running.\n     * @return {?}\n     */\n    MdProgressSpinner.prototype.ngOnDestroy = function () {\n        this._cleanupIndeterminateAnimation();\n    };\n    Object.defineProperty(MdProgressSpinner.prototype, \"color\", {\n        /**\n         * The color of the progress-spinner. Can be primary, accent, or warn.\n         * @return {?}\n         */\n        get: function () { return this._color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._updateColor(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressSpinner.prototype, \"value\", {\n        /**\n         * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n         * @return {?}\n         */\n        get: function () {\n            if (this.mode == 'determinate') {\n                return this._value;\n            }\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            if (v != null && this.mode == 'determinate') {\n                var /** @type {?} */ newValue = clamp(v);\n                this._animateCircle(this.value || 0, newValue);\n                this._value = newValue;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressSpinner.prototype, \"mode\", {\n        /**\n         * Mode of the progress circle\n         *\n         * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n         * mode is bound to the host as the attribute host.\n         * @return {?}\n         */\n        get: function () {\n            return this._mode;\n        },\n        /**\n         * @param {?} mode\n         * @return {?}\n         */\n        set: function (mode) {\n            if (mode !== this._mode) {\n                if (mode === 'indeterminate') {\n                    this._startIndeterminateAnimation();\n                }\n                else {\n                    this._cleanupIndeterminateAnimation();\n                    this._animateCircle(0, this._value);\n                }\n                this._mode = mode;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Animates the circle from one percentage value to another.\n     *\n     * @param {?} animateFrom The percentage of the circle filled starting the animation.\n     * @param {?} animateTo The percentage of the circle filled ending the animation.\n     * @param {?=} ease The easing function to manage the pace of change in the animation.\n     * @param {?=} duration The length of time to show the animation, in milliseconds.\n     * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n     *    of the circle.\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._animateCircle = function (animateFrom, animateTo, ease, duration, rotation) {\n        var _this = this;\n        if (ease === void 0) { ease = linearEase; }\n        if (duration === void 0) { duration = DURATION_DETERMINATE; }\n        if (rotation === void 0) { rotation = 0; }\n        var /** @type {?} */ id = ++this._lastAnimationId;\n        var /** @type {?} */ startTime = Date.now();\n        var /** @type {?} */ changeInValue = animateTo - animateFrom;\n        // No need to animate it if the values are the same\n        if (animateTo === animateFrom) {\n            this._renderArc(animateTo, rotation);\n        }\n        else {\n            var /** @type {?} */ animation_1 = function () {\n                var /** @type {?} */ elapsedTime = Math.max(0, Math.min(Date.now() - startTime, duration));\n                _this._renderArc(ease(elapsedTime, animateFrom, changeInValue, duration), rotation);\n                // Prevent overlapping animations by checking if a new animation has been called for and\n                // if the animation has lasted longer than the animation duration.\n                if (id === _this._lastAnimationId && elapsedTime < duration) {\n                    requestAnimationFrame(animation_1);\n                }\n            };\n            // Run the animation outside of Angular's zone, in order to avoid\n            // hitting ZoneJS and change detection on each frame.\n            this._ngZone.runOutsideAngular(animation_1);\n        }\n    };\n    /**\n     * Starts the indeterminate animation interval, if it is not already running.\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._startIndeterminateAnimation = function () {\n        var _this = this;\n        var /** @type {?} */ rotationStartPoint = 0;\n        var /** @type {?} */ start = startIndeterminate;\n        var /** @type {?} */ end = endIndeterminate;\n        var /** @type {?} */ duration = DURATION_INDETERMINATE;\n        var /** @type {?} */ animate$$1 = function () {\n            _this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n            // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n            rotationStartPoint = (rotationStartPoint + end) % 100;\n            var /** @type {?} */ temp = start;\n            start = -end;\n            end = -temp;\n        };\n        if (!this.interdeterminateInterval) {\n            this._ngZone.runOutsideAngular(function () {\n                _this.interdeterminateInterval = setInterval(animate$$1, duration + 50, 0, false);\n                animate$$1();\n            });\n        }\n    };\n    /**\n     * Removes interval, ending the animation.\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._cleanupIndeterminateAnimation = function () {\n        this.interdeterminateInterval = null;\n    };\n    /**\n     * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n     * DOM attribute on the `<path>`.\n     * @param {?} currentValue\n     * @param {?=} rotation\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._renderArc = function (currentValue, rotation) {\n        if (rotation === void 0) { rotation = 0; }\n        // Caches the path reference so it doesn't have to be looked up every time.\n        var /** @type {?} */ path = this._path = this._path || this._elementRef.nativeElement.querySelector('path');\n        // Ensure that the path was found. This may not be the case if the\n        // animation function fires too early.\n        if (path) {\n            path.setAttribute('d', getSvgArc(currentValue, rotation));\n        }\n    };\n    /**\n     * Updates the color of the progress-spinner by adding the new palette class to the element\n     * and removing the old one.\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * Sets the given palette class on the component element.\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this._renderer.setElementClass(this._elementRef.nativeElement, \"mat-\" + color, isAdd);\n        }\n    };\n    return MdProgressSpinner;\n}());\nMdProgressSpinner.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-progress-spinner, mat-progress-spinner',\n                host: {\n                    'role': 'progressbar',\n                    '[attr.aria-valuemin]': '_ariaValueMin',\n                    '[attr.aria-valuemax]': '_ariaValueMax'\n                },\n                template: \"<!-- preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's center. The center of the circle will remain at the center of the md-progress-spinner element containing the SVG. --> <svg viewBox=\\\"0 0 100 100\\\" preserveAspectRatio=\\\"xMidYMid meet\\\"> <path></path> </svg> \",\n                styles: [\":host{display:block;height:100px;width:100px;overflow:hidden}:host svg{height:100%;width:100%;transform-origin:center}:host path{fill:transparent;stroke-width:10px;transition:stroke .3s cubic-bezier(.35,0,.25,1)}:host[mode=indeterminate] svg{animation-duration:5.25s,2.887s;animation-name:mat-progress-spinner-sporadic-rotate,mat-progress-spinner-linear-rotate;animation-timing-function:cubic-bezier(.35,0,.25,1),linear;animation-iteration-count:infinite;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-sporadic-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}100%{transform:rotate(1080deg)}} /*# sourceMappingURL=progress-spinner.css.map */ \"],\n                changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectionStrategy\"].OnPush,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdProgressSpinner.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n]; };\nMdProgressSpinner.propDecorators = {\n    'color': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'value': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"HostBinding\"], args: ['attr.aria-valuenow',] },],\n    'mode': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"HostBinding\"], args: ['attr.mode',] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * <md-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nvar MdSpinner = (function (_super) {\n    __extends(MdSpinner, _super);\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} renderer\n     */\n    function MdSpinner(elementRef, ngZone, renderer) {\n        var _this = _super.call(this, ngZone, elementRef, renderer) || this;\n        _this.mode = 'indeterminate';\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    MdSpinner.prototype.ngOnDestroy = function () {\n        // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n        // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n        _super.prototype.ngOnDestroy.call(this);\n    };\n    return MdSpinner;\n}(MdProgressSpinner));\nMdSpinner.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-spinner, mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    '[class.mat-spinner]': 'true',\n                },\n                template: \"<!-- preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's center. The center of the circle will remain at the center of the md-progress-spinner element containing the SVG. --> <svg viewBox=\\\"0 0 100 100\\\" preserveAspectRatio=\\\"xMidYMid meet\\\"> <path></path> </svg> \",\n                styles: [\":host{display:block;height:100px;width:100px;overflow:hidden}:host svg{height:100%;width:100%;transform-origin:center}:host path{fill:transparent;stroke-width:10px;transition:stroke .3s cubic-bezier(.35,0,.25,1)}:host[mode=indeterminate] svg{animation-duration:5.25s,2.887s;animation-name:mat-progress-spinner-sporadic-rotate,mat-progress-spinner-linear-rotate;animation-timing-function:cubic-bezier(.35,0,.25,1),linear;animation-iteration-count:infinite;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-sporadic-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}100%{transform:rotate(1080deg)}} /*# sourceMappingURL=progress-spinner.css.map */ \"],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSpinner.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n]; };\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v) {\n    return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius, pathRadius, angleInDegrees) {\n    var /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n    return (radius + (pathRadius * Math.cos(angleInRadians))) +\n        ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime, startValue, changeInValue, duration) {\n    return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime, startValue, changeInValue, duration) {\n    var /** @type {?} */ time = currentTime / duration;\n    var /** @type {?} */ timeCubed = Math.pow(time, 3);\n    var /** @type {?} */ timeQuad = Math.pow(time, 4);\n    var /** @type {?} */ timeQuint = Math.pow(time, 5);\n    return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n *\n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue, rotation) {\n    var /** @type {?} */ startPoint = rotation || 0;\n    var /** @type {?} */ radius = 50;\n    var /** @type {?} */ pathRadius = 40;\n    var /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n    var /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n    var /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n    var /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n    var /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n    var /** @type {?} */ largeArcFlag;\n    if (endAngle < 0) {\n        largeArcFlag = endAngle >= -180 ? 0 : 1;\n    }\n    else {\n        largeArcFlag = endAngle <= 180 ? 0 : 1;\n    }\n    return \"M\" + start + \"A\" + pathRadius + \",\" + pathRadius + \" 0 \" + largeArcFlag + \",\" + arcSweep + \" \" + end;\n}\nvar MdProgressSpinnerModule = (function () {\n    function MdProgressSpinnerModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdProgressSpinnerModule.forRoot = function () {\n        return {\n            ngModule: MdProgressSpinnerModule,\n            providers: []\n        };\n    };\n    return MdProgressSpinnerModule;\n}());\nMdProgressSpinnerModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [CompatibilityModule],\n                exports: [\n                    MdProgressSpinner,\n                    MdSpinner,\n                    CompatibilityModule,\n                    MdProgressSpinnerCssMatStyler\n                ],\n                declarations: [\n                    MdProgressSpinner,\n                    MdSpinner,\n                    MdProgressSpinnerCssMatStyler\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdProgressSpinnerModule.ctorParameters = function () { return []; };\n/**\n * <md-progress-bar> component.\n */\nvar MdProgressBar = (function () {\n    function MdProgressBar() {\n        /** Color of the progress bar. */\n        this.color = 'primary';\n        this._value = 0;\n        this._bufferValue = 0;\n        /**\n         * Mode of the progress bar.\n         *\n         * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n         * 'determinate'.\n         * Mirrored to mode attribute.\n         */\n        this.mode = 'determinate';\n    }\n    Object.defineProperty(MdProgressBar.prototype, \"value\", {\n        /**\n         * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n         * @return {?}\n         */\n        get: function () { return this._value; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this._value = clamp$1(v || 0); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressBar.prototype, \"bufferValue\", {\n        /**\n         * Buffer value of the progress bar. Defaults to zero.\n         * @return {?}\n         */\n        get: function () { return this._bufferValue; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this._bufferValue = clamp$1(v || 0); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the current transform value for the progress bar's primary indicator.\n     * @return {?}\n     */\n    MdProgressBar.prototype._primaryTransform = function () {\n        var /** @type {?} */ scale = this.value / 100;\n        return { transform: \"scaleX(\" + scale + \")\" };\n    };\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     * @return {?}\n     */\n    MdProgressBar.prototype._bufferTransform = function () {\n        if (this.mode == 'buffer') {\n            var /** @type {?} */ scale = this.bufferValue / 100;\n            return { transform: \"scaleX(\" + scale + \")\" };\n        }\n    };\n    return MdProgressBar;\n}());\nMdProgressBar.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-progress-bar, mat-progress-bar',\n                host: {\n                    'role': 'progressbar',\n                    'aria-valuemin': '0',\n                    'aria-valuemax': '100',\n                    '[class.mat-primary]': 'color == \"primary\"',\n                    '[class.mat-accent]': 'color == \"accent\"',\n                    '[class.mat-warn]': 'color == \"warn\"',\n                    '[class.mat-progress-bar]': 'true',\n                },\n                template: \"<!-- The background div is named as such because it appears below the other divs and is not sized based on values. --> <div class=\\\"mat-progress-bar-background mat-progress-bar-element\\\"></div> <div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div> <div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\"></div> <div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div> \",\n                styles: [\":host{display:block;height:5px;overflow:hidden;position:relative;transform:translateZ(0);transition:opacity 250ms linear;width:100%}:host .mat-progress-bar-element,:host .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}:host .mat-progress-bar-background{background-repeat:repeat-x;background-size:10px 4px;display:none}:host .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease,stroke .3s cubic-bezier(.35,0,.25,1)}:host .mat-progress-bar-secondary{display:none}:host .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease,stroke .3s cubic-bezier(.35,0,.25,1)}:host .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}:host[mode=query]{transform:rotateZ(180deg)}:host[mode=indeterminate] .mat-progress-bar-fill,:host[mode=query] .mat-progress-bar-fill{transition:none}:host[mode=indeterminate] .mat-progress-bar-primary,:host[mode=query] .mat-progress-bar-primary{animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}:host[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,:host[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}:host[mode=indeterminate] .mat-progress-bar-secondary,:host[mode=query] .mat-progress-bar-secondary{animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}:host[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,:host[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}:host[mode=buffer] .mat-progress-bar-background{animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}:host-context([dir=rtl]){transform:rotateY(180deg)}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-10px)}} /*# sourceMappingURL=progress-bar.css.map */ \"],\n                changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectionStrategy\"].OnPush,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdProgressBar.ctorParameters = function () { return []; };\nMdProgressBar.propDecorators = {\n    'color': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'value': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"HostBinding\"], args: ['attr.aria-valuenow',] },],\n    'bufferValue': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'mode': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"HostBinding\"], args: ['attr.mode',] },],\n};\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp$1(v, min, max) {\n    if (min === void 0) { min = 0; }\n    if (max === void 0) { max = 100; }\n    return Math.max(min, Math.min(max, v));\n}\nvar MdProgressBarModule = (function () {\n    function MdProgressBarModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdProgressBarModule.forRoot = function () {\n        return {\n            ngModule: MdProgressBarModule,\n            providers: []\n        };\n    };\n    return MdProgressBarModule;\n}());\nMdProgressBarModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [__WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"], CompatibilityModule],\n                exports: [MdProgressBar, CompatibilityModule],\n                declarations: [MdProgressBar],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdProgressBarModule.ctorParameters = function () { return []; };\n/**\n * \\@docs-private\n */\nvar MdInputContainerPlaceholderConflictError = (function (_super) {\n    __extends(MdInputContainerPlaceholderConflictError, _super);\n    function MdInputContainerPlaceholderConflictError() {\n        return _super.call(this, 'Placeholder attribute and child element were both specified.') || this;\n    }\n    return MdInputContainerPlaceholderConflictError;\n}(MdError));\n/**\n * \\@docs-private\n */\nvar MdInputContainerUnsupportedTypeError = (function (_super) {\n    __extends(MdInputContainerUnsupportedTypeError, _super);\n    /**\n     * @param {?} type\n     */\n    function MdInputContainerUnsupportedTypeError(type) {\n        return _super.call(this, \"Input type \\\"\" + type + \"\\\" isn't supported by md-input-container.\") || this;\n    }\n    return MdInputContainerUnsupportedTypeError;\n}(MdError));\n/**\n * \\@docs-private\n */\nvar MdInputContainerDuplicatedHintError = (function (_super) {\n    __extends(MdInputContainerDuplicatedHintError, _super);\n    /**\n     * @param {?} align\n     */\n    function MdInputContainerDuplicatedHintError(align) {\n        return _super.call(this, \"A hint was already declared for 'align=\\\"\" + align + \"\\\"'.\") || this;\n    }\n    return MdInputContainerDuplicatedHintError;\n}(MdError));\n/**\n * \\@docs-private\n */\nvar MdInputContainerMissingMdInputError = (function (_super) {\n    __extends(MdInputContainerMissingMdInputError, _super);\n    function MdInputContainerMissingMdInputError() {\n        return _super.call(this, 'md-input-container must contain an mdInput directive. Did you forget to add mdInput ' +\n            'to the native input or textarea element?') || this;\n    }\n    return MdInputContainerMissingMdInputError;\n}(MdError));\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nvar MD_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'color',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nvar nextUniqueId$1 = 0;\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\nvar MdPlaceholder = (function () {\n    function MdPlaceholder() {\n    }\n    return MdPlaceholder;\n}());\nMdPlaceholder.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-placeholder, mat-placeholder'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdPlaceholder.ctorParameters = function () { return []; };\n/**\n * The hint directive, used to tag content as hint labels (going under the input).\n */\nvar MdHint = (function () {\n    function MdHint() {\n        // Whether to align the hint label at the start or end of the line.\n        this.align = 'start';\n        // Unique ID for the hint. Used for the aria-describedby on the input.\n        this.id = \"md-input-hint-\" + nextUniqueId$1++;\n    }\n    return MdHint;\n}());\nMdHint.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-hint, mat-hint',\n                host: {\n                    '[class.mat-hint]': 'true',\n                    '[class.mat-right]': 'align == \"end\"',\n                    '[attr.id]': 'id',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdHint.ctorParameters = function () { return []; };\nMdHint.propDecorators = {\n    'align': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'id': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * Directive, used to display a single error message under the input.\n */\nvar MdErrorDirective = (function () {\n    function MdErrorDirective() {\n    }\n    return MdErrorDirective;\n}());\nMdErrorDirective.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-error, mat-error',\n                host: {\n                    '[class.mat-input-error]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdErrorDirective.ctorParameters = function () { return []; };\n/**\n * The input prefix.\n */\nvar MdPrefix = (function () {\n    function MdPrefix() {\n    }\n    return MdPrefix;\n}());\nMdPrefix.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[mdPrefix], [matPrefix], [md-prefix]'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdPrefix.ctorParameters = function () { return []; };\n/**\n * The input suffix.\n */\nvar MdSuffix = (function () {\n    function MdSuffix() {\n    }\n    return MdSuffix;\n}());\nMdSuffix.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[mdSuffix], [matSuffix], [md-suffix]'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSuffix.ctorParameters = function () { return []; };\n/**\n * The input directive, used to mark the input that `MdInputContainer` is wrapping.\n */\nvar MdInputDirective = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _ngControl\n     */\n    function MdInputDirective(_elementRef, _renderer, _ngControl) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._ngControl = _ngControl;\n        this._type = 'text';\n        this._placeholder = '';\n        this._disabled = false;\n        this._required = false;\n        /** Whether the element is focused or not. */\n        this.focused = false;\n        /**\n         * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n         */\n        this._placeholderChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(function (t) { return getSupportedInputTypes().has(t); });\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    Object.defineProperty(MdInputDirective.prototype, \"disabled\", {\n        /**\n         * Whether the element is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._ngControl ? this._ngControl.disabled : this._disabled;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"id\", {\n        /**\n         * Unique id of the element.\n         * @return {?}\n         */\n        get: function () { return this._id; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._id = value || this._uid; },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    Object.defineProperty(MdInputDirective.prototype, \"placeholder\", {\n        /**\n         * Placeholder attribute of the element.\n         * @return {?}\n         */\n        get: function () { return this._placeholder; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._placeholder !== value) {\n                this._placeholder = value;\n                this._placeholderChange.emit(this._placeholder);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"required\", {\n        /**\n         * Whether the element is required.\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"type\", {\n        /**\n         * Input type of the element.\n         * @return {?}\n         */\n        get: function () { return this._type; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._type = value || 'text';\n            this._validateType();\n            // When using Angular inputs, developers are no longer able to set the properties on the native\n            // input element. To ensure that bindings for `type` work, we need to sync the setter\n            // with the native property. Textarea elements don't support the type property or attribute.\n            if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n                this._renderer.setElementProperty(this._elementRef.nativeElement, 'type', this._type);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"value\", {\n        /**\n         * The input element's value.\n         * @return {?}\n         */\n        get: function () { return this._elementRef.nativeElement.value; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._elementRef.nativeElement.value = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"empty\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return !this._isNeverEmpty() &&\n                (this.value == null || this.value === '') &&\n                // Check if the input contains bad input. If so, we know that it only appears empty because\n                // the value failed to parse. From the user's perspective it is not empty.\n                // TODO(mmalerba): Add e2e test for bad input case.\n                !this._isBadInput();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"_uid\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cachedUid = this._cachedUid || \"md-input-\" + nextUniqueId$1++; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focuses the input element.\n     * @return {?}\n     */\n    MdInputDirective.prototype.focus = function () { this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus'); };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._onFocus = function () { this.focused = true; };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._onBlur = function () { this.focused = false; };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._onInput = function () {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    };\n    /**\n     * Make sure the input is a supported type.\n     * @return {?}\n     */\n    MdInputDirective.prototype._validateType = function () {\n        if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {\n            throw new MdInputContainerUnsupportedTypeError(this._type);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._isNeverEmpty = function () { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._isBadInput = function () {\n        return ((this._elementRef.nativeElement)).validity.badInput;\n    };\n    /**\n     * Determines if the component host is a textarea. If not recognizable it returns false.\n     * @return {?}\n     */\n    MdInputDirective.prototype._isTextarea = function () {\n        var /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n        return nativeElement ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;\n    };\n    return MdInputDirective;\n}());\nMdInputDirective.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: \"input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]\",\n                host: {\n                    '[class.mat-input-element]': 'true',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[id]': 'id',\n                    '[placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.aria-describedby]': 'ariaDescribedby || null',\n                    '(blur)': '_onBlur()',\n                    '(focus)': '_onFocus()',\n                    '(input)': '_onInput()',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdInputDirective.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"NgControl\"], decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] },] },\n]; };\nMdInputDirective.propDecorators = {\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'id': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'placeholder': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'required': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'type': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    '_placeholderChange': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\n/**\n * Component that represents a text input. It encapsulates the <input> HTMLElement and\n * improve on its behaviour, along with styling it according to the Material Design.\n */\nvar MdInputContainer = (function () {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     */\n    function MdInputContainer(_changeDetectorRef, _parentForm, _parentFormGroup) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        /** Alignment of the input container's content. */\n        this.align = 'start';\n        /** Color of the input divider, based on the theme. */\n        this.color = 'primary';\n        /** State of the md-hint and md-error animations. */\n        this._subscriptAnimationState = '';\n        this._hintLabel = '';\n        // Unique id for the hint label.\n        this._hintLabelId = \"md-input-hint-\" + nextUniqueId$1++;\n        this._floatPlaceholder = 'auto';\n    }\n    Object.defineProperty(MdInputContainer.prototype, \"dividerColor\", {\n        /**\n         * @deprecated Use color instead.\n         * @return {?}\n         */\n        get: function () { return this.color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this.color = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputContainer.prototype, \"_shouldAlwaysFloat\", {\n        /**\n         * Whether the floating label should always float or not.\n         * @return {?}\n         */\n        get: function () { return this._floatPlaceholder === 'always'; },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    Object.defineProperty(MdInputContainer.prototype, \"_canPlaceholderFloat\", {\n        /**\n         * Whether the placeholder can float or not.\n         * @return {?}\n         */\n        get: function () { return this._floatPlaceholder !== 'never'; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputContainer.prototype, \"hintLabel\", {\n        /**\n         * Text for the input hint.\n         * @return {?}\n         */\n        get: function () { return this._hintLabel; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._hintLabel = value;\n            this._processHints();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputContainer.prototype, \"floatPlaceholder\", {\n        /**\n         * Whether the placeholder should always float, never float or float as the user types.\n         * @return {?}\n         */\n        get: function () { return this._floatPlaceholder; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._floatPlaceholder = value || 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdInputContainer.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        if (!this._mdInputChild) {\n            throw new MdInputContainerMissingMdInputError();\n        }\n        this._processHints();\n        this._validatePlaceholders();\n        // Re-validate when things change.\n        this._hintChildren.changes.subscribe(function () { return _this._processHints(); });\n        this._mdInputChild._placeholderChange.subscribe(function () { return _this._validatePlaceholders(); });\n    };\n    /**\n     * @return {?}\n     */\n    MdInputContainer.prototype.ngAfterViewInit = function () {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n        this._changeDetectorRef.detectChanges();\n    };\n    /**\n     * Determines whether a class from the NgControl should be forwarded to the host element.\n     * @param {?} prop\n     * @return {?}\n     */\n    MdInputContainer.prototype._shouldForward = function (prop) {\n        var /** @type {?} */ control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n        return control && ((control))[prop];\n    };\n    /**\n     * Whether the input has a placeholder.\n     * @return {?}\n     */\n    MdInputContainer.prototype._hasPlaceholder = function () { return !!(this._mdInputChild.placeholder || this._placeholderChild); };\n    /**\n     * Focuses the underlying input.\n     * @return {?}\n     */\n    MdInputContainer.prototype._focusInput = function () { this._mdInputChild.focus(); };\n    /**\n     * Whether the input container is in an error state.\n     * @return {?}\n     */\n    MdInputContainer.prototype._isErrorState = function () {\n        var /** @type {?} */ control = this._mdInputChild._ngControl;\n        var /** @type {?} */ isInvalid = control && control.invalid;\n        var /** @type {?} */ isTouched = control && control.touched;\n        var /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n            (this._parentForm && this._parentForm.submitted);\n        return !!(isInvalid && (isTouched || isSubmitted));\n    };\n    /**\n     * Determines whether to display hints or errors.\n     * @return {?}\n     */\n    MdInputContainer.prototype._getDisplayedMessages = function () {\n        return (this._errorChildren.length > 0 && this._isErrorState()) ? 'error' : 'hint';\n    };\n    /**\n     * Ensure that there is only one placeholder (either `input` attribute or child element with the\n     * `md-placeholder` attribute.\n     * @return {?}\n     */\n    MdInputContainer.prototype._validatePlaceholders = function () {\n        if (this._mdInputChild.placeholder && this._placeholderChild) {\n            throw new MdInputContainerPlaceholderConflictError();\n        }\n    };\n    /**\n     * Does any extra processing that is required when handling the hints.\n     * @return {?}\n     */\n    MdInputContainer.prototype._processHints = function () {\n        this._validateHints();\n        this._syncAriaDescribedby();\n    };\n    /**\n     * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     * @return {?}\n     */\n    MdInputContainer.prototype._validateHints = function () {\n        var _this = this;\n        if (this._hintChildren) {\n            var /** @type {?} */ startHint_1 = null;\n            var /** @type {?} */ endHint_1 = null;\n            this._hintChildren.forEach(function (hint) {\n                if (hint.align == 'start') {\n                    if (startHint_1 || _this.hintLabel) {\n                        throw new MdInputContainerDuplicatedHintError('start');\n                    }\n                    startHint_1 = hint;\n                }\n                else if (hint.align == 'end') {\n                    if (endHint_1) {\n                        throw new MdInputContainerDuplicatedHintError('end');\n                    }\n                    endHint_1 = hint;\n                }\n            });\n        }\n    };\n    /**\n     * Sets the child input's `aria-describedby` to a space-separated list of the ids\n     * of the currently-specified hints, as well as a generated id for the hint label.\n     * @return {?}\n     */\n    MdInputContainer.prototype._syncAriaDescribedby = function () {\n        var /** @type {?} */ ids = [];\n        var /** @type {?} */ startHint = this._hintChildren ?\n            this._hintChildren.find(function (hint) { return hint.align === 'start'; }) : null;\n        var /** @type {?} */ endHint = this._hintChildren ?\n            this._hintChildren.find(function (hint) { return hint.align === 'end'; }) : null;\n        if (startHint) {\n            ids.push(startHint.id);\n        }\n        else if (this._hintLabel) {\n            ids.push(this._hintLabelId);\n        }\n        if (endHint) {\n            ids.push(endHint.id);\n        }\n        this._mdInputChild.ariaDescribedby = ids.join(' ');\n    };\n    return MdInputContainer;\n}());\nMdInputContainer.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-input-container, mat-input-container',\n                template: \"<div class=\\\"mat-input-wrapper\\\"> <div class=\\\"mat-input-table\\\"> <div class=\\\"mat-input-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\"> <!-- TODO(andrewseguin): remove [md-prefix] --> <ng-content select=\\\"[mdPrefix], [matPrefix], [md-prefix]\\\"></ng-content> </div> <div class=\\\"mat-input-infix\\\" [class.mat-end]=\\\"align == 'end'\\\"> <ng-content selector=\\\"input, textarea\\\"></ng-content> <span class=\\\"mat-input-placeholder-wrapper\\\"> <label class=\\\"mat-input-placeholder\\\" [attr.for]=\\\"_mdInputChild.id\\\" [class.mat-empty]=\\\"_mdInputChild.empty && !_shouldAlwaysFloat\\\" [class.mat-float]=\\\"_canPlaceholderFloat\\\" [class.mat-accent]=\\\"color == 'accent'\\\" [class.mat-warn]=\\\"color == 'warn'\\\" *ngIf=\\\"_hasPlaceholder()\\\"> <ng-content select=\\\"md-placeholder, mat-placeholder\\\"></ng-content> {{_mdInputChild.placeholder}} <span class=\\\"mat-placeholder-required\\\" *ngIf=\\\"_mdInputChild.required\\\">*</span> </label> </span> </div> <div class=\\\"mat-input-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\"> <!-- TODO(andrewseguin): remove [md-suffix] --> <ng-content select=\\\"[mdSuffix], [matSuffix], [md-suffix]\\\"></ng-content> </div> </div> <div class=\\\"mat-input-underline\\\" [class.mat-disabled]=\\\"_mdInputChild.disabled\\\"> <span class=\\\"mat-input-ripple\\\" [class.mat-accent]=\\\"color == 'accent'\\\" [class.mat-warn]=\\\"color == 'warn'\\\"></span> </div> <div class=\\\"mat-input-subscript-wrapper\\\" [ngSwitch]=\\\"_getDisplayedMessages()\\\"> <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\"> <ng-content select=\\\"md-error, mat-error\\\"></ng-content> </div> <div class=\\\"mat-input-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\"> <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div> <ng-content select=\\\"md-hint, mat-hint\\\"></ng-content> </div> </div> </div> \",\n                styles: [\".mat-input-container{display:inline-block;position:relative;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;line-height:normal;text-align:left}[dir=rtl] .mat-input-container{text-align:right}.mat-input-container .mat-icon{width:auto;height:auto;font-size:100%;vertical-align:top}.mat-input-wrapper{margin:1em 0;padding-bottom:6px}.mat-input-table{display:inline-table;flex-flow:column;vertical-align:bottom;width:100%}.mat-input-table>*{display:table-cell}.mat-input-infix{position:relative}.mat-input-element{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;width:100%;vertical-align:bottom}.mat-end .mat-input-element{text-align:right}[dir=rtl] .mat-end .mat-input-element{text-align:left}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element:-webkit-autofill+.mat-input-placeholder-wrapper .mat-float{display:block;transform:translateY(-1.35em) scale(.75);width:133.33333%;transition:none}.mat-input-element::placeholder{color:transparent}.mat-input-element::-moz-placeholder{color:transparent}.mat-input-element::-webkit-input-placeholder{color:transparent}.mat-input-element:-ms-input-placeholder{color:transparent}.mat-input-placeholder{position:absolute;left:0;top:0;font-size:100%;pointer-events:none;z-index:1;padding-top:1em;width:100%;display:none;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform:translateY(0);transform-origin:bottom left;transition:transform .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1)}.mat-input-placeholder.mat-empty{display:block;cursor:text}.mat-focused .mat-input-placeholder.mat-float,.mat-input-placeholder.mat-float:not(.mat-empty){display:block;transform:translateY(-1.35em) scale(.75);width:133.33333%}[dir=rtl] .mat-input-placeholder{transform-origin:bottom right;left:auto;right:0}.mat-input-placeholder:not(.mat-empty){transition:none}.mat-input-placeholder-wrapper{position:absolute;left:0;top:-1em;width:100%;padding-top:1em;overflow:hidden;pointer-events:none;transform:translate3d(0,0,0)}.mat-input-placeholder-wrapper::after{content:'';display:inline-table}.mat-input-underline{position:absolute;height:1px;width:100%;margin-top:4px;border-top-width:1px;border-top-style:solid}.mat-input-underline.mat-disabled{background-image:linear-gradient(to right,rgba(0,0,0,.26) 0,rgba(0,0,0,.26) 33%,transparent 0);background-size:4px 1px;background-repeat:repeat-x;border-top:0;background-position:0}.mat-input-underline .mat-input-ripple{position:absolute;height:2px;z-index:1;top:-1px;width:100%;transform-origin:top;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-focused .mat-input-underline .mat-input-ripple{opacity:1}.mat-input-subscript-wrapper{position:absolute;font-size:75%;top:100%;width:100%;margin-top:-1em;overflow:hidden}.mat-input-hint-wrapper::after,.mat-input-hint-wrapper::before{content:' ';display:table}.mat-input-hint-wrapper::after{clear:both}.mat-hint{display:block;float:left}.mat-hint.mat-right{float:right}[dir=rtl] .mat-hint{float:right}[dir=rtl] .mat-hint.mat-right{float:left}.mat-input-error{display:block}.mat-input-prefix,.mat-input-suffix{width:.1px;white-space:nowrap} /*# sourceMappingURL=input-container.css.map */ \"],\n                animations: [\n                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"a\" /* trigger */])('transitionMessages', [\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('enter', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ opacity: 1, transform: 'translateY(0%)' })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('void => enter', [\n                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ opacity: 0, transform: 'translateY(-100%)' }),\n                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n                        ])\n                    ])\n                ],\n                host: {\n                    // Remove align attribute to prevent it from interfering with layout.\n                    '[attr.align]': 'null',\n                    '[class.mat-input-container]': 'true',\n                    '[class.mat-input-invalid]': '_isErrorState()',\n                    '[class.mat-focused]': '_mdInputChild.focused',\n                    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                    '[class.ng-touched]': '_shouldForward(\"touched\")',\n                    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                    '[class.ng-valid]': '_shouldForward(\"valid\")',\n                    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                    '[class.ng-pending]': '_shouldForward(\"pending\")',\n                    '(click)': '_focusInput()',\n                },\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdInputContainer.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectorRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"NgForm\"], decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n    { type: __WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"FormGroupDirective\"], decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n]; };\nMdInputContainer.propDecorators = {\n    'align': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'color': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'dividerColor': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'hintLabel': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'floatPlaceholder': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    '_mdInputChild': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChild\"], args: [MdInputDirective,] },],\n    '_placeholderChild': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChild\"], args: [MdPlaceholder,] },],\n    '_errorChildren': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [MdErrorDirective,] },],\n    '_hintChildren': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [MdHint,] },],\n    '_prefixChildren': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [MdPrefix,] },],\n    '_suffixChildren': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [MdSuffix,] },],\n};\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nvar MdTextareaAutosize = (function () {\n    /**\n     * @param {?} _elementRef\n     */\n    function MdTextareaAutosize(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    Object.defineProperty(MdTextareaAutosize.prototype, \"mdAutosizeMinRows\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.minRows;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.minRows = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTextareaAutosize.prototype, \"mdAutosizeMaxRows\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.maxRows;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.maxRows = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTextareaAutosize.prototype, \"_minHeight\", {\n        /**\n         * The minimum height of the textarea as determined by minRows.\n         * @return {?}\n         */\n        get: function () {\n            return this.minRows ? this.minRows * this._cachedLineHeight + \"px\" : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTextareaAutosize.prototype, \"_maxHeight\", {\n        /**\n         * The maximum height of the textarea as determined by maxRows.\n         * @return {?}\n         */\n        get: function () {\n            return this.maxRows ? this.maxRows * this._cachedLineHeight + \"px\" : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdTextareaAutosize.prototype.ngOnInit = function () {\n        this._cacheTextareaLineHeight();\n        this.resizeToFitContent();\n    };\n    /**\n     * Cache the height of a single-row textarea.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @return {?}\n     */\n    MdTextareaAutosize.prototype._cacheTextareaLineHeight = function () {\n        var /** @type {?} */ textarea = (this._elementRef.nativeElement);\n        // Use a clone element because we have to override some styles.\n        var /** @type {?} */ textareaClone = (textarea.cloneNode(false));\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        textarea.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.offsetHeight;\n        textarea.parentNode.removeChild(textareaClone);\n    };\n    /**\n     * Resize the textarea to fit its content.\n     * @return {?}\n     */\n    MdTextareaAutosize.prototype.resizeToFitContent = function () {\n        var /** @type {?} */ textarea = (this._elementRef.nativeElement);\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        textarea.style.height = 'auto';\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = textarea.scrollHeight + \"px\";\n    };\n    return MdTextareaAutosize;\n}());\nMdTextareaAutosize.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n                    'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'mdTextareaAutosize',\n                host: {\n                    '(input)': 'resizeToFitContent()',\n                    '[style.min-height]': '_minHeight',\n                    '[style.max-height]': '_maxHeight',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTextareaAutosize.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\nMdTextareaAutosize.propDecorators = {\n    'minRows': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'mdAutosizeMinRows': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'maxRows': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'mdAutosizeMaxRows': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\nvar MdInputModule = (function () {\n    function MdInputModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdInputModule.forRoot = function () {\n        return {\n            ngModule: MdInputModule,\n            providers: [],\n        };\n    };\n    return MdInputModule;\n}());\nMdInputModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                declarations: [\n                    MdErrorDirective,\n                    MdHint,\n                    MdInputContainer,\n                    MdInputDirective,\n                    MdPlaceholder,\n                    MdPrefix,\n                    MdSuffix,\n                    MdTextareaAutosize,\n                ],\n                imports: [\n                    __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"],\n                    __WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"FormsModule\"],\n                    PlatformModule,\n                ],\n                exports: [\n                    MdErrorDirective,\n                    MdHint,\n                    MdInputContainer,\n                    MdInputDirective,\n                    MdPlaceholder,\n                    MdPrefix,\n                    MdSuffix,\n                    MdTextareaAutosize,\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdInputModule.ctorParameters = function () { return []; };\n/**\n * Configuration used when opening a snack-bar.\n */\nvar MdSnackBarConfig = (function () {\n    function MdSnackBarConfig() {\n        /** The politeness level for the MdAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /** Message to be announced by the MdAriaLiveAnnouncer */\n        this.announcementMessage = '';\n        /** The view container to place the overlay for the snack bar into. */\n        this.viewContainerRef = null;\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n    }\n    return MdSnackBarConfig;\n}());\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nvar MdSnackBarRef = (function () {\n    /**\n     * @param {?} instance\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    function MdSnackBarRef(instance, containerInstance, _overlayRef) {\n        var _this = this;\n        this._overlayRef = _overlayRef;\n        this._afterClosed = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n        this._onAction = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n        // Sets the readonly instance of the snack bar content component.\n        this._instance = instance;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(function () { return _this.dismiss(); });\n        containerInstance._onExit().subscribe(function () { return _this._finishDismiss(); });\n    }\n    Object.defineProperty(MdSnackBarRef.prototype, \"instance\", {\n        /**\n         * The instance of the component making up the content of the snack bar.\n         * @return {?}\n         */\n        get: function () {\n            return this._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype.dismiss = function () {\n        if (!this._afterClosed.closed) {\n            this.containerInstance.exit();\n        }\n    };\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype._action = function () {\n        if (!this._onAction.closed) {\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    };\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    MdSnackBarRef.prototype._open = function () {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    };\n    /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype._finishDismiss = function () {\n        this._overlayRef.dispose();\n        this._afterClosed.next();\n        this._afterClosed.complete();\n    };\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype.afterDismissed = function () {\n        return this._afterClosed.asObservable();\n    };\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype.afterOpened = function () {\n        return this.containerInstance._onEnter();\n    };\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype.onAction = function () {\n        return this._onAction.asObservable();\n    };\n    return MdSnackBarRef;\n}());\n/**\n * Error that is thrown when attempting to attach a snack bar that is already attached.\n * \\@docs-private\n */\nvar MdSnackBarContentAlreadyAttached = (function (_super) {\n    __extends(MdSnackBarContentAlreadyAttached, _super);\n    function MdSnackBarContentAlreadyAttached() {\n        return _super.call(this, 'Attempting to attach snack bar content after content is already attached') || this;\n    }\n    return MdSnackBarContentAlreadyAttached;\n}(MdError));\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nvar SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nvar HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nvar MdSnackBarContainer = (function (_super) {\n    __extends(MdSnackBarContainer, _super);\n    /**\n     * @param {?} _ngZone\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdSnackBarContainer(_ngZone, _renderer, _elementRef) {\n        var _this = _super.call(this) || this;\n        _this._ngZone = _ngZone;\n        _this._renderer = _renderer;\n        _this._elementRef = _elementRef;\n        _this.onExit = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n        _this.onEnter = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n        /** The state of the snack bar animations. */\n        _this.animationState = 'initial';\n        return _this;\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.attachComponentPortal = function (portal) {\n        if (this._portalHost.hasAttached()) {\n            throw new MdSnackBarContentAlreadyAttached();\n        }\n        if (this.snackBarConfig.extraClasses) {\n            // Not the most efficient way of adding classes, but the renderer doesn't allow us\n            // to pass in an array or a space-separated list.\n            for (var _i = 0, _a = this.snackBarConfig.extraClasses; _i < _a.length; _i++) {\n                var cssClass = _a[_i];\n                this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, true);\n            }\n        }\n        return this._portalHost.attachComponentPortal(portal);\n    };\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @param {?} portal\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.attachTemplatePortal = function (portal) {\n        throw Error('Not yet implemented');\n    };\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.onAnimationEnd = function (event) {\n        var _this = this;\n        if (event.toState === 'void' || event.toState === 'complete') {\n            this._completeExit();\n        }\n        if (event.toState === 'visible') {\n            this._ngZone.run(function () {\n                _this.onEnter.next();\n                _this.onEnter.complete();\n            });\n        }\n    };\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.enter = function () {\n        this.animationState = 'visible';\n    };\n    /**\n     * Returns an observable resolving when the enter animation completes.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype._onEnter = function () {\n        this.animationState = 'visible';\n        return this.onEnter.asObservable();\n    };\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.exit = function () {\n        this.animationState = 'complete';\n        return this._onExit();\n    };\n    /**\n     * Returns an observable that completes after the closing animation is done.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype._onExit = function () {\n        return this.onExit.asObservable();\n    };\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.ngOnDestroy = function () {\n        this._completeExit();\n    };\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype._completeExit = function () {\n        var _this = this;\n        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {\n            _this.onExit.next();\n            _this.onExit.complete();\n        });\n    };\n    return MdSnackBarContainer;\n}(BasePortalHost));\nMdSnackBarContainer.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalHost></ng-template> \",\n                styles: [\":host{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);background:#323232;border-radius:2px;box-sizing:content-box;display:block;height:20px;max-width:568px;min-width:288px;overflow:hidden;padding:14px 24px;transform:translateY(100%)}@media screen and (-ms-high-contrast:active){:host{border:solid 1px}} /*# sourceMappingURL=snack-bar-container.css.map */ \"],\n                host: {\n                    'role': 'alert',\n                    '[@state]': 'animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                animations: [\n                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"a\" /* trigger */])('state', [\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('initial', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'translateY(100%)' })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('visible', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'translateY(0%)' })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('complete', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'translateY(100%)' })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('visible => complete', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])(HIDE_ANIMATION)),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('initial => visible, void => visible', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])(SHOW_ANIMATION)),\n                    ])\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSnackBarContainer.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\nMdSnackBarContainer.propDecorators = {\n    '_portalHost': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: [PortalHostDirective,] },],\n};\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nvar SimpleSnackBar = (function () {\n    function SimpleSnackBar() {\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    SimpleSnackBar.prototype.dismiss = function () {\n        this.snackBarRef._action();\n    };\n    Object.defineProperty(SimpleSnackBar.prototype, \"hasAction\", {\n        /**\n         * If the action button should be shown.\n         * @return {?}\n         */\n        get: function () { return !!this.action; },\n        enumerable: true,\n        configurable: true\n    });\n    return SimpleSnackBar;\n}());\nSimpleSnackBar.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'simple-snack-bar',\n                template: \"<span class=\\\"mat-simple-snackbar-message\\\">{{message}}</span> <button class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\" (click)=\\\"dismiss()\\\">{{action}}</button> \",\n                styles: [\":host{display:flex;justify-content:space-between;color:#fff;line-height:20px;font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif}.mat-simple-snackbar-message{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-simple-snackbar-action{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;background:0 0;margin:-5px 0 0;padding:5px;text-transform:uppercase;color:inherit;line-height:inherit;flex-shrink:0;font-family:inherit;font-size:inherit;font-weight:600} /*# sourceMappingURL=simple-snack-bar.css.map */ \"],\n                host: {\n                    '[class.mat-simple-snackbar]': 'true',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nSimpleSnackBar.ctorParameters = function () { return []; };\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nfunction extendObject(dest) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    if (dest == null) {\n        throw TypeError('Cannot convert undefined or null to object');\n    }\n    for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {\n        var source = sources_1[_a];\n        if (source != null) {\n            for (var /** @type {?} */ key in source) {\n                if (source.hasOwnProperty(key)) {\n                    dest[key] = source[key];\n                }\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nvar MdSnackBar = (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _parentSnackBar\n     */\n    function MdSnackBar(_overlay, _live, _parentSnackBar) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._parentSnackBar = _parentSnackBar;\n    }\n    Object.defineProperty(MdSnackBar.prototype, \"_openedSnackBarRef\", {\n        /**\n         * Reference to the currently opened snackbar at *any* level.\n         * @return {?}\n         */\n        get: function () {\n            return this._parentSnackBar ?\n                this._parentSnackBar._openedSnackBarRef : this._snackBarRefAtThisLevel;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._parentSnackBar) {\n                this._parentSnackBar._openedSnackBarRef = value;\n            }\n            else {\n                this._snackBarRefAtThisLevel = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    MdSnackBar.prototype.openFromComponent = function (component, config) {\n        var _this = this;\n        config = _applyConfigDefaults(config);\n        var /** @type {?} */ overlayRef = this._createOverlay();\n        var /** @type {?} */ snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\n        var /** @type {?} */ snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(function () {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (_this._openedSnackBarRef == snackBarRef) {\n                _this._openedSnackBarRef = null;\n            }\n        });\n        // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\n        // animation is complete.\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.afterDismissed().subscribe(function () {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(function () {\n                setTimeout(function () { return snackBarRef.dismiss(); }, config.duration);\n            });\n        }\n        this._live.announce(config.announcementMessage, config.politeness);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    };\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    MdSnackBar.prototype.open = function (message, action, config) {\n        if (action === void 0) { action = ''; }\n        if (config === void 0) { config = {}; }\n        config.announcementMessage = message;\n        var /** @type {?} */ simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);\n        simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\n        simpleSnackBarRef.instance.message = message;\n        simpleSnackBarRef.instance.action = action;\n        return simpleSnackBarRef;\n    };\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    MdSnackBar.prototype.dismiss = function () {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    };\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    MdSnackBar.prototype._attachSnackBarContainer = function (overlayRef, config) {\n        var /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n        var /** @type {?} */ containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    };\n    /**\n     * Places a new component as the content of the snack bar container.\n     * @template T\n     * @param {?} component\n     * @param {?} container\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    MdSnackBar.prototype._attachSnackbarContent = function (component, container, overlayRef) {\n        var /** @type {?} */ portal = new ComponentPortal(component);\n        var /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n        return new MdSnackBarRef(contentRef.instance, container, overlayRef);\n    };\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @return {?}\n     */\n    MdSnackBar.prototype._createOverlay = function () {\n        var /** @type {?} */ state$$1 = new OverlayState();\n        state$$1.positionStrategy = this._overlay.position().global()\n            .centerHorizontally()\n            .bottom('0');\n        return this._overlay.create(state$$1);\n    };\n    return MdSnackBar;\n}());\nMdSnackBar.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nMdSnackBar.ctorParameters = function () { return [\n    { type: Overlay, },\n    { type: LiveAnnouncer, },\n    { type: MdSnackBar, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SkipSelf\"] },] },\n]; };\n/**\n * Applies default options to the snackbar config.\n * @param {?} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config) {\n    return extendObject(new MdSnackBarConfig(), config);\n}\nvar MdSnackBarModule = (function () {\n    function MdSnackBarModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdSnackBarModule.forRoot = function () {\n        return {\n            ngModule: MdSnackBarModule,\n            providers: []\n        };\n    };\n    return MdSnackBarModule;\n}());\nMdSnackBarModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"],\n                    CompatibilityModule,\n                ],\n                exports: [MdSnackBarContainer, CompatibilityModule],\n                declarations: [MdSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n                providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSnackBarModule.ctorParameters = function () { return []; };\n/**\n * Used to flag tab labels for use with the portal directive\n */\nvar MdTabLabel = (function (_super) {\n    __extends(MdTabLabel, _super);\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    function MdTabLabel(templateRef, viewContainerRef) {\n        return _super.call(this, templateRef, viewContainerRef) || this;\n    }\n    return MdTabLabel;\n}(TemplatePortalDirective));\nMdTabLabel.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-tab-label], [mat-tab-label]',\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabLabel.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"TemplateRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewContainerRef\"], },\n]; };\nvar MdTab = (function () {\n    /**\n     * @param {?} _viewContainerRef\n     */\n    function MdTab(_viewContainerRef) {\n        this._viewContainerRef = _viewContainerRef;\n        /** The plain text label for the tab, used when there is no template label. */\n        this.textLabel = '';\n        this._contentPortal = null;\n        /**\n         * The relatively indexed position where 0 represents the center, negative is left, and positive\n         * represents the right.\n         */\n        this.position = null;\n        /**\n         * The initial relatively index origin of the tab if it was created and selected after there\n         * was already a selected tab. Provides context of what position the tab should originate from.\n         */\n        this.origin = null;\n        this._disabled = false;\n    }\n    Object.defineProperty(MdTab.prototype, \"content\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._contentPortal; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTab.prototype, \"disabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * Whether the tab is disabled\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdTab.prototype.ngOnInit = function () {\n        this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n    };\n    return MdTab;\n}());\nMdTab.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-tab, mat-tab',\n                template: \"<!-- Create a template for the content of the <md-tab> so that we can grab a reference to this TemplateRef and use it in a Portal to render the tab content in the appropriate place in the tab-group. --> <ng-template><ng-content></ng-content></ng-template> \",\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTab.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewContainerRef\"], },\n]; };\nMdTab.propDecorators = {\n    'templateLabel': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChild\"], args: [MdTabLabel,] },],\n    '_content': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"TemplateRef\"],] },],\n    'textLabel': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['label',] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/** Used to generate unique ID's for each tab component */\nvar nextId$2 = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nvar MdTabChangeEvent = (function () {\n    function MdTabChangeEvent() {\n    }\n    return MdTabChangeEvent;\n}());\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nvar MdTabGroup = (function () {\n    /**\n     * @param {?} _renderer\n     */\n    function MdTabGroup(_renderer) {\n        this._renderer = _renderer;\n        this._isInitialized = false;\n        this._indexToSelect = 0;\n        this._tabBodyWrapperHeight = null;\n        this._dynamicHeight = false;\n        this._selectedIndex = null;\n        /** Position of the tab header. */\n        this.headerPosition = 'above';\n        this._onFocusChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        this._onSelectChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"](true);\n        this._groupId = nextId$2++;\n    }\n    Object.defineProperty(MdTabGroup.prototype, \"dynamicHeight\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._dynamicHeight; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._dynamicHeight = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"_dynamicHeightDeprecated\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this._dynamicHeight; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._dynamicHeight = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"selectedIndex\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._selectedIndex; },\n        /**\n         * The index of the active tab.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._indexToSelect = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"selectedIndexChange\", {\n        /**\n         * Output to enable support for two-way binding on ([selectedIndex])\n         * @return {?}\n         */\n        get: function () {\n            return this.selectChange.map(function (event) { return event.index; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"focusChange\", {\n        /**\n         * Event emitted when focus has changed within a tab group.\n         * @return {?}\n         */\n        get: function () {\n            return this._onFocusChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"selectChange\", {\n        /**\n         * Event emitted when the tab selection has changed.\n         * @return {?}\n         */\n        get: function () {\n            return this._onSelectChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     * @return {?}\n     */\n    MdTabGroup.prototype.ngAfterContentChecked = function () {\n        var _this = this;\n        // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which\n        // ensures that values like NaN can't get through and which would otherwise throw the\n        // component into an infinite loop (since Math.max(NaN, 0) === NaN).\n        this._indexToSelect =\n            Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex != this._indexToSelect && this._selectedIndex != null) {\n            this._onSelectChange.emit(this._createChangeEvent(this._indexToSelect));\n        }\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this._tabs.forEach(function (tab, index) {\n            tab.position = index - _this._indexToSelect;\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (_this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n                tab.origin = _this._indexToSelect - _this._selectedIndex;\n            }\n        });\n        this._selectedIndex = this._indexToSelect;\n    };\n    /**\n     * Waits one frame for the view to update, then updates the ink bar\n     * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n     * @return {?}\n     */\n    MdTabGroup.prototype.ngAfterViewChecked = function () {\n        this._isInitialized = true;\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    MdTabGroup.prototype._focusChanged = function (index) {\n        this._onFocusChange.emit(this._createChangeEvent(index));\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    MdTabGroup.prototype._createChangeEvent = function (index) {\n        var /** @type {?} */ event = new MdTabChangeEvent;\n        event.index = index;\n        if (this._tabs && this._tabs.length) {\n            event.tab = this._tabs.toArray()[index];\n        }\n        return event;\n    };\n    /**\n     * Returns a unique id for each tab label element\n     * @param {?} i\n     * @return {?}\n     */\n    MdTabGroup.prototype._getTabLabelId = function (i) {\n        return \"md-tab-label-\" + this._groupId + \"-\" + i;\n    };\n    /**\n     * Returns a unique id for each tab content element\n     * @param {?} i\n     * @return {?}\n     */\n    MdTabGroup.prototype._getTabContentId = function (i) {\n        return \"md-tab-content-\" + this._groupId + \"-\" + i;\n    };\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     * @param {?} tabHeight\n     * @return {?}\n     */\n    MdTabGroup.prototype._setTabBodyWrapperHeight = function (tabHeight) {\n        if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n            return;\n        }\n        this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', this._tabBodyWrapperHeight + 'px');\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n            this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', tabHeight + 'px');\n        }\n    };\n    /**\n     * Removes the height of the tab body wrapper.\n     * @return {?}\n     */\n    MdTabGroup.prototype._removeTabBodyWrapperHeight = function () {\n        this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n        this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n    };\n    return MdTabGroup;\n}());\nMdTabGroup.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-tab-group, mat-tab-group',\n                template: \"<md-tab-header [selectedIndex]=\\\"selectedIndex\\\" #tabHeader (indexFocused)=\\\"_focusChanged($event)\\\" (selectFocusedIndex)=\\\"selectedIndex = $event\\\"> <div class=\\\"mat-tab-label\\\" role=\\\"tab\\\" md-tab-label-wrapper md-ripple *ngFor=\\\"let tab of _tabs; let i = index\\\" [id]=\\\"_getTabLabelId(i)\\\" [tabIndex]=\\\"selectedIndex == i ? 0 : -1\\\" [attr.aria-controls]=\\\"_getTabContentId(i)\\\" [attr.aria-selected]=\\\"selectedIndex == i\\\" [class.mat-tab-label-active]=\\\"selectedIndex == i\\\" [disabled]=\\\"tab.disabled\\\" (click)=\\\"tabHeader.focusIndex = selectedIndex = i\\\"> <!-- If there is a label template, use it. --> <ng-template [ngIf]=\\\"tab.templateLabel\\\"> <ng-template [cdkPortalHost]=\\\"tab.templateLabel\\\"></ng-template> </ng-template> <!-- If there is not a label template, fall back to the text label. --> <ng-template [ngIf]=\\\"!tab.templateLabel\\\">{{tab.textLabel}}</ng-template> </div> </md-tab-header> <div class=\\\"mat-tab-body-wrapper\\\" #tabBodyWrapper> <md-tab-body role=\\\"tabpanel\\\" *ngFor=\\\"let tab of _tabs; let i = index\\\" [id]=\\\"_getTabContentId(i)\\\" [attr.aria-labelledby]=\\\"_getTabLabelId(i)\\\" [class.mat-tab-body-active]=\\\"selectedIndex == i\\\" [content]=\\\"tab.content\\\" [position]=\\\"tab.position\\\" [origin]=\\\"tab.origin\\\" (onCentered)=\\\"_removeTabBodyWrapperHeight()\\\" (onCentering)=\\\"_setTabBodyWrapperHeight($event)\\\"> </md-tab-body> </div> \",\n                styles: [\":host{display:flex;flex-direction:column;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif}:host.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{line-height:48px;height:48px;padding:0 12px;font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-weight:500;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;position:relative}.mat-tab-label:focus{outline:0;opacity:1}@media (max-width:600px){.mat-tab-label{min-width:72px}}:host[mat-stretch-tabs] .mat-tab-label,:host[md-stretch-tabs] .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}.mat-tab-body{position:absolute;top:0;left:0;right:0;bottom:0;display:block;overflow:hidden}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}:host.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}.mat-tab-disabled{cursor:default;pointer-events:none} /*# sourceMappingURL=tab-group.css.map */ \"],\n                host: {\n                    '[class.mat-tab-group]': 'true',\n                    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n                    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabGroup.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n]; };\nMdTabGroup.propDecorators = {\n    '_tabs': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [MdTab,] },],\n    '_tabBodyWrapper': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: ['tabBodyWrapper',] },],\n    'dynamicHeight': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    '_dynamicHeightDeprecated': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['md-dynamic-height',] },],\n    'selectedIndex': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'headerPosition': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'selectedIndexChange': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'focusChange': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'selectChange': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nvar MdTabLabelWrapper = (function () {\n    /**\n     * @param {?} elementRef\n     * @param {?} _renderer\n     */\n    function MdTabLabelWrapper(elementRef, _renderer) {\n        this.elementRef = elementRef;\n        this._renderer = _renderer;\n        this._disabled = false;\n    }\n    Object.defineProperty(MdTabLabelWrapper.prototype, \"disabled\", {\n        /**\n         * Whether the element is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets focus on the wrapper element\n     * @return {?}\n     */\n    MdTabLabelWrapper.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this.elementRef.nativeElement, 'focus');\n    };\n    /**\n     * @return {?}\n     */\n    MdTabLabelWrapper.prototype.getOffsetLeft = function () {\n        return this.elementRef.nativeElement.offsetLeft;\n    };\n    /**\n     * @return {?}\n     */\n    MdTabLabelWrapper.prototype.getOffsetWidth = function () {\n        return this.elementRef.nativeElement.offsetWidth;\n    };\n    return MdTabLabelWrapper;\n}());\nMdTabLabelWrapper.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',\n                host: {\n                    '[class.mat-tab-disabled]': 'disabled'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabLabelWrapper.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n]; };\nMdTabLabelWrapper.propDecorators = {\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nvar MdInkBar = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     */\n    function MdInkBar(_renderer, _elementRef, _ngZone) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n    }\n    /**\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\n     * Shows the ink bar if previously set as hidden.\n     * @param {?} element\n     * @return {?}\n     */\n    MdInkBar.prototype.alignToElement = function (element) {\n        var _this = this;\n        this.show();\n        this._ngZone.runOutsideAngular(function () {\n            requestAnimationFrame(function () {\n                _this._renderer.setElementStyle(_this._elementRef.nativeElement, 'left', _this._getLeftPosition(element));\n                _this._renderer.setElementStyle(_this._elementRef.nativeElement, 'width', _this._getElementWidth(element));\n            });\n        });\n    };\n    /**\n     * Shows the ink bar.\n     * @return {?}\n     */\n    MdInkBar.prototype.show = function () {\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n    };\n    /**\n     * Hides the ink bar.\n     * @return {?}\n     */\n    MdInkBar.prototype.hide = function () {\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n    };\n    /**\n     * Generates the pixel distance from the left based on the provided element in string format.\n     * @param {?} element\n     * @return {?}\n     */\n    MdInkBar.prototype._getLeftPosition = function (element) {\n        return element ? element.offsetLeft + 'px' : '0';\n    };\n    /**\n     * Generates the pixel width from the provided element in string format.\n     * @param {?} element\n     * @return {?}\n     */\n    MdInkBar.prototype._getElementWidth = function (element) {\n        return element ? element.offsetWidth + 'px' : '0';\n    };\n    return MdInkBar;\n}());\nMdInkBar.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-ink-bar, mat-ink-bar',\n                host: {\n                    '[class.mat-ink-bar]': 'true',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdInkBar.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n]; };\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nvar MdTabNavBar = (function () {\n    /**\n     * @param {?} _dir\n     */\n    function MdTabNavBar(_dir) {\n        var _this = this;\n        this._dir = _dir;\n        if (_dir) {\n            this._directionChange = _dir.dirChange.subscribe(function () { return _this._alignInkBar(); });\n        }\n    }\n    /**\n     * Notifies the component that the active link has been changed.\n     * @param {?} element\n     * @return {?}\n     */\n    MdTabNavBar.prototype.updateActiveLink = function (element) {\n        this._activeLinkChanged = this._activeLinkElement != element;\n        this._activeLinkElement = element;\n    };\n    /**\n     * Checks if the active link has been changed and, if so, will update the ink bar.\n     * @return {?}\n     */\n    MdTabNavBar.prototype.ngAfterContentChecked = function () {\n        if (this._activeLinkChanged) {\n            this._alignInkBar();\n            this._activeLinkChanged = false;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdTabNavBar.prototype.ngOnDestroy = function () {\n        if (this._directionChange) {\n            this._directionChange.unsubscribe();\n            this._directionChange = null;\n        }\n    };\n    /**\n     * Aligns the ink bar to the active link.\n     * @return {?}\n     */\n    MdTabNavBar.prototype._alignInkBar = function () {\n        this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    };\n    return MdTabNavBar;\n}());\nMdTabNavBar.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\n                template: \"<div class=\\\"mat-tab-links\\\"> <ng-content></ng-content> <md-ink-bar></md-ink-bar> </div> \",\n                styles: [\".mat-tab-nav-bar{overflow:hidden;position:relative;flex-shrink:0}.mat-tab-links{position:relative}.mat-tab-link{line-height:48px;height:48px;padding:0 12px;font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-weight:500;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-block;vertical-align:top;text-decoration:none;position:relative;overflow:hidden}.mat-tab-link:focus{outline:0;opacity:1}@media (max-width:600px){.mat-tab-link{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0} /*# sourceMappingURL=tab-nav-bar.css.map */ \"],\n                host: {\n                    '[class.mat-tab-nav-bar]': 'true',\n                },\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabNavBar.ctorParameters = function () { return [\n    { type: Dir, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n]; };\nMdTabNavBar.propDecorators = {\n    '_inkBar': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: [MdInkBar,] },],\n};\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nvar MdTabLink = (function () {\n    /**\n     * @param {?} _mdTabNavBar\n     * @param {?} _elementRef\n     */\n    function MdTabLink(_mdTabNavBar, _elementRef) {\n        this._mdTabNavBar = _mdTabNavBar;\n        this._elementRef = _elementRef;\n        this._isActive = false;\n    }\n    Object.defineProperty(MdTabLink.prototype, \"active\", {\n        /**\n         * Whether the link is active.\n         * @return {?}\n         */\n        get: function () { return this._isActive; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._isActive = value;\n            if (value) {\n                this._mdTabNavBar.updateActiveLink(this._elementRef);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MdTabLink;\n}());\nMdTabLink.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-tab-link], [mat-tab-link]',\n                host: {\n                    '[class.mat-tab-link]': 'true',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabLink.ctorParameters = function () { return [\n    { type: MdTabNavBar, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\nMdTabLink.propDecorators = {\n    'active': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * Simple directive that extends the ripple and matches the selector of the MdTabLink. This\n * adds the ripple behavior to nav bar labels.\n */\nvar MdTabLinkRipple = (function (_super) {\n    __extends(MdTabLinkRipple, _super);\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} ruler\n     * @param {?} globalOptions\n     */\n    function MdTabLinkRipple(elementRef, ngZone, ruler, globalOptions) {\n        return _super.call(this, elementRef, ngZone, ruler, globalOptions) || this;\n    }\n    return MdTabLinkRipple;\n}(MdRipple));\nMdTabLinkRipple.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-tab-link], [mat-tab-link]',\n                host: {\n                    '[class.mat-tab-link]': 'true',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabLinkRipple.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n    { type: ViewportRuler, },\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [MD_RIPPLE_GLOBAL_OPTIONS,] },] },\n]; };\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nvar MdTabBody = (function () {\n    /**\n     * @param {?} _dir\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     */\n    function MdTabBody(_dir, _elementRef, _changeDetectorRef) {\n        this._dir = _dir;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Event emitted when the tab begins to animate towards the center as the active tab. */\n        this.onCentering = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when the tab completes its animation towards the center. */\n        this.onCentered = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"](true);\n        /** Whether the element is allowed to be animated. */\n        this._canBeAnimated = false;\n    }\n    Object.defineProperty(MdTabBody.prototype, \"position\", {\n        /**\n         * @param {?} position\n         * @return {?}\n         */\n        set: function (position) {\n            if (position < 0) {\n                this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n            }\n            else if (position > 0) {\n                this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n            }\n            else {\n                this._position = 'center';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabBody.prototype, \"origin\", {\n        /**\n         * The origin position from which this tab should appear when it is centered into view.\n         * @param {?} origin\n         * @return {?}\n         */\n        set: function (origin) {\n            if (origin == null) {\n                return;\n            }\n            var /** @type {?} */ dir = this._getLayoutDirection();\n            if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n                this._origin = 'left';\n            }\n            else {\n                this._origin = 'right';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     * @return {?}\n     */\n    MdTabBody.prototype.ngOnInit = function () {\n        if (this._position == 'center' && this._origin) {\n            this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n        }\n    };\n    /**\n     * After the view has been set, check if the tab content is set to the center and attach the\n     * content if it is not already attached.\n     * @return {?}\n     */\n    MdTabBody.prototype.ngAfterViewChecked = function () {\n        if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n            this._portalHost.attach(this._content);\n        }\n    };\n    /**\n     * After the content has been checked, determines whether the element should be allowed to\n     * animate. This has to be limited, because under a specific set of circumstances (see #2151),\n     * the animations can be triggered too early, which either crashes Chrome by putting it into an\n     * infinite loop (with Angular < 2.3.0) or throws an error because the element doesn't have a\n     * computed style (with Angular > 2.3.0). This can alternatively be determined by checking the\n     * transform: canBeAnimated = getComputedStyle(element) !== '', however document.contains should\n     * be faster since it doesn't cause a reflow.\n     *\n     * TODO: This can safely be removed after we stop supporting Angular < 2.4.2. The fix landed via\n     * https://github.com/angular/angular/commit/21030e9a1cf30e8101399d8535ed72d847a23ba6\n     * @return {?}\n     */\n    MdTabBody.prototype.ngAfterContentChecked = function () {\n        if (!this._canBeAnimated) {\n            this._canBeAnimated = document.body.contains(this._elementRef.nativeElement);\n            if (this._canBeAnimated) {\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    MdTabBody.prototype._onTranslateTabStarted = function (e) {\n        if (this._isCenterPosition(e.toState)) {\n            this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n        }\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    MdTabBody.prototype._onTranslateTabComplete = function (e) {\n        // If the end state is that the tab is not centered, then detach the content.\n        if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n            this._portalHost.detach();\n        }\n        // If the transition to the center is complete, emit an event.\n        if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n            this.onCentered.emit();\n        }\n    };\n    /**\n     * The text direction of the containing app.\n     * @return {?}\n     */\n    MdTabBody.prototype._getLayoutDirection = function () {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    };\n    /**\n     * Whether the provided position state is considered center, regardless of origin.\n     * @param {?} position\n     * @return {?}\n     */\n    MdTabBody.prototype._isCenterPosition = function (position) {\n        return position == 'center' ||\n            position == 'left-origin-center' ||\n            position == 'right-origin-center';\n    };\n    return MdTabBody;\n}());\nMdTabBody.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-tab-body, mat-tab-body',\n                template: \"<div class=\\\"mat-tab-body-content\\\" #content [@translateTab]=\\\"_canBeAnimated ? _position : null\\\" (@translateTab.start)=\\\"_onTranslateTabStarted($event)\\\" (@translateTab.done)=\\\"_onTranslateTabComplete($event)\\\"> <ng-template cdkPortalHost></ng-template> </div> \",\n                styles: [\".mat-tab-body-content{height:100%} /*# sourceMappingURL=tab-body.css.map */ \"],\n                host: {\n                    '[class.mat-tab-body]': 'true',\n                },\n                animations: [\n                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"a\" /* trigger */])('translateTab', [\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('left', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'translate3d(-100%, 0, 0)' })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('left-origin-center', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'translate3d(0, 0, 0)' })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('right-origin-center', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'translate3d(0, 0, 0)' })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('center', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'translate3d(0, 0, 0)' })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('right', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'translate3d(100%, 0, 0)' })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('* => left, * => right, left => center, right => center', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('void => left-origin-center', [\n                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'translate3d(-100%, 0, 0)' }),\n                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n                        ]),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('void => right-origin-center', [\n                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'translate3d(100%, 0, 0)' }),\n                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n                        ])\n                    ])\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabBody.ctorParameters = function () { return [\n    { type: Dir, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectorRef\"], },\n]; };\nMdTabBody.propDecorators = {\n    '_portalHost': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: [PortalHostDirective,] },],\n    'onCentering': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'onCentered': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    '_content': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['content',] },],\n    'position': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['position',] },],\n    'origin': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['origin',] },],\n};\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nvar EXAGGERATED_OVERSCROLL = 60;\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nvar MdTabHeader = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _dir\n     */\n    function MdTabHeader(_elementRef, _dir) {\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._focusIndex = 0;\n        this._scrollDistance = 0;\n        this._selectedIndexChanged = false;\n        /** Whether the controls for pagination should be displayed */\n        this._showPaginationControls = false;\n        /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n        this._disableScrollAfter = true;\n        /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n        this._disableScrollBefore = true;\n        this._selectedIndex = 0;\n        /** Event emitted when the option is selected. */\n        this.selectFocusedIndex = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when a label is focused. */\n        this.indexFocused = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n    }\n    Object.defineProperty(MdTabHeader.prototype, \"selectedIndex\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._selectedIndex; },\n        /**\n         * The index of the active tab.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._selectedIndexChanged = this._selectedIndex != value;\n            this._selectedIndex = value;\n            this._focusIndex = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdTabHeader.prototype.ngAfterContentChecked = function () {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this._tabLabelCount != this._labelWrappers.length) {\n            this._updatePagination();\n            this._tabLabelCount = this._labelWrappers.length;\n        }\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this._selectedIndexChanged) {\n            this._scrollToLabel(this._selectedIndex);\n            this._checkScrollingControls();\n            this._alignInkBarToSelectedTab();\n            this._selectedIndexChanged = false;\n        }\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this._scrollDistanceChanged) {\n            this._updateTabScrollPosition();\n            this._scrollDistanceChanged = false;\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdTabHeader.prototype._handleKeydown = function (event) {\n        switch (event.keyCode) {\n            case RIGHT_ARROW:\n                this._focusNextTab();\n                break;\n            case LEFT_ARROW:\n                this._focusPreviousTab();\n                break;\n            case ENTER:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                break;\n        }\n    };\n    /**\n     * Aligns the ink bar to the selected tab on load.\n     * @return {?}\n     */\n    MdTabHeader.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._alignInkBarToSelectedTab();\n        if (this._dir) {\n            this._directionChange = this._dir.dirChange.subscribe(function () { return _this._alignInkBarToSelectedTab(); });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdTabHeader.prototype.ngOnDestroy = function () {\n        if (this._directionChange) {\n            this._directionChange.unsubscribe();\n            this._directionChange = null;\n        }\n    };\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     * @return {?}\n     */\n    MdTabHeader.prototype._onContentChanges = function () {\n        this._updatePagination();\n        this._alignInkBarToSelectedTab();\n    };\n    /**\n     * Updating the view whether pagination should be enabled or not\n     * @return {?}\n     */\n    MdTabHeader.prototype._updatePagination = function () {\n        this._checkPaginationEnabled();\n        this._checkScrollingControls();\n        this._updateTabScrollPosition();\n    };\n    Object.defineProperty(MdTabHeader.prototype, \"focusIndex\", {\n        /**\n         * Tracks which element has focus; used for keyboard navigation\n         * @return {?}\n         */\n        get: function () { return this._focusIndex; },\n        /**\n         * When the focus index is set, we must manually send focus to the correct label\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (!this._isValidIndex(value) || this._focusIndex == value) {\n                return;\n            }\n            this._focusIndex = value;\n            this.indexFocused.emit(value);\n            this._setTabFocus(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     * @param {?} index\n     * @return {?}\n     */\n    MdTabHeader.prototype._isValidIndex = function (index) {\n        if (!this._labelWrappers) {\n            return true;\n        }\n        var /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n        return tab && !tab.disabled;\n    };\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     * @param {?} tabIndex\n     * @return {?}\n     */\n    MdTabHeader.prototype._setTabFocus = function (tabIndex) {\n        if (this._showPaginationControls) {\n            this._scrollToLabel(tabIndex);\n        }\n        if (this._labelWrappers && this._labelWrappers.length) {\n            this._labelWrappers.toArray()[tabIndex].focus();\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            var /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n            var /** @type {?} */ dir = this._getLayoutDirection();\n            if (dir == 'ltr') {\n                containerEl.scrollLeft = 0;\n            }\n            else {\n                containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    };\n    /**\n     * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n     * Valid offsets are 1 and -1.\n     * @param {?} offset\n     * @return {?}\n     */\n    MdTabHeader.prototype._moveFocus = function (offset) {\n        if (this._labelWrappers) {\n            var /** @type {?} */ tabs = this._labelWrappers.toArray();\n            for (var /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n                if (this._isValidIndex(i)) {\n                    this.focusIndex = i;\n                    return;\n                }\n            }\n        }\n    };\n    /**\n     * Increment the focus index by 1 until a valid tab is found.\n     * @return {?}\n     */\n    MdTabHeader.prototype._focusNextTab = function () {\n        this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n    };\n    /**\n     * Decrement the focus index by 1 until a valid tab is found.\n     * @return {?}\n     */\n    MdTabHeader.prototype._focusPreviousTab = function () {\n        this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n    };\n    /**\n     * The layout direction of the containing app.\n     * @return {?}\n     */\n    MdTabHeader.prototype._getLayoutDirection = function () {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    };\n    /**\n     * Performs the CSS transformation on the tab list that will cause the list to scroll.\n     * @return {?}\n     */\n    MdTabHeader.prototype._updateTabScrollPosition = function () {\n        var /** @type {?} */ translateX = this.scrollDistance + 'px';\n        if (this._getLayoutDirection() == 'ltr') {\n            translateX = '-' + translateX;\n        }\n        applyCssTransform(this._tabList.nativeElement, \"translate3d(\" + translateX + \", 0, 0)\");\n    };\n    Object.defineProperty(MdTabHeader.prototype, \"scrollDistance\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._scrollDistance; },\n        /**\n         * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n            // Mark that the scroll distance has changed so that after the view is checked, the CSS\n            // transformation can move the header.\n            this._scrollDistanceChanged = true;\n            this._checkScrollingControls();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} scrollDir\n     * @return {?}\n     */\n    MdTabHeader.prototype._scrollHeader = function (scrollDir) {\n        var /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n    };\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} labelIndex\n     * @return {?}\n     */\n    MdTabHeader.prototype._scrollToLabel = function (labelIndex) {\n        var /** @type {?} */ selectedLabel = this._labelWrappers\n            ? this._labelWrappers.toArray()[labelIndex]\n            : null;\n        if (!selectedLabel) {\n            return;\n        }\n        // The view length is the visible width of the tab labels.\n        var /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        var /** @type {?} */ labelBeforePos, /** @type {?} */ labelAfterPos;\n        if (this._getLayoutDirection() == 'ltr') {\n            labelBeforePos = selectedLabel.getOffsetLeft();\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n        }\n        else {\n            labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n        }\n        var /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n        var /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        }\n        else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    };\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    MdTabHeader.prototype._checkPaginationEnabled = function () {\n        this._showPaginationControls =\n            this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n        if (!this._showPaginationControls) {\n            this.scrollDistance = 0;\n        }\n    };\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    MdTabHeader.prototype._checkScrollingControls = function () {\n        // Check if the pagination arrows should be activated.\n        this._disableScrollBefore = this.scrollDistance == 0;\n        this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    };\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    MdTabHeader.prototype._getMaxScrollDistance = function () {\n        var /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n        var /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        return lengthOfTabList - viewLength;\n    };\n    /**\n     * Tells the ink-bar to align itself to the current label wrapper\n     * @return {?}\n     */\n    MdTabHeader.prototype._alignInkBarToSelectedTab = function () {\n        var /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length\n            ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement\n            : null;\n        this._inkBar.alignToElement(selectedLabelWrapper);\n    };\n    return MdTabHeader;\n}());\nMdTabHeader.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-tab-header, mat-tab-header',\n                template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\" aria-hidden=\\\"true\\\" md-ripple [mdRippleDisabled]=\\\"_disableScrollBefore\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\" (click)=\\\"_scrollHeader('before')\\\"> <div class=\\\"mat-tab-header-pagination-chevron\\\"></div> </div> <div class=\\\"mat-tab-label-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\"> <div class=\\\"mat-tab-list\\\" #tabList role=\\\"tablist\\\" (cdkObserveContent)=\\\"_onContentChanges()\\\"> <div class=\\\"mat-tab-labels\\\"> <ng-content></ng-content> </div> <md-ink-bar></md-ink-bar> </div> </div> <div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\" aria-hidden=\\\"true\\\" md-ripple [mdRippleDisabled]=\\\"_disableScrollAfter\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\" (click)=\\\"_scrollHeader('after')\\\"> <div class=\\\"mat-tab-header-pagination-chevron\\\"></div> </div> \",\n                styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-label{line-height:48px;height:48px;padding:0 12px;font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-weight:500;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;position:relative}.mat-tab-label:focus{outline:0;opacity:1}@media (max-width:600px){.mat-tab-label{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.mat-tab-header-pagination{position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron{border-color:#ccc}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-labels{display:flex} /*# sourceMappingURL=tab-header.css.map */ \"],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                host: {\n                    'class': 'mat-tab-header',\n                    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n                    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabHeader.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: Dir, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n]; };\nMdTabHeader.propDecorators = {\n    '_labelWrappers': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [MdTabLabelWrapper,] },],\n    '_inkBar': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: [MdInkBar,] },],\n    '_tabListContainer': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: ['tabListContainer',] },],\n    '_tabList': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: ['tabList',] },],\n    'selectedIndex': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'selectFocusedIndex': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'indexFocused': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\nvar MdTabsModule = (function () {\n    function MdTabsModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdTabsModule.forRoot = function () {\n        return {\n            ngModule: MdTabsModule,\n            providers: []\n        };\n    };\n    return MdTabsModule;\n}());\nMdTabsModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [\n                    __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"],\n                    PortalModule,\n                    MdRippleModule,\n                    ObserveContentModule,\n                ],\n                // Don't export all components because some are only to be used internally.\n                exports: [\n                    MdTabGroup,\n                    MdTabLabel,\n                    MdTab,\n                    MdTabNavBar,\n                    MdTabLink,\n                    MdTabLinkRipple\n                ],\n                declarations: [\n                    MdTabGroup,\n                    MdTabLabel,\n                    MdTab,\n                    MdInkBar,\n                    MdTabLabelWrapper,\n                    MdTabNavBar,\n                    MdTabLink,\n                    MdTabBody,\n                    MdTabLinkRipple,\n                    MdTabHeader\n                ],\n                providers: [VIEWPORT_RULER_PROVIDER, SCROLL_DISPATCHER_PROVIDER],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabsModule.ctorParameters = function () { return []; };\nvar MdToolbarRow = (function () {\n    function MdToolbarRow() {\n    }\n    return MdToolbarRow;\n}());\nMdToolbarRow.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'md-toolbar-row, mat-toolbar-row',\n                host: {\n                    '[class.mat-toolbar-row]': 'true',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdToolbarRow.ctorParameters = function () { return []; };\nvar MdToolbar = (function () {\n    /**\n     * @param {?} elementRef\n     * @param {?} renderer\n     */\n    function MdToolbar(elementRef, renderer) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n    }\n    Object.defineProperty(MdToolbar.prototype, \"color\", {\n        /**\n         * The color of the toolbar. Can be primary, accent, or warn.\n         * @return {?}\n         */\n        get: function () {\n            return this._color;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._updateColor(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdToolbar.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdToolbar.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this.renderer.setElementClass(this.elementRef.nativeElement, \"mat-\" + color, isAdd);\n        }\n    };\n    return MdToolbar;\n}());\nMdToolbar.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-toolbar, mat-toolbar',\n                template: \"<div class=\\\"mat-toolbar-layout\\\"> <md-toolbar-row> <ng-content></ng-content> </md-toolbar-row> <ng-content select=\\\"md-toolbar-row, mat-toolbar-row\\\"></ng-content> </div> \",\n                styles: [\".mat-toolbar{display:flex;box-sizing:border-box;width:100%;font-size:20px;font-weight:500;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;padding:0 16px;flex-direction:column}.mat-toolbar .mat-toolbar-row{display:flex;box-sizing:border-box;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar{min-height:64px}.mat-toolbar-row{height:64px}@media (max-width:600px){.mat-toolbar{min-height:56px}.mat-toolbar-row{height:56px}} /*# sourceMappingURL=toolbar.css.map */ \"],\n                host: {\n                    '[class.mat-toolbar]': 'true',\n                    'role': 'toolbar'\n                },\n                changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectionStrategy\"].OnPush,\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None\n            },] },\n];\n/**\n * @nocollapse\n */\nMdToolbar.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n]; };\nMdToolbar.propDecorators = {\n    'color': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\nvar MdToolbarModule = (function () {\n    function MdToolbarModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdToolbarModule.forRoot = function () {\n        return {\n            ngModule: MdToolbarModule,\n            providers: []\n        };\n    };\n    return MdToolbarModule;\n}());\nMdToolbarModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [CompatibilityModule],\n                exports: [MdToolbar, MdToolbarRow, CompatibilityModule],\n                declarations: [MdToolbar, MdToolbarRow],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdToolbarModule.ctorParameters = function () { return []; };\n/**\n * Exception thrown when a tooltip has an invalid position.\n * \\@docs-private\n */\nvar MdTooltipInvalidPositionError = (function (_super) {\n    __extends(MdTooltipInvalidPositionError, _super);\n    /**\n     * @param {?} position\n     */\n    function MdTooltipInvalidPositionError(position) {\n        return _super.call(this, \"Tooltip position \\\"\" + position + \"\\\" is invalid.\") || this;\n    }\n    return MdTooltipInvalidPositionError;\n}(MdError));\n/** Time in ms to delay before changing the tooltip visibility to hidden */\nvar TOUCHEND_HIDE_DELAY = 1500;\n/** Time in ms to throttle repositioning after scroll events. */\nvar SCROLL_THROTTLE_MS = 20;\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\nvar MdTooltip = (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _elementRef\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _ngZone\n     * @param {?} _renderer\n     * @param {?} _platform\n     * @param {?} _dir\n     */\n    function MdTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _renderer, _platform, _dir) {\n        var _this = this;\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._renderer = _renderer;\n        this._platform = _platform;\n        this._dir = _dir;\n        this._position = 'below';\n        this._disabled = false;\n        /** The default delay in ms before showing the tooltip after show is called */\n        this.showDelay = 0;\n        /** The default delay in ms before hiding the tooltip after hide is called */\n        this.hideDelay = 0;\n        // The mouse events shouldn't be bound on iOS devices, because\n        // they can prevent the first tap from firing it's click event.\n        if (!_platform.IOS) {\n            _renderer.listen(_elementRef.nativeElement, 'mouseenter', function () { return _this.show(); });\n            _renderer.listen(_elementRef.nativeElement, 'mouseleave', function () { return _this.hide(); });\n        }\n    }\n    Object.defineProperty(MdTooltip.prototype, \"position\", {\n        /**\n         * Allows the user to define the position of the tooltip relative to the parent element\n         * @return {?}\n         */\n        get: function () { return this._position; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (value !== this._position) {\n                this._position = value;\n                // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n                // the tooltip.\n                if (this._tooltipInstance) {\n                    this._disposeTooltip();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"disabled\", {\n        /**\n         * Disables the display of the tooltip.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            // If tooltip is disabled, hide immediately.\n            if (this._disabled) {\n                this.hide(0);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_positionDeprecated\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this._position; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._position = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"message\", {\n        /**\n         * The message to be displayed in the tooltip\n         * @return {?}\n         */\n        get: function () { return this._message; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._message = value;\n            if (this._tooltipInstance) {\n                this._setTooltipMessage(this._message);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_deprecatedMessage\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.message; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.message = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matMessage\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.message; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.message = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matPosition\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.position; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.position = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matDisabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.disabled; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.disabled = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matHideDelay\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.hideDelay; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.hideDelay = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matShowDelay\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.showDelay; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.showDelay = v; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdTooltip.prototype.ngOnInit = function () {\n        var _this = this;\n        // When a scroll on the page occurs, update the position in case this tooltip needs\n        // to be repositioned.\n        this.scrollSubscription = this._scrollDispatcher.scrolled(SCROLL_THROTTLE_MS, function () {\n            if (_this._overlayRef) {\n                _this._overlayRef.updatePosition();\n            }\n        });\n    };\n    /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n    MdTooltip.prototype.ngOnDestroy = function () {\n        if (this._tooltipInstance) {\n            this._disposeTooltip();\n        }\n        if (this.scrollSubscription) {\n            this.scrollSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    MdTooltip.prototype.show = function (delay) {\n        if (delay === void 0) { delay = this.showDelay; }\n        if (this.disabled || !this._message || !this._message.trim()) {\n            return;\n        }\n        if (!this._tooltipInstance) {\n            this._createTooltip();\n        }\n        this._setTooltipMessage(this._message);\n        this._tooltipInstance.show(this._position, delay);\n    };\n    /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    MdTooltip.prototype.hide = function (delay) {\n        if (delay === void 0) { delay = this.hideDelay; }\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    };\n    /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n    MdTooltip.prototype.toggle = function () {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    };\n    /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n    MdTooltip.prototype._isTooltipVisible = function () {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    };\n    /**\n     * Create the tooltip to display\n     * @return {?}\n     */\n    MdTooltip.prototype._createTooltip = function () {\n        var _this = this;\n        this._createOverlay();\n        var /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = this._overlayRef.attach(portal).instance;\n        // Dispose the overlay when finished the shown tooltip.\n        this._tooltipInstance.afterHidden().subscribe(function () {\n            // Check first if the tooltip has already been removed through this components destroy.\n            if (_this._tooltipInstance) {\n                _this._disposeTooltip();\n            }\n        });\n    };\n    /**\n     * Create the overlay config and position strategy\n     * @return {?}\n     */\n    MdTooltip.prototype._createOverlay = function () {\n        var _this = this;\n        var /** @type {?} */ origin = this._getOrigin();\n        var /** @type {?} */ position = this._getOverlayPosition();\n        // Create connected position strategy that listens for scroll events to reposition.\n        // After position changes occur and the overlay is clipped by a parent scrollable then\n        // close the tooltip.\n        var /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n        strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n        strategy.onPositionChange.subscribe(function (change) {\n            if (change.scrollableViewProperties.isOverlayClipped &&\n                _this._tooltipInstance && _this._tooltipInstance.isVisible()) {\n                _this.hide(0);\n            }\n        });\n        var /** @type {?} */ config = new OverlayState();\n        config.positionStrategy = strategy;\n        this._overlayRef = this._overlay.create(config);\n    };\n    /**\n     * Disposes the current tooltip and the overlay it is attached to\n     * @return {?}\n     */\n    MdTooltip.prototype._disposeTooltip = function () {\n        this._overlayRef.dispose();\n        this._overlayRef = null;\n        this._tooltipInstance = null;\n    };\n    /**\n     * Returns the origin position based on the user's position preference\n     * @return {?}\n     */\n    MdTooltip.prototype._getOrigin = function () {\n        if (this.position == 'above' || this.position == 'below') {\n            return { originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom' };\n        }\n        var /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n        if (this.position == 'left' ||\n            this.position == 'before' && isDirectionLtr ||\n            this.position == 'after' && !isDirectionLtr) {\n            return { originX: 'start', originY: 'center' };\n        }\n        if (this.position == 'right' ||\n            this.position == 'after' && isDirectionLtr ||\n            this.position == 'before' && !isDirectionLtr) {\n            return { originX: 'end', originY: 'center' };\n        }\n        throw new MdTooltipInvalidPositionError(this.position);\n    };\n    /**\n     * Returns the overlay position based on the user's preference\n     * @return {?}\n     */\n    MdTooltip.prototype._getOverlayPosition = function () {\n        if (this.position == 'above') {\n            return { overlayX: 'center', overlayY: 'bottom' };\n        }\n        if (this.position == 'below') {\n            return { overlayX: 'center', overlayY: 'top' };\n        }\n        var /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n        if (this.position == 'left' ||\n            this.position == 'before' && isLtr ||\n            this.position == 'after' && !isLtr) {\n            return { overlayX: 'end', overlayY: 'center' };\n        }\n        if (this.position == 'right' ||\n            this.position == 'after' && isLtr ||\n            this.position == 'before' && !isLtr) {\n            return { overlayX: 'start', overlayY: 'center' };\n        }\n        throw new MdTooltipInvalidPositionError(this.position);\n    };\n    /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @param {?} message\n     * @return {?}\n     */\n    MdTooltip.prototype._setTooltipMessage = function (message) {\n        var _this = this;\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        this._tooltipInstance.message = message;\n        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {\n            if (_this._tooltipInstance) {\n                _this._overlayRef.updatePosition();\n            }\n        });\n    };\n    return MdTooltip;\n}());\nMdTooltip.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n                host: {\n                    '(longpress)': 'show()',\n                    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n                },\n                exportAs: 'mdTooltip',\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTooltip.ctorParameters = function () { return [\n    { type: Overlay, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: ScrollDispatcher, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewContainerRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: Platform, },\n    { type: Dir, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n]; };\nMdTooltip.propDecorators = {\n    'position': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdTooltipPosition',] },],\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdTooltipDisabled',] },],\n    '_positionDeprecated': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['tooltip-position',] },],\n    'showDelay': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdTooltipShowDelay',] },],\n    'hideDelay': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdTooltipHideDelay',] },],\n    'message': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdTooltip',] },],\n    '_deprecatedMessage': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['md-tooltip',] },],\n    '_matMessage': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['matTooltip',] },],\n    '_matPosition': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['matTooltipPosition',] },],\n    '_matDisabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['matTooltipDisabled',] },],\n    '_matHideDelay': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['matTooltipHideDelay',] },],\n    '_matShowDelay': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['matTooltipShowDelay',] },],\n};\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nvar TooltipComponent = (function () {\n    /**\n     * @param {?} _dir\n     * @param {?} _changeDetectorRef\n     */\n    function TooltipComponent(_dir, _changeDetectorRef) {\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** The transform origin used in the animation for showing and hiding the tooltip */\n        this._transformOrigin = 'bottom';\n        this._onHide = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param {?} position Position of the tooltip.\n     * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n     * @return {?}\n     */\n    TooltipComponent.prototype.show = function (position, delay) {\n        var _this = this;\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._setTransformOrigin(position);\n        this._showTimeoutId = setTimeout(function () {\n            _this._visibility = 'visible';\n            // If this was set to true immediately, then a body click that triggers show() would\n            // trigger interaction and close the tooltip right after it was displayed.\n            _this._closeOnInteraction = false;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            _this._changeDetectorRef.markForCheck();\n            setTimeout(function () { _this._closeOnInteraction = true; }, 0);\n        }, delay);\n    };\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n    TooltipComponent.prototype.hide = function (delay) {\n        var _this = this;\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n        }\n        this._hideTimeoutId = setTimeout(function () {\n            _this._visibility = 'hidden';\n            _this._closeOnInteraction = false;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            _this._changeDetectorRef.markForCheck();\n        }, delay);\n    };\n    /**\n     * Returns an observable that notifies when the tooltip has been hidden from view\n     * @return {?}\n     */\n    TooltipComponent.prototype.afterHidden = function () {\n        return this._onHide.asObservable();\n    };\n    /**\n     * Whether the tooltip is being displayed\n     * @return {?}\n     */\n    TooltipComponent.prototype.isVisible = function () {\n        return this._visibility === 'visible';\n    };\n    /**\n     * Sets the tooltip transform origin according to the tooltip position\n     * @param {?} value\n     * @return {?}\n     */\n    TooltipComponent.prototype._setTransformOrigin = function (value) {\n        var /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n        switch (value) {\n            case 'before':\n                this._transformOrigin = isLtr ? 'right' : 'left';\n                break;\n            case 'after':\n                this._transformOrigin = isLtr ? 'left' : 'right';\n                break;\n            case 'left':\n                this._transformOrigin = 'right';\n                break;\n            case 'right':\n                this._transformOrigin = 'left';\n                break;\n            case 'above':\n                this._transformOrigin = 'bottom';\n                break;\n            case 'below':\n                this._transformOrigin = 'top';\n                break;\n            default: throw new MdTooltipInvalidPositionError(value);\n        }\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    TooltipComponent.prototype._afterVisibilityAnimation = function (e) {\n        if (e.toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n    };\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.google.com/components/tooltips.html#tooltips-interaction\n     * @return {?}\n     */\n    TooltipComponent.prototype._handleBodyInteraction = function () {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    };\n    return TooltipComponent;\n}());\nTooltipComponent.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-tooltip-component, mat-tooltip-component',\n                template: \"<div class=\\\"mat-tooltip\\\" [style.transform-origin]=\\\"_transformOrigin\\\" [@state]=\\\"_visibility\\\" (@state.done)=\\\"_afterVisibilityAnimation($event)\\\"> {{message}} </div>\",\n                styles: [\":host{pointer-events:none}.mat-tooltip{color:#fff;padding:6px 8px;border-radius:2px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-size:10px;margin:14px;max-width:250px}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}} /*# sourceMappingURL=tooltip.css.map */ \"],\n                animations: [\n                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"a\" /* trigger */])('state', [\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('void', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'scale(0)' })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('initial', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'scale(0)' })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('visible', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'scale(1)' })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('hidden', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'scale(0)' })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('* => visible', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('* => hidden', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n                    ])\n                ],\n                host: {\n                    '(body:click)': 'this._handleBodyInteraction()'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nTooltipComponent.ctorParameters = function () { return [\n    { type: Dir, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectorRef\"], },\n]; };\nvar MdTooltipModule = (function () {\n    function MdTooltipModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdTooltipModule.forRoot = function () {\n        return {\n            ngModule: MdTooltipModule,\n            providers: []\n        };\n    };\n    return MdTooltipModule;\n}());\nMdTooltipModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [OverlayModule, CompatibilityModule, PlatformModule],\n                exports: [MdTooltip, TooltipComponent, CompatibilityModule],\n                declarations: [MdTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTooltipModule.ctorParameters = function () { return []; };\n/**\n * Exception thrown when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n */\nvar MdMenuMissingError = (function (_super) {\n    __extends(MdMenuMissingError, _super);\n    function MdMenuMissingError() {\n        return _super.call(this, \"md-menu-trigger: must pass in an md-menu instance.\\n\\n    Example:\\n      <md-menu #menu=\\\"mdMenu\\\"></md-menu>\\n      <button [mdMenuTriggerFor]=\\\"menu\\\"></button>\\n    \") || this;\n    }\n    return MdMenuMissingError;\n}(MdError));\n/**\n * Exception thrown when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n */\nvar MdMenuInvalidPositionX = (function (_super) {\n    __extends(MdMenuInvalidPositionX, _super);\n    function MdMenuInvalidPositionX() {\n        return _super.call(this, \"x-position value must be either 'before' or after'.\\n      Example: <md-menu x-position=\\\"before\\\" #menu=\\\"mdMenu\\\"></md-menu>\\n    \") || this;\n    }\n    return MdMenuInvalidPositionX;\n}(MdError));\n/**\n * Exception thrown when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n */\nvar MdMenuInvalidPositionY = (function (_super) {\n    __extends(MdMenuInvalidPositionY, _super);\n    function MdMenuInvalidPositionY() {\n        return _super.call(this, \"y-position value must be either 'above' or below'.\\n      Example: <md-menu y-position=\\\"above\\\" #menu=\\\"mdMenu\\\"></md-menu>\\n    \") || this;\n    }\n    return MdMenuInvalidPositionY;\n}(MdError));\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nvar MdMenuItem = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdMenuItem(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._disabled = false;\n    }\n    /**\n     * Focuses the menu item.\n     * @return {?}\n     */\n    MdMenuItem.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n    };\n    Object.defineProperty(MdMenuItem.prototype, \"disabled\", {\n        /**\n         * Whether the menu item is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Used to set the `tabindex`.\n     * @return {?}\n     */\n    MdMenuItem.prototype._getTabIndex = function () {\n        return this._disabled ? '-1' : '0';\n    };\n    /**\n     * Used to set the HTML `disabled` attribute. Necessary for links to be disabled properly.\n     * @return {?}\n     */\n    MdMenuItem.prototype._getDisabledAttr = function () {\n        return this._disabled ? true : null;\n    };\n    /**\n     * Returns the host DOM element.\n     * @return {?}\n     */\n    MdMenuItem.prototype._getHostElement = function () {\n        return this._elementRef.nativeElement;\n    };\n    /**\n     * Prevents the default element actions if it is disabled.\n     * @param {?} event\n     * @return {?}\n     */\n    MdMenuItem.prototype._checkDisabled = function (event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    };\n    return MdMenuItem;\n}());\nMdMenuItem.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: '[md-menu-item], [mat-menu-item]',\n                host: {\n                    'role': 'menuitem',\n                    '[class.mat-menu-item]': 'true',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.disabled]': '_getDisabledAttr()',\n                    '(click)': '_checkDisabled($event)',\n                },\n                template: \"<ng-content></ng-content> <div class=\\\"mat-menu-ripple\\\" *ngIf=\\\"!disabled\\\" md-ripple [mdRippleTrigger]=\\\"_getHostElement()\\\"> </div> \",\n                exportAs: 'mdMenuItem'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdMenuItem.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\nMdMenuItem.propDecorators = {\n    'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on AngularJS Material.\n */\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nvar transformMenu = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"a\" /* trigger */])('transformMenu', [\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('showing', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({\n        opacity: 1,\n        transform: \"scale(1)\"\n    })),\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('void => *', [\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({\n            opacity: 0,\n            transform: \"scale(0)\"\n        }),\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])(\"200ms cubic-bezier(0.25, 0.8, 0.25, 1)\")\n    ]),\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('* => void', [\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])('50ms 100ms linear', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ opacity: 0 }))\n    ])\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nvar fadeInItems = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"a\" /* trigger */])('fadeInItems', [\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('showing', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ opacity: 1 })),\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('void => *', [\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ opacity: 0 }),\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])(\"200ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)\")\n    ])\n]);\n// TODO(kara): prevent-close functionality\nvar MdMenu = (function () {\n    /**\n     * @param {?} posX\n     * @param {?} posY\n     * @param {?} deprecatedPosX\n     * @param {?} deprecatedPosY\n     */\n    function MdMenu(posX, posY, deprecatedPosX, deprecatedPosY) {\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Position of the menu in the X axis. */\n        this.positionX = 'after';\n        /** Position of the menu in the Y axis. */\n        this.positionY = 'below';\n        this.overlapTrigger = true;\n        /** Event emitted when the menu is closed. */\n        this.close = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        // TODO(kara): Remove kebab-case attributes after next release\n        if (deprecatedPosX) {\n            this._setPositionX(deprecatedPosX);\n        }\n        if (deprecatedPosY) {\n            this._setPositionY(deprecatedPosY);\n        }\n        if (posX) {\n            this._setPositionX(posX);\n        }\n        if (posY) {\n            this._setPositionY(posY);\n        }\n        this.setPositionClasses(this.positionX, this.positionY);\n    }\n    /**\n     * @return {?}\n     */\n    MdMenu.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._keyManager = new FocusKeyManager(this.items).withWrap();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(function () {\n            _this._emitCloseEvent();\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdMenu.prototype.ngOnDestroy = function () {\n        if (this._tabSubscription) {\n            this._tabSubscription.unsubscribe();\n        }\n    };\n    Object.defineProperty(MdMenu.prototype, \"classList\", {\n        /**\n         * This method takes classes set on the host md-menu element and applies them on the\n         * menu template that displays in the overlay container.  Otherwise, it's difficult\n         * to style the containing menu from outside the component.\n         * @param {?} classes list of class names\n         * @return {?}\n         */\n        set: function (classes) {\n            this._classList = classes.split(' ').reduce(function (obj, className) {\n                obj[className] = true;\n                return obj;\n            }, {});\n            this.setPositionClasses(this.positionX, this.positionY);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focus the first item in the menu. This method is used by the menu trigger\n     * to focus the first item when the menu is opened by the ENTER key.\n     * @return {?}\n     */\n    MdMenu.prototype.focusFirstItem = function () {\n        this._keyManager.setFirstItemActive();\n    };\n    /**\n     * This emits a close event to which the trigger is subscribed. When emitted, the\n     * trigger will close the menu.\n     * @return {?}\n     */\n    MdMenu.prototype._emitCloseEvent = function () {\n        this.close.emit();\n    };\n    /**\n     * @param {?} pos\n     * @return {?}\n     */\n    MdMenu.prototype._setPositionX = function (pos) {\n        if (pos !== 'before' && pos !== 'after') {\n            throw new MdMenuInvalidPositionX();\n        }\n        this.positionX = pos;\n    };\n    /**\n     * @param {?} pos\n     * @return {?}\n     */\n    MdMenu.prototype._setPositionY = function (pos) {\n        if (pos !== 'above' && pos !== 'below') {\n            throw new MdMenuInvalidPositionY();\n        }\n        this.positionY = pos;\n    };\n    /**\n     * It's necessary to set position-based classes to ensure the menu panel animation\n     * folds out from the correct direction.\n     * @param {?} posX\n     * @param {?} posY\n     * @return {?}\n     */\n    MdMenu.prototype.setPositionClasses = function (posX, posY) {\n        this._classList['mat-menu-before'] = posX == 'before';\n        this._classList['mat-menu-after'] = posX == 'after';\n        this._classList['mat-menu-above'] = posY == 'above';\n        this._classList['mat-menu-below'] = posY == 'below';\n    };\n    return MdMenu;\n}());\nMdMenu.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-menu, mat-menu',\n                host: { 'role': 'menu' },\n                template: \"<ng-template> <div class=\\\"mat-menu-panel\\\" [ngClass]=\\\"_classList\\\" (keydown)=\\\"_keyManager.onKeydown($event)\\\" (click)=\\\"_emitCloseEvent()\\\" [@transformMenu]=\\\"'showing'\\\"> <div class=\\\"mat-menu-content\\\" [@fadeInItems]=\\\"'showing'\\\"> <ng-content></ng-content> </div> </div> </ng-template> \",\n                styles: [\".mat-menu-panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh + 48px)}.mat-menu-panel.mat-menu-after.mat-menu-below{transform-origin:left top}.mat-menu-panel.mat-menu-after.mat-menu-above{transform-origin:left bottom}.mat-menu-panel.mat-menu-before.mat-menu-below{transform-origin:right top}.mat-menu-panel.mat-menu-before.mat-menu-above{transform-origin:right bottom}[dir=rtl] .mat-menu-panel.mat-menu-after.mat-menu-below{transform-origin:right top}[dir=rtl] .mat-menu-panel.mat-menu-after.mat-menu-above{transform-origin:right bottom}[dir=rtl] .mat-menu-panel.mat-menu-before.mat-menu-below{transform-origin:left top}[dir=rtl] .mat-menu-panel.mat-menu-before.mat-menu-above{transform-origin:left bottom}@media screen and (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content{padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;font-size:16px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;text-align:left;text-decoration:none;position:relative}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px}button.mat-menu-item{width:100%}.mat-menu-ripple{position:absolute;top:0;left:0;bottom:0;right:0} /*# sourceMappingURL=menu.css.map */ \"],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                animations: [\n                    transformMenu,\n                    fadeInItems\n                ],\n                exportAs: 'mdMenu'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdMenu.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Attribute\"], args: ['xPosition',] },] },\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Attribute\"], args: ['yPosition',] },] },\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Attribute\"], args: ['x-position',] },] },\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Attribute\"], args: ['y-position',] },] },\n]; };\nMdMenu.propDecorators = {\n    'templateRef': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"TemplateRef\"],] },],\n    'items': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [MdMenuItem,] },],\n    'overlapTrigger': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'classList': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['class',] },],\n    'close': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nvar MdMenuTrigger = (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _element\n     * @param {?} _viewContainerRef\n     * @param {?} _renderer\n     * @param {?} _dir\n     */\n    function MdMenuTrigger(_overlay, _element, _viewContainerRef, _renderer, _dir) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._renderer = _renderer;\n        this._dir = _dir;\n        this._menuOpen = false;\n        this._openedByMouse = false;\n        /** Event emitted when the associated menu is opened. */\n        this.onMenuOpen = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        /** Event emitted when the associated menu is closed. */\n        this.onMenuClose = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n    }\n    Object.defineProperty(MdMenuTrigger.prototype, \"_deprecatedMdMenuTriggerFor\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.menu; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.menu = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdMenuTrigger.prototype, \"_deprecatedMatMenuTriggerFor\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.menu; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.menu = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdMenuTrigger.prototype, \"_matMenuTriggerFor\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.menu; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.menu = v; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this._checkMenu();\n        this.menu.close.subscribe(function () { return _this.closeMenu(); });\n    };\n    /**\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.ngOnDestroy = function () { this.destroyMenu(); };\n    Object.defineProperty(MdMenuTrigger.prototype, \"menuOpen\", {\n        /**\n         * Whether the menu is open.\n         * @return {?}\n         */\n        get: function () { return this._menuOpen; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Toggles the menu between the open and closed states.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.toggleMenu = function () {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    };\n    /**\n     * Opens the menu.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.openMenu = function () {\n        if (!this._menuOpen) {\n            this._createOverlay();\n            this._overlayRef.attach(this._portal);\n            this._subscribeToBackdrop();\n            this._initMenu();\n        }\n    };\n    /**\n     * Closes the menu.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.closeMenu = function () {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this._backdropSubscription.unsubscribe();\n            this._resetMenu();\n        }\n    };\n    /**\n     * Removes the menu from the DOM.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.destroyMenu = function () {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n            this._cleanUpSubscriptions();\n        }\n    };\n    /**\n     * Focuses the menu trigger.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');\n    };\n    Object.defineProperty(MdMenuTrigger.prototype, \"dir\", {\n        /**\n         * The text direction of the containing app.\n         * @return {?}\n         */\n        get: function () {\n            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This method ensures that the menu closes when the overlay backdrop is clicked.\n     * We do not use first() here because doing so would not catch clicks from within\n     * the menu, and it would fail to unsubscribe properly. Instead, we unsubscribe\n     * explicitly when the menu is closed or destroyed.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._subscribeToBackdrop = function () {\n        var _this = this;\n        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {\n            _this.menu._emitCloseEvent();\n        });\n    };\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._initMenu = function () {\n        this._setIsMenuOpen(true);\n        // Should only set focus if opened via the keyboard, so keyboard users can\n        // can easily navigate menu items. According to spec, mouse users should not\n        // see the focus style.\n        if (!this._openedByMouse) {\n            this.menu.focusFirstItem();\n        }\n    };\n    ;\n    /**\n     * This method resets the menu when it's closed, most importantly restoring\n     * focus to the menu trigger if the menu was opened via the keyboard.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._resetMenu = function () {\n        this._setIsMenuOpen(false);\n        // Focus only needs to be reset to the host element if the menu was opened\n        // by the keyboard and manually shifted to the first menu item.\n        if (!this._openedByMouse) {\n            this.focus();\n        }\n        this._openedByMouse = false;\n    };\n    /**\n     * @param {?} isOpen\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._setIsMenuOpen = function (isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n    };\n    /**\n     *  This method checks that a valid instance of MdMenu has been passed into\n     *  mdMenuTriggerFor. If not, an exception is thrown.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._checkMenu = function () {\n        if (!this.menu) {\n            throw new MdMenuMissingError();\n        }\n    };\n    /**\n     *  This method creates the overlay from the provided menu's template and saves its\n     *  OverlayRef so that it can be attached to the DOM when openMenu is called.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._createOverlay = function () {\n        if (!this._overlayRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n            var /** @type {?} */ config = this._getOverlayConfig();\n            this._subscribeToPositions(/** @type {?} */ (config.positionStrategy));\n            this._overlayRef = this._overlay.create(config);\n        }\n    };\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @return {?} OverlayState\n     */\n    MdMenuTrigger.prototype._getOverlayConfig = function () {\n        var /** @type {?} */ overlayState = new OverlayState();\n        overlayState.positionStrategy = this._getPosition()\n            .withDirection(this.dir);\n        overlayState.hasBackdrop = true;\n        overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\n        overlayState.direction = this.dir;\n        return overlayState;\n    };\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     * @param {?} position\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._subscribeToPositions = function (position) {\n        var _this = this;\n        this._positionSubscription = position.onPositionChange.subscribe(function (change) {\n            var /** @type {?} */ posX = change.connectionPair.originX === 'start' ? 'after' : 'before';\n            var /** @type {?} */ posY = change.connectionPair.originY === 'top' ? 'below' : 'above';\n            if (!_this.menu.overlapTrigger) {\n                posY = posY === 'below' ? 'above' : 'below';\n            }\n            _this.menu.setPositionClasses(posX, posY);\n        });\n    };\n    /**\n     * This method builds the position strategy for the overlay, so the menu is properly connected\n     * to the trigger.\n     * @return {?} ConnectedPositionStrategy\n     */\n    MdMenuTrigger.prototype._getPosition = function () {\n        var _a = this.menu.positionX === 'before' ? ['end', 'start'] : ['start', 'end'], posX = _a[0], fallbackX = _a[1];\n        var _b = this.menu.positionY === 'above' ? ['bottom', 'top'] : ['top', 'bottom'], overlayY = _b[0], fallbackOverlayY = _b[1];\n        var /** @type {?} */ originY = overlayY;\n        var /** @type {?} */ fallbackOriginY = fallbackOverlayY;\n        if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            fallbackOriginY = fallbackOverlayY === 'top' ? 'bottom' : 'top';\n        }\n        return this._overlay.position()\n            .connectedTo(this._element, { originX: posX, originY: originY }, { overlayX: posX, overlayY: overlayY })\n            .withFallbackPosition({ originX: fallbackX, originY: originY }, { overlayX: fallbackX, overlayY: overlayY })\n            .withFallbackPosition({ originX: posX, originY: fallbackOriginY }, { overlayX: posX, overlayY: fallbackOverlayY })\n            .withFallbackPosition({ originX: fallbackX, originY: fallbackOriginY }, { overlayX: fallbackX, overlayY: fallbackOverlayY });\n    };\n    /**\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._cleanUpSubscriptions = function () {\n        if (this._backdropSubscription) {\n            this._backdropSubscription.unsubscribe();\n        }\n        if (this._positionSubscription) {\n            this._positionSubscription.unsubscribe();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._handleMousedown = function (event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            this._openedByMouse = true;\n        }\n    };\n    return MdMenuTrigger;\n}());\nMdMenuTrigger.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: \"[md-menu-trigger-for], [mat-menu-trigger-for],\\n             [mdMenuTriggerFor], [matMenuTriggerFor]\",\n                host: {\n                    'aria-haspopup': 'true',\n                    '(mousedown)': '_handleMousedown($event)',\n                    '(click)': 'toggleMenu()',\n                },\n                exportAs: 'mdMenuTrigger'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdMenuTrigger.ctorParameters = function () { return [\n    { type: Overlay, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewContainerRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: Dir, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n]; };\nMdMenuTrigger.propDecorators = {\n    '_deprecatedMdMenuTriggerFor': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['md-menu-trigger-for',] },],\n    '_deprecatedMatMenuTriggerFor': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mat-menu-trigger-for',] },],\n    '_matMenuTriggerFor': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['matMenuTriggerFor',] },],\n    'menu': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdMenuTriggerFor',] },],\n    'onMenuOpen': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n    'onMenuClose': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\nvar MdMenuModule = (function () {\n    function MdMenuModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdMenuModule.forRoot = function () {\n        return {\n            ngModule: MdMenuModule,\n            providers: [],\n        };\n    };\n    return MdMenuModule;\n}());\nMdMenuModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [\n                    OverlayModule,\n                    __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"],\n                    MdRippleModule,\n                    CompatibilityModule,\n                ],\n                exports: [MdMenu, MdMenuItem, MdMenuTrigger, CompatibilityModule],\n                declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdMenuModule.ctorParameters = function () { return []; };\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nvar MdDialogRef = (function () {\n    /**\n     * @param {?} _overlayRef\n     * @param {?} _containerInstance\n     */\n    function MdDialogRef(_overlayRef, _containerInstance) {\n        var _this = this;\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this._afterClosed = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n        _containerInstance._onAnimationStateChange.subscribe(function (state$$1) {\n            if (state$$1 === 'exit-start') {\n                // Transition the backdrop in parallel with the dialog.\n                _this._overlayRef.detachBackdrop();\n            }\n            else if (state$$1 === 'exit') {\n                _this._overlayRef.dispose();\n                _this._afterClosed.next(_this._result);\n                _this._afterClosed.complete();\n                _this.componentInstance = null;\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\n     * @return {?}\n     */\n    MdDialogRef.prototype.close = function (dialogResult) {\n        this._result = dialogResult;\n        this._containerInstance._exit();\n    };\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    MdDialogRef.prototype.afterClosed = function () {\n        return this._afterClosed.asObservable();\n    };\n    /**\n     * Updates the dialog's position.\n     * @param {?=} position New dialog position.\n     * @return {?}\n     */\n    MdDialogRef.prototype.updatePosition = function (position) {\n        var /** @type {?} */ strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    };\n    /**\n     * Updates the dialog's width and height.\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {?}\n     */\n    MdDialogRef.prototype.updateSize = function (width, height) {\n        if (width === void 0) { width = 'auto'; }\n        if (height === void 0) { height = 'auto'; }\n        this._getPositionStrategy().width(width).height(height);\n        this._overlayRef.updatePosition();\n        return this;\n    };\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @return {?}\n     */\n    MdDialogRef.prototype._getPositionStrategy = function () {\n        return (this._overlayRef.getState().positionStrategy);\n    };\n    return MdDialogRef;\n}());\nvar MD_DIALOG_DATA = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"OpaqueToken\"]('MdDialogData');\n/**\n * Custom injector type specifically for instantiating components with a dialog.\n */\nvar DialogInjector = (function () {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _dialogRef\n     * @param {?} _data\n     */\n    function DialogInjector(_parentInjector, _dialogRef, _data) {\n        this._parentInjector = _parentInjector;\n        this._dialogRef = _dialogRef;\n        this._data = _data;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    DialogInjector.prototype.get = function (token, notFoundValue) {\n        if (token === MdDialogRef) {\n            return this._dialogRef;\n        }\n        if (token === MD_DIALOG_DATA && this._data) {\n            return this._data;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    };\n    return DialogInjector;\n}());\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nvar MdDialogConfig = (function () {\n    function MdDialogConfig() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Whether the user can use escape or clicking outside to close a modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n    return MdDialogConfig;\n}());\n/**\n * Exception thrown when a ComponentPortal is attached to a DomPortalHost without an origin.\n * \\@docs-private\n */\nvar MdDialogContentAlreadyAttachedError = (function (_super) {\n    __extends(MdDialogContentAlreadyAttachedError, _super);\n    function MdDialogContentAlreadyAttachedError() {\n        return _super.call(this, 'Attempting to attach dialog content after content is already attached') || this;\n    }\n    return MdDialogContentAlreadyAttachedError;\n}(MdError));\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nvar MdDialogContainer = (function (_super) {\n    __extends(MdDialogContainer, _super);\n    /**\n     * @param {?} _ngZone\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     */\n    function MdDialogContainer(_ngZone, _renderer, _elementRef, _focusTrapFactory) {\n        var _this = _super.call(this) || this;\n        _this._ngZone = _ngZone;\n        _this._renderer = _renderer;\n        _this._elementRef = _elementRef;\n        _this._focusTrapFactory = _focusTrapFactory;\n        _this._elementFocusedBeforeDialogWasOpened = null;\n        /** State of the dialog animation. */\n        _this._state = 'enter';\n        /** Emits the current animation state whenever it changes. */\n        _this._onAnimationStateChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        return _this;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    MdDialogContainer.prototype.attachComponentPortal = function (portal) {\n        if (this._portalHost.hasAttached()) {\n            throw new MdDialogContentAlreadyAttachedError();\n        }\n        return this._portalHost.attachComponentPortal(portal);\n    };\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    MdDialogContainer.prototype.attachTemplatePortal = function (portal) {\n        if (this._portalHost.hasAttached()) {\n            throw new MdDialogContentAlreadyAttachedError();\n        }\n        return this._portalHost.attachTemplatePortal(portal);\n    };\n    /**\n     * Moves the focus inside the focus trap.\n     * @return {?}\n     */\n    MdDialogContainer.prototype._trapFocus = function () {\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        }\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        this._elementFocusedBeforeDialogWasOpened = (document.activeElement);\n        this._focusTrap.focusFirstTabbableElementWhenReady();\n    };\n    /**\n     * Kicks off the leave animation.\n     * \\@docs-private\n     * @return {?}\n     */\n    MdDialogContainer.prototype._exit = function () {\n        this._state = 'exit';\n        this._onAnimationStateChange.emit('exit-start');\n    };\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    MdDialogContainer.prototype._onAnimationDone = function (event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        this._onAnimationStateChange.emit(/** @type {?} */ (event.toState));\n    };\n    /**\n     * @return {?}\n     */\n    MdDialogContainer.prototype.ngOnDestroy = function () {\n        // When the dialog is destroyed, return focus to the element that originally had it before\n        // the dialog was opened. Wait for the DOM to finish settling before changing the focus so\n        // that it doesn't end up back on the <body>. Also note that we need the extra check, because\n        // IE can set the `activeElement` to null in some cases.\n        var /** @type {?} */ toFocus = (this._elementFocusedBeforeDialogWasOpened);\n        // We shouldn't use `this` inside of the NgZone subscription, because it causes a memory leak.\n        var /** @type {?} */ animationStream = this._onAnimationStateChange;\n        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {\n            if (toFocus && 'focus' in toFocus) {\n                toFocus.focus();\n            }\n            animationStream.complete();\n        });\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    };\n    return MdDialogContainer;\n}(BasePortalHost));\nMdDialogContainer.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-dialog-container, mat-dialog-container',\n                template: \"<ng-template cdkPortalHost></ng-template> \",\n                styles: [\".mat-dialog-container{box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);display:block;padding:24px;border-radius:2px;box-sizing:border-box;overflow:auto;max-width:80vw;width:100%;height:100%}@media screen and (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto}.mat-dialog-title{font-size:20px;font-weight:700;margin:0 0 20px;display:block}.mat-dialog-actions{padding:12px 0;display:flex}.mat-dialog-actions:last-child{margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center} /*# sourceMappingURL=dialog.css.map */ \"],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                animations: [\n                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"a\" /* trigger */])('slideDialog', [\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('void', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'translateY(25%) scale(0.9)', opacity: 0 })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('enter', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'translateY(0%) scale(1)', opacity: 1 })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"i\" /* state */])('exit', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"c\" /* style */])({ transform: 'translateY(25%)', opacity: 0 })),\n                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"b\" /* transition */])('* => *', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__angular_animations__[\"d\" /* animate */])('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n                    ])\n                ],\n                host: {\n                    '[class.mat-dialog-container]': 'true',\n                    '[attr.role]': 'dialogConfig?.role',\n                    '[@slideDialog]': '_state',\n                    '(@slideDialog.done)': '_onAnimationDone($event)',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDialogContainer.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: FocusTrapFactory, },\n]; };\nMdDialogContainer.propDecorators = {\n    '_portalHost': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: [PortalHostDirective,] },],\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nvar MdDialog = (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _parentDialog\n     */\n    function MdDialog(_overlay, _injector, _parentDialog) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._parentDialog = _parentDialog;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n        this._afterOpenAtThisLevel = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n        this._boundKeydown = this._handleKeydown.bind(this);\n        /** Gets an observable that is notified when a dialog has been opened. */\n        this.afterOpen = this._afterOpen.asObservable();\n        /** Gets an observable that is notified when all open dialog have finished closing. */\n        this.afterAllClosed = this._afterAllClosed.asObservable();\n    }\n    Object.defineProperty(MdDialog.prototype, \"_openDialogs\", {\n        /**\n         * Keeps track of the currently-open dialogs.\n         * @return {?}\n         */\n        get: function () {\n            return this._parentDialog ? this._parentDialog._openDialogs : this._openDialogsAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDialog.prototype, \"_afterOpen\", {\n        /**\n         * Subject for notifying the user that a dialog has opened.\n         * @return {?}\n         */\n        get: function () {\n            return this._parentDialog ? this._parentDialog._afterOpen : this._afterOpenAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDialog.prototype, \"_afterAllClosed\", {\n        /**\n         * Subject for notifying the user that all open dialogs have finished closing.\n         * @return {?}\n         */\n        get: function () {\n            return this._parentDialog ?\n                this._parentDialog._afterAllClosed : this._afterAllClosedAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    MdDialog.prototype.open = function (componentOrTemplateRef, config) {\n        var _this = this;\n        config = _applyConfigDefaults$1(config);\n        var /** @type {?} */ overlayRef = this._createOverlay(config);\n        var /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n        var /** @type {?} */ dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        if (!this._openDialogs.length && !this._parentDialog) {\n            document.addEventListener('keydown', this._boundKeydown);\n        }\n        this._openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(function () { return _this._removeOpenDialog(dialogRef); });\n        this._afterOpen.next(dialogRef);\n        return dialogRef;\n    };\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n    MdDialog.prototype.closeAll = function () {\n        var /** @type {?} */ i = this._openDialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            this._openDialogs[i].close();\n        }\n    };\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n    MdDialog.prototype._createOverlay = function (config) {\n        var /** @type {?} */ overlayState = this._getOverlayState(config);\n        return this._overlay.create(overlayState);\n    };\n    /**\n     * Creates an overlay state from a dialog config.\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n    MdDialog.prototype._getOverlayState = function (dialogConfig) {\n        var /** @type {?} */ overlayState = new OverlayState();\n        overlayState.hasBackdrop = true;\n        overlayState.positionStrategy = this._overlay.position().global();\n        return overlayState;\n    };\n    /**\n     * Attaches an MdDialogContainer to a dialog's already-created overlay.\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n    MdDialog.prototype._attachDialogContainer = function (overlay, config) {\n        var /** @type {?} */ viewContainer = config ? config.viewContainerRef : null;\n        var /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, viewContainer);\n        var /** @type {?} */ containerRef = overlay.attach(containerPortal);\n        containerRef.instance.dialogConfig = config;\n        return containerRef.instance;\n    };\n    /**\n     * Attaches the user-provided component to the already-created MdDialogContainer.\n     * @template T\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n     */\n    MdDialog.prototype._attachDialogContent = function (componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        var /** @type {?} */ dialogRef = new MdDialogRef(overlayRef, dialogContainer);\n        if (!config.disableClose) {\n            // When the dialog backdrop is clicked, we want to close it.\n            overlayRef.backdropClick().first().subscribe(function () { return dialogRef.close(); });\n        }\n        // We create an injector specifically for the component we're instantiating so that it can\n        // inject the MdDialogRef. This allows a component loaded inside of a dialog to close itself\n        // and, optionally, to return a value.\n        var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        var /** @type {?} */ dialogInjector = new DialogInjector(userInjector || this._injector, dialogRef, config.data);\n        if (componentOrTemplateRef instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"TemplateRef\"]) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null));\n        }\n        else {\n            var /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, null, dialogInjector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    };\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n    MdDialog.prototype._removeOpenDialog = function (dialogRef) {\n        var /** @type {?} */ index = this._openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this._openDialogs.splice(index, 1);\n            // no open dialogs are left, call next on afterAllClosed Subject\n            if (!this._openDialogs.length) {\n                this._afterAllClosed.next();\n                document.removeEventListener('keydown', this._boundKeydown);\n            }\n        }\n    };\n    /**\n     * Handles global key presses while there are open dialogs. Closes the\n     * top dialog when the user presses escape.\n     * @param {?} event\n     * @return {?}\n     */\n    MdDialog.prototype._handleKeydown = function (event) {\n        var /** @type {?} */ topDialog = this._openDialogs[this._openDialogs.length - 1];\n        if (event.keyCode === ESCAPE && topDialog &&\n            !topDialog._containerInstance.dialogConfig.disableClose) {\n            topDialog.close();\n        }\n    };\n    return MdDialog;\n}());\nMdDialog.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nMdDialog.ctorParameters = function () { return [\n    { type: Overlay, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injector\"], },\n    { type: MdDialog, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SkipSelf\"] },] },\n]; };\n/**\n * Applies default options to the dialog config.\n * @param {?} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults$1(config) {\n    return extendObject(new MdDialogConfig(), config);\n}\n/**\n * Button that will close the current dialog.\n */\nvar MdDialogClose = (function () {\n    /**\n     * @param {?} dialogRef\n     */\n    function MdDialogClose(dialogRef) {\n        this.dialogRef = dialogRef;\n        /** Screenreader label for the button. */\n        this.ariaLabel = 'Close dialog';\n    }\n    return MdDialogClose;\n}());\nMdDialogClose.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'button[md-dialog-close], button[mat-dialog-close]',\n                host: {\n                    '(click)': 'dialogRef.close()',\n                    '[attr.aria-label]': 'ariaLabel',\n                    'type': 'button',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDialogClose.ctorParameters = function () { return [\n    { type: MdDialogRef, },\n]; };\nMdDialogClose.propDecorators = {\n    'ariaLabel': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['aria-label',] },],\n};\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nvar MdDialogTitle = (function () {\n    function MdDialogTitle() {\n    }\n    return MdDialogTitle;\n}());\nMdDialogTitle.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-dialog-title], [mat-dialog-title]',\n                host: {\n                    '[class.mat-dialog-title]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDialogTitle.ctorParameters = function () { return []; };\n/**\n * Scrollable content container of a dialog.\n */\nvar MdDialogContent = (function () {\n    function MdDialogContent() {\n    }\n    return MdDialogContent;\n}());\nMdDialogContent.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content',\n                host: {\n                    '[class.mat-dialog-content]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDialogContent.ctorParameters = function () { return []; };\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nvar MdDialogActions = (function () {\n    function MdDialogActions() {\n    }\n    return MdDialogActions;\n}());\nMdDialogActions.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions',\n                host: {\n                    '[class.mat-dialog-actions]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDialogActions.ctorParameters = function () { return []; };\nvar MdDialogModule = (function () {\n    function MdDialogModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdDialogModule.forRoot = function () {\n        return {\n            ngModule: MdDialogModule,\n            providers: [],\n        };\n    };\n    return MdDialogModule;\n}());\nMdDialogModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    A11yModule,\n                    CompatibilityModule,\n                ],\n                exports: [\n                    MdDialogContainer,\n                    MdDialogClose,\n                    MdDialogTitle,\n                    MdDialogContent,\n                    MdDialogActions,\n                    CompatibilityModule,\n                ],\n                declarations: [\n                    MdDialogContainer,\n                    MdDialogClose,\n                    MdDialogTitle,\n                    MdDialogActions,\n                    MdDialogContent,\n                ],\n                providers: [\n                    MdDialog,\n                ],\n                entryComponents: [MdDialogContainer],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDialogModule.ctorParameters = function () { return []; };\nvar ActiveDescendantKeyManager = (function (_super) {\n    __extends(ActiveDescendantKeyManager, _super);\n    /**\n     * @param {?} items\n     */\n    function ActiveDescendantKeyManager(items) {\n        return _super.call(this, items) || this;\n    }\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     * @param {?} index\n     * @return {?}\n     */\n    ActiveDescendantKeyManager.prototype.setActiveItem = function (index) {\n        var _this = this;\n        Promise.resolve().then(function () {\n            if (_this.activeItem) {\n                _this.activeItem.setInactiveStyles();\n            }\n            _super.prototype.setActiveItem.call(_this, index);\n            if (_this.activeItem) {\n                _this.activeItem.setActiveStyles();\n            }\n        });\n    };\n    return ActiveDescendantKeyManager;\n}(ListKeyManager));\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nvar _uniqueAutocompleteIdCounter = 0;\nvar MdAutocomplete = (function () {\n    function MdAutocomplete() {\n        /** Whether the autocomplete panel displays above or below its trigger. */\n        this.positionY = 'below';\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = \"md-autocomplete-\" + _uniqueAutocompleteIdCounter++;\n    }\n    /**\n     * @return {?}\n     */\n    MdAutocomplete.prototype.ngAfterContentInit = function () {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n    };\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display\n     * options below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    MdAutocomplete.prototype._setScrollTop = function (scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    };\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    MdAutocomplete.prototype._setVisibility = function () {\n        var _this = this;\n        Promise.resolve().then(function () { return _this.showPanel = !!_this.options.length; });\n    };\n    /**\n     * Sets a class on the panel based on its position (used to set y-offset).\n     * @return {?}\n     */\n    MdAutocomplete.prototype._getClassList = function () {\n        return {\n            'mat-autocomplete-panel-below': this.positionY === 'below',\n            'mat-autocomplete-panel-above': this.positionY === 'above',\n            'mat-autocomplete-visible': this.showPanel,\n            'mat-autocomplete-hidden': !this.showPanel\n        };\n    };\n    return MdAutocomplete;\n}());\nMdAutocomplete.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"], args: [{ selector: 'md-autocomplete, mat-autocomplete',\n                template: \"<ng-template> <div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_getClassList()\\\" #panel> <ng-content></ng-content> </div> </ng-template> \",\n                styles: [\".mat-autocomplete-panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative}.mat-autocomplete-panel.mat-autocomplete-panel-below{top:6px}.mat-autocomplete-panel.mat-autocomplete-panel-above{top:-24px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden} /*# sourceMappingURL=autocomplete.css.map */ \"],\n                encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewEncapsulation\"].None,\n                exportAs: 'mdAutocomplete',\n                host: {\n                    '[class.mat-autocomplete]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdAutocomplete.ctorParameters = function () { return []; };\nMdAutocomplete.propDecorators = {\n    'template': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"TemplateRef\"],] },],\n    'panel': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"], args: ['panel',] },],\n    'options': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ContentChildren\"], args: [MdOption,] },],\n    'displayWith': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/** The height of each autocomplete option. */\nvar AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** The total height of the autocomplete panel. */\nvar AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nvar MD_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: __WEBPACK_IMPORTED_MODULE_8__angular_forms__[\"NG_VALUE_ACCESSOR\"],\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return MdAutocompleteTrigger; }),\n    multi: true\n};\nvar MdAutocompleteTrigger = (function () {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _dir\n     * @param {?} _zone\n     * @param {?} _inputContainer\n     */\n    function MdAutocompleteTrigger(_element, _overlay, _viewContainerRef, _dir, _zone, _inputContainer) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._zone = _zone;\n        this._inputContainer = _inputContainer;\n        this._panelOpen = false;\n        this._blurStream = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Subject__[\"Subject\"]();\n        this._manuallyFloatingPlaceholder = false;\n        /** View -> model callback called when value changes */\n        this._onChange = function (value) { };\n        /** View -> model callback called when autocomplete has been touched */\n        this._onTouched = function () { };\n    }\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"_matAutocomplete\", {\n        /**\n         * Property with mat- prefix for no-conflict mode.\n         * @return {?}\n         */\n        get: function () {\n            return this.autocomplete;\n        },\n        /**\n         * @param {?} autocomplete\n         * @return {?}\n         */\n        set: function (autocomplete) {\n            this.autocomplete = autocomplete;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.ngOnDestroy = function () {\n        if (this._panelPositionSubscription) {\n            this._panelPositionSubscription.unsubscribe();\n        }\n        this._destroyPanel();\n    };\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"panelOpen\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._panelOpen && this.autocomplete.showPanel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.openPanel = function () {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            /** Update the panel width, in case the host width has changed */\n            this._overlayRef.getState().width = this._getHostWidth();\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._portal);\n            this._subscribeToClosingActions();\n        }\n        this.autocomplete._setVisibility();\n        this._floatPlaceholder();\n        this._panelOpen = true;\n    };\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.closePanel = function () {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._panelOpen = false;\n        this._resetPlaceholder();\n    };\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"panelClosingActions\", {\n        /**\n         * A stream of actions that should close the autocomplete panel, including\n         * when an option is selected, on blur, and when TAB is pressed.\n         * @return {?}\n         */\n        get: function () {\n            return __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"].merge(this.optionSelections, this._blurStream.asObservable(), this.autocomplete._keyManager.tabOut);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"optionSelections\", {\n        /**\n         * Stream of autocomplete option selections.\n         * @return {?}\n         */\n        get: function () {\n            return __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"].merge.apply(__WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"], this.autocomplete.options.map(function (option) { return option.onSelectionChange; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"activeOption\", {\n        /**\n         * The currently active option, coerced to MdOption type.\n         * @return {?}\n         */\n        get: function () {\n            if (this.autocomplete._keyManager) {\n                return (this.autocomplete._keyManager.activeItem);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.writeValue = function (value) {\n        var _this = this;\n        Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });\n    };\n    /**\n     * Saves a callback function to be invoked when the autocomplete's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.registerOnChange = function (fn) {\n        this._onChange = fn;\n    };\n    /**\n     * Saves a callback function to be invoked when the autocomplete is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._handleKeydown = function (event) {\n        var _this = this;\n        if (this.activeOption && event.keyCode === ENTER) {\n            this.activeOption._selectViaInteraction();\n            event.preventDefault();\n        }\n        else {\n            this.autocomplete._keyManager.onKeydown(event);\n            if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n                this.openPanel();\n                Promise.resolve().then(function () { return _this._scrollToOption(); });\n            }\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._handleInput = function (event) {\n        // We need to ensure that the input is focused, because IE will fire the `input`\n        // event on focus/blur/load if the input has a placeholder. See:\n        // https://connect.microsoft.com/IE/feedback/details/885747/\n        if (document.activeElement === event.target) {\n            this._onChange(((event.target)).value);\n            this.openPanel();\n        }\n    };\n    /**\n     * @param {?} newlyFocusedTag\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._handleBlur = function (newlyFocusedTag) {\n        this._onTouched();\n        // Only emit blur event if the new focus is *not* on an option.\n        if (newlyFocusedTag !== 'MD-OPTION') {\n            this._blurStream.next(null);\n        }\n    };\n    /**\n     * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the placeholder until the panel can be closed.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._floatPlaceholder = function () {\n        if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n            this._inputContainer.floatPlaceholder = 'always';\n            this._manuallyFloatingPlaceholder = true;\n        }\n    };\n    /**\n     * If the placeholder has been manually elevated, return it to its normal state.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._resetPlaceholder = function () {\n        if (this._manuallyFloatingPlaceholder) {\n            this._inputContainer.floatPlaceholder = 'auto';\n            this._manuallyFloatingPlaceholder = false;\n        }\n    };\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. The new scrollTop will be that offset - the panel height + the option\n     * height, so the active option will be just visible at the bottom of the panel.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._scrollToOption = function () {\n        var /** @type {?} */ optionOffset = this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT;\n        var /** @type {?} */ newScrollTop = Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n        this.autocomplete._setScrollTop(newScrollTop);\n    };\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._subscribeToClosingActions = function () {\n        var _this = this;\n        // When the zone is stable initially, and when the option list changes...\n        __WEBPACK_IMPORTED_MODULE_4_rxjs_Observable__[\"Observable\"].merge(this._zone.onStable.first(), this.autocomplete.options.changes)\n            .switchMap(function () {\n            _this._resetPanel();\n            return _this.panelClosingActions;\n        })\n            .first()\n            .subscribe(function (event) { return _this._setValueAndClose(event); });\n    };\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._destroyPanel = function () {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._setTriggerValue = function (value) {\n        var /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n        this._element.nativeElement.value = toDisplay || '';\n    };\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @param {?} event\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._setValueAndClose = function (event) {\n        if (event) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n        }\n        this.closePanel();\n    };\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @param {?} skip\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._clearPreviousSelectedOption = function (skip) {\n        this.autocomplete.options.forEach(function (option) {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._createOverlay = function () {\n        this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n        this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    };\n    /**\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._getOverlayConfig = function () {\n        var /** @type {?} */ overlayState = new OverlayState();\n        overlayState.positionStrategy = this._getOverlayPosition();\n        overlayState.width = this._getHostWidth();\n        overlayState.direction = this._dir ? this._dir.value : 'ltr';\n        return overlayState;\n    };\n    /**\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._getOverlayPosition = function () {\n        this._positionStrategy = this._overlay.position().connectedTo(this._element, { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })\n            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' });\n        this._subscribeToPositionChanges(this._positionStrategy);\n        return this._positionStrategy;\n    };\n    /**\n     * This method subscribes to position changes in the autocomplete panel, so the panel's\n     * y-offset can be adjusted to match the new position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._subscribeToPositionChanges = function (strategy) {\n        var _this = this;\n        this._panelPositionSubscription = strategy.onPositionChange.subscribe(function (change) {\n            _this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n        });\n    };\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._getHostWidth = function () {\n        return this._element.nativeElement.getBoundingClientRect().width;\n    };\n    /**\n     * Reset active item to null so arrow events will activate the correct options.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._resetActiveItem = function () {\n        this.autocomplete._keyManager.setActiveItem(null);\n    };\n    /**\n     * Resets the active item and re-calculates alignment of the panel in case its size\n     * has changed due to fewer or greater number of options.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._resetPanel = function () {\n        this._resetActiveItem();\n        this._positionStrategy.recalculateLastPosition();\n        this.autocomplete._setVisibility();\n    };\n    return MdAutocompleteTrigger;\n}());\nMdAutocompleteTrigger.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'input[mdAutocomplete], input[matAutocomplete]',\n                host: {\n                    'role': 'combobox',\n                    'autocomplete': 'off',\n                    'aria-autocomplete': 'list',\n                    'aria-multiline': 'false',\n                    '[attr.aria-activedescendant]': 'activeOption?.id',\n                    '[attr.aria-expanded]': 'panelOpen.toString()',\n                    '[attr.aria-owns]': 'autocomplete?.id',\n                    '(focus)': 'openPanel()',\n                    '(blur)': '_handleBlur($event.relatedTarget?.tagName)',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                },\n                providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdAutocompleteTrigger.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: Overlay, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewContainerRef\"], },\n    { type: Dir, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] },] },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n    { type: MdInputContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Host\"] },] },\n]; };\nMdAutocompleteTrigger.propDecorators = {\n    'autocomplete': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['mdAutocomplete',] },],\n    '_matAutocomplete': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['matAutocomplete',] },],\n};\nvar MdAutocompleteModule = (function () {\n    function MdAutocompleteModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdAutocompleteModule.forRoot = function () {\n        return {\n            ngModule: MdAutocompleteModule,\n            providers: [OVERLAY_PROVIDERS]\n        };\n    };\n    return MdAutocompleteModule;\n}());\nMdAutocompleteModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [MdOptionModule, OverlayModule, CompatibilityModule, __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"]],\n                exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, CompatibilityModule],\n                declarations: [MdAutocomplete, MdAutocompleteTrigger],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdAutocompleteModule.ctorParameters = function () { return []; };\nvar MATERIAL_MODULES = [\n    MdAutocompleteModule,\n    MdButtonModule,\n    MdButtonToggleModule,\n    MdCardModule,\n    MdChipsModule,\n    MdCheckboxModule,\n    MdDialogModule,\n    MdGridListModule,\n    MdIconModule,\n    MdInputModule,\n    MdListModule,\n    MdMenuModule,\n    MdProgressBarModule,\n    MdProgressSpinnerModule,\n    MdRadioModule,\n    MdRippleModule,\n    MdSelectModule,\n    MdSidenavModule,\n    MdSliderModule,\n    MdSlideToggleModule,\n    MdSnackBarModule,\n    MdTabsModule,\n    MdToolbarModule,\n    MdTooltipModule,\n    OverlayModule,\n    PortalModule,\n    RtlModule,\n    StyleModule,\n    A11yModule,\n    PlatformModule,\n    CompatibilityModule,\n    ObserveContentModule\n];\n/**\n * @deprecated\n */\nvar MaterialRootModule = (function () {\n    function MaterialRootModule() {\n    }\n    return MaterialRootModule;\n}());\nMaterialRootModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [\n                    MdAutocompleteModule.forRoot(),\n                    MdButtonModule.forRoot(),\n                    MdCardModule.forRoot(),\n                    MdChipsModule.forRoot(),\n                    MdCheckboxModule.forRoot(),\n                    MdGridListModule.forRoot(),\n                    MdInputModule.forRoot(),\n                    MdListModule.forRoot(),\n                    MdProgressBarModule.forRoot(),\n                    MdProgressSpinnerModule.forRoot(),\n                    MdRippleModule.forRoot(),\n                    MdSelectModule.forRoot(),\n                    MdSidenavModule.forRoot(),\n                    MdTabsModule.forRoot(),\n                    MdToolbarModule.forRoot(),\n                    PortalModule.forRoot(),\n                    RtlModule.forRoot(),\n                    ObserveContentModule.forRoot(),\n                    // These modules include providers.\n                    A11yModule.forRoot(),\n                    MdButtonToggleModule.forRoot(),\n                    MdDialogModule.forRoot(),\n                    MdIconModule.forRoot(),\n                    MdMenuModule.forRoot(),\n                    MdRadioModule.forRoot(),\n                    MdSliderModule.forRoot(),\n                    MdSlideToggleModule.forRoot(),\n                    MdSnackBarModule.forRoot(),\n                    MdTooltipModule.forRoot(),\n                    PlatformModule.forRoot(),\n                    OverlayModule.forRoot(),\n                    CompatibilityModule.forRoot(),\n                ],\n                exports: MATERIAL_MODULES,\n            },] },\n];\n/**\n * @nocollapse\n */\nMaterialRootModule.ctorParameters = function () { return []; };\n/**\n * @deprecated\n */\nvar MaterialModule = (function () {\n    function MaterialModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MaterialModule.forRoot = function () {\n        return { ngModule: MaterialRootModule };\n    };\n    return MaterialModule;\n}());\nMaterialModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: MATERIAL_MODULES,\n                exports: MATERIAL_MODULES,\n            },] },\n];\n/**\n * @nocollapse\n */\nMaterialModule.ctorParameters = function () { return []; };\n/**\n * @module\n * @description\n * Entry point for all public APIs of Angular Material.\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n\n/***/ }),\n\n/***/ 132:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_animations__ = __webpack_require__(58);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return AnimationDriver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return AnimationEngine; });\n/* unused harmony export ɵAnimation */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return AnimationStyleNormalizer; });\n/* unused harmony export ɵNoopAnimationStyleNormalizer */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return WebAnimationsStyleNormalizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return NoopAnimationDriver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DomAnimationEngine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return NoopAnimationEngine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return WebAnimationsDriver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return supportsWebAnimations; });\n/* unused harmony export ɵWebAnimationsPlayer */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * @license Angular v4.1.0\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @experimental\n */\nvar NoopAnimationDriver = (function () {\n    function NoopAnimationDriver() {\n    }\n    NoopAnimationDriver.prototype.animate = function (element, keyframes, duration, delay, easing, previousPlayers) {\n        if (previousPlayers === void 0) { previousPlayers = []; }\n        return new __WEBPACK_IMPORTED_MODULE_0__angular_animations__[\"e\" /* NoopAnimationPlayer */]();\n    };\n    return NoopAnimationDriver;\n}());\n/**\n * @experimental\n */\nvar AnimationDriver = (function () {\n    function AnimationDriver() {\n    }\n    return AnimationDriver;\n}());\nAnimationDriver.NOOP = new NoopAnimationDriver();\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @abstract\n */\nvar AnimationEngine = (function () {\n    function AnimationEngine() {\n    }\n    /**\n     * @abstract\n     * @param {?} trigger\n     * @param {?=} name\n     * @return {?}\n     */\n    AnimationEngine.prototype.registerTrigger = function (trigger, name) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} domFn\n     * @return {?}\n     */\n    AnimationEngine.prototype.onInsert = function (element, domFn) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} domFn\n     * @return {?}\n     */\n    AnimationEngine.prototype.onRemove = function (element, domFn) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    AnimationEngine.prototype.setProperty = function (element, property, value) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} eventPhase\n     * @param {?} callback\n     * @return {?}\n     */\n    AnimationEngine.prototype.listen = function (element, eventName, eventPhase, callback) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationEngine.prototype.flush = function () { };\n    Object.defineProperty(AnimationEngine.prototype, \"activePlayers\", {\n        /**\n         * @return {?}\n         */\n        get: function () { throw new Error('...'); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationEngine.prototype, \"queuedPlayers\", {\n        /**\n         * @return {?}\n         */\n        get: function () { throw new Error('...'); },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimationEngine;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ONE_SECOND = 1000;\n/**\n * @param {?} exp\n * @param {?} errors\n * @return {?}\n */\nfunction parseTimeExpression(exp, errors) {\n    var /** @type {?} */ regex = /^([\\.\\d]+)(m?s)(?:\\s+([\\.\\d]+)(m?s))?(?:\\s+([-a-z]+(?:\\(.+?\\))?))?$/i;\n    var /** @type {?} */ duration;\n    var /** @type {?} */ delay = 0;\n    var /** @type {?} */ easing = null;\n    if (typeof exp === 'string') {\n        var /** @type {?} */ matches = exp.match(regex);\n        if (matches === null) {\n            errors.push(\"The provided timing value \\\"\" + exp + \"\\\" is invalid.\");\n            return { duration: 0, delay: 0, easing: null };\n        }\n        var /** @type {?} */ durationMatch = parseFloat(matches[1]);\n        var /** @type {?} */ durationUnit = matches[2];\n        if (durationUnit == 's') {\n            durationMatch *= ONE_SECOND;\n        }\n        duration = Math.floor(durationMatch);\n        var /** @type {?} */ delayMatch = matches[3];\n        var /** @type {?} */ delayUnit = matches[4];\n        if (delayMatch != null) {\n            var /** @type {?} */ delayVal = parseFloat(delayMatch);\n            if (delayUnit != null && delayUnit == 's') {\n                delayVal *= ONE_SECOND;\n            }\n            delay = Math.floor(delayVal);\n        }\n        var /** @type {?} */ easingVal = matches[5];\n        if (easingVal) {\n            easing = easingVal;\n        }\n    }\n    else {\n        duration = (exp);\n    }\n    return { duration: duration, delay: delay, easing: easing };\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction normalizeStyles(styles) {\n    var /** @type {?} */ normalizedStyles = {};\n    if (Array.isArray(styles)) {\n        styles.forEach(function (data) { return copyStyles(data, false, normalizedStyles); });\n    }\n    else {\n        copyStyles(styles, false, normalizedStyles);\n    }\n    return normalizedStyles;\n}\n/**\n * @param {?} styles\n * @param {?} readPrototype\n * @param {?=} destination\n * @return {?}\n */\nfunction copyStyles(styles, readPrototype, destination) {\n    if (destination === void 0) { destination = {}; }\n    if (readPrototype) {\n        // we make use of a for-in loop so that the\n        // prototypically inherited properties are\n        // revealed from the backFill map\n        for (var /** @type {?} */ prop in styles) {\n            destination[prop] = styles[prop];\n        }\n    }\n    else {\n        Object.keys(styles).forEach(function (prop) { return destination[prop] = styles[prop]; });\n    }\n    return destination;\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @return {?}\n */\nfunction setStyles(element, styles) {\n    if (element['style']) {\n        Object.keys(styles).forEach(function (prop) { return element.style[prop] = styles[prop]; });\n    }\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @return {?}\n */\nfunction eraseStyles(element, styles) {\n    if (element['style']) {\n        Object.keys(styles).forEach(function (prop) {\n            // IE requires '' instead of null\n            // see https://github.com/angular/angular/issues/7916\n            element.style[prop] = '';\n        });\n    }\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} visitor\n * @param {?} node\n * @param {?} context\n * @return {?}\n */\nfunction visitAnimationNode(visitor, node, context) {\n    switch (node.type) {\n        case 0 /* State */:\n            return visitor.visitState(/** @type {?} */ (node), context);\n        case 1 /* Transition */:\n            return visitor.visitTransition(/** @type {?} */ (node), context);\n        case 2 /* Sequence */:\n            return visitor.visitSequence(/** @type {?} */ (node), context);\n        case 3 /* Group */:\n            return visitor.visitGroup(/** @type {?} */ (node), context);\n        case 4 /* Animate */:\n            return visitor.visitAnimate(/** @type {?} */ (node), context);\n        case 5 /* KeyframeSequence */:\n            return visitor.visitKeyframeSequence(/** @type {?} */ (node), context);\n        case 6 /* Style */:\n            return visitor.visitStyle(/** @type {?} */ (node), context);\n        default:\n            throw new Error(\"Unable to resolve animation metadata node #\" + node.type);\n    }\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ANY_STATE = '*';\n/**\n * @param {?} transitionValue\n * @param {?} errors\n * @return {?}\n */\nfunction parseTransitionExpr(transitionValue, errors) {\n    var /** @type {?} */ expressions = [];\n    if (typeof transitionValue == 'string') {\n        ((transitionValue))\n            .split(/\\s*,\\s*/)\n            .forEach(function (str) { return parseInnerTransitionStr(str, expressions, errors); });\n    }\n    else {\n        expressions.push(/** @type {?} */ (transitionValue));\n    }\n    return expressions;\n}\n/**\n * @param {?} eventStr\n * @param {?} expressions\n * @param {?} errors\n * @return {?}\n */\nfunction parseInnerTransitionStr(eventStr, expressions, errors) {\n    if (eventStr[0] == ':') {\n        eventStr = parseAnimationAlias(eventStr, errors);\n    }\n    var /** @type {?} */ match = eventStr.match(/^(\\*|[-\\w]+)\\s*(<?[=-]>)\\s*(\\*|[-\\w]+)$/);\n    if (match == null || match.length < 4) {\n        errors.push(\"The provided transition expression \\\"\" + eventStr + \"\\\" is not supported\");\n        return expressions;\n    }\n    var /** @type {?} */ fromState = match[1];\n    var /** @type {?} */ separator = match[2];\n    var /** @type {?} */ toState = match[3];\n    expressions.push(makeLambdaFromStates(fromState, toState));\n    var /** @type {?} */ isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;\n    if (separator[0] == '<' && !isFullAnyStateExpr) {\n        expressions.push(makeLambdaFromStates(toState, fromState));\n    }\n}\n/**\n * @param {?} alias\n * @param {?} errors\n * @return {?}\n */\nfunction parseAnimationAlias(alias, errors) {\n    switch (alias) {\n        case ':enter':\n            return 'void => *';\n        case ':leave':\n            return '* => void';\n        default:\n            errors.push(\"The transition alias value \\\"\" + alias + \"\\\" is not supported\");\n            return '* => *';\n    }\n}\n/**\n * @param {?} lhs\n * @param {?} rhs\n * @return {?}\n */\nfunction makeLambdaFromStates(lhs, rhs) {\n    return function (fromState, toState) {\n        var /** @type {?} */ lhsMatch = lhs == ANY_STATE || lhs == fromState;\n        var /** @type {?} */ rhsMatch = rhs == ANY_STATE || rhs == toState;\n        return lhsMatch && rhsMatch;\n    };\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} keyframes\n * @param {?} duration\n * @param {?} delay\n * @param {?} easing\n * @return {?}\n */\nfunction createTimelineInstruction(keyframes, duration, delay, easing) {\n    return {\n        type: 1 /* TimelineAnimation */,\n        keyframes: keyframes,\n        duration: duration,\n        delay: delay,\n        totalTime: duration + delay, easing: easing\n    };\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} ast\n * @param {?=} startingStyles\n * @param {?=} finalStyles\n * @return {?}\n */\nfunction buildAnimationKeyframes(ast, startingStyles, finalStyles) {\n    if (startingStyles === void 0) { startingStyles = {}; }\n    if (finalStyles === void 0) { finalStyles = {}; }\n    var /** @type {?} */ normalizedAst = Array.isArray(ast) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_animations__[\"f\" /* sequence */])(/** @type {?} */ (ast)) : (ast);\n    return new AnimationTimelineVisitor().buildKeyframes(normalizedAst, startingStyles, finalStyles);\n}\nvar AnimationTimelineContext = (function () {\n    /**\n     * @param {?} errors\n     * @param {?} timelines\n     * @param {?=} initialTimeline\n     */\n    function AnimationTimelineContext(errors, timelines, initialTimeline) {\n        this.errors = errors;\n        this.timelines = timelines;\n        this.previousNode = ({});\n        this.subContextCount = 0;\n        this.currentTimeline = initialTimeline || new TimelineBuilder(0);\n        timelines.push(this.currentTimeline);\n    }\n    /**\n     * @return {?}\n     */\n    AnimationTimelineContext.prototype.createSubContext = function () {\n        var /** @type {?} */ context = new AnimationTimelineContext(this.errors, this.timelines, this.currentTimeline.fork());\n        context.previousNode = this.previousNode;\n        context.currentAnimateTimings = this.currentAnimateTimings;\n        this.subContextCount++;\n        return context;\n    };\n    /**\n     * @param {?=} newTime\n     * @return {?}\n     */\n    AnimationTimelineContext.prototype.transformIntoNewTimeline = function (newTime) {\n        if (newTime === void 0) { newTime = 0; }\n        this.currentTimeline = this.currentTimeline.fork(newTime);\n        this.timelines.push(this.currentTimeline);\n        return this.currentTimeline;\n    };\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    AnimationTimelineContext.prototype.incrementTime = function (time) {\n        this.currentTimeline.forwardTime(this.currentTimeline.duration + time);\n    };\n    return AnimationTimelineContext;\n}());\nvar AnimationTimelineVisitor = (function () {\n    function AnimationTimelineVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} startingStyles\n     * @param {?} finalStyles\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.buildKeyframes = function (ast, startingStyles, finalStyles) {\n        var /** @type {?} */ context = new AnimationTimelineContext([], []);\n        context.currentTimeline.setStyles(startingStyles);\n        visitAnimationNode(this, ast, context);\n        // this checks to see if an actual animation happened\n        var /** @type {?} */ timelines = context.timelines.filter(function (timeline) { return timeline.hasStyling(); });\n        if (timelines.length && Object.keys(finalStyles).length) {\n            var /** @type {?} */ tl = timelines[timelines.length - 1];\n            if (!tl.allowOnlyTimelineStyles()) {\n                tl.setStyles(finalStyles);\n            }\n        }\n        return timelines.length ? timelines.map(function (timeline) { return timeline.buildKeyframes(); }) :\n            [createTimelineInstruction([], 0, 0, '')];\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitState = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitTransition = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitSequence = function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ subContextCount = context.subContextCount;\n        if (context.previousNode.type == 6 /* Style */) {\n            context.currentTimeline.forwardFrame();\n            context.currentTimeline.snapshotCurrentStyles();\n        }\n        ast.steps.forEach(function (s) { return visitAnimationNode(_this, s, context); });\n        // this means that some animation function within the sequence\n        // ended up creating a sub timeline (which means the current\n        // timeline cannot overlap with the contents of the sequence)\n        if (context.subContextCount > subContextCount) {\n            context.transformIntoNewTimeline();\n        }\n        context.previousNode = ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitGroup = function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ innerTimelines = [];\n        var /** @type {?} */ furthestTime = context.currentTimeline.currentTime;\n        ast.steps.forEach(function (s) {\n            var /** @type {?} */ innerContext = context.createSubContext();\n            visitAnimationNode(_this, s, innerContext);\n            furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);\n            innerTimelines.push(innerContext.currentTimeline);\n        });\n        // this operation is run after the AST loop because otherwise\n        // if the parent timeline's collected styles were updated then\n        // it would pass in invalid data into the new-to-be forked items\n        innerTimelines.forEach(function (timeline) { return context.currentTimeline.mergeTimelineCollectedStyles(timeline); });\n        context.transformIntoNewTimeline(furthestTime);\n        context.previousNode = ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitAnimate = function (ast, context) {\n        var /** @type {?} */ timings = ast.timings.hasOwnProperty('duration') ? (ast.timings) :\n            parseTimeExpression(/** @type {?} */ (ast.timings), context.errors);\n        context.currentAnimateTimings = timings;\n        if (timings.delay) {\n            context.incrementTime(timings.delay);\n            context.currentTimeline.snapshotCurrentStyles();\n        }\n        var /** @type {?} */ astType = ast.styles ? ast.styles.type : -1;\n        if (astType == 5 /* KeyframeSequence */) {\n            this.visitKeyframeSequence(/** @type {?} */ (ast.styles), context);\n        }\n        else {\n            var /** @type {?} */ styleAst = (ast.styles);\n            if (!styleAst) {\n                var /** @type {?} */ newStyleData = {};\n                if (timings.easing) {\n                    newStyleData['easing'] = timings.easing;\n                }\n                styleAst = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_animations__[\"c\" /* style */])(newStyleData);\n                ((styleAst))['treatAsEmptyStep'] = true;\n            }\n            context.incrementTime(timings.duration);\n            if (styleAst) {\n                this.visitStyle(styleAst, context);\n            }\n        }\n        context.currentAnimateTimings = null;\n        context.previousNode = ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitStyle = function (ast, context) {\n        // this is a special case when a style() call is issued directly after\n        // a call to animate(). If the clock is not forwarded by one frame then\n        // the style() calls will be merged into the previous animate() call\n        // which is incorrect.\n        if (!context.currentAnimateTimings &&\n            context.previousNode.type == 4 /* Animate */) {\n            context.currentTimeline.forwardFrame();\n        }\n        var /** @type {?} */ normalizedStyles = normalizeStyles(ast.styles);\n        var /** @type {?} */ easing = context.currentAnimateTimings && context.currentAnimateTimings.easing;\n        this._applyStyles(normalizedStyles, easing, ((ast))['treatAsEmptyStep'] ? true : false, context);\n        context.previousNode = ast;\n    };\n    /**\n     * @param {?} styles\n     * @param {?} easing\n     * @param {?} treatAsEmptyStep\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype._applyStyles = function (styles, easing, treatAsEmptyStep, context) {\n        if (styles.hasOwnProperty('easing')) {\n            easing = easing || (styles['easing']);\n            delete styles['easing'];\n        }\n        context.currentTimeline.setStyles(styles, easing, treatAsEmptyStep);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitKeyframeSequence = function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ MAX_KEYFRAME_OFFSET = 1;\n        var /** @type {?} */ limit = ast.steps.length - 1;\n        var /** @type {?} */ firstKeyframe = ast.steps[0];\n        var /** @type {?} */ offsetGap = 0;\n        var /** @type {?} */ containsOffsets = getOffset(firstKeyframe) != null;\n        if (!containsOffsets) {\n            offsetGap = MAX_KEYFRAME_OFFSET / limit;\n        }\n        var /** @type {?} */ startTime = context.currentTimeline.duration;\n        var /** @type {?} */ duration = ((context.currentAnimateTimings)).duration;\n        var /** @type {?} */ innerContext = context.createSubContext();\n        var /** @type {?} */ innerTimeline = innerContext.currentTimeline;\n        innerTimeline.easing = ((context.currentAnimateTimings)).easing;\n        ast.steps.forEach(function (step, i) {\n            var /** @type {?} */ normalizedStyles = normalizeStyles(step.styles);\n            var /** @type {?} */ offset = containsOffsets ?\n                (step.offset != null ? step.offset : parseFloat(/** @type {?} */ (normalizedStyles['offset']))) :\n                (i == limit ? MAX_KEYFRAME_OFFSET : i * offsetGap);\n            innerTimeline.forwardTime(offset * duration);\n            _this._applyStyles(normalizedStyles, null, false, innerContext);\n        });\n        // this will ensure that the parent timeline gets all the styles from\n        // the child even if the new timeline below is not used\n        context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);\n        // we do this because the window between this timeline and the sub timeline\n        // should ensure that the styles within are exactly the same as they were before\n        context.transformIntoNewTimeline(startTime + duration);\n        context.previousNode = ast;\n    };\n    return AnimationTimelineVisitor;\n}());\nvar TimelineBuilder = (function () {\n    /**\n     * @param {?} startTime\n     * @param {?=} globalTimelineStyles\n     */\n    function TimelineBuilder(startTime, globalTimelineStyles) {\n        this.startTime = startTime;\n        this.duration = 0;\n        this.easing = '';\n        this._previousKeyframe = {};\n        this._keyframes = new Map();\n        this._styleSummary = {};\n        this._backFill = {};\n        this._currentEmptyStepKeyframe = null;\n        this._localTimelineStyles = Object.create(this._backFill, {});\n        this._globalTimelineStyles =\n            globalTimelineStyles ? globalTimelineStyles : this._localTimelineStyles;\n        this._loadKeyframe();\n    }\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype.hasStyling = function () { return this._keyframes.size > 1; };\n    Object.defineProperty(TimelineBuilder.prototype, \"currentTime\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.startTime + this.duration; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?=} currentTime\n     * @return {?}\n     */\n    TimelineBuilder.prototype.fork = function (currentTime) {\n        if (currentTime === void 0) { currentTime = 0; }\n        return new TimelineBuilder(currentTime || this.currentTime, this._globalTimelineStyles);\n    };\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype._loadKeyframe = function () {\n        if (this._currentKeyframe) {\n            this._previousKeyframe = this._currentKeyframe;\n        }\n        this._currentKeyframe = ((this._keyframes.get(this.duration)));\n        if (!this._currentKeyframe) {\n            this._currentKeyframe = Object.create(this._backFill, {});\n            this._keyframes.set(this.duration, this._currentKeyframe);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype.forwardFrame = function () {\n        this.duration++;\n        this._loadKeyframe();\n    };\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    TimelineBuilder.prototype.forwardTime = function (time) {\n        this.duration = time;\n        this._loadKeyframe();\n    };\n    /**\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    TimelineBuilder.prototype._updateStyle = function (prop, value) {\n        this._localTimelineStyles[prop] = value; /** @type {?} */\n        ((this._globalTimelineStyles))[prop] = value;\n        this._styleSummary[prop] = { time: this.currentTime, value: value };\n    };\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype.allowOnlyTimelineStyles = function () { return this._currentEmptyStepKeyframe !== this._currentKeyframe; };\n    /**\n     * @param {?} styles\n     * @param {?=} easing\n     * @param {?=} treatAsEmptyStep\n     * @return {?}\n     */\n    TimelineBuilder.prototype.setStyles = function (styles, easing, treatAsEmptyStep) {\n        var _this = this;\n        if (easing === void 0) { easing = null; }\n        if (treatAsEmptyStep === void 0) { treatAsEmptyStep = false; }\n        if (easing) {\n            ((this._previousKeyframe))['easing'] = easing;\n        }\n        if (treatAsEmptyStep) {\n            // special case for animate(duration):\n            // all missing styles are filled with a `*` value then\n            // if any destination styles are filled in later on the same\n            // keyframe then they will override the overridden styles\n            // We use `_globalTimelineStyles` here because there may be\n            // styles in previous keyframes that are not present in this timeline\n            Object.keys(this._globalTimelineStyles).forEach(function (prop) {\n                _this._backFill[prop] = _this._globalTimelineStyles[prop] || __WEBPACK_IMPORTED_MODULE_0__angular_animations__[\"g\" /* AUTO_STYLE */];\n                _this._currentKeyframe[prop] = __WEBPACK_IMPORTED_MODULE_0__angular_animations__[\"g\" /* AUTO_STYLE */];\n            });\n            this._currentEmptyStepKeyframe = this._currentKeyframe;\n        }\n        else {\n            Object.keys(styles).forEach(function (prop) {\n                if (prop !== 'offset') {\n                    var /** @type {?} */ val = styles[prop];\n                    _this._currentKeyframe[prop] = val;\n                    if (!_this._localTimelineStyles[prop]) {\n                        _this._backFill[prop] = _this._globalTimelineStyles[prop] || __WEBPACK_IMPORTED_MODULE_0__angular_animations__[\"g\" /* AUTO_STYLE */];\n                    }\n                    _this._updateStyle(prop, val);\n                }\n            });\n            Object.keys(this._localTimelineStyles).forEach(function (prop) {\n                if (!_this._currentKeyframe.hasOwnProperty(prop)) {\n                    _this._currentKeyframe[prop] = _this._localTimelineStyles[prop];\n                }\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype.snapshotCurrentStyles = function () { copyStyles(this._localTimelineStyles, false, this._currentKeyframe); };\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype.getFinalKeyframe = function () { return ((this._keyframes.get(this.duration))); };\n    Object.defineProperty(TimelineBuilder.prototype, \"properties\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ properties = [];\n            for (var /** @type {?} */ prop in this._currentKeyframe) {\n                properties.push(prop);\n            }\n            return properties;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} timeline\n     * @return {?}\n     */\n    TimelineBuilder.prototype.mergeTimelineCollectedStyles = function (timeline) {\n        var _this = this;\n        Object.keys(timeline._styleSummary).forEach(function (prop) {\n            var /** @type {?} */ details0 = _this._styleSummary[prop];\n            var /** @type {?} */ details1 = timeline._styleSummary[prop];\n            if (!details0 || details1.time > details0.time) {\n                _this._updateStyle(prop, details1.value);\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype.buildKeyframes = function () {\n        var _this = this;\n        var /** @type {?} */ finalKeyframes = [];\n        // special case for when there are only start/destination\n        // styles but no actual animation animate steps...\n        if (this.duration == 0) {\n            var /** @type {?} */ targetKeyframe = this.getFinalKeyframe();\n            var /** @type {?} */ firstKeyframe = copyStyles(targetKeyframe, true);\n            firstKeyframe['offset'] = 0;\n            finalKeyframes.push(firstKeyframe);\n            var /** @type {?} */ lastKeyframe = copyStyles(targetKeyframe, true);\n            lastKeyframe['offset'] = 1;\n            finalKeyframes.push(lastKeyframe);\n        }\n        else {\n            this._keyframes.forEach(function (keyframe, time) {\n                var /** @type {?} */ finalKeyframe = copyStyles(keyframe, true);\n                finalKeyframe['offset'] = time / _this.duration;\n                finalKeyframes.push(finalKeyframe);\n            });\n        }\n        return createTimelineInstruction(finalKeyframes, this.duration, this.startTime, this.easing);\n    };\n    return TimelineBuilder;\n}());\n/**\n * @param {?} ast\n * @return {?}\n */\nfunction getOffset(ast) {\n    var /** @type {?} */ offset = ast.offset;\n    if (offset == null) {\n        var /** @type {?} */ styles = ast.styles;\n        if (Array.isArray(styles)) {\n            for (var /** @type {?} */ i = 0; i < styles.length; i++) {\n                var /** @type {?} */ o = (styles[i]['offset']);\n                if (o != null) {\n                    offset = o;\n                    break;\n                }\n            }\n        }\n        else {\n            offset = (styles['offset']);\n        }\n    }\n    return ((offset));\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} isRemovalTransition\n * @param {?} fromStyles\n * @param {?} toStyles\n * @param {?} timelines\n * @return {?}\n */\nfunction createTransitionInstruction(triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines) {\n    return {\n        type: 0 /* TransitionAnimation */,\n        triggerName: triggerName,\n        isRemovalTransition: isRemovalTransition,\n        fromState: fromState,\n        fromStyles: fromStyles,\n        toState: toState,\n        toStyles: toStyles,\n        timelines: timelines\n    };\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar AnimationTransitionFactory = (function () {\n    /**\n     * @param {?} _triggerName\n     * @param {?} ast\n     * @param {?} matchFns\n     * @param {?} _stateStyles\n     */\n    function AnimationTransitionFactory(_triggerName, ast, matchFns, _stateStyles) {\n        this._triggerName = _triggerName;\n        this.matchFns = matchFns;\n        this._stateStyles = _stateStyles;\n        var normalizedAst = Array.isArray(ast.animation) ?\n            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_animations__[\"f\" /* sequence */])(ast.animation) :\n            ast.animation;\n        this._animationAst = normalizedAst;\n    }\n    /**\n     * @param {?} currentState\n     * @param {?} nextState\n     * @return {?}\n     */\n    AnimationTransitionFactory.prototype.match = function (currentState, nextState) {\n        if (!oneOrMoreTransitionsMatch(this.matchFns, currentState, nextState))\n            return;\n        var /** @type {?} */ backupStateStyles = this._stateStyles['*'] || {};\n        var /** @type {?} */ currentStateStyles = this._stateStyles[currentState] || backupStateStyles;\n        var /** @type {?} */ nextStateStyles = this._stateStyles[nextState] || backupStateStyles;\n        var /** @type {?} */ timelines = buildAnimationKeyframes(this._animationAst, currentStateStyles, nextStateStyles);\n        return createTransitionInstruction(this._triggerName, currentState, nextState, nextState === 'void', currentStateStyles, nextStateStyles, timelines);\n    };\n    return AnimationTransitionFactory;\n}());\n/**\n * @param {?} matchFns\n * @param {?} currentState\n * @param {?} nextState\n * @return {?}\n */\nfunction oneOrMoreTransitionsMatch(matchFns, currentState, nextState) {\n    return matchFns.some(function (fn) { return fn(currentState, nextState); });\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} ast\n * @return {?}\n */\nfunction validateAnimationSequence(ast) {\n    var /** @type {?} */ normalizedAst = Array.isArray(ast) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_animations__[\"f\" /* sequence */])(/** @type {?} */ (ast)) : (ast);\n    return new AnimationValidatorVisitor().validate(normalizedAst);\n}\nvar AnimationValidatorVisitor = (function () {\n    function AnimationValidatorVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.validate = function (ast) {\n        var /** @type {?} */ context = new AnimationValidatorContext();\n        visitAnimationNode(this, ast, context);\n        return context.errors;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitState = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitTransition = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitSequence = function (ast, context) {\n        var _this = this;\n        ast.steps.forEach(function (step) { return visitAnimationNode(_this, step, context); });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitGroup = function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ currentTime = context.currentTime;\n        var /** @type {?} */ furthestTime = 0;\n        ast.steps.forEach(function (step) {\n            context.currentTime = currentTime;\n            visitAnimationNode(_this, step, context);\n            furthestTime = Math.max(furthestTime, context.currentTime);\n        });\n        context.currentTime = furthestTime;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitAnimate = function (ast, context) {\n        // we reassign the timings here so that they are not reparsed each\n        // time an animation occurs\n        context.currentAnimateTimings = ast.timings =\n            parseTimeExpression(/** @type {?} */ (ast.timings), context.errors);\n        var /** @type {?} */ astType = ast.styles && ast.styles.type;\n        if (astType == 5 /* KeyframeSequence */) {\n            this.visitKeyframeSequence(/** @type {?} */ (ast.styles), context);\n        }\n        else {\n            context.currentTime +=\n                context.currentAnimateTimings.duration + context.currentAnimateTimings.delay;\n            if (astType == 6 /* Style */) {\n                this.visitStyle(/** @type {?} */ (ast.styles), context);\n            }\n        }\n        context.currentAnimateTimings = null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitStyle = function (ast, context) {\n        var /** @type {?} */ styleData = normalizeStyles(ast.styles);\n        var /** @type {?} */ timings = context.currentAnimateTimings;\n        var /** @type {?} */ endTime = context.currentTime;\n        var /** @type {?} */ startTime = context.currentTime;\n        if (timings && startTime > 0) {\n            startTime -= timings.duration + timings.delay;\n        }\n        Object.keys(styleData).forEach(function (prop) {\n            var /** @type {?} */ collectedEntry = context.collectedStyles[prop];\n            var /** @type {?} */ updateCollectedStyle = true;\n            if (collectedEntry) {\n                if (startTime != endTime && startTime >= collectedEntry.startTime &&\n                    endTime <= collectedEntry.endTime) {\n                    context.errors.push(\"The CSS property \\\"\" + prop + \"\\\" that exists between the times of \\\"\" + collectedEntry.startTime + \"ms\\\" and \\\"\" + collectedEntry.endTime + \"ms\\\" is also being animated in a parallel animation between the times of \\\"\" + startTime + \"ms\\\" and \\\"\" + endTime + \"ms\\\"\");\n                    updateCollectedStyle = false;\n                }\n                // we always choose the smaller start time value since we\n                // want to have a record of the entire animation window where\n                // the style property is being animated in between\n                startTime = collectedEntry.startTime;\n            }\n            if (updateCollectedStyle) {\n                context.collectedStyles[prop] = { startTime: startTime, endTime: endTime };\n            }\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitKeyframeSequence = function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ totalKeyframesWithOffsets = 0;\n        var /** @type {?} */ offsets = [];\n        var /** @type {?} */ offsetsOutOfOrder = false;\n        var /** @type {?} */ keyframesOutOfRange = false;\n        var /** @type {?} */ previousOffset = 0;\n        ast.steps.forEach(function (step) {\n            var /** @type {?} */ styleData = normalizeStyles(step.styles);\n            var /** @type {?} */ offset = 0;\n            if (styleData.hasOwnProperty('offset')) {\n                totalKeyframesWithOffsets++;\n                offset = (styleData['offset']);\n            }\n            keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;\n            offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;\n            previousOffset = offset;\n            offsets.push(offset);\n        });\n        if (keyframesOutOfRange) {\n            context.errors.push(\"Please ensure that all keyframe offsets are between 0 and 1\");\n        }\n        if (offsetsOutOfOrder) {\n            context.errors.push(\"Please ensure that all keyframe offsets are in order\");\n        }\n        var /** @type {?} */ length = ast.steps.length;\n        var /** @type {?} */ generatedOffset = 0;\n        if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {\n            context.errors.push(\"Not all style() steps within the declared keyframes() contain offsets\");\n        }\n        else if (totalKeyframesWithOffsets == 0) {\n            generatedOffset = 1 / length;\n        }\n        var /** @type {?} */ limit = length - 1;\n        var /** @type {?} */ currentTime = context.currentTime;\n        var /** @type {?} */ animateDuration = ((context.currentAnimateTimings)).duration;\n        ast.steps.forEach(function (step, i) {\n            var /** @type {?} */ offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];\n            var /** @type {?} */ durationUpToThisFrame = offset * animateDuration;\n            context.currentTime =\n                currentTime + ((context.currentAnimateTimings)).delay + durationUpToThisFrame; /** @type {?} */\n            ((context.currentAnimateTimings)).duration = durationUpToThisFrame;\n            _this.visitStyle(step, context);\n        });\n    };\n    return AnimationValidatorVisitor;\n}());\nvar AnimationValidatorContext = (function () {\n    function AnimationValidatorContext() {\n        this.errors = [];\n        this.currentTime = 0;\n        this.collectedStyles = {};\n    }\n    return AnimationValidatorContext;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} definitions\n * @return {?}\n */\nfunction buildTrigger(name, definitions) {\n    return new AnimationTriggerVisitor().buildTrigger(name, definitions);\n}\n/**\n * \\@experimental Animation support is experimental.\n */\nvar AnimationTrigger = (function () {\n    /**\n     * @param {?} name\n     * @param {?} states\n     * @param {?} _transitionAsts\n     */\n    function AnimationTrigger(name, states, _transitionAsts) {\n        var _this = this;\n        this.name = name;\n        this._transitionAsts = _transitionAsts;\n        this.transitionFactories = [];\n        this.states = {};\n        Object.keys(states).forEach(function (stateName) { _this.states[stateName] = copyStyles(states[stateName], false); });\n        var errors = [];\n        _transitionAsts.forEach(function (ast) {\n            var exprs = parseTransitionExpr(ast.expr, errors);\n            var sequenceErrors = validateAnimationSequence(ast);\n            if (sequenceErrors.length) {\n                errors.push.apply(errors, sequenceErrors);\n            }\n            else {\n                _this.transitionFactories.push(new AnimationTransitionFactory(_this.name, ast, exprs, states));\n            }\n        });\n        if (errors.length) {\n            var LINE_START = '\\n - ';\n            throw new Error(\"Animation parsing for the \" + name + \" trigger have failed:\" + LINE_START + errors.join(LINE_START));\n        }\n    }\n    /**\n     * @param {?} currentState\n     * @param {?} nextState\n     * @return {?}\n     */\n    AnimationTrigger.prototype.createFallbackInstruction = function (currentState, nextState) {\n        var /** @type {?} */ backupStateStyles = this.states['*'] || {};\n        var /** @type {?} */ currentStateStyles = this.states[currentState] || backupStateStyles;\n        var /** @type {?} */ nextStateStyles = this.states[nextState] || backupStateStyles;\n        return createTransitionInstruction(this.name, currentState, nextState, nextState == 'void', currentStateStyles, nextStateStyles, []);\n    };\n    /**\n     * @param {?} currentState\n     * @param {?} nextState\n     * @return {?}\n     */\n    AnimationTrigger.prototype.matchTransition = function (currentState, nextState) {\n        for (var /** @type {?} */ i = 0; i < this.transitionFactories.length; i++) {\n            var /** @type {?} */ result = this.transitionFactories[i].match(currentState, nextState);\n            if (result)\n                return result;\n        }\n        return null;\n    };\n    return AnimationTrigger;\n}());\nvar AnimationTriggerContext = (function () {\n    function AnimationTriggerContext() {\n        this.errors = [];\n        this.states = {};\n        this.transitions = [];\n    }\n    return AnimationTriggerContext;\n}());\nvar AnimationTriggerVisitor = (function () {\n    function AnimationTriggerVisitor() {\n    }\n    /**\n     * @param {?} name\n     * @param {?} definitions\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.buildTrigger = function (name, definitions) {\n        var _this = this;\n        var /** @type {?} */ context = new AnimationTriggerContext();\n        definitions.forEach(function (def) { return visitAnimationNode(_this, def, context); });\n        return new AnimationTrigger(name, context.states, context.transitions);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitState = function (ast, context) {\n        var /** @type {?} */ styles = normalizeStyles(ast.styles.styles);\n        ast.name.split(/\\s*,\\s*/).forEach(function (name) { context.states[name] = styles; });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitTransition = function (ast, context) {\n        context.transitions.push(ast);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitSequence = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitGroup = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitAnimate = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitStyle = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitKeyframeSequence = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    return AnimationTriggerVisitor;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MARKED_FOR_ANIMATION_CLASSNAME = 'ng-animating';\nvar MARKED_FOR_ANIMATION_SELECTOR = '.ng-animating';\nvar MARKED_FOR_REMOVAL = '$$ngRemove';\nvar VOID_STATE = 'void';\nvar DomAnimationEngine = (function () {\n    /**\n     * @param {?} _driver\n     * @param {?} _normalizer\n     */\n    function DomAnimationEngine(_driver, _normalizer) {\n        this._driver = _driver;\n        this._normalizer = _normalizer;\n        this._flaggedInserts = new Set();\n        this._queuedRemovals = new Map();\n        this._queuedTransitionAnimations = [];\n        this._activeTransitionAnimations = new Map();\n        this._activeElementAnimations = new Map();\n        this._elementTriggerStates = new Map();\n        this._triggers = Object.create(null);\n        this._triggerListeners = new Map();\n        this._pendingListenerRemovals = new Map();\n    }\n    Object.defineProperty(DomAnimationEngine.prototype, \"queuedPlayers\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._queuedTransitionAnimations.map(function (q) { return q.player; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DomAnimationEngine.prototype, \"activePlayers\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ players = [];\n            this._activeElementAnimations.forEach(function (activePlayers) { return players.push.apply(players, activePlayers); });\n            return players;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} trigger\n     * @param {?=} name\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.registerTrigger = function (trigger, name) {\n        name = name || trigger.name;\n        if (this._triggers[name]) {\n            return;\n        }\n        this._triggers[name] = buildTrigger(name, trigger.definitions);\n    };\n    /**\n     * @param {?} element\n     * @param {?} domFn\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.onInsert = function (element, domFn) {\n        if (element['nodeType'] == 1) {\n            this._flaggedInserts.add(element);\n        }\n        domFn();\n    };\n    /**\n     * @param {?} element\n     * @param {?} domFn\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.onRemove = function (element, domFn) {\n        var _this = this;\n        if (element['nodeType'] != 1) {\n            domFn();\n            return;\n        }\n        var /** @type {?} */ lookupRef = this._elementTriggerStates.get(element);\n        if (lookupRef) {\n            var /** @type {?} */ possibleTriggers = Object.keys(lookupRef);\n            var /** @type {?} */ hasRemoval = possibleTriggers.some(function (triggerName) {\n                var /** @type {?} */ oldValue = ((lookupRef))[triggerName];\n                var /** @type {?} */ instruction = _this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);\n                return !!instruction;\n            });\n            if (hasRemoval) {\n                element[MARKED_FOR_REMOVAL] = true;\n                this._queuedRemovals.set(element, domFn);\n                return;\n            }\n        }\n        // this means that there are no animations to take on this\n        // leave operation therefore we should fire the done|start callbacks\n        if (this._triggerListeners.has(element)) {\n            element[MARKED_FOR_REMOVAL] = true;\n            this._queuedRemovals.set(element, function () { });\n        }\n        this._onRemovalTransition(element).forEach(function (player) { return player.destroy(); });\n        domFn();\n    };\n    /**\n     * @param {?} element\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.setProperty = function (element, property, value) {\n        var /** @type {?} */ trigger = this._triggers[property];\n        if (!trigger) {\n            throw new Error(\"The provided animation trigger \\\"\" + property + \"\\\" has not been registered!\");\n        }\n        var /** @type {?} */ lookupRef = this._elementTriggerStates.get(element);\n        if (!lookupRef) {\n            this._elementTriggerStates.set(element, lookupRef = {});\n        }\n        var /** @type {?} */ oldValue = lookupRef.hasOwnProperty(property) ? lookupRef[property] : VOID_STATE;\n        if (oldValue !== value) {\n            value = normalizeTriggerValue(value);\n            var /** @type {?} */ instruction = trigger.matchTransition(oldValue, value);\n            if (!instruction) {\n                // we do this to make sure we always have an animation player so\n                // that callback operations are properly called\n                instruction = trigger.createFallbackInstruction(oldValue, value);\n            }\n            this.animateTransition(element, instruction);\n            lookupRef[property] = value;\n        }\n    };\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} eventPhase\n     * @param {?} callback\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.listen = function (element, eventName, eventPhase, callback) {\n        var _this = this;\n        if (!eventPhase) {\n            throw new Error(\"Unable to listen on the animation trigger \\\"\" + eventName + \"\\\" because the provided event is undefined!\");\n        }\n        if (!this._triggers[eventName]) {\n            throw new Error(\"Unable to listen on the animation trigger event \\\"\" + eventPhase + \"\\\" because the animation trigger \\\"\" + eventName + \"\\\" doesn't exist!\");\n        }\n        var /** @type {?} */ elementListeners = this._triggerListeners.get(element);\n        if (!elementListeners) {\n            this._triggerListeners.set(element, elementListeners = []);\n        }\n        validatePlayerEvent(eventName, eventPhase);\n        var /** @type {?} */ tuple = ({ triggerName: eventName, phase: eventPhase, callback: callback });\n        elementListeners.push(tuple);\n        return function () {\n            // this is queued up in the event that a removal animation is set\n            // to fire on the element (the listeners need to be set during flush)\n            getOrSetAsInMap(_this._pendingListenerRemovals, element, []).push(tuple);\n        };\n    };\n    /**\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._clearPendingListenerRemovals = function () {\n        var _this = this;\n        this._pendingListenerRemovals.forEach(function (tuples, element) {\n            var /** @type {?} */ elementListeners = _this._triggerListeners.get(element);\n            if (elementListeners) {\n                tuples.forEach(function (tuple) {\n                    var /** @type {?} */ index = elementListeners.indexOf(tuple);\n                    if (index >= 0) {\n                        elementListeners.splice(index, 1);\n                    }\n                });\n            }\n        });\n        this._pendingListenerRemovals.clear();\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._onRemovalTransition = function (element) {\n        // when a parent animation is set to trigger a removal we want to\n        // find all of the children that are currently animating and clear\n        // them out by destroying each of them.\n        var /** @type {?} */ elms = element.querySelectorAll(MARKED_FOR_ANIMATION_SELECTOR);\n        var _loop_1 = function (i) {\n            var /** @type {?} */ elm = elms[i];\n            var /** @type {?} */ activePlayers = this_1._activeElementAnimations.get(elm);\n            if (activePlayers) {\n                activePlayers.forEach(function (player) { return player.destroy(); });\n            }\n            var /** @type {?} */ activeTransitions = this_1._activeTransitionAnimations.get(elm);\n            if (activeTransitions) {\n                Object.keys(activeTransitions).forEach(function (triggerName) {\n                    var /** @type {?} */ player = activeTransitions[triggerName];\n                    if (player) {\n                        player.destroy();\n                    }\n                });\n            }\n        };\n        var this_1 = this;\n        for (var /** @type {?} */ i = 0; i < elms.length; i++) {\n            _loop_1(/** @type {?} */ i);\n        }\n        // we make a copy of the array because the actual source array is modified\n        // each time a player is finished/destroyed (the forEach loop would fail otherwise)\n        return copyArray(/** @type {?} */ ((this._activeElementAnimations.get(element))));\n    };\n    /**\n     * @param {?} element\n     * @param {?} instruction\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.animateTransition = function (element, instruction) {\n        var _this = this;\n        var /** @type {?} */ triggerName = instruction.triggerName;\n        var /** @type {?} */ previousPlayers;\n        if (instruction.isRemovalTransition) {\n            previousPlayers = this._onRemovalTransition(element);\n        }\n        else {\n            previousPlayers = [];\n            var /** @type {?} */ existingTransitions = this._activeTransitionAnimations.get(element);\n            var /** @type {?} */ existingPlayer = existingTransitions ? existingTransitions[triggerName] : null;\n            if (existingPlayer) {\n                previousPlayers.push(existingPlayer);\n            }\n        }\n        // it's important to do this step before destroying the players\n        // so that the onDone callback below won't fire before this\n        eraseStyles(element, instruction.fromStyles);\n        // we first run this so that the previous animation player\n        // data can be passed into the successive animation players\n        var /** @type {?} */ totalTime = 0;\n        var /** @type {?} */ players = instruction.timelines.map(function (timelineInstruction, i) {\n            totalTime = Math.max(totalTime, timelineInstruction.totalTime);\n            return _this._buildPlayer(element, timelineInstruction, previousPlayers, i);\n        });\n        previousPlayers.forEach(function (previousPlayer) { return previousPlayer.destroy(); });\n        var /** @type {?} */ player = optimizeGroupPlayer(players);\n        player.onDone(function () {\n            player.destroy();\n            var /** @type {?} */ elmTransitionMap = _this._activeTransitionAnimations.get(element);\n            if (elmTransitionMap) {\n                delete elmTransitionMap[triggerName];\n                if (Object.keys(elmTransitionMap).length == 0) {\n                    _this._activeTransitionAnimations.delete(element);\n                }\n            }\n            deleteFromArrayMap(_this._activeElementAnimations, element, player);\n            setStyles(element, instruction.toStyles);\n        });\n        var /** @type {?} */ elmTransitionMap = getOrSetAsInMap(this._activeTransitionAnimations, element, {});\n        elmTransitionMap[triggerName] = player;\n        this._queuePlayer(element, triggerName, player, makeAnimationEvent(element, triggerName, instruction.fromState, instruction.toState, null, // this will be filled in during event creation\n        totalTime));\n        return player;\n    };\n    /**\n     * @param {?} element\n     * @param {?} instructions\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.animateTimeline = function (element, instructions, previousPlayers) {\n        var _this = this;\n        if (previousPlayers === void 0) { previousPlayers = []; }\n        var /** @type {?} */ players = instructions.map(function (instruction, i) {\n            var /** @type {?} */ player = _this._buildPlayer(element, instruction, previousPlayers, i);\n            player.onDestroy(function () { deleteFromArrayMap(_this._activeElementAnimations, element, player); });\n            _this._markPlayerAsActive(element, player);\n            return player;\n        });\n        return optimizeGroupPlayer(players);\n    };\n    /**\n     * @param {?} element\n     * @param {?} instruction\n     * @param {?} previousPlayers\n     * @param {?=} index\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._buildPlayer = function (element, instruction, previousPlayers, index) {\n        if (index === void 0) { index = 0; }\n        // only the very first animation can absorb the previous styles. This\n        // is here to prevent the an overlap situation where a group animation\n        // absorbs previous styles multiple times for the same element.\n        if (index && previousPlayers.length) {\n            previousPlayers = [];\n        }\n        return this._driver.animate(element, this._normalizeKeyframes(instruction.keyframes), instruction.duration, instruction.delay, instruction.easing, previousPlayers);\n    };\n    /**\n     * @param {?} keyframes\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._normalizeKeyframes = function (keyframes) {\n        var _this = this;\n        var /** @type {?} */ errors = [];\n        var /** @type {?} */ normalizedKeyframes = [];\n        keyframes.forEach(function (kf) {\n            var /** @type {?} */ normalizedKeyframe = {};\n            Object.keys(kf).forEach(function (prop) {\n                var /** @type {?} */ normalizedProp = prop;\n                var /** @type {?} */ normalizedValue = kf[prop];\n                if (prop != 'offset') {\n                    normalizedProp = _this._normalizer.normalizePropertyName(prop, errors);\n                    normalizedValue =\n                        _this._normalizer.normalizeStyleValue(prop, normalizedProp, kf[prop], errors);\n                }\n                normalizedKeyframe[normalizedProp] = normalizedValue;\n            });\n            normalizedKeyframes.push(normalizedKeyframe);\n        });\n        if (errors.length) {\n            var /** @type {?} */ LINE_START = '\\n - ';\n            throw new Error(\"Unable to animate due to the following errors:\" + LINE_START + errors.join(LINE_START));\n        }\n        return normalizedKeyframes;\n    };\n    /**\n     * @param {?} element\n     * @param {?} player\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._markPlayerAsActive = function (element, player) {\n        var /** @type {?} */ elementAnimations = getOrSetAsInMap(this._activeElementAnimations, element, []);\n        elementAnimations.push(player);\n    };\n    /**\n     * @param {?} element\n     * @param {?} triggerName\n     * @param {?} player\n     * @param {?} event\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._queuePlayer = function (element, triggerName, player, event) {\n        var /** @type {?} */ tuple = ({ element: element, player: player, triggerName: triggerName, event: event });\n        this._queuedTransitionAnimations.push(tuple);\n        player.init();\n        element.classList.add(MARKED_FOR_ANIMATION_CLASSNAME);\n        player.onDone(function () { element.classList.remove(MARKED_FOR_ANIMATION_CLASSNAME); });\n    };\n    /**\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._flushQueuedAnimations = function () {\n        var _loop_2 = function () {\n            var _a = ((this_2._queuedTransitionAnimations.shift())), player = _a.player, element = _a.element, triggerName = _a.triggerName, event = _a.event;\n            var /** @type {?} */ parent = element;\n            while (parent = parent.parentNode) {\n                // this means that a parent element will or will not\n                // have its own animation operation which in this case\n                // there's no point in even trying to do an animation\n                if (parent[MARKED_FOR_REMOVAL])\n                    return \"continue-parentLoop\";\n            }\n            var /** @type {?} */ listeners = this_2._triggerListeners.get(element);\n            if (listeners) {\n                listeners.forEach(function (tuple) {\n                    if (tuple.triggerName == triggerName) {\n                        listenOnPlayer(player, tuple.phase, event, tuple.callback);\n                    }\n                });\n            }\n            // if a removal exists for the given element then we need cancel\n            // all the queued players so that a proper removal animation can go\n            if (this_2._queuedRemovals.has(element)) {\n                player.destroy();\n                return \"continue\";\n            }\n            this_2._markPlayerAsActive(element, player);\n            // in the event that an animation throws an error then we do\n            // not want to re-run animations on any previous animations\n            // if they have already been kicked off beforehand\n            player.init();\n            if (!player.hasStarted()) {\n                player.play();\n            }\n        };\n        var this_2 = this;\n        parentLoop: while (this._queuedTransitionAnimations.length) {\n            var state_1 = _loop_2();\n            switch (state_1) {\n                case \"continue-parentLoop\": continue parentLoop;\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.flush = function () {\n        var _this = this;\n        var /** @type {?} */ leaveListeners = new Map();\n        this._queuedRemovals.forEach(function (callback, element) {\n            var /** @type {?} */ tuple = _this._pendingListenerRemovals.get(element);\n            if (tuple) {\n                leaveListeners.set(element, tuple);\n                _this._pendingListenerRemovals.delete(element);\n            }\n        });\n        this._clearPendingListenerRemovals();\n        this._pendingListenerRemovals = leaveListeners;\n        this._flushQueuedAnimations();\n        var /** @type {?} */ flushAgain = false;\n        this._queuedRemovals.forEach(function (callback, element) {\n            // an item that was inserted/removed in the same flush means\n            // that an animation should not happen anyway\n            if (_this._flaggedInserts.has(element))\n                return;\n            var /** @type {?} */ parent = element;\n            var /** @type {?} */ players = [];\n            while (parent = parent.parentNode) {\n                // there is no reason to even try to\n                if (parent[MARKED_FOR_REMOVAL]) {\n                    callback();\n                    return;\n                }\n                var /** @type {?} */ match = _this._activeElementAnimations.get(parent);\n                if (match) {\n                    players.push.apply(players, match);\n                    break;\n                }\n            }\n            // the loop was unable to find an parent that is animating even\n            // though this element has set to be removed, so the algorithm\n            // should check to see if there are any triggers on the element\n            // that are present to handle a leave animation and then setup\n            // those players to facilitate the callback after done\n            if (players.length == 0) {\n                // this means that the element has valid state triggers\n                var /** @type {?} */ stateDetails_1 = _this._elementTriggerStates.get(element);\n                if (stateDetails_1) {\n                    Object.keys(stateDetails_1).forEach(function (triggerName) {\n                        flushAgain = true;\n                        var /** @type {?} */ oldValue = stateDetails_1[triggerName];\n                        var /** @type {?} */ instruction = _this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);\n                        if (instruction) {\n                            players.push(_this.animateTransition(element, instruction));\n                        }\n                        else {\n                            var /** @type {?} */ event = makeAnimationEvent(element, triggerName, oldValue, VOID_STATE, '', 0);\n                            var /** @type {?} */ player = new __WEBPACK_IMPORTED_MODULE_0__angular_animations__[\"e\" /* NoopAnimationPlayer */]();\n                            _this._queuePlayer(element, triggerName, player, event);\n                        }\n                    });\n                }\n            }\n            if (players.length) {\n                optimizeGroupPlayer(players).onDone(callback);\n            }\n            else {\n                callback();\n            }\n        });\n        this._queuedRemovals.clear();\n        this._flaggedInserts.clear();\n        // this means that one or more leave animations were detected\n        if (flushAgain) {\n            this._flushQueuedAnimations();\n            this._clearPendingListenerRemovals();\n        }\n    };\n    return DomAnimationEngine;\n}());\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} defaultValue\n * @return {?}\n */\nfunction getOrSetAsInMap(map, key, defaultValue) {\n    var /** @type {?} */ value = map.get(key);\n    if (!value) {\n        map.set(key, value = defaultValue);\n    }\n    return value;\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction deleteFromArrayMap(map, key, value) {\n    var /** @type {?} */ arr = map.get(key);\n    if (arr) {\n        var /** @type {?} */ index = arr.indexOf(value);\n        if (index >= 0) {\n            arr.splice(index, 1);\n            if (arr.length == 0) {\n                map.delete(key);\n            }\n        }\n    }\n}\n/**\n * @param {?} players\n * @return {?}\n */\nfunction optimizeGroupPlayer(players) {\n    switch (players.length) {\n        case 0:\n            return new __WEBPACK_IMPORTED_MODULE_0__angular_animations__[\"e\" /* NoopAnimationPlayer */]();\n        case 1:\n            return players[0];\n        default:\n            return new __WEBPACK_IMPORTED_MODULE_0__angular_animations__[\"h\" /* ɵAnimationGroupPlayer */](players);\n    }\n}\n/**\n * @param {?} source\n * @return {?}\n */\nfunction copyArray(source) {\n    return source ? source.splice(0) : [];\n}\n/**\n * @param {?} triggerName\n * @param {?} eventName\n * @return {?}\n */\nfunction validatePlayerEvent(triggerName, eventName) {\n    switch (eventName) {\n        case 'start':\n        case 'done':\n            return;\n        default:\n            throw new Error(\"The provided animation trigger event \\\"\" + eventName + \"\\\" for the animation trigger \\\"\" + triggerName + \"\\\" is not supported!\");\n    }\n}\n/**\n * @param {?} player\n * @param {?} eventName\n * @param {?} baseEvent\n * @param {?} callback\n * @return {?}\n */\nfunction listenOnPlayer(player, eventName, baseEvent, callback) {\n    switch (eventName) {\n        case 'start':\n            player.onStart(function () {\n                var /** @type {?} */ event = copyAnimationEvent(baseEvent);\n                event.phaseName = 'start';\n                callback(event);\n            });\n            break;\n        case 'done':\n            player.onDone(function () {\n                var /** @type {?} */ event = copyAnimationEvent(baseEvent);\n                event.phaseName = 'done';\n                callback(event);\n            });\n            break;\n    }\n}\n/**\n * @param {?} e\n * @return {?}\n */\nfunction copyAnimationEvent(e) {\n    return makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, e.phaseName, e.totalTime);\n}\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} phaseName\n * @param {?} totalTime\n * @return {?}\n */\nfunction makeAnimationEvent(element, triggerName, fromState, toState, phaseName, totalTime) {\n    return ({ element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime });\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeTriggerValue(value) {\n    switch (typeof value) {\n        case 'boolean':\n            return value ? '1' : '0';\n        default:\n            return value ? value.toString() : null;\n    }\n}\n/**\n * \\@experimental Animation support is experimental.\n * @abstract\n */\nvar AnimationStyleNormalizer = (function () {\n    function AnimationStyleNormalizer() {\n    }\n    /**\n     * @abstract\n     * @param {?} propertyName\n     * @param {?} errors\n     * @return {?}\n     */\n    AnimationStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) { };\n    /**\n     * @abstract\n     * @param {?} userProvidedProperty\n     * @param {?} normalizedProperty\n     * @param {?} value\n     * @param {?} errors\n     * @return {?}\n     */\n    AnimationStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) { };\n    return AnimationStyleNormalizer;\n}());\n/**\n * \\@experimental Animation support is experimental.\n */\nvar NoopAnimationStyleNormalizer = (function () {\n    function NoopAnimationStyleNormalizer() {\n    }\n    /**\n     * @param {?} propertyName\n     * @param {?} errors\n     * @return {?}\n     */\n    NoopAnimationStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) { return propertyName; };\n    /**\n     * @param {?} userProvidedProperty\n     * @param {?} normalizedProperty\n     * @param {?} value\n     * @param {?} errors\n     * @return {?}\n     */\n    NoopAnimationStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) {\n        return (value);\n    };\n    return NoopAnimationStyleNormalizer;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar Animation = (function () {\n    /**\n     * @param {?} input\n     */\n    function Animation(input) {\n        var ast = Array.isArray(input) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_animations__[\"f\" /* sequence */])(input) : input;\n        var errors = validateAnimationSequence(ast);\n        if (errors.length) {\n            var errorMessage = \"animation validation failed:\\n\" + errors.join(\"\\n\");\n            throw new Error(errorMessage);\n        }\n        this._animationAst = ast;\n    }\n    /**\n     * @param {?} startingStyles\n     * @param {?} destinationStyles\n     * @return {?}\n     */\n    Animation.prototype.buildTimelines = function (startingStyles, destinationStyles) {\n        var /** @type {?} */ start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : (startingStyles);\n        var /** @type {?} */ dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : (destinationStyles);\n        return buildAnimationKeyframes(this._animationAst, start, dest);\n    };\n    /**\n     * @param {?} injector\n     * @param {?} element\n     * @param {?=} startingStyles\n     * @param {?=} destinationStyles\n     * @return {?}\n     */\n    Animation.prototype.create = function (injector, element, startingStyles, destinationStyles) {\n        if (startingStyles === void 0) { startingStyles = {}; }\n        if (destinationStyles === void 0) { destinationStyles = {}; }\n        var /** @type {?} */ instructions = this.buildTimelines(startingStyles, destinationStyles);\n        // note the code below is only here to make the tests happy (once the new renderer is\n        // within core then the code below will interact with Renderer.transition(...))\n        var /** @type {?} */ driver = injector.get(AnimationDriver);\n        var /** @type {?} */ normalizer = injector.get(AnimationStyleNormalizer);\n        var /** @type {?} */ engine = new DomAnimationEngine(driver, normalizer);\n        return engine.animateTimeline(element, instructions);\n    };\n    return Animation;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar WebAnimationsStyleNormalizer = (function (_super) {\n    __extends(WebAnimationsStyleNormalizer, _super);\n    function WebAnimationsStyleNormalizer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} propertyName\n     * @param {?} errors\n     * @return {?}\n     */\n    WebAnimationsStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) {\n        return dashCaseToCamelCase(propertyName);\n    };\n    /**\n     * @param {?} userProvidedProperty\n     * @param {?} normalizedProperty\n     * @param {?} value\n     * @param {?} errors\n     * @return {?}\n     */\n    WebAnimationsStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) {\n        var /** @type {?} */ unit = '';\n        var /** @type {?} */ strVal = value.toString().trim();\n        if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {\n            if (typeof value === 'number') {\n                unit = 'px';\n            }\n            else {\n                var /** @type {?} */ valAndSuffixMatch = value.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n                    errors.push(\"Please provide a CSS unit value for \" + userProvidedProperty + \":\" + value);\n                }\n            }\n        }\n        return strVal + unit;\n    };\n    return WebAnimationsStyleNormalizer;\n}(AnimationStyleNormalizer));\nvar DIMENSIONAL_PROP_MAP = makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent'\n    .split(','));\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction makeBooleanMap(keys) {\n    var /** @type {?} */ map = {};\n    keys.forEach(function (key) { return map[key] = true; });\n    return map;\n}\nvar DASH_CASE_REGEXP = /-+([a-z0-9])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return m[1].toUpperCase();\n    });\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DEFAULT_STATE_VALUE = 'void';\nvar DEFAULT_STATE_STYLES = '*';\nvar NoopAnimationEngine = (function (_super) {\n    __extends(NoopAnimationEngine, _super);\n    function NoopAnimationEngine() {\n        var _this = _super.apply(this, arguments) || this;\n        _this._listeners = new Map();\n        _this._changes = [];\n        _this._flaggedRemovals = new Set();\n        _this._onDoneFns = [];\n        _this._triggerStyles = Object.create(null);\n        return _this;\n    }\n    /**\n     * @param {?} trigger\n     * @param {?=} name\n     * @return {?}\n     */\n    NoopAnimationEngine.prototype.registerTrigger = function (trigger, name) {\n        name = name || trigger.name;\n        if (this._triggerStyles[name]) {\n            return;\n        }\n        var /** @type {?} */ stateMap = {};\n        trigger.definitions.forEach(function (def) {\n            if (def.type === 0 /* State */) {\n                var /** @type {?} */ stateDef = (def);\n                stateMap[stateDef.name] = normalizeStyles(stateDef.styles.styles);\n            }\n        });\n        this._triggerStyles[name] = stateMap;\n    };\n    /**\n     * @param {?} element\n     * @param {?} domFn\n     * @return {?}\n     */\n    NoopAnimationEngine.prototype.onInsert = function (element, domFn) { domFn(); };\n    /**\n     * @param {?} element\n     * @param {?} domFn\n     * @return {?}\n     */\n    NoopAnimationEngine.prototype.onRemove = function (element, domFn) {\n        domFn();\n        if (element['nodeType'] == 1) {\n            this._flaggedRemovals.add(element);\n        }\n    };\n    /**\n     * @param {?} element\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    NoopAnimationEngine.prototype.setProperty = function (element, property, value) {\n        var /** @type {?} */ storageProp = makeStorageProp(property);\n        var /** @type {?} */ oldValue = element[storageProp] || DEFAULT_STATE_VALUE;\n        this._changes.push(/** @type {?} */ ({ element: element, oldValue: oldValue, newValue: value, triggerName: property }));\n        var /** @type {?} */ triggerStateStyles = this._triggerStyles[property] || {};\n        var /** @type {?} */ fromStateStyles = triggerStateStyles[oldValue] || triggerStateStyles[DEFAULT_STATE_STYLES];\n        if (fromStateStyles) {\n            eraseStyles(element, fromStateStyles);\n        }\n        element[storageProp] = value;\n        this._onDoneFns.push(function () {\n            var /** @type {?} */ toStateStyles = triggerStateStyles[value] || triggerStateStyles[DEFAULT_STATE_STYLES];\n            if (toStateStyles) {\n                setStyles(element, toStateStyles);\n            }\n        });\n    };\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} eventPhase\n     * @param {?} callback\n     * @return {?}\n     */\n    NoopAnimationEngine.prototype.listen = function (element, eventName, eventPhase, callback) {\n        var /** @type {?} */ listeners = this._listeners.get(element);\n        if (!listeners) {\n            this._listeners.set(element, listeners = []);\n        }\n        var /** @type {?} */ tuple = ({ triggerName: eventName, eventPhase: eventPhase, callback: callback });\n        listeners.push(tuple);\n        return function () { return tuple.doRemove = true; };\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationEngine.prototype.flush = function () {\n        var _this = this;\n        var /** @type {?} */ onStartCallbacks = [];\n        var /** @type {?} */ onDoneCallbacks = [];\n        /**\n         * @param {?} listener\n         * @param {?} data\n         * @return {?}\n         */\n        function handleListener(listener, data) {\n            var /** @type {?} */ phase = listener.eventPhase;\n            var /** @type {?} */ event = makeAnimationEvent$1(data.element, data.triggerName, data.oldValue, data.newValue, phase, 0);\n            if (phase == 'start') {\n                onStartCallbacks.push(function () { return listener.callback(event); });\n            }\n            else if (phase == 'done') {\n                onDoneCallbacks.push(function () { return listener.callback(event); });\n            }\n        }\n        this._changes.forEach(function (change) {\n            var /** @type {?} */ element = change.element;\n            var /** @type {?} */ listeners = _this._listeners.get(element);\n            if (listeners) {\n                listeners.forEach(function (listener) {\n                    if (listener.triggerName == change.triggerName) {\n                        handleListener(listener, change);\n                    }\n                });\n            }\n        });\n        // upon removal ALL the animation triggers need to get fired\n        this._flaggedRemovals.forEach(function (element) {\n            var /** @type {?} */ listeners = _this._listeners.get(element);\n            if (listeners) {\n                listeners.forEach(function (listener) {\n                    var /** @type {?} */ triggerName = listener.triggerName;\n                    var /** @type {?} */ storageProp = makeStorageProp(triggerName);\n                    handleListener(listener, /** @type {?} */ ({\n                        element: element,\n                        triggerName: triggerName,\n                        oldValue: element[storageProp] || DEFAULT_STATE_VALUE,\n                        newValue: DEFAULT_STATE_VALUE\n                    }));\n                });\n            }\n        });\n        // remove all the listeners after everything is complete\n        Array.from(this._listeners.keys()).forEach(function (element) {\n            var /** @type {?} */ listenersToKeep = ((_this._listeners.get(element))).filter(function (l) { return !l.doRemove; });\n            if (listenersToKeep.length) {\n                _this._listeners.set(element, listenersToKeep);\n            }\n            else {\n                _this._listeners.delete(element);\n            }\n        });\n        onStartCallbacks.forEach(function (fn) { return fn(); });\n        onDoneCallbacks.forEach(function (fn) { return fn(); });\n        this._flaggedRemovals.clear();\n        this._changes = [];\n        this._onDoneFns.forEach(function (doneFn) { return doneFn(); });\n        this._onDoneFns = [];\n    };\n    Object.defineProperty(NoopAnimationEngine.prototype, \"activePlayers\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NoopAnimationEngine.prototype, \"queuedPlayers\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    return NoopAnimationEngine;\n}(AnimationEngine));\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} phaseName\n * @param {?} totalTime\n * @return {?}\n */\nfunction makeAnimationEvent$1(element, triggerName, fromState, toState, phaseName, totalTime) {\n    return ({ element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime });\n}\n/**\n * @param {?} property\n * @return {?}\n */\nfunction makeStorageProp(property) {\n    return '_@_' + property;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar WebAnimationsPlayer = (function () {\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} options\n     * @param {?=} previousPlayers\n     */\n    function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {\n        if (previousPlayers === void 0) { previousPlayers = []; }\n        var _this = this;\n        this.element = element;\n        this.keyframes = keyframes;\n        this.options = options;\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._initialized = false;\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this.time = 0;\n        this.parentPlayer = null;\n        this._duration = options['duration'];\n        this._delay = options['delay'] || 0;\n        this.time = this._duration + this._delay;\n        this.previousStyles = {};\n        previousPlayers.forEach(function (player) {\n            var styles = player._captureStyles();\n            Object.keys(styles).forEach(function (prop) { return _this.previousStyles[prop] = styles[prop]; });\n        });\n    }\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype._onFinish = function () {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(function (fn) { return fn(); });\n            this._onDoneFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.init = function () {\n        var _this = this;\n        if (this._initialized)\n            return;\n        this._initialized = true;\n        var /** @type {?} */ keyframes = this.keyframes.map(function (styles) {\n            var /** @type {?} */ formattedKeyframe = {};\n            Object.keys(styles).forEach(function (prop, index) {\n                var /** @type {?} */ value = styles[prop];\n                if (value == __WEBPACK_IMPORTED_MODULE_0__angular_animations__[\"g\" /* AUTO_STYLE */]) {\n                    value = _computeStyle(_this.element, prop);\n                }\n                if (value != undefined) {\n                    formattedKeyframe[prop] = value;\n                }\n            });\n            return formattedKeyframe;\n        });\n        var /** @type {?} */ previousStyleProps = Object.keys(this.previousStyles);\n        if (previousStyleProps.length) {\n            var /** @type {?} */ startingKeyframe_1 = keyframes[0];\n            var /** @type {?} */ missingStyleProps_1 = [];\n            previousStyleProps.forEach(function (prop) {\n                if (!startingKeyframe_1.hasOwnProperty(prop)) {\n                    missingStyleProps_1.push(prop);\n                }\n                startingKeyframe_1[prop] = _this.previousStyles[prop];\n            });\n            if (missingStyleProps_1.length) {\n                var /** @type {?} */ self_1 = this;\n                var _loop_3 = function () {\n                    var /** @type {?} */ kf = keyframes[i];\n                    missingStyleProps_1.forEach(function (prop) {\n                        kf[prop] = _computeStyle(self_1.element, prop);\n                    });\n                };\n                // tslint:disable-next-line\n                for (var /** @type {?} */ i = 1; i < keyframes.length; i++) {\n                    _loop_3();\n                }\n            }\n        }\n        this._player = this._triggerWebAnimation(this.element, keyframes, this.options);\n        this._finalKeyframe =\n            keyframes.length ? _copyKeyframeStyles(keyframes[keyframes.length - 1]) : {};\n        // this is required so that the player doesn't start to animate right away\n        this._resetDomPlayerState();\n        this._player.addEventListener('finish', function () { return _this._onFinish(); });\n    };\n    /**\n     * \\@internal\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} options\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {\n        // jscompiler doesn't seem to know animate is a native property because it's not fully\n        // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]\n        return (element['animate'](keyframes, options));\n    };\n    Object.defineProperty(WebAnimationsPlayer.prototype, \"domPlayer\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._player; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.play = function () {\n        this.init();\n        if (!this.hasStarted()) {\n            this._onStartFns.forEach(function (fn) { return fn(); });\n            this._onStartFns = [];\n            this._started = true;\n        }\n        this._player.play();\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.pause = function () {\n        this.init();\n        this._player.pause();\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.finish = function () {\n        this.init();\n        this._onFinish();\n        this._player.finish();\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.reset = function () {\n        this._resetDomPlayerState();\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype._resetDomPlayerState = function () {\n        if (this._player) {\n            this._player.cancel();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.restart = function () {\n        this.reset();\n        this.play();\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.hasStarted = function () { return this._started; };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.destroy = function () {\n        if (!this._destroyed) {\n            this._resetDomPlayerState();\n            this._onFinish();\n            this._destroyed = true;\n            this._onDestroyFns.forEach(function (fn) { return fn(); });\n            this._onDestroyFns = [];\n        }\n    };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.setPosition = function (p) { this._player.currentTime = p * this.time; };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.getPosition = function () { return this._player.currentTime / this.time; };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype._captureStyles = function () {\n        var _this = this;\n        var /** @type {?} */ styles = {};\n        if (this.hasStarted()) {\n            Object.keys(this._finalKeyframe).forEach(function (prop) {\n                if (prop != 'offset') {\n                    styles[prop] =\n                        _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);\n                }\n            });\n        }\n        return styles;\n    };\n    return WebAnimationsPlayer;\n}());\n/**\n * @param {?} element\n * @param {?} prop\n * @return {?}\n */\nfunction _computeStyle(element, prop) {\n    return ((window.getComputedStyle(element)))[prop];\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction _copyKeyframeStyles(styles) {\n    var /** @type {?} */ newStyles = {};\n    Object.keys(styles).forEach(function (prop) {\n        if (prop != 'offset') {\n            newStyles[prop] = styles[prop];\n        }\n    });\n    return newStyles;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar WebAnimationsDriver = (function () {\n    function WebAnimationsDriver() {\n    }\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    WebAnimationsDriver.prototype.animate = function (element, keyframes, duration, delay, easing, previousPlayers) {\n        if (previousPlayers === void 0) { previousPlayers = []; }\n        var /** @type {?} */ playerOptions = { 'duration': duration, 'delay': delay, 'fill': 'forwards' };\n        // we check for this to avoid having a null|undefined value be present\n        // for the easing (which results in an error for certain browsers #9752)\n        if (easing) {\n            playerOptions['easing'] = easing;\n        }\n        var /** @type {?} */ previousWebAnimationPlayers = (previousPlayers.filter(function (player) { return player instanceof WebAnimationsPlayer; }));\n        return new WebAnimationsPlayer(element, keyframes, playerOptions, previousWebAnimationPlayers);\n    };\n    return WebAnimationsDriver;\n}());\n/**\n * @return {?}\n */\nfunction supportsWebAnimations() {\n    return typeof Element !== 'undefined' && typeof ((Element)).prototype['animate'] === 'function';\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation browser package.\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the animation package.\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=browser.es5.js.map\n\n\n/***/ }),\n\n/***/ 134:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__ = __webpack_require__(132);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrowserAnimationsModule\", function() { return BrowserAnimationsModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NoopAnimationsModule\", function() { return NoopAnimationsModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵAnimationRenderer\", function() { return AnimationRenderer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵAnimationRendererFactory\", function() { return AnimationRendererFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵe\", function() { return BROWSER_ANIMATIONS_PROVIDERS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵf\", function() { return BROWSER_NOOP_ANIMATIONS_PROVIDERS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵa\", function() { return InjectableAnimationEngine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵc\", function() { return instantiateDefaultStyleNormalizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵd\", function() { return instantiateRendererFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵb\", function() { return instantiateSupportedAnimationDriver; });\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * @license Angular v4.0.0\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar AnimationRendererFactory = (function () {\n    /**\n     * @param {?} delegate\n     * @param {?} _engine\n     * @param {?} _zone\n     */\n    function AnimationRendererFactory(delegate, _engine, _zone) {\n        this.delegate = delegate;\n        this._engine = _engine;\n        this._zone = _zone;\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} type\n     * @return {?}\n     */\n    AnimationRendererFactory.prototype.createRenderer = function (hostElement, type) {\n        var _this = this;\n        var /** @type {?} */ delegate = this.delegate.createRenderer(hostElement, type);\n        if (!hostElement || !type || !type.data || !type.data['animation'])\n            return delegate;\n        var /** @type {?} */ namespaceId = type.id;\n        var /** @type {?} */ animationTriggers = (type.data['animation']);\n        animationTriggers.forEach(function (trigger) { return _this._engine.registerTrigger(trigger, namespaceify(namespaceId, trigger.name)); });\n        return new AnimationRenderer(delegate, this._engine, this._zone, namespaceId);\n    };\n    return AnimationRendererFactory;\n}());\nAnimationRendererFactory.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nAnimationRendererFactory.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"RendererFactory2\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"a\" /* ɵAnimationEngine */], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], },\n]; };\nvar AnimationRenderer = (function () {\n    /**\n     * @param {?} delegate\n     * @param {?} _engine\n     * @param {?} _zone\n     * @param {?} _namespaceId\n     */\n    function AnimationRenderer(delegate, _engine, _zone, _namespaceId) {\n        this.delegate = delegate;\n        this._engine = _engine;\n        this._zone = _zone;\n        this._namespaceId = _namespaceId;\n        this.destroyNode = null;\n        this._flushPromise = null;\n        this.destroyNode = this.delegate.destroyNode ? function (n) { return delegate.destroyNode(n); } : null;\n    }\n    Object.defineProperty(AnimationRenderer.prototype, \"data\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.delegate.data; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    AnimationRenderer.prototype.destroy = function () { this.delegate.destroy(); };\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    AnimationRenderer.prototype.createElement = function (name, namespace) {\n        return this.delegate.createElement(name, namespace);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    AnimationRenderer.prototype.createComment = function (value) { return this.delegate.createComment(value); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    AnimationRenderer.prototype.createText = function (value) { return this.delegate.createText(value); };\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    AnimationRenderer.prototype.selectRootElement = function (selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    AnimationRenderer.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    AnimationRenderer.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    AnimationRenderer.prototype.setAttribute = function (el, name, value, namespace) {\n        this.delegate.setAttribute(el, name, value, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    AnimationRenderer.prototype.removeAttribute = function (el, name, namespace) {\n        this.delegate.removeAttribute(el, name, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    AnimationRenderer.prototype.addClass = function (el, name) { this.delegate.addClass(el, name); };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    AnimationRenderer.prototype.removeClass = function (el, name) { this.delegate.removeClass(el, name); };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    AnimationRenderer.prototype.setStyle = function (el, style, value, flags) {\n        this.delegate.setStyle(el, style, value, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    AnimationRenderer.prototype.removeStyle = function (el, style, flags) {\n        this.delegate.removeStyle(el, style, flags);\n    };\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    AnimationRenderer.prototype.setValue = function (node, value) { this.delegate.setValue(node, value); };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    AnimationRenderer.prototype.appendChild = function (parent, newChild) {\n        var _this = this;\n        this._engine.onInsert(newChild, function () { return _this.delegate.appendChild(parent, newChild); });\n        this._queueFlush();\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    AnimationRenderer.prototype.insertBefore = function (parent, newChild, refChild) {\n        var _this = this;\n        this._engine.onInsert(newChild, function () { return _this.delegate.insertBefore(parent, newChild, refChild); });\n        this._queueFlush();\n    };\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    AnimationRenderer.prototype.removeChild = function (parent, oldChild) {\n        var _this = this;\n        this._engine.onRemove(oldChild, function () {\n            // Note: if an component element has a leave animation, and the component\n            // a host leave animation, the view engine will call `removeChild` for the parent\n            // component renderer as well as for the child component renderer.\n            // Therefore, we need to check if we already removed the element.\n            if (_this.delegate.parentNode(oldChild)) {\n                _this.delegate.removeChild(parent, oldChild);\n            }\n        });\n        this._queueFlush();\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    AnimationRenderer.prototype.setProperty = function (el, name, value) {\n        if (name.charAt(0) == '@') {\n            this._engine.setProperty(el, namespaceify(this._namespaceId, name.substr(1)), value);\n            this._queueFlush();\n        }\n        else {\n            this.delegate.setProperty(el, name, value);\n        }\n    };\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    AnimationRenderer.prototype.listen = function (target, eventName, callback) {\n        var _this = this;\n        if (eventName.charAt(0) == '@') {\n            var /** @type {?} */ element = resolveElementFromTarget(target);\n            var _a = parseTriggerCallbackName(eventName.substr(1)), name = _a[0], phase = _a[1];\n            return this._engine.listen(element, namespaceify(this._namespaceId, name), phase, function (event) {\n                var /** @type {?} */ e = (event);\n                if (e.triggerName) {\n                    e.triggerName = deNamespaceify(_this._namespaceId, e.triggerName);\n                }\n                _this._zone.run(function () { return callback(event); });\n            });\n        }\n        return this.delegate.listen(target, eventName, callback);\n    };\n    /**\n     * @return {?}\n     */\n    AnimationRenderer.prototype._queueFlush = function () {\n        var _this = this;\n        if (!this._flushPromise) {\n            this._zone.runOutsideAngular(function () {\n                _this._flushPromise = Promise.resolve(null).then(function () {\n                    _this._flushPromise = null;\n                    _this._engine.flush();\n                });\n            });\n        }\n    };\n    return AnimationRenderer;\n}());\n/**\n * @param {?} target\n * @return {?}\n */\nfunction resolveElementFromTarget(target) {\n    switch (target) {\n        case 'body':\n            return document.body;\n        case 'document':\n            return document;\n        case 'window':\n            return window;\n        default:\n            return target;\n    }\n}\n/**\n * @param {?} triggerName\n * @return {?}\n */\nfunction parseTriggerCallbackName(triggerName) {\n    var /** @type {?} */ dotIndex = triggerName.indexOf('.');\n    var /** @type {?} */ trigger = triggerName.substring(0, dotIndex);\n    var /** @type {?} */ phase = triggerName.substr(dotIndex + 1);\n    return [trigger, phase];\n}\n/**\n * @param {?} namespaceId\n * @param {?} value\n * @return {?}\n */\nfunction namespaceify(namespaceId, value) {\n    return namespaceId + \"#\" + value;\n}\n/**\n * @param {?} namespaceId\n * @param {?} value\n * @return {?}\n */\nfunction deNamespaceify(namespaceId, value) {\n    return value.replace(namespaceId + '#', '');\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar InjectableAnimationEngine = (function (_super) {\n    __extends(InjectableAnimationEngine, _super);\n    /**\n     * @param {?} driver\n     * @param {?} normalizer\n     */\n    function InjectableAnimationEngine(driver, normalizer) {\n        return _super.call(this, driver, normalizer) || this;\n    }\n    return InjectableAnimationEngine;\n}(__WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"b\" /* ɵDomAnimationEngine */]));\nInjectableAnimationEngine.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nInjectableAnimationEngine.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"c\" /* AnimationDriver */], },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"d\" /* ɵAnimationStyleNormalizer */], },\n]; };\n/**\n * @return {?}\n */\nfunction instantiateSupportedAnimationDriver() {\n    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"e\" /* ɵsupportsWebAnimations */])()) {\n        return new __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"f\" /* ɵWebAnimationsDriver */]();\n    }\n    return new __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"g\" /* ɵNoopAnimationDriver */]();\n}\n/**\n * @return {?}\n */\nfunction instantiateDefaultStyleNormalizer() {\n    return new __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"h\" /* ɵWebAnimationsStyleNormalizer */]();\n}\n/**\n * @param {?} renderer\n * @param {?} engine\n * @param {?} zone\n * @return {?}\n */\nfunction instantiateRendererFactory(renderer, engine, zone) {\n    return new AnimationRendererFactory(renderer, engine, zone);\n}\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserModule.\n */\nvar BROWSER_ANIMATIONS_PROVIDERS = [\n    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"c\" /* AnimationDriver */], useFactory: instantiateSupportedAnimationDriver },\n    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"d\" /* ɵAnimationStyleNormalizer */], useFactory: instantiateDefaultStyleNormalizer },\n    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"a\" /* ɵAnimationEngine */], useClass: InjectableAnimationEngine }, {\n        provide: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"RendererFactory2\"],\n        useFactory: instantiateRendererFactory,\n        deps: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__[\"ɵDomRendererFactory2\"], __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"a\" /* ɵAnimationEngine */], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"]]\n    }\n];\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserTestingModule.\n */\nvar BROWSER_NOOP_ANIMATIONS_PROVIDERS = [\n    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"a\" /* ɵAnimationEngine */], useClass: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"i\" /* ɵNoopAnimationEngine */] }, {\n        provide: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"RendererFactory2\"],\n        useFactory: instantiateRendererFactory,\n        deps: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__[\"ɵDomRendererFactory2\"], __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__[\"a\" /* ɵAnimationEngine */], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"]]\n    }\n];\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@experimental Animation support is experimental.\n */\nvar BrowserAnimationsModule = (function () {\n    function BrowserAnimationsModule() {\n    }\n    return BrowserAnimationsModule;\n}());\nBrowserAnimationsModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__[\"BrowserModule\"]],\n                providers: BROWSER_ANIMATIONS_PROVIDERS,\n            },] },\n];\n/**\n * @nocollapse\n */\nBrowserAnimationsModule.ctorParameters = function () { return []; };\n/**\n * \\@experimental Animation support is experimental.\n */\nvar NoopAnimationsModule = (function () {\n    function NoopAnimationsModule() {\n    }\n    return NoopAnimationsModule;\n}());\nNoopAnimationsModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__[\"BrowserModule\"]],\n                providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,\n            },] },\n];\n/**\n * @nocollapse\n */\nNoopAnimationsModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation browser package.\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the animation package.\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=animations.es5.js.map\n\n\n/***/ }),\n\n/***/ 136:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar http_1 = __webpack_require__(19);\nvar core_1 = __webpack_require__(4);\nvar Observable_1 = __webpack_require__(0);\n__webpack_require__(68);\n__webpack_require__(56);\nvar AuthConfigConsts = (function () {\n    function AuthConfigConsts() {\n    }\n    AuthConfigConsts.DEFAULT_TOKEN_NAME = 'id_token';\n    AuthConfigConsts.DEFAULT_HEADER_NAME = 'Authorization';\n    AuthConfigConsts.HEADER_PREFIX_BEARER = 'Bearer ';\n    return AuthConfigConsts;\n}());\nexports.AuthConfigConsts = AuthConfigConsts;\nvar AuthConfigDefaults = {\n    headerName: AuthConfigConsts.DEFAULT_HEADER_NAME,\n    headerPrefix: null,\n    tokenName: AuthConfigConsts.DEFAULT_TOKEN_NAME,\n    tokenGetter: function () { return localStorage.getItem(AuthConfigDefaults.tokenName); },\n    noJwtError: false,\n    noClientCheck: false,\n    globalHeaders: [],\n    noTokenScheme: false\n};\n/**\n * Sets up the authentication configuration.\n */\nvar AuthConfig = (function () {\n    function AuthConfig(config) {\n        config = config || {};\n        this._config = objectAssign({}, AuthConfigDefaults, config);\n        if (this._config.headerPrefix) {\n            this._config.headerPrefix += ' ';\n        }\n        else if (this._config.noTokenScheme) {\n            this._config.headerPrefix = '';\n        }\n        else {\n            this._config.headerPrefix = AuthConfigConsts.HEADER_PREFIX_BEARER;\n        }\n        if (config.tokenName && !config.tokenGetter) {\n            this._config.tokenGetter = function () { return localStorage.getItem(config.tokenName); };\n        }\n    }\n    AuthConfig.prototype.getConfig = function () {\n        return this._config;\n    };\n    return AuthConfig;\n}());\nexports.AuthConfig = AuthConfig;\nvar AuthHttpError = (function (_super) {\n    __extends(AuthHttpError, _super);\n    function AuthHttpError() {\n        _super.apply(this, arguments);\n    }\n    return AuthHttpError;\n}(Error));\nexports.AuthHttpError = AuthHttpError;\n/**\n * Allows for explicit authenticated HTTP requests.\n */\nvar AuthHttp = (function () {\n    function AuthHttp(options, http, defOpts) {\n        var _this = this;\n        this.http = http;\n        this.defOpts = defOpts;\n        this.config = options.getConfig();\n        this.tokenStream = new Observable_1.Observable(function (obs) {\n            obs.next(_this.config.tokenGetter());\n        });\n    }\n    AuthHttp.prototype.mergeOptions = function (providedOpts, defaultOpts) {\n        var newOptions = defaultOpts || new http_1.RequestOptions();\n        if (this.config.globalHeaders) {\n            this.setGlobalHeaders(this.config.globalHeaders, providedOpts);\n        }\n        newOptions = newOptions.merge(new http_1.RequestOptions(providedOpts));\n        return newOptions;\n    };\n    AuthHttp.prototype.requestHelper = function (requestArgs, additionalOptions) {\n        var options = new http_1.RequestOptions(requestArgs);\n        if (additionalOptions) {\n            options = options.merge(additionalOptions);\n        }\n        return this.request(new http_1.Request(this.mergeOptions(options, this.defOpts)));\n    };\n    AuthHttp.prototype.requestWithToken = function (req, token) {\n        if (!this.config.noClientCheck && !tokenNotExpired(undefined, token)) {\n            if (!this.config.noJwtError) {\n                return new Observable_1.Observable(function (obs) {\n                    obs.error(new AuthHttpError('No JWT present or has expired'));\n                });\n            }\n        }\n        else {\n            req.headers.set(this.config.headerName, this.config.headerPrefix + token);\n        }\n        return this.http.request(req);\n    };\n    AuthHttp.prototype.setGlobalHeaders = function (headers, request) {\n        if (!request.headers) {\n            request.headers = new http_1.Headers();\n        }\n        headers.forEach(function (header) {\n            var key = Object.keys(header)[0];\n            var headerValue = header[key];\n            request.headers.set(key, headerValue);\n        });\n    };\n    AuthHttp.prototype.request = function (url, options) {\n        var _this = this;\n        if (typeof url === 'string') {\n            return this.get(url, options); // Recursion: transform url from String to Request\n        }\n        // else if ( ! url instanceof Request ) {\n        //   throw new Error('First argument must be a url string or Request instance.');\n        // }\n        // from this point url is always an instance of Request;\n        var req = url;\n        var token = this.config.tokenGetter();\n        if (token instanceof Promise) {\n            return Observable_1.Observable.fromPromise(token).mergeMap(function (jwtToken) { return _this.requestWithToken(req, jwtToken); });\n        }\n        else {\n            return this.requestWithToken(req, token);\n        }\n    };\n    AuthHttp.prototype.get = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Get, url: url }, options);\n    };\n    AuthHttp.prototype.post = function (url, body, options) {\n        return this.requestHelper({ body: body, method: http_1.RequestMethod.Post, url: url }, options);\n    };\n    AuthHttp.prototype.put = function (url, body, options) {\n        return this.requestHelper({ body: body, method: http_1.RequestMethod.Put, url: url }, options);\n    };\n    AuthHttp.prototype.delete = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Delete, url: url }, options);\n    };\n    AuthHttp.prototype.patch = function (url, body, options) {\n        return this.requestHelper({ body: body, method: http_1.RequestMethod.Patch, url: url }, options);\n    };\n    AuthHttp.prototype.head = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Head, url: url }, options);\n    };\n    AuthHttp.prototype.options = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Options, url: url }, options);\n    };\n    AuthHttp = __decorate([\n        core_1.Injectable(), \n        __metadata('design:paramtypes', [AuthConfig, http_1.Http, http_1.RequestOptions])\n    ], AuthHttp);\n    return AuthHttp;\n}());\nexports.AuthHttp = AuthHttp;\n/**\n * Helper class to decode and find JWT expiration.\n */\nvar JwtHelper = (function () {\n    function JwtHelper() {\n    }\n    JwtHelper.prototype.urlBase64Decode = function (str) {\n        var output = str.replace(/-/g, '+').replace(/_/g, '/');\n        switch (output.length % 4) {\n            case 0: {\n                break;\n            }\n            case 2: {\n                output += '==';\n                break;\n            }\n            case 3: {\n                output += '=';\n                break;\n            }\n            default: {\n                throw 'Illegal base64url string!';\n            }\n        }\n        return this.b64DecodeUnicode(output);\n    };\n    // credits for decoder goes to https://github.com/atk\n    JwtHelper.prototype.b64decode = function (str) {\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        var output = '';\n        str = String(str).replace(/=+$/, '');\n        if (str.length % 4 == 1) {\n            throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n        }\n        for (var bc = 0, bs = void 0, buffer = void 0, idx = 0; \n        // get next character\n        buffer = str.charAt(idx++); \n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n        return output;\n    };\n    // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n    JwtHelper.prototype.b64DecodeUnicode = function (str) {\n        return decodeURIComponent(Array.prototype.map.call(this.b64decode(str), function (c) {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    };\n    JwtHelper.prototype.decodeToken = function (token) {\n        var parts = token.split('.');\n        if (parts.length !== 3) {\n            throw new Error('JWT must have 3 parts');\n        }\n        var decoded = this.urlBase64Decode(parts[1]);\n        if (!decoded) {\n            throw new Error('Cannot decode the token');\n        }\n        return JSON.parse(decoded);\n    };\n    JwtHelper.prototype.getTokenExpirationDate = function (token) {\n        var decoded;\n        decoded = this.decodeToken(token);\n        if (!decoded.hasOwnProperty('exp')) {\n            return null;\n        }\n        var date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(decoded.exp);\n        return date;\n    };\n    JwtHelper.prototype.isTokenExpired = function (token, offsetSeconds) {\n        var date = this.getTokenExpirationDate(token);\n        offsetSeconds = offsetSeconds || 0;\n        if (date == null) {\n            return false;\n        }\n        // Token expired?\n        return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\n    };\n    return JwtHelper;\n}());\nexports.JwtHelper = JwtHelper;\n/**\n * Checks for presence of token and that token hasn't expired.\n * For use with the @CanActivate router decorator and NgIf\n */\nfunction tokenNotExpired(tokenName, jwt) {\n    if (tokenName === void 0) { tokenName = AuthConfigConsts.DEFAULT_TOKEN_NAME; }\n    var token = jwt || localStorage.getItem(tokenName);\n    var jwtHelper = new JwtHelper();\n    return token != null && !jwtHelper.isTokenExpired(token);\n}\nexports.tokenNotExpired = tokenNotExpired;\nexports.AUTH_PROVIDERS = [\n    {\n        provide: AuthHttp,\n        deps: [http_1.Http, http_1.RequestOptions],\n        useFactory: function (http, options) {\n            return new AuthHttp(new AuthConfig(), http, options);\n        }\n    }\n];\nfunction provideAuth(config) {\n    return [\n        {\n            provide: AuthHttp,\n            deps: [http_1.Http, http_1.RequestOptions],\n            useFactory: function (http, options) {\n                return new AuthHttp(new AuthConfig(config), http, options);\n            }\n        }\n    ];\n}\nexports.provideAuth = provideAuth;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\nfunction toObject(val) {\n    if (val === null || val === undefined) {\n        throw new TypeError('Object.assign cannot be called with null or undefined');\n    }\n    return Object(val);\n}\nfunction objectAssign(target) {\n    var source = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        source[_i - 1] = arguments[_i];\n    }\n    var from;\n    var to = toObject(target);\n    var symbols;\n    for (var s = 1; s < arguments.length; s++) {\n        from = Object(arguments[s]);\n        for (var key in from) {\n            if (hasOwnProperty.call(from, key)) {\n                to[key] = from[key];\n            }\n        }\n        if (Object.getOwnPropertySymbols) {\n            symbols = Object.getOwnPropertySymbols(from);\n            for (var i = 0; i < symbols.length; i++) {\n                if (propIsEnumerable.call(from, symbols[i])) {\n                    to[symbols[i]] = from[symbols[i]];\n                }\n            }\n        }\n    }\n    return to;\n}\n/**\n * Module for angular2-jwt\n * @experimental\n */\nvar AuthModule = (function () {\n    function AuthModule(parentModule) {\n        if (parentModule) {\n            throw new Error('AuthModule is already loaded. Import it in the AppModule only');\n        }\n    }\n    AuthModule.forRoot = function (config) {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                { provide: AuthConfig, useValue: config }\n            ]\n        };\n    };\n    AuthModule = __decorate([\n        core_1.NgModule({\n            imports: [http_1.HttpModule],\n            providers: [AuthHttp, JwtHelper]\n        }),\n        __param(0, core_1.Optional()),\n        __param(0, core_1.SkipSelf()), \n        __metadata('design:paramtypes', [AuthModule])\n    ], AuthModule);\n    return AuthModule;\n}());\nexports.AuthModule = AuthModule;\n//# sourceMappingURL=angular2-jwt.js.map\n\n/***/ }),\n\n/***/ 137:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(4);\r\nvar router_1 = __webpack_require__(11);\r\nvar shared_1 = __webpack_require__(29);\r\n__webpack_require__(148);\r\nvar AppComponent = (function () {\r\n    function AppComponent(auth, router) {\r\n        var _this = this;\r\n        this.auth = auth;\r\n        this.router = router;\r\n        this.url = 'https://github.com/CLTracker';\r\n        this.title = 'hello';\r\n        this.loading = false;\r\n        this.router.events.subscribe(function (event) {\r\n            _this.navigationInterceptor(event);\r\n        });\r\n        // get jquery handles to body\r\n        var $window = $(window), $body = $('body');\r\n        // Disable animations/transitions until the page has loaded.\r\n        $body.addClass('is-loading');\r\n        // Remove loading class once DOM is loaded, so we can trigger the\r\n        // intro animations\r\n        $window.on('load', function () {\r\n            window.setTimeout(function () {\r\n                $body.removeClass('is-loading');\r\n            }, 100);\r\n        });\r\n    }\r\n    Object.defineProperty(AppComponent.prototype, \"perms\", {\r\n        get: function () {\r\n            if (this.auth.userProfile) {\r\n                return this.auth.userProfile.userType;\r\n            }\r\n            else {\r\n                return '';\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    AppComponent.prototype.ngAfterViewInit = function () {\r\n        // Menu initialization. Since the menu element is dynamic (does not exist at startup, since it is a decendent of the\r\n        // angular zone) we need to initialize it's jquery after the view is finished rendering. The code below will init the\r\n        // menu so that it properly propagates.\r\n        // get reference to body and #menu element\r\n        var $menu = $('#menu');\r\n        var $body = $('body');\r\n        var $window = $(window);\r\n        var $header = $('#header');\r\n        var $banner = $('#banner');\r\n        // Header.\r\n        if (skel.vars.IEVersion < 9)\r\n            $header.removeClass('alt');\r\n        if ($banner.length > 0\r\n            && $header.hasClass('alt')) {\r\n            $window.on('resize', function () { $window.trigger('scroll'); });\r\n            $banner.scrollex({\r\n                bottom: $header.outerHeight(),\r\n                terminate: function () { $header.removeClass('alt'); },\r\n                enter: function () { $header.addClass('alt'); },\r\n                leave: function () { $header.removeClass('alt'); }\r\n            });\r\n        }\r\n        // Stops the menu from being opened again.\r\n        $menu._locked = false;\r\n        $menu._lock = function () {\r\n            if ($menu._locked) {\r\n                return false;\r\n            }\r\n            $menu._locked = true;\r\n            window.setTimeout(function () {\r\n                $menu._locked = false;\r\n            }, 350);\r\n            return true;\r\n        };\r\n        // grabs a lock then displays the menu\r\n        $menu._show = function () {\r\n            if ($menu._lock())\r\n                $body.addClass('is-menu-visible');\r\n        };\r\n        // removes a lock then hides the menu\r\n        $menu._hide = function () {\r\n            if ($menu._lock())\r\n                $body.removeClass('is-menu-visible');\r\n        };\r\n        // same thing as above, alternate function\r\n        $menu._toggle = function () {\r\n            if ($menu._lock())\r\n                $body.toggleClass('is-menu-visible');\r\n        };\r\n        $menu\r\n            .appendTo($body)\r\n            .on('click', function (event) {\r\n            // prevent element from bubbling up propagation tree\r\n            event.stopPropagation();\r\n            // hide\r\n            $menu._hide();\r\n        })\r\n            .find('.inner')\r\n            .on('click', '.close', function (event) {\r\n            // stop all dat propagation\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            event.stopImmediatePropagation();\r\n            // hide\r\n            $menu._hide();\r\n        })\r\n            .on('click', function (event) {\r\n            // we really hate propagation if you haven't noticed\r\n            event.stopPropagation();\r\n        })\r\n            .on('click', 'a', function (event) {\r\n            // TODO use angular router here instead of jquery href\r\n            if ($(this).attr('href')) {\r\n                var href_1 = $(this).attr('href');\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                // hide\r\n                $menu._hide();\r\n                // redirect\r\n                window.setTimeout(function () {\r\n                    window.location.href = href_1;\r\n                }, 350);\r\n            }\r\n        });\r\n        $body\r\n            .on('click', 'a[href=\"#menu\"]', function (event) {\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n            // toggle.\r\n            $menu._toggle();\r\n        })\r\n            .on('keydown', function (event) {\r\n            // Hide on escape.\r\n            if (event.keyCode == 27)\r\n                $menu._hide();\r\n        });\r\n    };\r\n    AppComponent.prototype.navigationInterceptor = function (event) {\r\n        if (event instanceof router_1.NavigationStart) {\r\n            this.loading = true;\r\n        }\r\n        if (event instanceof router_1.NavigationEnd) {\r\n            this.loading = false;\r\n        }\r\n        // Set loading state to false in both of the below events to hide the spinner in case a request fails\r\n        if (event instanceof router_1.NavigationCancel) {\r\n            this.loading = false;\r\n        }\r\n        if (event instanceof router_1.NavigationError) {\r\n            this.loading = false;\r\n        }\r\n    };\r\n    AppComponent.prototype.gotoProfile = function () {\r\n        if (this.auth.userProfile.user_metadata && this.auth.userProfile.user_metadata.permissions) {\r\n            this.router.navigate([\r\n                this.auth.userProfile.user_metadata.permissions,\r\n                'profile'\r\n            ]);\r\n        }\r\n        else {\r\n            console.log('user has no permissions but is logged in?');\r\n        }\r\n    };\r\n    return AppComponent;\r\n}());\r\nAppComponent = __decorate([\r\n    core_1.Component({\r\n        selector: 'my-app',\r\n        template: __webpack_require__(155),\r\n        styles: [__webpack_require__(152)]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [shared_1.Auth, router_1.Router])\r\n], AppComponent);\r\nexports.AppComponent = AppComponent;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40)))\n\n/***/ }),\n\n/***/ 138:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar router_1 = __webpack_require__(11);\r\nvar home_component_1 = __webpack_require__(63);\r\nvar about_component_1 = __webpack_require__(62);\r\nvar shared_1 = __webpack_require__(29);\r\n// TODO: implement these routes\r\nvar routes = [\r\n    { path: '', component: home_component_1.HomeComponent },\r\n    { path: 'org/profile', loadChildren: function () { return new Promise(function (resolve) { __webpack_require__.e/* require.ensure */(0).then((function (require) { resolve(__webpack_require__(399)['OrganizerProfileModule']); }).bind(null, __webpack_require__)).catch(__webpack_require__.oe); }); } },\r\n    { path: 'xhb/profile', loadChildren: function () { return new Promise(function (resolve) { __webpack_require__.e/* require.ensure */(1).then((function (require) { resolve(__webpack_require__(396)['ExhibitorProfileModule']); }).bind(null, __webpack_require__)).catch(__webpack_require__.oe); }); } },\r\n    { path: 'adm/profile', loadChildren: function () { return new Promise(function (resolve) { __webpack_require__.e/* require.ensure */(2).then((function (require) { resolve(__webpack_require__(395)['AdminProfileModule']); }).bind(null, __webpack_require__)).catch(__webpack_require__.oe); }); } },\r\n    { path: 'notloggedin', loadChildren: function () { return new Promise(function (resolve) { __webpack_require__.e/* require.ensure */(3).then((function (require) { resolve(__webpack_require__(398)['LoginModule']); }).bind(null, __webpack_require__)).catch(__webpack_require__.oe); }); } },\r\n    { path: 'join/:portal', canActivate: [shared_1.RouteGuard], loadChildren: function () { return new Promise(function (resolve) { __webpack_require__.e/* require.ensure */(4).then((function (require) { resolve(__webpack_require__(397)['JoinModule']); }).bind(null, __webpack_require__)).catch(__webpack_require__.oe); }); } },\r\n    { path: 'about', component: about_component_1.AboutComponent }\r\n];\r\nexports.routing = router_1.RouterModule.forRoot(routes);\r\n\n\n/***/ }),\n\n/***/ 139:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(4);\r\nvar router_1 = __webpack_require__(11);\r\nvar auth_service_1 = __webpack_require__(21);\r\nvar AdmRouteGuard = (function () {\r\n    function AdmRouteGuard(auth, router) {\r\n        this.auth = auth;\r\n        this.router = router;\r\n    }\r\n    AdmRouteGuard.prototype.canActivateChild = function (route, state) {\r\n        this.auth.refresh();\r\n        var url = state.url;\r\n        return true;\r\n    };\r\n    return AdmRouteGuard;\r\n}());\r\nAdmRouteGuard = __decorate([\r\n    core_1.Injectable(),\r\n    __metadata(\"design:paramtypes\", [auth_service_1.Auth,\r\n        router_1.Router])\r\n], AdmRouteGuard);\r\nexports.AdmRouteGuard = AdmRouteGuard;\r\n\n\n/***/ }),\n\n/***/ 140:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(4);\r\nvar router_1 = __webpack_require__(11);\r\nvar auth_service_1 = __webpack_require__(21);\r\nvar RouteGuard = (function () {\r\n    function RouteGuard(router, auth) {\r\n        this.router = router;\r\n        this.auth = auth;\r\n    }\r\n    RouteGuard.prototype.canActivate = function (route, state) {\r\n        // This function protects the 'join' router by checking to make sure that\r\n        // if the user is at the join page, they actually belong there and should \r\n        // not be redirected\r\n        var url = state.url;\r\n        if (!this.auth.authenticated()) {\r\n            // redirect away from /join and into /notloggedin\r\n            this.router.navigate(['/notloggedin']);\r\n            return false;\r\n        }\r\n        // otherwise, user is authenticated so let them through\r\n        return true;\r\n    };\r\n    return RouteGuard;\r\n}());\r\nRouteGuard = __decorate([\r\n    core_1.Injectable(),\r\n    __metadata(\"design:paramtypes\", [router_1.Router, auth_service_1.Auth])\r\n], RouteGuard);\r\nexports.RouteGuard = RouteGuard;\r\n\n\n/***/ }),\n\n/***/ 141:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(4);\r\nvar router_1 = __webpack_require__(11);\r\nvar auth_service_1 = __webpack_require__(21);\r\nvar OrgRouteGuard = (function () {\r\n    function OrgRouteGuard(auth, router) {\r\n        this.auth = auth;\r\n        this.router = router;\r\n    }\r\n    OrgRouteGuard.prototype.hasOrg = function () {\r\n        return this.auth.userProfile;\r\n    };\r\n    OrgRouteGuard.prototype.hasPermissions = function () {\r\n        return this.auth.userProfile && this.auth.userProfile.userType === 'org';\r\n    };\r\n    OrgRouteGuard.prototype.canActivateChild = function (route, state) {\r\n        // TODO: change from Auth0 database to our own database\r\n        this.auth.refresh();\r\n        var url = state.url.split('/');\r\n        // if user is no longer signed in\r\n        if (!this.auth.authenticated()) {\r\n            this.router.navigate(['/notloggedin']);\r\n            return false;\r\n        }\r\n        // if the user doesn't have an organization yet, redirect them\r\n        if (!this.hasOrg()) {\r\n            this.router.navigate(['/join', url[1]]);\r\n            return false;\r\n        }\r\n        // if the user has permissions but they aren't as an exhibitor, do not allow\r\n        if (!this.hasPermissions()) {\r\n            this.router.navigate(['']);\r\n            return false;\r\n        }\r\n        // otherwise, user has is logged in and has an organization, so we let them through\r\n        return true;\r\n    };\r\n    return OrgRouteGuard;\r\n}());\r\nOrgRouteGuard = __decorate([\r\n    core_1.Injectable(),\r\n    __metadata(\"design:paramtypes\", [auth_service_1.Auth,\r\n        router_1.Router])\r\n], OrgRouteGuard);\r\nexports.OrgRouteGuard = OrgRouteGuard;\r\n\n\n/***/ }),\n\n/***/ 142:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(4);\r\nvar router_1 = __webpack_require__(11);\r\nvar auth_service_1 = __webpack_require__(21);\r\nvar XhbRouteGuard = (function () {\r\n    function XhbRouteGuard(auth, router) {\r\n        this.auth = auth;\r\n        this.router = router;\r\n    }\r\n    XhbRouteGuard.prototype.hasOrg = function () {\r\n        return this.auth.userProfile;\r\n    };\r\n    XhbRouteGuard.prototype.hasPermissions = function () {\r\n        return this.auth.userProfile && this.auth.userProfile.userType === 'xhb';\r\n    };\r\n    XhbRouteGuard.prototype.canActivateChild = function (route, state) {\r\n        // TODO: change from Auth0 database to our own database\r\n        this.auth.refresh();\r\n        var url = state.url.split('/');\r\n        // if user is no longer signed in\r\n        if (!this.auth.authenticated()) {\r\n            this.router.navigate(['/notloggedin']);\r\n            return false;\r\n        }\r\n        // if the user doesn't have an organization yet, redirect them\r\n        if (!this.hasOrg()) {\r\n            this.router.navigate(['/join', url[1]]);\r\n            return false;\r\n        }\r\n        // if the user has permissions but they aren't as an exhibitor, do not allow\r\n        if (!this.hasPermissions()) {\r\n            this.router.navigate(['']);\r\n            return false;\r\n        }\r\n        // otherwise, user has is logged in and has an organization, so we let them through\r\n        return true;\r\n    };\r\n    return XhbRouteGuard;\r\n}());\r\nXhbRouteGuard = __decorate([\r\n    core_1.Injectable(),\r\n    __metadata(\"design:paramtypes\", [auth_service_1.Auth,\r\n        router_1.Router])\r\n], XhbRouteGuard);\r\nexports.XhbRouteGuard = XhbRouteGuard;\r\n\n\n/***/ }),\n\n/***/ 143:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(4);\r\nvar platform_browser_dynamic_1 = __webpack_require__(39);\r\nvar app_module_1 = __webpack_require__(113);\r\n// depending on the env mode, enable prod mode or add debugging modules\r\nif (true) {\r\n    core_1.enableProdMode();\r\n}\r\nfunction main() {\r\n    return platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule).then(function (MODULE_REF) { if (false) {\r\n        module[\"hot\"][\"accept\"]();\r\n        if (MODULE_REF.instance[\"hmrOnInit\"]) {\r\n            module[\"hot\"][\"data\"] && MODULE_REF.instance[\"hmrOnInit\"](module[\"hot\"][\"data\"]);\r\n        }\r\n        if (MODULE_REF.instance[\"hmrOnStatus\"]) {\r\n            module[\"hot\"][\"apply\"](function (status) { MODULE_REF.instance[\"hmrOnStatus\"](status); });\r\n        }\r\n        if (MODULE_REF.instance[\"hmrOnCheck\"]) {\r\n            module[\"hot\"][\"check\"](function (err, outdatedModules) { MODULE_REF.instance[\"hmrOnCheck\"](err, outdatedModules); });\r\n        }\r\n        if (MODULE_REF.instance[\"hmrOnDecline\"]) {\r\n            module[\"hot\"][\"decline\"](function (dependencies) { MODULE_REF.instance[\"hmrOnDecline\"](dependencies); });\r\n        }\r\n        module[\"hot\"][\"dispose\"](function (store) { MODULE_REF.instance[\"hmrOnDestroy\"] && MODULE_REF.instance[\"hmrOnDestroy\"](store); MODULE_REF.destroy(); MODULE_REF.instance[\"hmrAfterDestroy\"] && MODULE_REF.instance[\"hmrAfterDestroy\"](store); });\r\n    } return MODULE_REF; });\r\n}\r\nexports.main = main;\r\nif (document.readyState === 'complete') {\r\n    main();\r\n}\r\nelse {\r\n    document.addEventListener('DOMContentLoaded', main);\r\n}\r\n\n\n/***/ }),\n\n/***/ 148:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 151:\n/***/ (function(module, exports) {\n\nmodule.exports = \"* {\\n  color: #f87c08; }\\n\"\n\n/***/ }),\n\n/***/ 152:\n/***/ (function(module, exports) {\n\nmodule.exports = \"#menu ul li a {\\n  cursor: pointer; }\\n\\n#menu ul li a:hover {\\n  text-decoration: underline; }\\n\\n#spinner {\\n  position: fixed;\\n  top: 45%;\\n  left: 45%; }\\n\"\n\n/***/ }),\n\n/***/ 153:\n/***/ (function(module, exports) {\n\nmodule.exports = \".table-wrapper {\\n  -webkit-overflow-scrolling: touch;\\n  overflow-x: auto; }\\n\\ntable {\\n  margin: 0 0 _size(element-margin) 0;\\n  width: 100%; }\\n  table tbody tr {\\n    border: solid 1px _palette(border);\\n    border-left: 0;\\n    border-right: 0; }\\n    table tbody tr:nth-child(2n + 1) {\\n      background-color: _palette(border-bg); }\\n  table td {\\n    padding: 0.75em 0.75em; }\\n  table th {\\n    color: _palette(fg-bold);\\n    font-size: 0.9em;\\n    font-weight: _font(weight-bold);\\n    padding: 0 0.75em 0.75em 0.75em;\\n    text-align: left; }\\n  table thead {\\n    border-bottom: solid 2px _palette(border); }\\n  table tfoot {\\n    border-top: solid 2px _palette(border); }\\n  table.alt {\\n    border-collapse: separate; }\\n    table.alt tbody tr td {\\n      border: solid 1px _palette(border);\\n      border-left-width: 0;\\n      border-top-width: 0; }\\n      table.alt tbody tr td:first-child {\\n        border-left-width: 1px; }\\n    table.alt tbody tr:first-child td {\\n      border-top-width: 1px; }\\n    table.alt thead {\\n      border-bottom: 0; }\\n    table.alt tfoot {\\n      border-top: 0; }\\n\"\n\n/***/ }),\n\n/***/ 154:\n/***/ (function(module, exports) {\n\nmodule.exports = \"<p>\\n  About Works!\\n</p>\\n\"\n\n/***/ }),\n\n/***/ 155:\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div id=\\\"page-wrapper\\\">\\n\\n  <!-- Header -->\\n  <header id=\\\"header\\\" class=\\\"alt\\\">\\n    <h1><a href=\\\"\\\">CLTracker</a></h1>\\n    <nav>\\n      <a href=\\\"#menu\\\">Menu</a>\\n    </nav>\\n  </header>\\n\\n  <!-- Menu -->\\n  <nav id=\\\"menu\\\">\\n    <div class=\\\"inner\\\">\\n      <h2>Menu</h2>\\n      <ul class=\\\"links\\\">\\n        <li><a href=\\\"\\\">Home</a></li>\\n        <li><a href=\\\"\\\">Conventions</a></li>\\n        <li *ngIf=\\\"!auth.authenticated()\\\" ><a (click)=\\\"auth.loginOrganizer()\\\">Organizer Log In/Sign Up</a></li>\\n        <li *ngIf=\\\"!auth.authenticated()\\\" ><a (click)=\\\"auth.loginExhibitor()\\\">Exhibitor Log In/Sign Up</a></li>\\n        <li *ngIf=\\\"auth.authenticated() && perms === 'org'\\\" ><a href=\\\"/org/profile\\\">Profile</a></li>\\n        <li *ngIf=\\\"auth.authenticated() && perms === 'xhb'\\\" ><a href=\\\"/xhb/profile\\\">Profile</a></li>\\n        <li *ngIf=\\\"auth.authenticated() && perms === 'adm'\\\" ><a href=\\\"/adm/profile\\\">Profile</a></li>\\n        <li *ngIf=\\\"auth.authenticated()\\\" ><a href=\\\"\\\" (click)=\\\"auth.logout()\\\">Log Out</a></li>\\n      </ul>\\n      <a href=\\\"#\\\" class=\\\"close\\\">Close</a>\\n    </div>\\n  </nav>\\n\\n  <md-spinner *ngIf=\\\"loading\\\" id=\\\"spinner\\\"></md-spinner>\\n\\n  <!-- Content -->\\n  <router-outlet></router-outlet>\\n\\n</div>\\n \\n\"\n\n/***/ }),\n\n/***/ 156:\n/***/ (function(module, exports) {\n\nmodule.exports = \"<!-- Banner -->\\n<section id=\\\"banner\\\">\\n<div class=\\\"inner\\\">\\n  <div class=\\\"logo\\\"><img src=\\\"img/logo.png\\\"></div>\\n  <h2>Convention Logistics Tracker</h2>\\n  <p>Changing the Conference Experience</p>\\n</div>\\n</section>\\n\\n<!-- Wrapper -->\\n<section id=\\\"wrapper\\\">\\n\\n<!-- One -->\\n  <section id=\\\"one\\\" class=\\\"wrapper spotlight style1\\\">\\n    <div class=\\\"inner\\\">\\n      <a href=\\\"#\\\" class=\\\"image\\\"><img src=\\\"img/convention.jpg\\\" alt=\\\"\\\" /></a>\\n      <div class=\\\"content\\\">\\n        <h2 class=\\\"major\\\">The Problem</h2>\\n        <p>Convention planning requires exceedingly large amounts of time, labor, and money; for a city such as Las Vegas, conventions produce a sizeable amount of revenue.  According to IBIS World report on Trade Show and Conference Planning, the planning industry generates $14 billion in revenue where technology will play a key role in the growth of this industry. In order to plan and oversee a large convention such as CES or CONEXPO-CON/AGG takes the better part of a year to secure a site, organize exhibitors and contact speakers to host seminars.</p>\\n        <a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>\\n      </div>\\n    </div>\\n  </section>\\n\\n<!-- Two -->\\n  <section id=\\\"two\\\" class=\\\"wrapper alt spotlight style2\\\">\\n    <div class=\\\"inner\\\">\\n      <a href=\\\"#\\\" class=\\\"image\\\"><img src=\\\"img/paper.jpeg\\\" alt=\\\"\\\" /></a>\\n      <div class=\\\"content\\\">\\n        <h2 class=\\\"major\\\">What's out there?</h2>\\n        <p>A paper map is the current standard, but comes at a hefty cost for the event organizer. Using paper maps is a cumbersome experience for large conventions. An alternative option consists of mobile applications with possibly spotty performance during larger conventions. Additionally, these applications often take considerable development hours to produce and are not reusable solutions across different conferences.</p>\\n        <a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>\\n      </div>\\n    </div>\\n  </section>\\n\\n<!-- Three -->\\n  <section id=\\\"three\\\" class=\\\"wrapper spotlight style3\\\">\\n      <div class=\\\"inner\\\">\\n          <p></p>\\n          <img src=\\\"img/mobile_web.png\\\" alt=\\\"\\\" style=\\\"width:300px;height:450px\\\">\\n          <div class=\\\"content\\\">\\n              <h2 class=\\\"major\\\">The CLT Suite</h2>\\n              <p>Convention Logistics Tracker (CLT) aims to simplify the convention planning process; this software suite will offer programs aimed at convention organizers, exhibitors and attendees. Convention organizers will have control over exhibitor actions, the ability to adjust pricing & mapping, and scheduling. Exhibitors will be able to edit their company information through the Exhibitor Portal, plan out schedules for speakers & demonstrations, and send out real-time event updates. Attendees will have the ability to view information about various aspects about the convention including exhibitor booths, event schedules, and navigation around the convention grounds.</p>\\n              <!--<a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>-->\\n          </div>\\n      </div>\\n \\n  </section>\\n\\n<!-- Four -->\\n  <section id=\\\"four\\\" class=\\\"wrapper alt style1\\\">\\n    <div class=\\\"inner\\\">\\n      <h2 class=\\\"major\\\">Features of CLT</h2>\\n        <!--<p>Cras mattis ante fermentum, malesuada neque vitae, eleifend erat. Phasellus non pulvinar era</p>-->\\n      <section class=\\\"features\\\">\\n        <article>\\n          <a href=\\\"#\\\" class=\\\"image\\\"><img src=\\\"img/pic04.jpg\\\" alt=\\\"\\\" /></a>\\n          <h3 class=\\\"major\\\">Organizer Portal</h3>\\n          <p>Separate web portal for organizers to manage mobile app announcements, vendor information, and other event logistics.</p>\\n          <!--<a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>-->\\n        </article>\\n        <article>\\n          <a href=\\\"#\\\" class=\\\"image\\\"><img src=\\\"img/pic05.jpg\\\" alt=\\\"\\\" /></a>\\n          <h3 class=\\\"major\\\">Exhibitor Portal</h3>\\n          <p>Separate web portal for exhibitors to register for your conference with your special key. Exhibitors can schedule announcements to all attendees and post a schedule. </p>\\n          <!--<a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>-->\\n        </article>\\n        <article>\\n          <a href=\\\"#\\\" class=\\\"image\\\"><img src=\\\"img/pic06.jpg\\\" alt=\\\"\\\" /></a>\\n          <h3 class=\\\"major\\\">Consumer App</h3>\\n          <p>Attendees can download your customizable mobile app where attendees can access the official map, receive announcements, and set a schedule.</p>\\n          <!--<a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>-->\\n        </article>\\n        <article>\\n          <a href=\\\"#\\\" class=\\\"image\\\"><img src=\\\"img/pic07.jpg\\\" alt=\\\"\\\" /></a>\\n          <h3 class=\\\"major\\\">Consumer Focus</h3>\\n          <p>CLT Suite Mobile App is focused on your attendees' experience to be enhanced by your awesome conference. The Mobile App allows push notifications by organiers and exhibitors, and real time updates to the mobile app. </p>\\n          <!--<a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>-->\\n        </article>\\n      </section>\\n       <ul class=\\\"actions\\\">\\n        <li><a href=\\\"#\\\" class=\\\"button\\\">See More</a></li>\\n      </ul> \\n    </div>\\n  </section>\\n\\n  <!-- Footer -->\\n  <section id=\\\"footer\\\">\\n    <div class=\\\"inner\\\">\\n      <h2 class=\\\"major\\\">Get in touch</h2>\\n      <p>Have questions or would like to request a demo? Reach out to us below.</p>\\n      <form method=\\\"post\\\" action=\\\"#\\\">\\n        <div class=\\\"field\\\">\\n          <label for=\\\"name\\\">Name</label>\\n          <input type=\\\"text\\\" name=\\\"name\\\" id=\\\"name\\\" />\\n        </div>\\n        <div class=\\\"field\\\">\\n          <label for=\\\"email\\\">Email</label>\\n          <input type=\\\"email\\\" name=\\\"email\\\" id=\\\"email\\\" />\\n        </div>\\n        <div class=\\\"field\\\">\\n          <label for=\\\"message\\\">Message</label>\\n          <textarea name=\\\"message\\\" id=\\\"message\\\" rows=\\\"4\\\"></textarea>\\n        </div>\\n        <ul class=\\\"actions\\\">\\n          <li><input type=\\\"submit\\\" value=\\\"Send Message\\\" /></li>\\n        </ul>\\n      </form>\\n      <ul class=\\\"contact\\\">\\n        <li class=\\\"fa-home\\\">\\n          Convention Logistics Tracker<br />\\n          4505 S. Maryland Pkwy<br />\\n          Las Vegas, NV 89154\\n        </li>\\n        <!--<li class=\\\"fa-phone\\\">(000) 000-0000</li>-->\\n        <li class=\\\"fa-envelope\\\"><a href=\\\"mailto:conventionlogisticstracker@gmail.com\\\">conventionlogisticstracker@gmail.com</a></li>\\n        <!--<li class=\\\"fa-twitter\\\"><a href=\\\"#\\\">twitter.com/untitled-tld</a></li>\\n        <li class=\\\"fa-facebook\\\"><a href=\\\"#\\\">facebook.com/untitled-tld</a></li>\\n        <li class=\\\"fa-instagram\\\"><a href=\\\"#\\\">instagram.com/untitled-tld</a></li>-->\\n      </ul>\\n      <ul class=\\\"copyright\\\">\\n        <li>&copy; CLT Inc. All rights reserved.</li><li>Template: <a href=\\\"http://html5up.net\\\">HTML5 UP</a></li>\\n      </ul>\\n    </div>\\n  </section>\\n\\n</section>\"\n\n/***/ }),\n\n/***/ 21:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(4);\r\nvar angular2_jwt_1 = __webpack_require__(136);\r\nvar router_1 = __webpack_require__(11);\r\nvar http_1 = __webpack_require__(19);\r\nvar prod = 'production-test';\r\nvar Auth = (function () {\r\n    function Auth(router, http) {\r\n        var _this = this;\r\n        this.router = router;\r\n        this.http = http;\r\n        this.Lock = new Auth0Lock('jyb8nxXVywA8ezS3Vin9CnEhkY3FH7fC', 'clt-global.auth0.com', {\r\n            theme: {\r\n                logo: 'http://i.imgur.com/XDKwjRv.png',\r\n                primaryColor: '#0F4c60'\r\n            },\r\n            languageDictionary: {\r\n                title: \"CLTracker\"\r\n            },\r\n        });\r\n        if (prod === 'production-test') {\r\n            this.ImageUploadUrl = 'http://cltglobal.ddns.net:5000/img';\r\n            this.UsersInfoUrl = 'http://cltglobal.ddns.net:5000/user';\r\n            this.LoginUrl = 'http://cltglobal.ddns.net:5000/login';\r\n            this.ConferenceEditUrl = 'http://cltglobal.ddns.net:5000/edit/conference/1';\r\n            this.ConferenceInfoUrl = 'http://cltglobal.ddns.net:5000/info/1';\r\n            this.ExhibitorsInfoUrl = 'http://cltglobal.ddns.net:5000/exhibitors/1';\r\n            this.ExhibitorsUsersInfoUrl = 'http://cltglobal.ddns.net:5000/user/exhibitors/1';\r\n            this.ExhibitorEditUrl = 'http://cltglobal.ddns.net:5000/edit/exhibitors/1';\r\n            this.NewsInfoUrl = 'http://cltglobal.ddns.net:5000/news/1';\r\n            this.NewsEditUrl = 'http://cltglobal.ddns.net:5000/edit/news/1';\r\n            this.ScheduleInfoUrl = 'http://cltglobal.ddns.net:5000/schedule/1';\r\n            this.ScheduleEditUrl = 'http://cltglobal.ddns.net:5000/edit/schedule/1';\r\n        }\r\n        else if (prod === 'production') {\r\n            this.ImageUploadUrl = 'http://cltglobal.ddns.net:8080/img';\r\n            this.UsersInfoUrl = 'http://cltglobal.ddns.net:8080/user';\r\n            this.LoginUrl = 'http://cltglobal.ddns.net:8080/login';\r\n            this.ConferenceEditUrl = 'http://cltglobal.ddns.net:8080/edit/conference/1';\r\n            this.ConferenceInfoUrl = 'http://cltglobal.ddns.net:8080/info/1';\r\n            this.ExhibitorsInfoUrl = 'http://cltglobal.ddns.net:8080/exhibitors/1';\r\n            this.ExhibitorsUsersInfoUrl = 'http://cltglobal.ddns.net:8080/user/exhibitors/1';\r\n            this.ExhibitorEditUrl = 'http://cltglobal.ddns.net:8080/edit/exhibitors/1';\r\n            this.NewsInfoUrl = 'http://cltglobal.ddns.net:8080/news/1';\r\n            this.NewsEditUrl = 'http://cltglobal.ddns.net:8080/edit/news/1';\r\n            this.ScheduleInfoUrl = 'http://cltglobal.ddns.net:8080/schedule/1';\r\n            this.ScheduleEditUrl = 'http://cltglobal.ddns.net:8080/edit/schedule/1';\r\n        }\r\n        else {\r\n            this.ImageUploadUrl = 'http://localhost:5000/img';\r\n            this.UsersInfoUrl = 'http://localhost:5000/user';\r\n            this.LoginUrl = 'http://localhost:5000/login';\r\n            this.ConferenceEditUrl = 'http://localhost:5000/edit/conference/1';\r\n            this.ConferenceInfoUrl = 'http://localhost:5000/info/1';\r\n            this.ExhibitorsInfoUrl = 'http://localhost:5000/exhibitors/1';\r\n            this.ExhibitorsUsersInfoUrl = 'http://localhost:5000/user/exhibitors/1';\r\n            this.ExhibitorEditUrl = 'http://localhost:5000/edit/exhibitors/1';\r\n            this.NewsInfoUrl = 'http://localhost:5000/news/1';\r\n            this.NewsEditUrl = 'http://localhost:5000/edit/news/1';\r\n            this.ScheduleInfoUrl = 'http://localhost:5000/schedule/1';\r\n            this.ScheduleEditUrl = 'http://localhost:5000/edit/schedule/1';\r\n        }\r\n        this.authToken = JSON.parse(sessionStorage.getItem('authToken'));\r\n        this.userProfile = JSON.parse(localStorage.getItem('profile'));\r\n        // callback event for authenticated users\r\n        this.Lock.on('authenticated', function (authResult) {\r\n            localStorage.setItem('id_token', authResult.idToken);\r\n            _this.Lock.getProfile(authResult.idToken, function (error, profile) {\r\n                if (error) {\r\n                    alert(error);\r\n                    return;\r\n                }\r\n                _this.authToken = profile;\r\n                sessionStorage.setItem('authToken', JSON.stringify(profile));\r\n                var redirectUrl = JSON.parse(sessionStorage.getItem('redir'));\r\n                _this.router.navigate(redirectUrl);\r\n            });\r\n        });\r\n    }\r\n    Auth.prototype.setProfile = function (profile) {\r\n        localStorage.setItem('profile', JSON.stringify(profile));\r\n        this.userProfile = profile;\r\n    };\r\n    Auth.prototype.loginOrganizer = function () {\r\n        sessionStorage.setItem('redir', JSON.stringify(['org', 'profile']));\r\n        this.Lock.show();\r\n    };\r\n    Auth.prototype.loginExhibitor = function () {\r\n        sessionStorage.setItem('redir', JSON.stringify(['xhb', 'profile']));\r\n        this.Lock.show();\r\n    };\r\n    Auth.prototype.loginAdministrator = function () {\r\n        sessionStorage.setItem('redir', JSON.stringify(['adm', 'profile']));\r\n        this.Lock.show();\r\n    };\r\n    Auth.prototype.refresh = function () {\r\n        this.userProfile = JSON.parse(localStorage.getItem('profile'));\r\n    };\r\n    Auth.prototype.getConferenceInfo = function () {\r\n        return this.http\r\n            .get(\"\" + this.ConferenceInfoUrl)\r\n            .map(function (r) { return r.json(); });\r\n    };\r\n    Auth.prototype.addExhibitor = function (data) {\r\n        return this.http\r\n            .post(\"\" + this.ExhibitorEditUrl, data)\r\n            .map(function (r) { return r.json(); });\r\n    };\r\n    Auth.prototype.getExhibitors = function () {\r\n        return this.http\r\n            .get(\"\" + this.ExhibitorsUsersInfoUrl)\r\n            .map(function (r) { return r.json(); });\r\n    };\r\n    Auth.prototype.getNews = function () {\r\n        return this.http\r\n            .get(\"\" + this.NewsInfoUrl)\r\n            .map(function (r) { return r.json(); });\r\n    };\r\n    Auth.prototype.patchConference = function (data) {\r\n        return this.http\r\n            .patch(\"\" + this.ConferenceEditUrl, data)\r\n            .map(function (r) { return r.json(); });\r\n    };\r\n    Auth.prototype.postLogin = function (data) {\r\n        return this.http\r\n            .post(\"\" + this.LoginUrl, data)\r\n            .map(function (r) { return r.json(); });\r\n    };\r\n    Auth.prototype.postNewsItem = function (data) {\r\n        return this.http\r\n            .post(\"\" + this.NewsEditUrl, data)\r\n            .map(function (r) { return r.json(); });\r\n    };\r\n    Auth.prototype.deleteNewsItem = function (data) {\r\n        return this.http\r\n            .patch(\"\" + this.NewsEditUrl, data)\r\n            .map(function (r) { return r.json(); });\r\n    };\r\n    Auth.prototype.modifyNewsItem = function (data) {\r\n        return this.http\r\n            .put(\"\" + this.NewsEditUrl, data)\r\n            .map(function (r) { return r.json(); });\r\n    };\r\n    Auth.prototype.getScheduleEvents = function () {\r\n        return this.http\r\n            .get(\"\" + this.ScheduleInfoUrl)\r\n            .map(function (r) { return r.json(); });\r\n    };\r\n    Auth.prototype.patchScheduleEvents = function (data) {\r\n        return this.http\r\n            .patch(\"\" + this.ScheduleEditUrl, data)\r\n            .map(function (r) { return r.json(); });\r\n    };\r\n    Auth.prototype.authenticated = function () {\r\n        // check if JWT is expired\r\n        return angular2_jwt_1.tokenNotExpired();\r\n    };\r\n    Auth.prototype.logout = function () {\r\n        // removes id token from storage so user is no longer authenticated\r\n        localStorage.removeItem('id_token');\r\n        localStorage.removeItem('profile');\r\n        this.userProfile = undefined;\r\n    };\r\n    return Auth;\r\n}());\r\nAuth = __decorate([\r\n    core_1.Injectable(),\r\n    __metadata(\"design:paramtypes\", [router_1.Router, http_1.Http])\r\n], Auth);\r\nexports.Auth = Auth;\r\n\n\n/***/ }),\n\n/***/ 29:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(21));\r\n__export(__webpack_require__(140));\r\n__export(__webpack_require__(139));\r\n__export(__webpack_require__(142));\r\n__export(__webpack_require__(141));\r\n\n\n/***/ }),\n\n/***/ 394:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* jquery.scrollex v0.2.1 | (c) @ajlkn | github.com/ajlkn/jquery.scrollex | MIT licensed */\r\n!function(t){function e(t,e,n){return\"string\"==typeof t&&(\"%\"==t.slice(-1)?t=parseInt(t.substring(0,t.length-1))/100*e:\"vh\"==t.slice(-2)?t=parseInt(t.substring(0,t.length-2))/100*n:\"px\"==t.slice(-2)&&(t=parseInt(t.substring(0,t.length-2)))),t}var n=t(window),i=1,o={};n.on(\"scroll\",function(){var e=n.scrollTop();t.map(o,function(t){window.clearTimeout(t.timeoutId),t.timeoutId=window.setTimeout(function(){t.handler(e)},t.options.delay)})}).on(\"load\",function(){n.trigger(\"scroll\")}),jQuery.fn.scrollex=function(l){var s=t(this);if(0==this.length)return s;if(this.length>1){for(var r=0;r<this.length;r++)t(this[r]).scrollex(l);return s}if(s.data(\"_scrollexId\"))return s;var a,u,h,c,p;switch(a=i++,u=jQuery.extend({top:0,bottom:0,delay:0,mode:\"default\",enter:null,leave:null,initialize:null,terminate:null,scroll:null},l),u.mode){case\"top\":h=function(t,e,n,i,o){return t>=i&&o>=t};break;case\"bottom\":h=function(t,e,n,i,o){return n>=i&&o>=n};break;case\"middle\":h=function(t,e,n,i,o){return e>=i&&o>=e};break;case\"top-only\":h=function(t,e,n,i,o){return i>=t&&n>=i};break;case\"bottom-only\":h=function(t,e,n,i,o){return n>=o&&o>=t};break;default:case\"default\":h=function(t,e,n,i,o){return n>=i&&o>=t}}return c=function(t){var i,o,l,s,r,a,u=this.state,h=!1,c=this.$element.offset();i=n.height(),o=t+i/2,l=t+i,s=this.$element.outerHeight(),r=c.top+e(this.options.top,s,i),a=c.top+s-e(this.options.bottom,s,i),h=this.test(t,o,l,r,a),h!=u&&(this.state=h,h?this.options.enter&&this.options.enter.apply(this.element):this.options.leave&&this.options.leave.apply(this.element)),this.options.scroll&&this.options.scroll.apply(this.element,[(o-r)/(a-r)])},p={id:a,options:u,test:h,handler:c,state:null,element:this,$element:s,timeoutId:null},o[a]=p,s.data(\"_scrollexId\",p.id),p.options.initialize&&p.options.initialize.apply(this),s},jQuery.fn.unscrollex=function(){var e=t(this);if(0==this.length)return e;if(this.length>1){for(var n=0;n<this.length;n++)t(this[n]).unscrollex();return e}var i,l;return(i=e.data(\"_scrollexId\"))?(l=o[i],window.clearTimeout(l.timeoutId),delete o[i],e.removeData(\"_scrollexId\"),l.options.terminate&&l.options.terminate.apply(this),e):e}}(jQuery);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40)))\n\n/***/ }),\n\n/***/ 53:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_observable_forkJoin__ = __webpack_require__(82);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_observable_forkJoin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_observable_forkJoin__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_observable_fromPromise__ = __webpack_require__(45);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_observable_fromPromise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_observable_fromPromise__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_operator_map__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_operator_map__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_platform_browser__ = __webpack_require__(12);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractControlDirective\", function() { return AbstractControlDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractFormGroupDirective\", function() { return AbstractFormGroupDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CheckboxControlValueAccessor\", function() { return CheckboxControlValueAccessor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ControlContainer\", function() { return ControlContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NG_VALUE_ACCESSOR\", function() { return NG_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COMPOSITION_BUFFER_MODE\", function() { return COMPOSITION_BUFFER_MODE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultValueAccessor\", function() { return DefaultValueAccessor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgControl\", function() { return NgControl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgControlStatus\", function() { return NgControlStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgControlStatusGroup\", function() { return NgControlStatusGroup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgForm\", function() { return NgForm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgModel\", function() { return NgModel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgModelGroup\", function() { return NgModelGroup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RadioControlValueAccessor\", function() { return RadioControlValueAccessor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormControlDirective\", function() { return FormControlDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormControlName\", function() { return FormControlName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormGroupDirective\", function() { return FormGroupDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormArrayName\", function() { return FormArrayName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormGroupName\", function() { return FormGroupName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgSelectOption\", function() { return NgSelectOption; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SelectControlValueAccessor\", function() { return SelectControlValueAccessor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SelectMultipleControlValueAccessor\", function() { return SelectMultipleControlValueAccessor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CheckboxRequiredValidator\", function() { return CheckboxRequiredValidator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EmailValidator\", function() { return EmailValidator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MaxLengthValidator\", function() { return MaxLengthValidator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MinLengthValidator\", function() { return MinLengthValidator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PatternValidator\", function() { return PatternValidator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RequiredValidator\", function() { return RequiredValidator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormBuilder\", function() { return FormBuilder; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractControl\", function() { return AbstractControl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormArray\", function() { return FormArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormControl\", function() { return FormControl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormGroup\", function() { return FormGroup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NG_ASYNC_VALIDATORS\", function() { return NG_ASYNC_VALIDATORS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NG_VALIDATORS\", function() { return NG_VALIDATORS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Validators\", function() { return Validators; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return VERSION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormsModule\", function() { return FormsModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ReactiveFormsModule\", function() { return ReactiveFormsModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵba\", function() { return InternalFormsSharedModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵz\", function() { return REACTIVE_DRIVEN_DIRECTIVES; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵx\", function() { return SHARED_FORM_DIRECTIVES; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵy\", function() { return TEMPLATE_DRIVEN_DIRECTIVES; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵa\", function() { return CHECKBOX_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵb\", function() { return DEFAULT_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵc\", function() { return AbstractControlStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵd\", function() { return ngControlStatusHost; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵe\", function() { return formDirectiveProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵf\", function() { return formControlBinding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵg\", function() { return modelGroupProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵbf\", function() { return NgNoValidate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵbb\", function() { return NUMBER_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵbc\", function() { return NumberValueAccessor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵh\", function() { return RADIO_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵi\", function() { return RadioControlRegistry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵbd\", function() { return RANGE_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵbe\", function() { return RangeValueAccessor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵj\", function() { return formControlBinding$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵk\", function() { return controlNameBinding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵl\", function() { return formDirectiveProvider$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵn\", function() { return formArrayNameProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵm\", function() { return formGroupNameProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵo\", function() { return SELECT_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵq\", function() { return NgSelectMultipleOption; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵp\", function() { return SELECT_MULTIPLE_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵs\", function() { return CHECKBOX_REQUIRED_VALIDATOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵt\", function() { return EMAIL_VALIDATOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵv\", function() { return MAX_LENGTH_VALIDATOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵu\", function() { return MIN_LENGTH_VALIDATOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵw\", function() { return PATTERN_VALIDATOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵr\", function() { return REQUIRED_VALIDATOR; });\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * @license Angular v4.0.0\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base class for control directives.\n *\n * Only used internally in the forms module.\n *\n * \\@stable\n * @abstract\n */\nvar AbstractControlDirective = (function () {\n    function AbstractControlDirective() {\n    }\n    Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { throw new Error('unimplemented'); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.value : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.valid : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.invalid : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.pending : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.errors : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.pristine : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.dirty : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.touched : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.untouched : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.disabled : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.enabled : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.statusChanges : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.valueChanges : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.reset = function (value) {\n        if (value === void 0) { value = undefined; }\n        if (this.control)\n            this.control.reset(value);\n    };\n    /**\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.hasError = function (errorCode, path) {\n        if (path === void 0) { path = null; }\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    };\n    /**\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.getError = function (errorCode, path) {\n        if (path === void 0) { path = null; }\n        return this.control ? this.control.getError(errorCode, path) : null;\n    };\n    return AbstractControlDirective;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A directive that contains multiple {\\@link NgControl}s.\n *\n * Only used by the forms module.\n *\n * \\@stable\n */\nvar ControlContainer = (function (_super) {\n    __extends(ControlContainer, _super);\n    function ControlContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n        /**\n         * Get the form to which this container belongs.\n         * @return {?}\n         */\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ControlContainer.prototype, \"path\", {\n        /**\n         * Get the path to this container.\n         * @return {?}\n         */\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    return ControlContainer;\n}(AbstractControlDirective));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmptyInputValue(value) {\n    // we don't check for string here so it also works with arrays\n    return value == null || value.length === 0;\n}\n/**\n * Providers for validators to be used for {\\@link FormControl}s in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * ### Example\n *\n * {\\@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n * \\@stable\n */\nvar NG_VALIDATORS = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"InjectionToken\"]('NgValidators');\n/**\n * Providers for asynchronous validators to be used for {\\@link FormControl}s\n * in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * See {\\@link NG_VALIDATORS} for more details.\n *\n * \\@stable\n */\nvar NG_ASYNC_VALIDATORS = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"InjectionToken\"]('NgAsyncValidators');\nvar EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n/**\n * Provides a set of validators used by form controls.\n *\n * A validator is a function that processes a {\\@link FormControl} or collection of\n * controls and returns a map of errors. A null map means that validation has passed.\n *\n * ### Example\n *\n * ```typescript\n * var loginControl = new FormControl(\"\", Validators.required)\n * ```\n *\n * \\@stable\n */\nvar Validators = (function () {\n    function Validators() {\n    }\n    /**\n     * Validator that requires controls to have a non-empty value.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.required = function (control) {\n        return isEmptyInputValue(control.value) ? { 'required': true } : null;\n    };\n    /**\n     * Validator that requires control value to be true.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.requiredTrue = function (control) {\n        return control.value === true ? null : { 'required': true };\n    };\n    /**\n     * Validator that performs email validation.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.email = function (control) {\n        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n    };\n    /**\n     * Validator that requires controls to have a value of a minimum length.\n     * @param {?} minLength\n     * @return {?}\n     */\n    Validators.minLength = function (minLength) {\n        return function (control) {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\n            return length < minLength ?\n                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a value of a maximum length.\n     * @param {?} maxLength\n     * @return {?}\n     */\n    Validators.maxLength = function (maxLength) {\n        return function (control) {\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\n            return length > maxLength ?\n                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                null;\n        };\n    };\n    /**\n     * Validator that requires a control to match a regex to its value.\n     * @param {?} pattern\n     * @return {?}\n     */\n    Validators.pattern = function (pattern) {\n        if (!pattern)\n            return Validators.nullValidator;\n        var /** @type {?} */ regex;\n        var /** @type {?} */ regexStr;\n        if (typeof pattern === 'string') {\n            regexStr = \"^\" + pattern + \"$\";\n            regex = new RegExp(regexStr);\n        }\n        else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        return function (control) {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = control.value;\n            return regex.test(value) ? null :\n                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n        };\n    };\n    /**\n     * No-op validator.\n     * @param {?} c\n     * @return {?}\n     */\n    Validators.nullValidator = function (c) { return null; };\n    /**\n     * Compose multiple validators into a single function that returns the union\n     * of the individual error maps.\n     * @param {?} validators\n     * @return {?}\n     */\n    Validators.compose = function (validators) {\n        if (!validators)\n            return null;\n        var /** @type {?} */ presentValidators = validators.filter(isPresent);\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            return _mergeErrors(_executeValidators(control, presentValidators));\n        };\n    };\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    Validators.composeAsync = function (validators) {\n        if (!validators)\n            return null;\n        var /** @type {?} */ presentValidators = validators.filter(isPresent);\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            var /** @type {?} */ observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n            return __WEBPACK_IMPORTED_MODULE_3_rxjs_operator_map__[\"map\"].call(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_rxjs_observable_forkJoin__[\"forkJoin\"])(observables), _mergeErrors);\n        };\n    };\n    return Validators;\n}());\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPresent(o) {\n    return o != null;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction toObservable(r) {\n    var /** @type {?} */ obs = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵisPromise\"])(r) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_rxjs_observable_fromPromise__[\"fromPromise\"])(r) : r;\n    if (!(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵisObservable\"])(obs))) {\n        throw new Error(\"Expected validator to return Promise or Observable.\");\n    }\n    return obs;\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeValidators(control, validators) {\n    return validators.map(function (v) { return v(control); });\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeAsyncValidators(control, validators) {\n    return validators.map(function (v) { return v(control); });\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\nfunction _mergeErrors(arrayOfErrors) {\n    var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\n        return errors != null ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵmerge\"])(res, errors) : res;\n    }, {});\n    return Object.keys(res).length === 0 ? null : res;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a {\\@link ControlValueAccessor} for form controls.\n *\n * See {\\@link DefaultValueAccessor} for how to implement one.\n * \\@stable\n */\nvar NG_VALUE_ACCESSOR = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"InjectionToken\"]('NgValueAccessor');\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return CheckboxControlValueAccessor; }),\n    multi: true,\n};\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n *  ### Example\n *  ```\n *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n *  ```\n *\n *  \\@stable\n */\nvar CheckboxControlValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function CheckboxControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    return CheckboxControlValueAccessor;\n}());\nCheckboxControlValueAccessor.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                providers: [CHECKBOX_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nCheckboxControlValueAccessor.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return DefaultValueAccessor; }),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\nfunction _isAndroid() {\n    var /** @type {?} */ userAgent = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__angular_platform_browser__[\"ɵgetDOM\"])() ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__angular_platform_browser__[\"ɵgetDOM\"])().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * Turn this mode on if you want form directives to buffer IME input until compositionend\n * \\@experimental\n */\nvar COMPOSITION_BUFFER_MODE = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"InjectionToken\"]('CompositionEventMode');\n/**\n * The default accessor for writing a value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"text\" name=\"searchQuery\" ngModel>\n *  ```\n *\n *  \\@stable\n */\nvar DefaultValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _compositionMode\n     */\n    function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.writeValue = function (value) {\n        var /** @type {?} */ normalizedValue = value == null ? '' : value;\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._handleInput = function (value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._compositionStart = function () { this._composing = true; };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._compositionEnd = function (value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    };\n    return DefaultValueAccessor;\n}());\nDefaultValueAccessor.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                // TODO: vsavkin replace the above selector with the one below it once\n                // https://github.com/angular/angular/issues/3011 is implemented\n                // selector: '[ngModel],[formControl],[formControlName]',\n                host: {\n                    '(input)': '_handleInput($event.target.value)',\n                    '(blur)': 'onTouched()',\n                    '(compositionstart)': '_compositionStart()',\n                    '(compositionend)': '_compositionEnd($event.target.value)'\n                },\n                providers: [DEFAULT_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nDefaultValueAccessor.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [COMPOSITION_BUFFER_MODE,] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeValidator(validator) {\n    if (((validator)).validate) {\n        return function (c) { return ((validator)).validate(c); };\n    }\n    else {\n        return (validator);\n    }\n}\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeAsyncValidator(validator) {\n    if (((validator)).validate) {\n        return function (c) { return ((validator)).validate(c); };\n    }\n    else {\n        return (validator);\n    }\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return NumberValueAccessor; }),\n    multi: true\n};\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"number\" [(ngModel)]=\"age\">\n *  ```\n */\nvar NumberValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function NumberValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.writeValue = function (value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        var /** @type {?} */ normalizedValue = value == null ? '' : value;\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.registerOnChange = function (fn) {\n        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    return NumberValueAccessor;\n}());\nNumberValueAccessor.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [NUMBER_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nNumberValueAccessor.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction unimplemented() {\n    throw new Error('unimplemented');\n}\n/**\n * A base class that all control directive extend.\n * It binds a {\\@link FormControl} object to a DOM element.\n *\n * Used internally by Angular forms.\n *\n * \\@stable\n * @abstract\n */\nvar NgControl = (function (_super) {\n    __extends(NgControl, _super);\n    function NgControl() {\n        var _this = _super.apply(this, arguments) || this;\n        /**\n         * \\@internal\n         */\n        _this._parent = null;\n        _this.name = null;\n        _this.valueAccessor = null;\n        /**\n         * \\@internal\n         */\n        _this._rawValidators = [];\n        /**\n         * \\@internal\n         */\n        _this._rawAsyncValidators = [];\n        return _this;\n    }\n    Object.defineProperty(NgControl.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return (unimplemented()); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return (unimplemented()); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @abstract\n     * @param {?} newValue\n     * @return {?}\n     */\n    NgControl.prototype.viewToModelUpdate = function (newValue) { };\n    return NgControl;\n}(AbstractControlDirective));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return RadioControlValueAccessor; }),\n    multi: true\n};\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\nvar RadioControlRegistry = (function () {\n    function RadioControlRegistry() {\n        this._accessors = [];\n    }\n    /**\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.add = function (control, accessor) {\n        this._accessors.push([control, accessor]);\n    };\n    /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.remove = function (accessor) {\n        for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    };\n    /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.select = function (accessor) {\n        var _this = this;\n        this._accessors.forEach(function (c) {\n            if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    };\n    /**\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    };\n    return RadioControlRegistry;\n}());\nRadioControlRegistry.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nRadioControlRegistry.ctorParameters = function () { return []; };\n/**\n * \\@whatItDoes Writes radio control values and listens to radio control changes.\n *\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n *\n * \\@howToUse\n *\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use radio buttons with form directives\n *\n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n *\n * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n *\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n *\n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n *  * **npm package**: `\\@angular/forms`\n *\n *  \\@stable\n */\nvar RadioControlValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _registry\n     * @param {?} _injector\n     */\n    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        this.onChange = function () { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.ngOnInit = function () {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.writeValue = function (value) {\n        this._state = value === this.value;\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n        var _this = this;\n        this._fn = fn;\n        this.onChange = function () {\n            fn(_this.value);\n            _this._registry.select(_this);\n        };\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype._checkName = function () {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this._throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype._throwNameError = function () {\n        throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n    };\n    return RadioControlValueAccessor;\n}());\nRadioControlValueAccessor.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                providers: [RADIO_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nRadioControlValueAccessor.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: RadioControlRegistry, },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injector\"], },\n]; };\nRadioControlValueAccessor.propDecorators = {\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'formControlName': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'value': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return RangeValueAccessor; }),\n    multi: true\n};\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"range\" [(ngModel)]=\"age\" >\n *  ```\n */\nvar RangeValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function RangeValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.writeValue = function (value) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.registerOnChange = function (fn) {\n        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    return RangeValueAccessor;\n}());\nRangeValueAccessor.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [RANGE_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nRangeValueAccessor.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return SelectControlValueAccessor; }),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return \"\" + value;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return (id + \": \" + value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * \\@whatItDoes Writes values and listens to changes on a select element.\n *\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n *\n * \\@howToUse\n *\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use select controls with form directives\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n *\n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n *\n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Caveat: Option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * #### Syntax\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar SelectControlValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function SelectControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._compareWith = __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵlooseIdentical\"];\n    }\n    Object.defineProperty(SelectControlValueAccessor.prototype, \"compareWith\", {\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        set: function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\n            }\n            this._compareWith = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.writeValue = function (value) {\n        this.value = value;\n        var /** @type {?} */ id = this._getOptionId(value);\n        if (id == null) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n        }\n        var /** @type {?} */ valueString = _buildValueString(id, value);\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n        var _this = this;\n        this.onChange = function (valueString) {\n            _this.value = valueString;\n            fn(_this._getOptionValue(valueString));\n        };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._getOptionId = function (value) {\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n            var id = _a[_i];\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    };\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n        var /** @type {?} */ id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    };\n    return SelectControlValueAccessor;\n}());\nSelectControlValueAccessor.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                providers: [SELECT_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nSelectControlValueAccessor.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\nSelectControlValueAccessor.propDecorators = {\n    'compareWith': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * \\@howToUse\n *\n * See docs for {\\@link SelectControlValueAccessor} for usage examples.\n *\n * \\@stable\n */\nvar NgSelectOption = (function () {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    function NgSelectOption(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._select == null)\n                return;\n            this._select._optionMap.set(this.id, value);\n            this._setElementValue(_buildValueString(this.id, value));\n            this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgSelectOption.prototype, \"value\", {\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._setElementValue(value);\n            if (this._select)\n                this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    NgSelectOption.prototype._setElementValue = function (value) {\n        this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n    };\n    /**\n     * @return {?}\n     */\n    NgSelectOption.prototype.ngOnDestroy = function () {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    };\n    return NgSelectOption;\n}());\nNgSelectOption.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{ selector: 'option' },] },\n];\n/**\n * @nocollapse\n */\nNgSelectOption.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: SelectControlValueAccessor, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Host\"] },] },\n]; };\nNgSelectOption.propDecorators = {\n    'ngValue': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['ngValue',] },],\n    'value': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['value',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return SelectMultipleControlValueAccessor; }),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return \"\" + value;\n    if (typeof value === 'string')\n        value = \"'\" + value + \"'\";\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return (id + \": \" + value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * The accessor for writing a value and listening to changes on a select element.\n *\n *  ### Caveat: Options selection\n *\n * Angular uses object identity to select options. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects options by the return value of the function.\n *\n * #### Syntax\n *\n * ```\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * \\@stable\n */\nvar SelectMultipleControlValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._compareWith = __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵlooseIdentical\"];\n    }\n    Object.defineProperty(SelectMultipleControlValueAccessor.prototype, \"compareWith\", {\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        set: function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\n            }\n            this._compareWith = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n        var _this = this;\n        this.value = value;\n        var /** @type {?} */ optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\n        }\n        else {\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n        var _this = this;\n        this.onChange = function (_) {\n            var /** @type {?} */ selected = [];\n            if (_.hasOwnProperty('selectedOptions')) {\n                var /** @type {?} */ options = _.selectedOptions;\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                    var /** @type {?} */ opt = options.item(i);\n                    var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            else {\n                var /** @type {?} */ options = (_.options);\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                    var /** @type {?} */ opt = options.item(i);\n                    if (opt.selected) {\n                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            _this.value = selected;\n            fn(selected);\n        };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n        var /** @type {?} */ id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    };\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n            var id = _a[_i];\n            if (this._compareWith(this._optionMap.get(id)._value, value))\n                return id;\n        }\n        return null;\n    };\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n        var /** @type {?} */ id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n    };\n    return SelectMultipleControlValueAccessor;\n}());\nSelectMultipleControlValueAccessor.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nSelectMultipleControlValueAccessor.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n]; };\nSelectMultipleControlValueAccessor.propDecorators = {\n    'compareWith': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * ### Example\n *\n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n */\nvar NgSelectMultipleOption = (function () {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    function NgSelectMultipleOption(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._select == null)\n                return;\n            this._value = value;\n            this._setElementValue(_buildValueString$1(this.id, value));\n            this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._select) {\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            }\n            else {\n                this._setElementValue(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype._setElementValue = function (value) {\n        this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n    };\n    /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype._setSelected = function (selected) {\n        this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n    };\n    /**\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    };\n    return NgSelectMultipleOption;\n}());\nNgSelectMultipleOption.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{ selector: 'option' },] },\n];\n/**\n * @nocollapse\n */\nNgSelectMultipleOption.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer\"], },\n    { type: SelectMultipleControlValueAccessor, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Host\"] },] },\n]; };\nNgSelectMultipleOption.propDecorators = {\n    'ngValue': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['ngValue',] },],\n    'value': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['value',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} name\n * @param {?} parent\n * @return {?}\n */\nfunction controlPath(name, parent) {\n    return parent.path.concat([name]);\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpControl(control, dir) {\n    if (!control)\n        _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor)\n        _throwError(dir, 'No value accessor for form control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n    dir.valueAccessor.writeValue(control.value);\n    // view -> model\n    dir.valueAccessor.registerOnChange(function (newValue) {\n        dir.viewToModelUpdate(newValue);\n        control.markAsDirty();\n        control.setValue(newValue, { emitModelToViewChange: false });\n    });\n    // touched\n    dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n    control.registerOnChange(function (newValue, emitModelEvent) {\n        // control -> view\n        dir.valueAccessor.writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    });\n    if (dir.valueAccessor.setDisabledState) {\n        control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n    }\n    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    dir._rawValidators.forEach(function (validator) {\n        if (((validator)).registerOnValidatorChange)\n            ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n    });\n    dir._rawAsyncValidators.forEach(function (validator) {\n        if (((validator)).registerOnValidatorChange)\n            ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction cleanUpControl(control, dir) {\n    dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n    dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n    dir._rawValidators.forEach(function (validator) {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    dir._rawAsyncValidators.forEach(function (validator) {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    if (control)\n        control._clearChangeFns();\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpFormContainer(control, dir) {\n    if (control == null)\n        _throwError(dir, 'Cannot find control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n/**\n * @param {?} dir\n * @return {?}\n */\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n/**\n * @param {?} dir\n * @param {?} message\n * @return {?}\n */\nfunction _throwError(dir, message) {\n    var /** @type {?} */ messageEnd;\n    if (dir.path.length > 1) {\n        messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n    }\n    else if (dir.path[0]) {\n        messageEnd = \"name: '\" + dir.path + \"'\";\n    }\n    else {\n        messageEnd = 'unspecified name attribute';\n    }\n    throw new Error(message + \" \" + messageEnd);\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeValidators(validators) {\n    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n        null;\n}\n/**\n * @param {?} changes\n * @param {?} viewModel\n * @return {?}\n */\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    var /** @type {?} */ change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵlooseIdentical\"])(viewModel, change.currentValue);\n}\nvar BUILTIN_ACCESSORS = [\n    CheckboxControlValueAccessor,\n    RangeValueAccessor,\n    NumberValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n];\n/**\n * @param {?} valueAccessor\n * @return {?}\n */\nfunction isBuiltInAccessor(valueAccessor) {\n    return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n}\n/**\n * @param {?} dir\n * @param {?} valueAccessors\n * @return {?}\n */\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    var /** @type {?} */ defaultAccessor;\n    var /** @type {?} */ builtinAccessor;\n    var /** @type {?} */ customAccessor;\n    valueAccessors.forEach(function (v) {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor)\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor)\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    });\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    _throwError(dir, 'No valid value accessor for form control with');\n    return null;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This is a base class for code shared between {\\@link NgModelGroup} and {\\@link FormGroupName}.\n *\n * \\@stable\n */\nvar AbstractFormGroupDirective = (function (_super) {\n    __extends(AbstractFormGroupDirective, _super);\n    function AbstractFormGroupDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype.ngOnInit = function () {\n        this._checkParentType();\n        this.formDirective.addFormGroup(this);\n    };\n    /**\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n        if (this.formDirective) {\n            this.formDirective.removeFormGroup(this);\n        }\n    };\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n        /**\n         * Get the {\\@link FormGroup} backing this binding.\n         * @return {?}\n         */\n        get: function () { return this.formDirective.getFormGroup(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n        /**\n         * Get the path to this control group.\n         * @return {?}\n         */\n        get: function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n        /**\n         * Get the {\\@link Form} to which this group belongs.\n         * @return {?}\n         */\n        get: function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._validators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeAsyncValidators(this._asyncValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype._checkParentType = function () { };\n    return AbstractFormGroupDirective;\n}(ControlContainer));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar AbstractControlStatus = (function () {\n    /**\n     * @param {?} cd\n     */\n    function AbstractControlStatus(cd) {\n        this._cd = cd;\n    }\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.untouched : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.touched : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.pristine : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.dirty : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.valid : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.invalid : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.pending : false; },\n        enumerable: true,\n        configurable: true\n    });\n    return AbstractControlStatus;\n}());\nvar ngControlStatusHost = {\n    '[class.ng-untouched]': 'ngClassUntouched',\n    '[class.ng-touched]': 'ngClassTouched',\n    '[class.ng-pristine]': 'ngClassPristine',\n    '[class.ng-dirty]': 'ngClassDirty',\n    '[class.ng-valid]': 'ngClassValid',\n    '[class.ng-invalid]': 'ngClassInvalid',\n    '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * \\@stable\n */\nvar NgControlStatus = (function (_super) {\n    __extends(NgControlStatus, _super);\n    /**\n     * @param {?} cd\n     */\n    function NgControlStatus(cd) {\n        return _super.call(this, cd) || this;\n    }\n    return NgControlStatus;\n}(AbstractControlStatus));\nNgControlStatus.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n];\n/**\n * @nocollapse\n */\nNgControlStatus.ctorParameters = function () { return [\n    { type: NgControl, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] },] },\n]; };\n/**\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * \\@stable\n */\nvar NgControlStatusGroup = (function (_super) {\n    __extends(NgControlStatusGroup, _super);\n    /**\n     * @param {?} cd\n     */\n    function NgControlStatusGroup(cd) {\n        return _super.call(this, cd) || this;\n    }\n    return NgControlStatusGroup;\n}(AbstractControlStatus));\nNgControlStatusGroup.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                host: ngControlStatusHost\n            },] },\n];\n/**\n * @nocollapse\n */\nNgControlStatusGroup.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nvar VALID = 'VALID';\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nvar INVALID = 'INVALID';\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nvar PENDING = 'PENDING';\n/**\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n * calculations of validity or value.\n */\nvar DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\nfunction _find(control, path, delimiter) {\n    if (path == null)\n        return null;\n    if (!(path instanceof Array)) {\n        path = ((path)).split(delimiter);\n    }\n    if (path instanceof Array && (path.length === 0))\n        return null;\n    return ((path)).reduce(function (v, name) {\n        if (v instanceof FormGroup) {\n            return v.controls[name] || null;\n        }\n        if (v instanceof FormArray) {\n            return v.at(/** @type {?} */ (name)) || null;\n        }\n        return null;\n    }, control);\n}\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction coerceToValidator(validator) {\n    return Array.isArray(validator) ? composeValidators(validator) : validator;\n}\n/**\n * @param {?} asyncValidator\n * @return {?}\n */\nfunction coerceToAsyncValidator(asyncValidator) {\n    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n}\n/**\n * \\@whatItDoes This is the base class for {\\@link FormControl}, {\\@link FormGroup}, and\n * {\\@link FormArray}.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * \\@stable\n * @abstract\n */\nvar AbstractControl = (function () {\n    /**\n     * @param {?} validator\n     * @param {?} asyncValidator\n     */\n    function AbstractControl(validator, asyncValidator) {\n        this.validator = validator;\n        this.asyncValidator = asyncValidator;\n        /**\n         * \\@internal\n         */\n        this._onCollectionChange = function () { };\n        this._pristine = true;\n        this._touched = false;\n        /**\n         * \\@internal\n         */\n        this._onDisabledChange = [];\n    }\n    Object.defineProperty(AbstractControl.prototype, \"value\", {\n        /**\n         * The value of the control.\n         * @return {?}\n         */\n        get: function () { return this._value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"parent\", {\n        /**\n         * The parent control.\n         * @return {?}\n         */\n        get: function () { return this._parent; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"status\", {\n        /**\n         * The validation status of the control. There are four possible\n         * validation statuses:\n         *\n         * * **VALID**:  control has passed all validation checks\n         * * **INVALID**: control has failed at least one validation check\n         * * **PENDING**: control is in the midst of conducting a validation check\n         * * **DISABLED**: control is exempt from validation checks\n         *\n         * These statuses are mutually exclusive, so a control cannot be\n         * both valid AND invalid or invalid AND disabled.\n         * @return {?}\n         */\n        get: function () { return this._status; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"valid\", {\n        /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         * @return {?}\n         */\n        get: function () { return this._status === VALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n        /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         * @return {?}\n         */\n        get: function () { return this._status === INVALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"pending\", {\n        /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         * @return {?}\n         */\n        get: function () { return this._status == PENDING; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n        /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         * @return {?}\n         */\n        get: function () { return this._status === DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n        /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         * @return {?}\n         */\n        get: function () { return this._status !== DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"errors\", {\n        /**\n         * Returns any errors generated by failing validation. If there\n         * are no errors, it will return null.\n         * @return {?}\n         */\n        get: function () { return this._errors; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        get: function () { return this._pristine; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n        /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        get: function () { return !this.pristine; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"touched\", {\n        /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        get: function () { return this._touched; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n        /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        get: function () { return !this._touched; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n        /**\n         * Emits an event every time the value of the control changes, in\n         * the UI or programmatically.\n         * @return {?}\n         */\n        get: function () { return this._valueChanges; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n        /**\n         * Emits an event every time the validation status of the control\n         * is re-calculated.\n         * @return {?}\n         */\n        get: function () { return this._statusChanges; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setValidators = function (newValidator) {\n        this.validator = coerceToValidator(newValidator);\n    };\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\n    };\n    /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n    /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n    /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsTouched = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._touched = true;\n        if (this._parent && !onlySelf) {\n            this._parent.markAsTouched({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsUntouched = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._touched = false;\n        this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n        if (this._parent && !onlySelf) {\n            this._parent._updateTouched({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsDirty = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._pristine = false;\n        if (this._parent && !onlySelf) {\n            this._parent.markAsDirty({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPristine = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._pristine = true;\n        this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n        if (this._parent && !onlySelf) {\n            this._parent._updatePristine({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * Marks the control as `pending`.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPending = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._status = PENDING;\n        if (this._parent && !onlySelf) {\n            this._parent.markAsPending({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.disable = function (_a) {\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._status = DISABLED;\n        this._errors = null;\n        this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n        this._updateValue();\n        if (emitEvent !== false) {\n            this._valueChanges.emit(this._value);\n            this._statusChanges.emit(this._status);\n        }\n        this._updateAncestors(onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n    };\n    /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.enable = function (_a) {\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._status = VALID;\n        this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n        this._updateAncestors(onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n    };\n    /**\n     * @param {?} onlySelf\n     * @return {?}\n     */\n    AbstractControl.prototype._updateAncestors = function (onlySelf) {\n        if (this._parent && !onlySelf) {\n            this._parent.updateValueAndValidity();\n            this._parent._updatePristine();\n            this._parent._updateTouched();\n        }\n    };\n    /**\n     * @param {?} parent\n     * @return {?}\n     */\n    AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n    /**\n     * Sets the value of the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.setValue = function (value, options) { };\n    /**\n     * Patches the value of the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.patchValue = function (value, options) { };\n    /**\n     * Resets the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.reset = function (value, options) { };\n    /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.updateValueAndValidity = function (_a) {\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            this._errors = this._runValidator();\n            this._status = this._calculateStatus();\n            if (this._status === VALID || this._status === PENDING) {\n                this._runAsyncValidator(emitEvent);\n            }\n        }\n        if (emitEvent !== false) {\n            this._valueChanges.emit(this._value);\n            this._statusChanges.emit(this._status);\n        }\n        if (this._parent && !onlySelf) {\n            this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTreeValidity = function (_a) {\n        var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n        this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._runValidator = function () {\n        return this.validator ? this.validator(this) : null;\n    };\n    /**\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n        var _this = this;\n        if (this.asyncValidator) {\n            this._status = PENDING;\n            var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription =\n                obs.subscribe(function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._cancelExistingSubscription = function () {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} __1\n     * @return {?}\n     */\n    AbstractControl.prototype.setErrors = function (errors, _a) {\n        var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n        this._errors = errors;\n        this._updateControlsErrors(emitEvent !== false);\n    };\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path\n     * @return {?}\n     */\n    AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.getError = function (errorCode, path) {\n        if (path === void 0) { path = null; }\n        var /** @type {?} */ control = path ? this.get(path) : this;\n        return control && control._errors ? control._errors[errorCode] : null;\n    };\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.hasError = function (errorCode, path) {\n        if (path === void 0) { path = null; }\n        return !!this.getError(errorCode, path);\n    };\n    Object.defineProperty(AbstractControl.prototype, \"root\", {\n        /**\n         * Retrieves the top-level ancestor of this control.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ x = this;\n            while (x._parent) {\n                x = x._parent;\n            }\n            return x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n        this._status = this._calculateStatus();\n        if (emitEvent) {\n            this._statusChanges.emit(this._status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._initObservables = function () {\n        this._valueChanges = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        this._statusChanges = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._calculateStatus = function () {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this._errors)\n            return INVALID;\n        if (this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    };\n    /**\n     * \\@internal\n     * @abstract\n     * @return {?}\n     */\n    AbstractControl.prototype._updateValue = function () { };\n    /**\n     * \\@internal\n     * @abstract\n     * @param {?} cb\n     * @return {?}\n     */\n    AbstractControl.prototype._forEachChild = function (cb) { };\n    /**\n     * \\@internal\n     * @abstract\n     * @param {?} condition\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControls = function (condition) { };\n    /**\n     * \\@internal\n     * @abstract\n     * @return {?}\n     */\n    AbstractControl.prototype._allControlsDisabled = function () { };\n    /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n        return this._anyControls(function (control) { return control.status === status; });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsDirty = function () {\n        return this._anyControls(function (control) { return control.dirty; });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsTouched = function () {\n        return this._anyControls(function (control) { return control.touched; });\n    };\n    /**\n     * \\@internal\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype._updatePristine = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._pristine = !this._anyControlsDirty();\n        if (this._parent && !onlySelf) {\n            this._parent._updatePristine({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTouched = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._touched = this._anyControlsTouched();\n        if (this._parent && !onlySelf) {\n            this._parent._updateTouched({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    AbstractControl.prototype._isBoxedValue = function (formState) {\n        return typeof formState === 'object' && formState !== null &&\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    };\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n    return AbstractControl;\n}());\n/**\n * \\@whatItDoes Tracks the value and validation status of an individual form control.\n *\n * It is one of the three fundamental building blocks of Angular forms, along with\n * {\\@link FormGroup} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\n * first argument. Example:\n *\n * ```ts\n * const ctrl = new FormControl('some value');\n * console.log(ctrl.value);     // 'some value'\n * ```\n *\n * You can also initialize the control with a form state object on instantiation,\n * which includes both the value and whether or not the control is disabled.\n * You can't use the value key without the disabled key; both are required\n * to use this way of initialization.\n *\n * ```ts\n * const ctrl = new FormControl({value: 'n/a', disabled: true});\n * console.log(ctrl.value);     // 'n/a'\n * console.log(ctrl.status);   // 'DISABLED'\n * ```\n *\n * To include a sync validator (or an array of sync validators) with the control,\n * pass it in as the second argument. Async validators are also supported, but\n * have to be passed in separately as the third arg.\n *\n * ```ts\n * const ctrl = new FormControl('', Validators.required);\n * console.log(ctrl.value);     // ''\n * console.log(ctrl.status);   // 'INVALID'\n * ```\n *\n * See its superclass, {\\@link AbstractControl}, for more properties and methods.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormControl = (function (_super) {\n    __extends(FormControl, _super);\n    /**\n     * @param {?=} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     */\n    function FormControl(formState, validator, asyncValidator) {\n        if (formState === void 0) { formState = null; }\n        if (validator === void 0) { validator = null; }\n        if (asyncValidator === void 0) { asyncValidator = null; }\n        var _this = _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator)) || this;\n        /**\n         * \\@internal\n         */\n        _this._onChange = [];\n        _this._applyFormState(formState);\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        _this._initObservables();\n        return _this;\n    }\n    /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     * @param {?} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormControl.prototype.setValue = function (value, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n        this._value = value;\n        if (this._onChange.length && emitModelToViewChange !== false) {\n            this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });\n        }\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n    };\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl.setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n     * where it does behave differently.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.patchValue = function (value, options) {\n        if (options === void 0) { options = {}; }\n        this.setValue(value, options);\n    };\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     * @param {?=} formState\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormControl.prototype.reset = function (formState, _a) {\n        if (formState === void 0) { formState = null; }\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._applyFormState(formState);\n        this.markAsPristine({ onlySelf: onlySelf });\n        this.markAsUntouched({ onlySelf: onlySelf });\n        this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._updateValue = function () { };\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormControl.prototype._anyControls = function (condition) { return false; };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n    /**\n     * Register a listener for change events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._clearChangeFns = function () {\n        this._onChange = [];\n        this._onDisabledChange = [];\n        this._onCollectionChange = function () { };\n    };\n    /**\n     * Register a listener for disabled events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnDisabledChange = function (fn) {\n        this._onDisabledChange.push(fn);\n    };\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormControl.prototype._forEachChild = function (cb) { };\n    /**\n     * @param {?} formState\n     * @return {?}\n     */\n    FormControl.prototype._applyFormState = function (formState) {\n        if (this._isBoxedValue(formState)) {\n            this._value = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            this._value = formState;\n        }\n    };\n    return FormControl;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\n * instances.\n *\n * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\n * with each control name as the key.  It calculates its status by reducing the statuses\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\n * argument. The key for each child will be the name under which it is registered.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * You can also include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormGroup = (function (_super) {\n    __extends(FormGroup, _super);\n    /**\n     * @param {?} controls\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     */\n    function FormGroup(controls, validator, asyncValidator) {\n        if (validator === void 0) { validator = null; }\n        if (asyncValidator === void 0) { asyncValidator = null; }\n        var _this = _super.call(this, validator, asyncValidator) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update value or validity of the control, so for\n     * most cases you'll want to use {\\@link FormGroup.addControl} instead.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.registerControl = function (name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    };\n    /**\n     * Add a control to this group.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.addControl = function (name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Remove a control from this group.\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype.removeControl = function (name) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Replace an existing control.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.setControl = function (name, control) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for\n     * existence in the group only, use {\\@link AbstractControl.get} instead.\n     * @param {?} controlName\n     * @return {?}\n     */\n    FormGroup.prototype.contains = function (controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    };\n    /**\n     *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormGroup.prototype.setValue = function (value, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._checkAllValuesPresent(value);\n        Object.keys(value).forEach(function (name) {\n            _this._throwIfControlMissing(name);\n            _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n        });\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n    };\n    /**\n     *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormGroup.prototype.patchValue = function (value, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        Object.keys(value).forEach(function (name) {\n            if (_this.controls[name]) {\n                _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n            }\n        });\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n    };\n    /**\n     * Resets the {\\@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormGroup.prototype.reset = function (value, _a) {\n        if (value === void 0) { value = {}; }\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._forEachChild(function (control, name) {\n            control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });\n        });\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        this._updatePristine({ onlySelf: onlySelf });\n        this._updateTouched({ onlySelf: onlySelf });\n    };\n    /**\n     * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     * @return {?}\n     */\n    FormGroup.prototype.getRawValue = function () {\n        return this._reduceChildren({}, function (acc, control, name) {\n            acc[name] = control instanceof FormControl ? control.value : ((control)).getRawValue();\n            return acc;\n        });\n    };\n    /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype._throwIfControlMissing = function (name) {\n        if (!Object.keys(this.controls).length) {\n            throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.controls[name]) {\n            throw new Error(\"Cannot find form control with name: \" + name + \".\");\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormGroup.prototype._forEachChild = function (cb) {\n        var _this = this;\n        Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._setUpControls = function () {\n        var _this = this;\n        this._forEachChild(function (control) {\n            control.setParent(_this);\n            control._registerOnCollectionChange(_this._onCollectionChange);\n        });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormGroup.prototype._anyControls = function (condition) {\n        var _this = this;\n        var /** @type {?} */ res = false;\n        this._forEachChild(function (control, name) {\n            res = res || (_this.contains(name) && condition(control));\n        });\n        return res;\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._reduceValue = function () {\n        var _this = this;\n        return this._reduceChildren({}, function (acc, control, name) {\n            if (control.enabled || _this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    };\n    /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    FormGroup.prototype._reduceChildren = function (initValue, fn) {\n        var /** @type {?} */ res = initValue;\n        this._forEachChild(function (control, name) { res = fn(res, control, name); });\n        return res;\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._allControlsDisabled = function () {\n        for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n            var controlName = _a[_i];\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    };\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroup.prototype._checkAllValuesPresent = function (value) {\n        this._forEachChild(function (control, name) {\n            if (value[name] === undefined) {\n                throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n            }\n        });\n    };\n    return FormGroup;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl},\n * {\\@link FormGroup} or {\\@link FormArray} instances.\n *\n * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\n * It calculates its status by reducing the statuses of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormGroup}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\n * argument.\n *\n * ### Example\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * You can also include array-level validators as the second arg, or array-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ### Adding or removing controls\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormArray = (function (_super) {\n    __extends(FormArray, _super);\n    /**\n     * @param {?} controls\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     */\n    function FormArray(controls, validator, asyncValidator) {\n        if (validator === void 0) { validator = null; }\n        if (asyncValidator === void 0) { asyncValidator = null; }\n        var _this = _super.call(this, validator, asyncValidator) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Get the {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.at = function (index) { return this.controls[index]; };\n    /**\n     * Insert a new {\\@link AbstractControl} at the end of the array.\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.push = function (control) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.insert = function (index, control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Remove the control at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.removeAt = function (index) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Replace an existing control.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.setControl = function (index, control) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        if (control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    Object.defineProperty(FormArray.prototype, \"length\", {\n        /**\n         * Length of the control array.\n         * @return {?}\n         */\n        get: function () { return this.controls.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     * @param {?} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormArray.prototype.setValue = function (value, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._checkAllValuesPresent(value);\n        value.forEach(function (newValue, index) {\n            _this._throwIfControlMissing(index);\n            _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n        });\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n    };\n    /**\n     *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     * @param {?} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormArray.prototype.patchValue = function (value, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        value.forEach(function (newValue, index) {\n            if (_this.at(index)) {\n                _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n            }\n        });\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n    };\n    /**\n     * Resets the {\\@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormArray.prototype.reset = function (value, _a) {\n        if (value === void 0) { value = []; }\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._forEachChild(function (control, index) {\n            control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });\n        });\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        this._updatePristine({ onlySelf: onlySelf });\n        this._updateTouched({ onlySelf: onlySelf });\n    };\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    FormArray.prototype.getRawValue = function () {\n        return this.controls.map(function (control) {\n            return control instanceof FormControl ? control.value : ((control)).getRawValue();\n        });\n    };\n    /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype._throwIfControlMissing = function (index) {\n        if (!this.controls.length) {\n            throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.at(index)) {\n            throw new Error(\"Cannot find form control at index \" + index);\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormArray.prototype._forEachChild = function (cb) {\n        this.controls.forEach(function (control, index) { cb(control, index); });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._updateValue = function () {\n        var _this = this;\n        this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n            .map(function (control) { return control.value; });\n    };\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormArray.prototype._anyControls = function (condition) {\n        return this.controls.some(function (control) { return control.enabled && condition(control); });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._setUpControls = function () {\n        var _this = this;\n        this._forEachChild(function (control) { return _this._registerControl(control); });\n    };\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormArray.prototype._checkAllValuesPresent = function (value) {\n        this._forEachChild(function (control, i) {\n            if (value[i] === undefined) {\n                throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n            }\n        });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._allControlsDisabled = function () {\n        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n            var control = _a[_i];\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    };\n    /**\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype._registerControl = function (control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    };\n    return FormArray;\n}(AbstractControl));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return NgForm; })\n};\nvar resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * \\@howToUse\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n * sub-groups within the form.\n *\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgForm = (function (_super) {\n    __extends(NgForm, _super);\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function NgForm(validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._submitted = false;\n        _this.ngSubmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        _this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        return _this;\n    }\n    Object.defineProperty(NgForm.prototype, \"submitted\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._submitted; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"controls\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.form.controls; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addControl = function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            dir._control = (container.registerControl(dir.name, dir.control));\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeControl = function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addFormGroup = function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            var /** @type {?} */ group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeFormGroup = function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.updateModel = function (dir, value) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ ctrl = (_this.form.get(dir.path));\n            ctrl.setValue(value);\n        });\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgForm.prototype.onSubmit = function ($event) {\n        this._submitted = true;\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    NgForm.prototype.onReset = function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    NgForm.prototype.resetForm = function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        this._submitted = false;\n    };\n    /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    NgForm.prototype._findContainer = function (path) {\n        path.pop();\n        return path.length ? (this.form.get(path)) : this.form;\n    };\n    return NgForm;\n}(ControlContainer));\nNgForm.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                providers: [formDirectiveProvider],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                outputs: ['ngSubmit'],\n                exportAs: 'ngForm'\n            },] },\n];\n/**\n * @nocollapse\n */\nNgForm.ctorParameters = function () { return [\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar FormErrorExamples = {\n    formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n    formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n    formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; index as i\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n    ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n    ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TemplateDrivenErrors = (function () {\n    function TemplateDrivenErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelParentException = function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + FormErrorExamples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + FormErrorExamples.ngModelWithFormGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.formGroupNameException = function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.missingNameException = function () {\n        throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelGroupParentException = function () {\n        throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    return TemplateDrivenErrors;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return NgModelGroup; })\n};\n/**\n * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used as a child of {\\@link NgForm} (or in other words,\n * within `<form>` tags).\n *\n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n *\n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n * \\@stable\n */\nvar NgModelGroup = (function (_super) {\n    __extends(NgModelGroup, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function NgModelGroup(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    NgModelGroup.prototype._checkParentType = function () {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelGroupParentException();\n        }\n    };\n    return NgModelGroup;\n}(AbstractFormGroupDirective));\nNgModelGroup.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n];\n/**\n * @nocollapse\n */\nNgModelGroup.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SkipSelf\"] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\nNgModelGroup.propDecorators = {\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['ngModelGroup',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding = {\n    provide: NgControl,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return NgModel; })\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nvar resolvedPromise$1 = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n * to a form control element.\n *\n * The {\\@link FormControl} instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n *\n * \\@howToUse\n *\n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional {\\@link \\@Input}. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n *\n * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in {\\@link AbstractControlDirective}.\n *\n * The following is an example of a simple standalone control using `ngModel`:\n *\n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * Take a look at an example of using `ngModel` within a form:\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * To see `ngModel` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgModel = (function (_super) {\n    __extends(NgModel, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    function NgModel(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        /**\n         * \\@internal\n         */\n        _this._control = new FormControl();\n        /**\n         * \\@internal\n         */\n        _this._registered = false;\n        _this.update = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype.ngOnChanges = function (changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n    Object.defineProperty(NgModel.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._control; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._parent ? controlPath(this.name, this._parent) : [this.name];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    NgModel.prototype.viewToModelUpdate = function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpControl = function () {\n        this._isStandalone() ? this._setUpStandalone() :\n            this.formDirective.addControl(this);\n        this._registered = true;\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._isStandalone = function () {\n        return !this._parent || (this.options && this.options.standalone);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpStandalone = function () {\n        setUpControl(this._control, this);\n        this._control.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkForErrors = function () {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkParentType = function () {\n        if (!(this._parent instanceof NgModelGroup) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            TemplateDrivenErrors.formGroupNameException();\n        }\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkName = function () {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name) {\n            TemplateDrivenErrors.missingNameException();\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgModel.prototype._updateValue = function (value) {\n        var _this = this;\n        resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype._updateDisabled = function (changes) {\n        var _this = this;\n        var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n        var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise$1.then(function () {\n            if (isDisabled && !_this.control.disabled) {\n                _this.control.disable();\n            }\n            else if (!isDisabled && _this.control.disabled) {\n                _this.control.enable();\n            }\n        });\n    };\n    return NgModel;\n}(NgControl));\nNgModel.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[ngModel]:not([formControlName]):not([formControl])',\n                providers: [formControlBinding],\n                exportAs: 'ngModel'\n            },] },\n];\n/**\n * @nocollapse\n */\nNgModel.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Host\"] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },\n]; };\nNgModel.propDecorators = {\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n    'isDisabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['disabled',] },],\n    'model': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['ngModel',] },],\n    'options': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['ngModelOptions',] },],\n    'update': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"], args: ['ngModelChange',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ReactiveErrors = (function () {\n    function ReactiveErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.controlParentException = function () {\n        throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.ngModelGroupException = function () {\n        throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + FormErrorExamples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.missingFormException = function () {\n        throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.groupParentException = function () {\n        throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formGroupName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.arrayParentException = function () {\n        throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + FormErrorExamples.formArrayName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.disabledAttrWarning = function () {\n        console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n    };\n    return ReactiveErrors;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return FormControlDirective; })\n};\n/**\n * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n * {\\@link FormControlDirective}.\n *\n * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n * it does not require that your {\\@link FormControl} instance be part of any parent\n * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n * exists above it.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormControl} instance. See a full list of available properties in\n * {\\@link AbstractControl}.\n *\n * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n * or you can set it programmatically later using {\\@link AbstractControl.setValue} or\n * {\\@link AbstractControl.patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n *  \\@stable\n */\nvar FormControlDirective = (function (_super) {\n    __extends(FormControlDirective, _super);\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    function FormControlDirective(validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this.update = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype.ngOnChanges = function (changes) {\n        if (this._isControlChanged(changes)) {\n            setUpControl(this.form, this);\n            if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                this.valueAccessor.setDisabledState(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    Object.defineProperty(FormControlDirective.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype._isControlChanged = function (changes) {\n        return changes.hasOwnProperty('form');\n    };\n    return FormControlDirective;\n}(NgControl));\nFormControlDirective.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n];\n/**\n * @nocollapse\n */\nFormControlDirective.ctorParameters = function () { return [\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },\n]; };\nFormControlDirective.propDecorators = {\n    'form': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['formControl',] },],\n    'model': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['ngModel',] },],\n    'update': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"], args: ['ngModelChange',] },],\n    'isDisabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['disabled',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return FormGroupDirective; })\n};\n/**\n * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive accepts an existing {\\@link FormGroup} instance. It will then use this\n * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},\n * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},\n * and {\\@link FormArrayName} directives.\n *\n * **Set value**: You can set the form's initial value when instantiating the\n * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s\n * {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the {\\@link FormGroup}'s {\\@link AbstractControl.valueChanges} event.  You can also listen to\n * its {\\@link AbstractControl.statusChanges} event to be notified when the validation status is\n * re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormGroupDirective = (function (_super) {\n    __extends(FormGroupDirective, _super);\n    /**\n     * @param {?} _validators\n     * @param {?} _asyncValidators\n     */\n    function FormGroupDirective(_validators, _asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._validators = _validators;\n        _this._asyncValidators = _asyncValidators;\n        _this._submitted = false;\n        _this.directives = [];\n        _this.form = null;\n        _this.ngSubmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormGroupDirective.prototype.ngOnChanges = function (changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n        }\n    };\n    Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._submitted; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addControl = function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeControl = function (dir) { remove(this.directives, dir); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormGroup = function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormArray = function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormArray = function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.updateModel = function (dir, value) {\n        var /** @type {?} */ ctrl = (this.form.get(dir.path));\n        ctrl.setValue(value);\n    };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onSubmit = function ($event) {\n        this._submitted = true;\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.resetForm = function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        this._submitted = false;\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateDomValue = function () {\n        var _this = this;\n        this.directives.forEach(function (dir) {\n            var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n            if (dir._control !== newCtrl) {\n                cleanUpControl(dir._control, dir);\n                if (newCtrl)\n                    setUpControl(newCtrl, dir);\n                dir._control = newCtrl;\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateRegistrations = function () {\n        var _this = this;\n        this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n        if (this._oldForm)\n            this._oldForm._registerOnCollectionChange(function () { });\n        this._oldForm = this.form;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateValidators = function () {\n        var /** @type {?} */ sync = composeValidators(this._validators);\n        this.form.validator = Validators.compose([this.form.validator, sync]);\n        var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n        this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._checkFormPresent = function () {\n        if (!this.form) {\n            ReactiveErrors.missingFormException();\n        }\n    };\n    return FormGroupDirective;\n}(ControlContainer));\nFormGroupDirective.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[formGroup]',\n                providers: [formDirectiveProvider$1],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                exportAs: 'ngForm'\n            },] },\n];\n/**\n * @nocollapse\n */\nFormGroupDirective.ctorParameters = function () { return [\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\nFormGroupDirective.propDecorators = {\n    'form': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['formGroup',] },],\n    'ngSubmit': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"] },],\n};\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    var /** @type {?} */ index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return FormGroupName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n * will look for a {\\@link FormGroup} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n *\n * **Access the group**: You can access the associated {\\@link FormGroup} using the\n * {\\@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n *\n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormGroup}, or you can set it programmatically later using\n * {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormGroupName = (function (_super) {\n    __extends(FormGroupName, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function FormGroupName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupName.prototype._checkParentType = function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.groupParentException();\n        }\n    };\n    return FormGroupName;\n}(AbstractFormGroupDirective));\nFormGroupName.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n];\n/**\n * @nocollapse\n */\nFormGroupName.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SkipSelf\"] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\nFormGroupName.propDecorators = {\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['formGroupName',] },],\n};\nvar formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return FormArrayName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n * will look for a {\\@link FormArray} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n *\n * **Access the array**: You can access the associated {\\@link FormArray} using the\n * {\\@link AbstractControl.get} method on the parent {\\@link FormGroup}.\n * Ex: `this.form.get('cities')`.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormArray}, or you can set the value programmatically later using the\n * {\\@link FormArray}'s {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}\n * methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl.valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl.statusChanges} event to be notified when the validation\n * status is re-calculated.\n *\n * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by\n * calling its {\\@link FormArray.push} method.\n *  Ex: `this.form.get('cities').push(new FormControl());`\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormArrayName = (function (_super) {\n    __extends(FormArrayName, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function FormArrayName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnInit = function () {\n        this._checkParentType();\n        this.formDirective.addFormArray(this);\n    };\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnDestroy = function () {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    };\n    Object.defineProperty(FormArrayName.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.formDirective.getFormArray(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._parent ? (this._parent.formDirective) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._validators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeAsyncValidators(this._asyncValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype._checkParentType = function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.arrayParentException();\n        }\n    };\n    return FormArrayName;\n}(ControlContainer));\nFormArrayName.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n];\n/**\n * @nocollapse\n */\nFormArrayName.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SkipSelf\"] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\nFormArrayName.propDecorators = {\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['formArrayName',] },],\n};\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar controlNameBinding = {\n    provide: NgControl,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return FormControlName; })\n};\n/**\n * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n * element by name.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the {\\@link FormControl} instance you want to\n * link, and will look for a {\\@link FormControl} registered with that name in the\n * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n *\n * **Access the control**: You can access the {\\@link FormControl} associated with\n * this directive by using the {\\@link AbstractControl.get} method.\n * Ex: `this.form.get('first');`\n *\n * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n * See a full list of available properties in {\\@link AbstractControl}.\n *\n *  **Set value**: You can set an initial value for the control when instantiating the\n *  {\\@link FormControl}, or you can set it programmatically later using\n *  {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormControlName = (function (_super) {\n    __extends(FormControlName, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this._added = false;\n        _this.update = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"EventEmitter\"]();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnChanges = function (changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnDestroy = function () {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    };\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlName.prototype.viewToModelUpdate = function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    Object.defineProperty(FormControlName.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._control; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._checkParentType = function () {\n        if (!(this._parent instanceof FormGroupName) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            ReactiveErrors.ngModelGroupException();\n        }\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n            !(this._parent instanceof FormArrayName)) {\n            ReactiveErrors.controlParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._setUpControl = function () {\n        this._checkParentType();\n        this._control = this.formDirective.addControl(this);\n        if (this.control.disabled && this.valueAccessor.setDisabledState) {\n            this.valueAccessor.setDisabledState(true);\n        }\n        this._added = true;\n    };\n    return FormControlName;\n}(NgControl));\nFormControlName.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n];\n/**\n * @nocollapse\n */\nFormControlName.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"SkipSelf\"] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },\n]; };\nFormControlName.propDecorators = {\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['formControlName',] },],\n    'model': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['ngModel',] },],\n    'update': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Output\"], args: ['ngModelChange',] },],\n    'isDisabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"], args: ['disabled',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return RequiredValidator; }),\n    multi: true\n};\nvar CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return CheckboxRequiredValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * \\@stable\n */\nvar RequiredValidator = (function () {\n    function RequiredValidator() {\n    }\n    Object.defineProperty(RequiredValidator.prototype, \"required\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._required = value != null && value !== false && \"\" + value !== 'false';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    RequiredValidator.prototype.validate = function (c) {\n        return this.required ? Validators.required(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    return RequiredValidator;\n}());\nRequiredValidator.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                providers: [REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nRequiredValidator.ctorParameters = function () { return []; };\nRequiredValidator.propDecorators = {\n    'required': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * \\@experimental\n */\nvar CheckboxRequiredValidator = (function (_super) {\n    __extends(CheckboxRequiredValidator, _super);\n    function CheckboxRequiredValidator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    CheckboxRequiredValidator.prototype.validate = function (c) {\n        return this.required ? Validators.requiredTrue(c) : null;\n    };\n    return CheckboxRequiredValidator;\n}(RequiredValidator));\nCheckboxRequiredValidator.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nCheckboxRequiredValidator.ctorParameters = function () { return []; };\n/**\n * Provider which adds {@link EmailValidator} to {@link NG_VALIDATORS}.\n */\nvar EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return EmailValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * \\@experimental\n */\nvar EmailValidator = (function () {\n    function EmailValidator() {\n    }\n    Object.defineProperty(EmailValidator.prototype, \"email\", {\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._enabled = value === '' || value === true || value === 'true';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    EmailValidator.prototype.validate = function (c) {\n        return this._enabled ? Validators.email(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    EmailValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    return EmailValidator;\n}());\nEmailValidator.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                providers: [EMAIL_VALIDATOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nEmailValidator.ctorParameters = function () { return []; };\nEmailValidator.propDecorators = {\n    'email': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='min'}\n */\nvar MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return MinLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * \\@stable\n */\nvar MinLengthValidator = (function () {\n    function MinLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MinLengthValidator.prototype.ngOnChanges = function (changes) {\n        if ('minlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MinLengthValidator.prototype.validate = function (c) {\n        return this.minlength == null ? null : this._validator(c);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MinLengthValidator.prototype._createValidator = function () {\n        this._validator = Validators.minLength(parseInt(this.minlength, 10));\n    };\n    return MinLengthValidator;\n}());\nMinLengthValidator.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                providers: [MIN_LENGTH_VALIDATOR],\n                host: { '[attr.minlength]': 'minlength ? minlength : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nMinLengthValidator.ctorParameters = function () { return []; };\nMinLengthValidator.propDecorators = {\n    'minlength': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='max'}\n */\nvar MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return MaxLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n * `formControl`,\n * or control with `ngModel` that also has a `maxlength` attribute.\n *\n * \\@stable\n */\nvar MaxLengthValidator = (function () {\n    function MaxLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n        if ('maxlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.validate = function (c) {\n        return this.maxlength != null ? this._validator(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MaxLengthValidator.prototype._createValidator = function () {\n        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n    };\n    return MaxLengthValidator;\n}());\nMaxLengthValidator.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                providers: [MAX_LENGTH_VALIDATOR],\n                host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nMaxLengthValidator.ctorParameters = function () { return []; };\nMaxLengthValidator.propDecorators = {\n    'maxlength': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\nvar PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"forwardRef\"])(function () { return PatternValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n * \\@stable\n */\nvar PatternValidator = (function () {\n    function PatternValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    PatternValidator.prototype.ngOnChanges = function (changes) {\n        if ('pattern' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    PatternValidator.prototype.validate = function (c) { return this._validator(c); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n    return PatternValidator;\n}());\nPatternValidator.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                providers: [PATTERN_VALIDATOR],\n                host: { '[attr.pattern]': 'pattern ? pattern : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nPatternValidator.ctorParameters = function () { return []; };\nPatternValidator.propDecorators = {\n    'pattern': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Input\"] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n *\n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n *\n * \\@howToUse\n *\n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n *\n * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n *\n *  * **npm package**: `\\@angular/forms`\n *\n *  * **NgModule**: {\\@link ReactiveFormsModule}\n *\n * \\@stable\n */\nvar FormBuilder = (function () {\n    function FormBuilder() {\n    }\n    /**\n     * Construct a new {\\@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {\\@link FormGroup} constructor for more details.\n     * @param {?} controlsConfig\n     * @param {?=} extra\n     * @return {?}\n     */\n    FormBuilder.prototype.group = function (controlsConfig, extra) {\n        if (extra === void 0) { extra = null; }\n        var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n        var /** @type {?} */ validator = extra != null ? extra['validator'] : null;\n        var /** @type {?} */ asyncValidator = extra != null ? extra['asyncValidator'] : null;\n        return new FormGroup(controls, validator, asyncValidator);\n    };\n    /**\n     * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     * @param {?} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n        if (validator === void 0) { validator = null; }\n        if (asyncValidator === void 0) { asyncValidator = null; }\n        return new FormControl(formState, validator, asyncValidator);\n    };\n    /**\n     * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     * @param {?} controlsConfig\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n        var _this = this;\n        if (validator === void 0) { validator = null; }\n        if (asyncValidator === void 0) { asyncValidator = null; }\n        var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n        return new FormArray(controls, validator, asyncValidator);\n    };\n    /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._reduceControls = function (controlsConfig) {\n        var _this = this;\n        var /** @type {?} */ controls = {};\n        Object.keys(controlsConfig).forEach(function (controlName) {\n            controls[controlName] = _this._createControl(controlsConfig[controlName]);\n        });\n        return controls;\n    };\n    /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._createControl = function (controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (Array.isArray(controlConfig)) {\n            var /** @type {?} */ value = controlConfig[0];\n            var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    };\n    return FormBuilder;\n}());\nFormBuilder.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nFormBuilder.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nvar VERSION = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Version\"]('4.0.0');\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * \\@experimental\n */\nvar NgNoValidate = (function () {\n    function NgNoValidate() {\n    }\n    return NgNoValidate;\n}());\nNgNoValidate.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Directive\"], args: [{\n                selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                host: { 'novalidate': '' },\n            },] },\n];\n/**\n * @nocollapse\n */\nNgNoValidate.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SHARED_FORM_DIRECTIVES = [\n    NgNoValidate,\n    NgSelectOption,\n    NgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n];\nvar TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\nvar REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nvar InternalFormsSharedModule = (function () {\n    function InternalFormsSharedModule() {\n    }\n    return InternalFormsSharedModule;\n}());\nInternalFormsSharedModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                declarations: SHARED_FORM_DIRECTIVES,\n                exports: SHARED_FORM_DIRECTIVES,\n            },] },\n];\n/**\n * @nocollapse\n */\nInternalFormsSharedModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The ng module for forms.\n * \\@stable\n */\nvar FormsModule = (function () {\n    function FormsModule() {\n    }\n    return FormsModule;\n}());\nFormsModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                providers: [RadioControlRegistry],\n                exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n            },] },\n];\n/**\n * @nocollapse\n */\nFormsModule.ctorParameters = function () { return []; };\n/**\n * The ng module for reactive forms.\n * \\@stable\n */\nvar ReactiveFormsModule = (function () {\n    function ReactiveFormsModule() {\n    }\n    return ReactiveFormsModule;\n}());\nReactiveFormsModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                providers: [FormBuilder, RadioControlRegistry],\n                exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n            },] },\n];\n/**\n * @nocollapse\n */\nReactiveFormsModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * This module is used for handling user input, by defining and building a {@link FormGroup} that\n * consists of {@link FormControl} objects, and mapping them onto the DOM. {@link FormControl}\n * objects can then be used to read information from the form DOM elements.\n *\n * Forms providers are not included in default providers; you must import these providers\n * explicitly.\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the forms package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=forms.es5.js.map\n\n\n/***/ }),\n\n/***/ 58:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return AUTO_STYLE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return animate; });\n/* unused harmony export group */\n/* unused harmony export keyframes */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return sequence; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return state; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return style; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return transition; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return trigger; });\n/* unused harmony export AnimationPlayer */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return NoopAnimationPlayer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return AnimationGroupPlayer; });\n/**\n * @license Angular v4.1.0\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * \\@experimental Animation support is experimental.\n */\nvar AUTO_STYLE = '*';\n/**\n * `trigger` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `trigger` Creates an animation trigger which will a list of {\\@link state state} and {\\@link\n * transition transition} entries that will be evaluated when the expression bound to the trigger\n * changes.\n *\n * Triggers are registered within the component annotation data under the {\\@link\n * Component#animations-anchor animations section}. An animation trigger can be placed on an element\n * within a template by referencing the name of the trigger followed by the expression value that the\n * trigger is bound to (in the form of `[\\@triggerName]=\"expression\"`.\n *\n * ### Usage\n *\n * `trigger` will create an animation trigger reference based on the provided `name` value. The\n * provided `animation` value is expected to be an array consisting of {\\@link state state} and {\\@link\n * transition transition} declarations.\n *\n * ```typescript\n * \\@Component({\n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n *\n * The template associated with this component will make use of the `myAnimationTrigger` animation\n * trigger by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * tools/gulp-tasks/validate-commit-message.js ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} definitions\n * @return {?}\n */\nfunction trigger(name, definitions) {\n    return { name: name, definitions: definitions };\n}\n/**\n * `animate` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `animate` specifies an animation step that will apply the provided `styles` data for a given\n * amount of time based on the provided `timing` expression value. Calls to `animate` are expected\n * to be used within {\\@link sequence an animation sequence}, {\\@link group group}, or {\\@link\n * transition transition}.\n *\n * ### Usage\n *\n * The `animate` function accepts two input parameters: `timing` and `styles`:\n *\n * - `timing` is a string based value that can be a combination of a duration with optional delay\n * and easing values. The format for the expression breaks down to `duration delay easing`\n * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\n * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the\n * `duration` value in millisecond form.\n * - `styles` is the style input data which can either be a call to {\\@link style style} or {\\@link\n * keyframes keyframes}. If left empty then the styles from the destination state will be collected\n * and used (this is useful when describing an animation step that will complete an animation by\n * {\\@link transition#the-final-animate-call animating to the final state}).\n *\n * ```typescript\n * // various functions for specifying timing data\n * animate(500, style(...))\n * animate(\"1s\", style(...))\n * animate(\"100ms 0.5s\", style(...))\n * animate(\"5s ease\", style(...))\n * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n *\n * // either style() of keyframes() can be used\n * animate(500, style({ background: \"red\" }))\n * animate(500, keyframes([\n *   style({ background: \"blue\" })),\n *   style({ background: \"red\" }))\n * ])\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} timings\n * @param {?=} styles\n * @return {?}\n */\nfunction animate(timings, styles) {\n    if (styles === void 0) { styles = null; }\n    return { type: 4 /* Animate */, styles: styles, timings: timings };\n}\n/**\n * `group` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are\n * useful when a series of styles must be animated/closed off at different statrting/ending times.\n *\n * The `group` function can either be used within a {\\@link sequence sequence} or a {\\@link transition\n * transition} and it will only continue to the next instruction once all of the inner animation\n * steps have completed.\n *\n * ### Usage\n *\n * The `steps` data that is passed into the `group` animation function can either consist of {\\@link\n * style style} or {\\@link animate animate} function calls. Each call to `style()` or `animate()`\n * within a group will be executed instantly (use {\\@link keyframes keyframes} or a {\\@link\n * animate#usage animate() with a delay value} to offset styles to be applied at a later time).\n *\n * ```typescript\n * group([\n *   animate(\"1s\", { background: \"black\" }))\n *   animate(\"2s\", { color: \"white\" }))\n * ])\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @return {?}\n */\nfunction group(steps) {\n    return { type: 3 /* Group */, steps: steps };\n}\n/**\n * `sequence` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by\n * default when an array is passed as animation data into {\\@link transition transition}.)\n *\n * The `sequence` function can either be used within a {\\@link group group} or a {\\@link transition\n * transition} and it will only continue to the next instruction once each of the inner animation\n * steps have completed.\n *\n * To perform animation styling in parallel with other animation steps then have a look at the\n * {\\@link group group} animation function.\n *\n * ### Usage\n *\n * The `steps` data that is passed into the `sequence` animation function can either consist of\n * {\\@link style style} or {\\@link animate animate} function calls. A call to `style()` will apply the\n * provided styling data immediately while a call to `animate()` will apply its styling data over a\n * given time depending on its timing data.\n *\n * ```typescript\n * sequence([\n *   style({ opacity: 0 })),\n *   animate(\"1s\", { opacity: 1 }))\n * ])\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @return {?}\n */\nfunction sequence(steps) {\n    return { type: 2 /* Sequence */, steps: steps };\n}\n/**\n * `style` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `style` declares a key/value object containing CSS properties/styles that can then be used for\n * {\\@link state animation states}, within an {\\@link sequence animation sequence}, or as styling data\n * for both {\\@link animate animate} and {\\@link keyframes keyframes}.\n *\n * ### Usage\n *\n * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs\n * to be defined.\n *\n * ```typescript\n * // string values are used for css properties\n * style({ background: \"red\", color: \"blue\" })\n *\n * // numerical (pixel) values are also supported\n * style({ width: 100, height: 0 })\n * ```\n *\n * #### Auto-styles (using `*`)\n *\n * When an asterix (`*`) character is used as a value then it will be detected from the element\n * being animated and applied as animation data when the animation starts.\n *\n * This feature proves useful for a state depending on layout and/or environment factors; in such\n * cases the styles are calculated just before the animation starts.\n *\n * ```typescript\n * // the steps below will animate from 0 to the\n * // actual height of the element\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} tokens\n * @return {?}\n */\nfunction style(tokens) {\n    return { type: 6 /* Style */, styles: tokens };\n}\n/**\n * `state` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `state` declares an animation state within the given trigger. When a state is active within a\n * component then its associated styles will persist on the element that the trigger is attached to\n * (even when the animation ends).\n *\n * To animate between states, have a look at the animation {\\@link transition transition} DSL\n * function. To register states to an animation trigger please have a look at the {\\@link trigger\n * trigger} function.\n *\n * #### The `void` state\n *\n * The `void` state value is a reserved word that angular uses to determine when the element is not\n * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\n * associated element is void).\n *\n * #### The `*` (default) state\n *\n * The `*` state (when styled) is a fallback state that will be used if the state that is being\n * animated is not declared within the trigger.\n *\n * ### Usage\n *\n * `state` will declare an animation state with its associated styles\n * within the given trigger.\n *\n * - `stateNameExpr` can be one or more state names separated by commas.\n * - `styles` refers to the {\\@link style styling data} that will be persisted on the element once\n * the state has been reached.\n *\n * ```typescript\n * // \"void\" is a reserved name for a state and is used to represent\n * // the state in which an element is detached from from the application.\n * state(\"void\", style({ height: 0 }))\n *\n * // user-defined states\n * state(\"closed\", style({ height: 0 }))\n * state(\"open, visible\", style({ height: \"*\" }))\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} styles\n * @return {?}\n */\nfunction state(name, styles) {\n    return { type: 0 /* State */, name: name, styles: styles };\n}\n/**\n * `keyframes` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `keyframes` specifies a collection of {\\@link style style} entries each optionally characterized\n * by an `offset` value.\n *\n * ### Usage\n *\n * The `keyframes` animation function is designed to be used alongside the {\\@link animate animate}\n * animation function. Instead of applying animations from where they are currently to their\n * destination, keyframes can describe how each style entry is applied and at what point within the\n * animation arc (much like CSS Keyframe Animations do).\n *\n * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what\n * percentage of the animate time the styles will be applied.\n *\n * ```typescript\n * // the provided offset values describe when each backgroundColor value is applied.\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n *\n * Alternatively, if there are no `offset` values used within the style entries then the offsets\n * will be calculated automatically.\n *\n * ```typescript\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @return {?}\n */\nfunction keyframes(steps) {\n    return { type: 5 /* KeyframeSequence */, steps: steps };\n}\n/**\n * `transition` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `transition` declares the {\\@link sequence sequence of animation steps} that will be run when the\n * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>\n * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting\n * and/or ending state).\n *\n * A function can also be provided as the `stateChangeExpr` argument for a transition and this\n * function will be executed each time a state change occurs. If the value returned within the\n * function is true then the associated animation will be run.\n *\n * Animation transitions are placed within an {\\@link trigger animation trigger}. For an transition\n * to animate to a state value and persist its styles then one or more {\\@link state animation\n * states} is expected to be defined.\n *\n * ### Usage\n *\n * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\n * what the previous state is and what the current state has become. In other words, if a transition\n * is defined that matches the old/current state criteria then the associated animation will be\n * triggered.\n *\n * ```typescript\n * // all transition/state changes are defined within an animation trigger\n * trigger(\"myAnimationTrigger\", [\n *   // if a state is defined then its styles will be persisted when the\n *   // animation has fully completed itself\n *   state(\"on\", style({ background: \"green\" })),\n *   state(\"off\", style({ background: \"grey\" })),\n *\n *   // a transition animation that will be kicked off when the state value\n *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n *   transition(\"on => off\", animate(500)),\n *\n *   // it is also possible to do run the same animation for both directions\n *   transition(\"on <=> off\", animate(500)),\n *\n *   // or to define multiple states pairs separated by commas\n *   transition(\"on => off, off => void\", animate(500)),\n *\n *   // this is a catch-all state change for when an element is inserted into\n *   // the page and the destination state is unknown\n *   transition(\"void => *\", [\n *     style({ opacity: 0 }),\n *     animate(500)\n *   ]),\n *\n *   // this will capture a state change between any states\n *   transition(\"* => *\", animate(\"1s 0s\")),\n *\n *   // you can also go full out and include a function\n *   transition((fromState, toState) => {\n *     // when `true` then it will allow the animation below to be invoked\n *     return fromState == \"off\" && toState == \"on\";\n *   }, animate(\"1s 0s\"))\n * ])\n * ```\n *\n * The template associated with this component will make use of the `myAnimationTrigger` animation\n * trigger by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * #### The final `animate` call\n *\n * If the final step within the transition steps is a call to `animate()` that **only** uses a\n * timing value with **no style data** then it will be automatically used as the final animation arc\n * for the element to animate itself to the final state. This involves an automatic mix of\n * adding/removing CSS styles so that the element will be in the exact state it should be for the\n * applied state to be presented correctly.\n *\n * ```\n * // start off by hiding the element, but make sure that it animates properly to whatever state\n * // is currently active for \"myAnimationTrigger\"\n * transition(\"void => *\", [\n *   style({ opacity: 0 }),\n *   animate(500)\n * ])\n * ```\n *\n * ### Transition Aliases (`:enter` and `:leave`)\n *\n * Given that enter (insertion) and leave (removal) animations are so common, the `transition`\n * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*\n * => void` state changes.\n *\n * ```\n * transition(\":enter\", [\n *   style({ opacity: 0 }),\n *   animate(500, style({ opacity: 1 }))\n * ])\n * transition(\":leave\", [\n *   animate(500, style({ opacity: 0 }))\n * ])\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} stateChangeExpr\n * @param {?} steps\n * @return {?}\n */\nfunction transition(stateChangeExpr, steps) {\n    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps };\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?} cb\n * @return {?}\n */\nfunction scheduleMicroTask(cb) {\n    Promise.resolve(null).then(cb);\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@experimental Animation support is experimental.\n * @abstract\n */\nvar AnimationPlayer = (function () {\n    function AnimationPlayer() {\n    }\n    /**\n     * @abstract\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationPlayer.prototype.onDone = function (fn) { };\n    /**\n     * @abstract\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationPlayer.prototype.onStart = function (fn) { };\n    /**\n     * @abstract\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationPlayer.prototype.onDestroy = function (fn) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.init = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.hasStarted = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.play = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.pause = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.restart = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.finish = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.destroy = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.reset = function () { };\n    /**\n     * @abstract\n     * @param {?} p\n     * @return {?}\n     */\n    AnimationPlayer.prototype.setPosition = function (p) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.getPosition = function () { };\n    Object.defineProperty(AnimationPlayer.prototype, \"parentPlayer\", {\n        /**\n         * @return {?}\n         */\n        get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },\n        /**\n         * @param {?} player\n         * @return {?}\n         */\n        set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimationPlayer;\n}());\n/**\n * \\@experimental Animation support is experimental.\n */\nvar NoopAnimationPlayer = (function () {\n    function NoopAnimationPlayer() {\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._started = false;\n        this._destroyed = false;\n        this._finished = false;\n        this.parentPlayer = null;\n    }\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype._onFinish = function () {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(function (fn) { return fn(); });\n            this._onDoneFns = [];\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.hasStarted = function () { return this._started; };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.init = function () { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.play = function () {\n        var _this = this;\n        if (!this.hasStarted()) {\n            scheduleMicroTask(function () { return _this._onFinish(); });\n            this._onStart();\n        }\n        this._started = true;\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype._onStart = function () {\n        this._onStartFns.forEach(function (fn) { return fn(); });\n        this._onStartFns = [];\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.pause = function () { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.restart = function () { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.finish = function () { this._onFinish(); };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.destroy = function () {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            if (!this.hasStarted()) {\n                this._onStart();\n            }\n            this.finish();\n            this._onDestroyFns.forEach(function (fn) { return fn(); });\n            this._onDestroyFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.reset = function () { };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.setPosition = function (p) { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.getPosition = function () { return 0; };\n    return NoopAnimationPlayer;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar AnimationGroupPlayer = (function () {\n    /**\n     * @param {?} _players\n     */\n    function AnimationGroupPlayer(_players) {\n        var _this = this;\n        this._players = _players;\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this._onDestroyFns = [];\n        this.parentPlayer = null;\n        var count = 0;\n        var total = this._players.length;\n        if (total == 0) {\n            scheduleMicroTask(function () { return _this._onFinish(); });\n        }\n        else {\n            this._players.forEach(function (player) {\n                player.parentPlayer = _this;\n                player.onDone(function () {\n                    if (++count >= total) {\n                        _this._onFinish();\n                    }\n                });\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype._onFinish = function () {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(function (fn) { return fn(); });\n            this._onDoneFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.play = function () {\n        if (!this.parentPlayer) {\n            this.init();\n        }\n        if (!this.hasStarted()) {\n            this._onStartFns.forEach(function (fn) { return fn(); });\n            this._onStartFns = [];\n            this._started = true;\n        }\n        this._players.forEach(function (player) { return player.play(); });\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.finish = function () {\n        this._onFinish();\n        this._players.forEach(function (player) { return player.finish(); });\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.destroy = function () {\n        if (!this._destroyed) {\n            this._onFinish();\n            this._players.forEach(function (player) { return player.destroy(); });\n            this._destroyed = true;\n            this._onDestroyFns.forEach(function (fn) { return fn(); });\n            this._onDestroyFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.reset = function () {\n        this._players.forEach(function (player) { return player.reset(); });\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.setPosition = function (p) {\n        this._players.forEach(function (player) { player.setPosition(p); });\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.getPosition = function () {\n        var /** @type {?} */ min = 0;\n        this._players.forEach(function (player) {\n            var /** @type {?} */ p = player.getPosition();\n            min = Math.min(p, min);\n        });\n        return min;\n    };\n    Object.defineProperty(AnimationGroupPlayer.prototype, \"players\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._players; },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimationGroupPlayer;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the animation package.\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=animations.es5.js.map\n\n\n/***/ }),\n\n/***/ 62:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(4);\r\nvar AboutComponent = (function () {\r\n    function AboutComponent() {\r\n        // Do stuff\r\n    }\r\n    AboutComponent.prototype.ngOnInit = function () {\r\n        console.log('Hello About');\r\n    };\r\n    return AboutComponent;\r\n}());\r\nAboutComponent = __decorate([\r\n    core_1.Component({\r\n        selector: 'my-about',\r\n        template: __webpack_require__(154),\r\n        styles: [__webpack_require__(151)]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], AboutComponent);\r\nexports.AboutComponent = AboutComponent;\r\n\n\n/***/ }),\n\n/***/ 63:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(4);\r\n__webpack_require__(394);\r\nvar HomeComponent = (function () {\r\n    function HomeComponent() {\r\n        // Do stuff\r\n    }\r\n    HomeComponent.prototype.ngAfterViewInit = function () {\r\n        // todo: anything to add here?\r\n    };\r\n    return HomeComponent;\r\n}());\r\nHomeComponent = __decorate([\r\n    core_1.Component({\r\n        selector: 'my-home',\r\n        template: __webpack_require__(156),\r\n        styles: [__webpack_require__(153)]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], HomeComponent);\r\nexports.HomeComponent = HomeComponent;\r\n\n\n/***/ })\n\n},[143]);\n\n\n// WEBPACK FOOTER //\n// js/app.521de9d80b797ef7ea16.js","import { NgModule, ApplicationRef } from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { HttpModule }     from '@angular/http';\nimport { FormsModule }    from '@angular/forms';\nimport { MaterialModule } from '@angular/material';\nimport { NgbModule }      from '@ng-bootstrap/ng-bootstrap';\nimport { BrowserAnimationsModule }      from '@angular/platform-browser/animations';\n\nimport { AppComponent }   from './app.component';\nimport { HomeComponent }  from './home/home.component';\nimport { AboutComponent } from './about/about.component';\nimport { Auth }               from './shared';\nimport { routing }        from './app.routing';\nimport { RouteGuard }      from './shared';\n\nimport { removeNgStyles, createNewHosts } from '@angularclass/hmr';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpModule,\n    FormsModule,\n    MaterialModule,\n    routing\n  ],\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    AboutComponent\n  ],\n  providers: [\n    RouteGuard,\n    Auth\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n  constructor(public appRef: ApplicationRef) {}\n  hmrOnInit(store) {\n    console.log('HMR store', store);\n  }\n  hmrOnDestroy(store) {\n    let cmpLocation = this.appRef.components.map(cmp => cmp.location.nativeElement);\n    // recreate elements\n    store.disposeOldHosts = createNewHosts(cmpLocation);\n    // remove styles\n    removeNgStyles();\n  }\n  hmrAfterDestroy(store) {\n    // display new elements\n    store.disposeOldHosts();\n    delete store.disposeOldHosts;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/@angularclass/hmr-loader!./~/angular2-router-loader/src!./~/tslint-loader!./src/app/app.module.ts","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n  * @license Angular Material v2.0.0-beta.3\n  * Copyright (c) 2017 Google, Inc. https://material.angular.io/\n  * License: MIT\n  */\nimport { ApplicationRef, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentFactoryResolver, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Host, HostBinding, Inject, Injectable, Injector, Input, NgModule, NgZone, OpaqueToken, Optional, Output, Renderer, SecurityContext, Self, SkipSelf, TemplateRef, ViewChild, ViewContainerRef, ViewEncapsulation, forwardRef, isDevMode } from '@angular/core';\nimport { DOCUMENT, DomSanitizer, HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/merge';\nimport 'rxjs/add/operator/auditTime';\nimport { FormGroupDirective, FormsModule, NG_VALUE_ACCESSOR, NgControl, NgForm } from '@angular/forms';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport 'rxjs/add/operator/startWith';\nimport 'rxjs/add/operator/first';\nimport { Http, HttpModule } from '@angular/http';\nimport 'rxjs/add/observable/forkJoin';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/operator/finally';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/switchMap';\n/** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\nvar hasDoneGlobalChecks = false;\nvar MATERIAL_COMPATIBILITY_MODE = new OpaqueToken('md-compatibility-mode');\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\nvar MAT_ELEMENTS_SELECTOR = \"\\n  [mat-button],\\n  [mat-dialog-actions],\\n  [mat-dialog-close],\\n  [mat-dialog-content],\\n  [mat-dialog-title],\\n  [mat-fab],\\n  [mat-icon-button],\\n  [mat-menu-trigger-for],\\n  [mat-mini-fab],\\n  [mat-raised-button],\\n  [mat-tab-label],\\n  [mat-tab-link],\\n  [mat-tab-nav-bar],\\n  [matTooltip],\\n  mat-autocomplete,\\n  mat-button-toggle,\\n  mat-button-toggle-group,\\n  mat-button-toggle,\\n  mat-card,\\n  mat-card-actions,\\n  mat-card-content,\\n  mat-card-footer,\\n  mat-card-header,\\n  mat-card-subtitle,\\n  mat-card-title,\\n  mat-card-title-group,\\n  mat-checkbox,\\n  mat-chip,\\n  mat-dialog-actions,\\n  mat-dialog-container,\\n  mat-dialog-content,\\n  mat-divider,\\n  mat-grid-list,\\n  mat-grid-tile,\\n  mat-grid-tile-footer,\\n  mat-grid-tile-header,\\n  mat-hint,\\n  mat-icon,\\n  mat-list,\\n  mat-list-item,\\n  mat-menu,\\n  mat-nav-list,\\n  mat-option,\\n  mat-placeholder,\\n  mat-progress-bar,\\n  mat-pseudo-checkbox,\\n  mat-radio-button,\\n  mat-radio-group,\\n  mat-select,\\n  mat-sidenav,\\n  mat-sidenav-container,\\n  mat-slider,\\n  mat-spinner,\\n  mat-tab,\\n  mat-tab-group,\\n  mat-toolbar,\\n  mat-error\";\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\nvar MD_ELEMENTS_SELECTOR = \"\\n  [md-button],\\n  [md-dialog-actions],\\n  [md-dialog-close],\\n  [md-dialog-content],\\n  [md-dialog-title],\\n  [md-fab],\\n  [md-icon-button],\\n  [md-menu-trigger-for],\\n  [md-mini-fab],\\n  [md-raised-button],\\n  [md-tab-label],\\n  [md-tab-link],\\n  [md-tab-nav-bar],\\n  [mdTooltip],\\n  md-autocomplete,\\n  md-button-toggle,\\n  md-button-toggle-group,\\n  md-button-toggle,\\n  md-card,\\n  md-card-actions,\\n  md-card-content,\\n  md-card-footer,\\n  md-card-header,\\n  md-card-subtitle,\\n  md-card-title,\\n  md-card-title-group,\\n  md-checkbox,\\n  md-chip,\\n  md-dialog-actions,\\n  md-dialog-container,\\n  md-dialog-content,\\n  md-divider,\\n  md-grid-list,\\n  md-grid-tile,\\n  md-grid-tile-footer,\\n  md-grid-tile-header,\\n  md-hint,\\n  md-icon,\\n  md-list,\\n  md-list-item,\\n  md-menu,\\n  md-nav-list,\\n  md-option,\\n  md-placeholder,\\n  md-progress-bar,\\n  md-pseudo-checkbox,\\n  md-radio-button,\\n  md-radio-group,\\n  md-select,\\n  md-sidenav,\\n  md-sidenav-container,\\n  md-slider,\\n  md-spinner,\\n  md-tab,\\n  md-tab-group,\\n  md-toolbar,\\n  md-error\";\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nvar MatPrefixRejector = (function () {\n    /**\n     * @param {?} isCompatibilityMode\n     */\n    function MatPrefixRejector(isCompatibilityMode) {\n        if (!isCompatibilityMode) {\n            throw Error('The \"mat-\" prefix cannot be used out of ng-material v1 compatibility mode.');\n        }\n    }\n    return MatPrefixRejector;\n}());\nMatPrefixRejector.decorators = [\n    { type: Directive, args: [{ selector: MAT_ELEMENTS_SELECTOR },] },\n];\n/**\n * @nocollapse\n */\nMatPrefixRejector.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE,] },] },\n]; };\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nvar MdPrefixRejector = (function () {\n    /**\n     * @param {?} isCompatibilityMode\n     */\n    function MdPrefixRejector(isCompatibilityMode) {\n        if (isCompatibilityMode) {\n            throw Error('The \"md-\" prefix cannot be used in ng-material v1 compatibility mode.');\n        }\n    }\n    return MdPrefixRejector;\n}());\nMdPrefixRejector.decorators = [\n    { type: Directive, args: [{ selector: MD_ELEMENTS_SELECTOR },] },\n];\n/**\n * @nocollapse\n */\nMdPrefixRejector.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE,] },] },\n]; };\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nvar CompatibilityModule = (function () {\n    /**\n     * @param {?} _document\n     */\n    function CompatibilityModule(_document) {\n        this._document = _document;\n        if (!hasDoneGlobalChecks && isDevMode()) {\n            this._checkDoctype();\n            this._checkTheme();\n            hasDoneGlobalChecks = true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    CompatibilityModule.forRoot = function () {\n        return {\n            ngModule: CompatibilityModule,\n            providers: [],\n        };\n    };\n    /**\n     * @return {?}\n     */\n    CompatibilityModule.prototype._checkDoctype = function () {\n        if (this._document && !this._document.doctype) {\n            console.warn('Current document does not have a doctype. This may cause ' +\n                'some Angular Material components not to behave as expected.');\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CompatibilityModule.prototype._checkTheme = function () {\n        if (this._document) {\n            var /** @type {?} */ testElement = this._document.createElement('div');\n            testElement.classList.add('mat-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n            if (getComputedStyle(testElement).display !== 'none') {\n                console.warn('Could not find Angular Material core theme. Most Material ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: https://material.angular.io/guide/theming');\n            }\n            this._document.body.removeChild(testElement);\n        }\n    };\n    return CompatibilityModule;\n}());\nCompatibilityModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [MatPrefixRejector, MdPrefixRejector],\n                exports: [MatPrefixRejector, MdPrefixRejector],\n            },] },\n];\n/**\n * @nocollapse\n */\nCompatibilityModule.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] },] },\n]; };\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nvar NoConflictStyleCompatibilityMode = (function () {\n    function NoConflictStyleCompatibilityMode() {\n    }\n    return NoConflictStyleCompatibilityMode;\n}());\nNoConflictStyleCompatibilityMode.decorators = [\n    { type: NgModule, args: [{\n                providers: [{\n                        provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n                    }],\n            },] },\n];\n/**\n * @nocollapse\n */\nNoConflictStyleCompatibilityMode.ctorParameters = function () { return []; };\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nvar MdLine = (function () {\n    function MdLine() {\n    }\n    return MdLine;\n}());\nMdLine.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-line], [mat-line]',\n                host: {\n                    '[class.mat-line]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdLine.ctorParameters = function () { return []; };\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nvar MdLineSetter = (function () {\n    /**\n     * @param {?} _lines\n     * @param {?} _renderer\n     * @param {?} _element\n     */\n    function MdLineSetter(_lines, _renderer, _element) {\n        var _this = this;\n        this._lines = _lines;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._setLineClass(this._lines.length);\n        this._lines.changes.subscribe(function () {\n            _this._setLineClass(_this._lines.length);\n        });\n    }\n    /**\n     * @param {?} count\n     * @return {?}\n     */\n    MdLineSetter.prototype._setLineClass = function (count) {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(\"mat-\" + count + \"-line\", true);\n        }\n        else if (count > 3) {\n            this._setClass(\"mat-multi-line\", true);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdLineSetter.prototype._resetClasses = function () {\n        this._setClass('mat-2-line', false);\n        this._setClass('mat-3-line', false);\n        this._setClass('mat-multi-line', false);\n    };\n    /**\n     * @param {?} className\n     * @param {?} bool\n     * @return {?}\n     */\n    MdLineSetter.prototype._setClass = function (className, bool) {\n        this._renderer.setElementClass(this._element.nativeElement, className, bool);\n    };\n    return MdLineSetter;\n}());\nvar MdLineModule = (function () {\n    function MdLineModule() {\n    }\n    return MdLineModule;\n}());\nMdLineModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CompatibilityModule],\n                exports: [MdLine, CompatibilityModule],\n                declarations: [MdLine],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdLineModule.ctorParameters = function () { return []; };\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\nvar Dir = (function () {\n    function Dir() {\n        /** Layout direction of the element. */\n        this._dir = 'ltr';\n        /** Event emitted when the direction changes. */\n        this.dirChange = new EventEmitter();\n    }\n    Object.defineProperty(Dir.prototype, \"dir\", {\n        /**\n         * \\@docs-private\n         * @return {?}\n         */\n        get: function () {\n            return this._dir;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            var /** @type {?} */ old = this._dir;\n            this._dir = v;\n            if (old != this._dir) {\n                this.dirChange.emit();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dir.prototype, \"value\", {\n        /**\n         * Current layout direction of the element.\n         * @return {?}\n         */\n        get: function () { return this.dir; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.dir = v; },\n        enumerable: true,\n        configurable: true\n    });\n    return Dir;\n}());\nDir.decorators = [\n    { type: Directive, args: [{\n                selector: '[dir]',\n                // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n                exportAs: '$implicit'\n            },] },\n];\n/**\n * @nocollapse\n */\nDir.ctorParameters = function () { return []; };\nDir.propDecorators = {\n    '_dir': [{ type: Input, args: ['dir',] },],\n    'dirChange': [{ type: Output },],\n    'dir': [{ type: HostBinding, args: ['attr.dir',] },],\n};\nvar RtlModule = (function () {\n    function RtlModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    RtlModule.forRoot = function () {\n        return {\n            ngModule: RtlModule,\n            providers: []\n        };\n    };\n    return RtlModule;\n}());\nRtlModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [Dir],\n                declarations: [Dir]\n            },] },\n];\n/**\n * @nocollapse\n */\nRtlModule.ctorParameters = function () { return []; };\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nvar ObserveContent = (function () {\n    /**\n     * @param {?} _elementRef\n     */\n    function ObserveContent(_elementRef) {\n        this._elementRef = _elementRef;\n        /** Event emitted for each change in the element's content. */\n        this.event = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ObserveContent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._observer = new MutationObserver(function (mutations) { return mutations.forEach(function () { return _this.event.emit(); }); });\n        this._observer.observe(this._elementRef.nativeElement, {\n            characterData: true,\n            childList: true,\n            subtree: true\n        });\n    };\n    /**\n     * @return {?}\n     */\n    ObserveContent.prototype.ngOnDestroy = function () {\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n    };\n    return ObserveContent;\n}());\nObserveContent.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkObserveContent]'\n            },] },\n];\n/**\n * @nocollapse\n */\nObserveContent.ctorParameters = function () { return [\n    { type: ElementRef, },\n]; };\nObserveContent.propDecorators = {\n    'event': [{ type: Output, args: ['cdkObserveContent',] },],\n};\nvar ObserveContentModule = (function () {\n    function ObserveContentModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    ObserveContentModule.forRoot = function () {\n        return {\n            ngModule: ObserveContentModule,\n            providers: []\n        };\n    };\n    return ObserveContentModule;\n}());\nObserveContentModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [ObserveContent],\n                declarations: [ObserveContent]\n            },] },\n];\n/**\n * @nocollapse\n */\nObserveContentModule.ctorParameters = function () { return []; };\n// Due to a bug in the ChromeDriver, Angular keyboard events are not triggered by `sendKeys`\n// during E2E tests when using dot notation such as `(keydown.rightArrow)`. To get around this,\n// we are temporarily using a single (keydown) handler.\n// See: https://github.com/angular/angular/issues/9419\nvar UP_ARROW = 38;\nvar DOWN_ARROW = 40;\nvar RIGHT_ARROW = 39;\nvar LEFT_ARROW = 37;\nvar PAGE_UP = 33;\nvar PAGE_DOWN = 34;\nvar HOME = 36;\nvar END = 35;\nvar ENTER = 13;\nvar SPACE = 32;\nvar TAB = 9;\nvar ESCAPE = 27;\nvar BACKSPACE = 8;\nvar DELETE = 46;\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n * @param {?} value\n * @return {?}\n */\nfunction coerceBooleanProperty(value) {\n    return value != null && \"\" + value !== 'false';\n}\nvar RippleState = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n/**\n * Reference to a previously launched ripple element.\n */\nvar RippleRef = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} element\n     * @param {?} config\n     */\n    function RippleRef(_renderer, element, config) {\n        this._renderer = _renderer;\n        this.element = element;\n        this.config = config;\n        /** Current state of the ripple reference. */\n        this.state = RippleState.HIDDEN;\n    }\n    /**\n     * Fades out the ripple element.\n     * @return {?}\n     */\n    RippleRef.prototype.fadeOut = function () {\n        this._renderer.fadeOutRipple(this);\n    };\n    return RippleRef;\n}());\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nvar RIPPLE_FADE_IN_DURATION = 450;\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nvar RIPPLE_FADE_OUT_DURATION = 400;\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nvar RippleRenderer = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} _ruler\n     */\n    function RippleRenderer(_elementRef, _ngZone, _ruler) {\n        this._ngZone = _ngZone;\n        this._ruler = _ruler;\n        this._isMousedown = false;\n        this._triggerEvents = new Map();\n        this._activeRipples = new Set();\n        /** Ripple config for all ripples created by events. */\n        this.rippleConfig = {};\n        /** Whether mouse ripples should be created or not. */\n        this.rippleDisabled = false;\n        this._containerElement = _elementRef.nativeElement;\n        // Specify events which need to be registered on the trigger.\n        this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n        this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n        this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n        // By default use the host element as trigger element.\n        this.setTriggerElement(this._containerElement);\n    }\n    /**\n     * Fades in a ripple at the given coordinates.\n     * @param {?} pageX\n     * @param {?} pageY\n     * @param {?=} config\n     * @return {?}\n     */\n    RippleRenderer.prototype.fadeInRipple = function (pageX, pageY, config) {\n        var _this = this;\n        if (config === void 0) { config = {}; }\n        var /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n        if (config.centered) {\n            pageX = containerRect.left + containerRect.width / 2;\n            pageY = containerRect.top + containerRect.height / 2;\n        }\n        else {\n            // Subtract scroll values from the coordinates because calculations below\n            // are always relative to the viewport rectangle.\n            var /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n            pageX -= scrollPosition.left;\n            pageY -= scrollPosition.top;\n        }\n        var /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n        var /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n        var /** @type {?} */ offsetX = pageX - containerRect.left;\n        var /** @type {?} */ offsetY = pageY - containerRect.top;\n        var /** @type {?} */ ripple = document.createElement('div');\n        ripple.classList.add('mat-ripple-element');\n        ripple.style.left = offsetX - radius + \"px\";\n        ripple.style.top = offsetY - radius + \"px\";\n        ripple.style.height = radius * 2 + \"px\";\n        ripple.style.width = radius * 2 + \"px\";\n        // If the color is not set, the default CSS color will be used.\n        ripple.style.backgroundColor = config.color;\n        ripple.style.transitionDuration = duration + \"ms\";\n        this._containerElement.appendChild(ripple);\n        // By default the browser does not recalculate the styles of dynamically created\n        // ripple elements. This is critical because then the `scale` would not animate properly.\n        enforceStyleRecalculation(ripple);\n        ripple.style.transform = 'scale(1)';\n        // Exposed reference to the ripple that will be returned.\n        var /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n        rippleRef.state = RippleState.FADING_IN;\n        // Add the ripple reference to the list of all active ripples.\n        this._activeRipples.add(rippleRef);\n        // Wait for the ripple element to be completely faded in.\n        // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n        this.runTimeoutOutsideZone(function () {\n            rippleRef.state = RippleState.VISIBLE;\n            if (!config.persistent && !_this._isMousedown) {\n                rippleRef.fadeOut();\n            }\n        }, duration);\n        return rippleRef;\n    };\n    /**\n     * Fades out a ripple reference.\n     * @param {?} rippleRef\n     * @return {?}\n     */\n    RippleRenderer.prototype.fadeOutRipple = function (rippleRef) {\n        // For ripples that are not active anymore, don't re-un the fade-out animation.\n        if (!this._activeRipples.delete(rippleRef)) {\n            return;\n        }\n        var /** @type {?} */ rippleEl = rippleRef.element;\n        rippleEl.style.transitionDuration = RIPPLE_FADE_OUT_DURATION + \"ms\";\n        rippleEl.style.opacity = '0';\n        rippleRef.state = RippleState.FADING_OUT;\n        // Once the ripple faded out, the ripple can be safely removed from the DOM.\n        this.runTimeoutOutsideZone(function () {\n            rippleRef.state = RippleState.HIDDEN;\n            rippleEl.parentNode.removeChild(rippleEl);\n        }, RIPPLE_FADE_OUT_DURATION);\n    };\n    /**\n     * Fades out all currently active ripples.\n     * @return {?}\n     */\n    RippleRenderer.prototype.fadeOutAll = function () {\n        this._activeRipples.forEach(function (ripple) { return ripple.fadeOut(); });\n    };\n    /**\n     * Sets the trigger element and registers the mouse events.\n     * @param {?} element\n     * @return {?}\n     */\n    RippleRenderer.prototype.setTriggerElement = function (element) {\n        var _this = this;\n        // Remove all previously register event listeners from the trigger element.\n        if (this._triggerElement) {\n            this._triggerEvents.forEach(function (fn, type) { return _this._triggerElement.removeEventListener(type, fn); });\n        }\n        if (element) {\n            // If the element is not null, register all event listeners on the trigger element.\n            this._ngZone.runOutsideAngular(function () {\n                _this._triggerEvents.forEach(function (fn, type) { return element.addEventListener(type, fn); });\n            });\n        }\n        this._triggerElement = element;\n    };\n    /**\n     * Listener being called on mousedown event.\n     * @param {?} event\n     * @return {?}\n     */\n    RippleRenderer.prototype.onMousedown = function (event) {\n        if (!this.rippleDisabled) {\n            this._isMousedown = true;\n            this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n        }\n    };\n    /**\n     * Listener being called on mouseup event.\n     * @return {?}\n     */\n    RippleRenderer.prototype.onMouseup = function () {\n        this._isMousedown = false;\n        // Fade-out all ripples that are completely visible and not persistent.\n        this._activeRipples.forEach(function (ripple) {\n            if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n                ripple.fadeOut();\n            }\n        });\n    };\n    /**\n     * Listener being called on mouseleave event.\n     * @return {?}\n     */\n    RippleRenderer.prototype.onMouseLeave = function () {\n        if (this._isMousedown) {\n            this.onMouseup();\n        }\n    };\n    /**\n     * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n     * @param {?} fn\n     * @param {?=} delay\n     * @return {?}\n     */\n    RippleRenderer.prototype.runTimeoutOutsideZone = function (fn, delay) {\n        if (delay === void 0) { delay = 0; }\n        this._ngZone.runOutsideAngular(function () { return setTimeout(fn, delay); });\n    };\n    return RippleRenderer;\n}());\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element) {\n    // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n    // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x, y, rect) {\n    var /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n    var /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n    return Math.sqrt(distX * distX + distY * distY);\n}\n/** Time in ms to throttle the scrolling events by default. */\nvar DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nvar ScrollDispatcher = (function () {\n    /**\n     * @param {?} _ngZone\n     */\n    function ScrollDispatcher(_ngZone) {\n        this._ngZone = _ngZone;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollableReferences = new Map();\n    }\n    /**\n     * Registers a Scrollable with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event in its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.register = function (scrollable) {\n        var _this = this;\n        var /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(function () { return _this._notify(); });\n        this.scrollableReferences.set(scrollable, scrollSubscription);\n    };\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.deregister = function (scrollable) {\n        if (this.scrollableReferences.has(scrollable)) {\n            this.scrollableReferences.get(scrollable).unsubscribe();\n            this.scrollableReferences.delete(scrollable);\n        }\n    };\n    /**\n     * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     * @param {?=} auditTimeInMs\n     * @param {?=} callback\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.scrolled = function (auditTimeInMs, callback) {\n        var _this = this;\n        if (auditTimeInMs === void 0) { auditTimeInMs = DEFAULT_SCROLL_TIME; }\n        // In the case of a 0ms delay, use an observable without auditTime\n        // since it does add a perceptible delay in processing overhead.\n        var /** @type {?} */ observable = auditTimeInMs > 0 ?\n            this._scrolled.asObservable().auditTime(auditTimeInMs) :\n            this._scrolled.asObservable();\n        this._scrolledCount++;\n        if (!this._globalSubscription) {\n            this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n                return Observable.merge(Observable.fromEvent(window.document, 'scroll'), Observable.fromEvent(window, 'resize')).subscribe(function () { return _this._notify(); });\n            });\n        }\n        // Note that we need to do the subscribing from here, in order to be able to remove\n        // the global event listeners once there are no more subscriptions.\n        var /** @type {?} */ subscription = observable.subscribe(callback);\n        subscription.add(function () {\n            _this._scrolledCount--;\n            if (_this._globalSubscription && !_this.scrollableReferences.size && !_this._scrolledCount) {\n                _this._globalSubscription.unsubscribe();\n                _this._globalSubscription = null;\n            }\n        });\n        return subscription;\n    };\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.getScrollContainers = function (elementRef) {\n        var _this = this;\n        var /** @type {?} */ scrollingContainers = [];\n        this.scrollableReferences.forEach(function (subscription, scrollable) {\n            if (_this.scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    };\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.scrollableContainsElement = function (scrollable, elementRef) {\n        var /** @type {?} */ element = elementRef.nativeElement;\n        var /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = element.parentElement);\n    };\n    /**\n     * Sends a notification that a scroll event has been fired.\n     * @return {?}\n     */\n    ScrollDispatcher.prototype._notify = function () {\n        this._scrolled.next();\n    };\n    return ScrollDispatcher;\n}());\nScrollDispatcher.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nScrollDispatcher.ctorParameters = function () { return [\n    { type: NgZone, },\n]; };\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @return {?}\n */\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone) {\n    return parentDispatcher || new ScrollDispatcher(ngZone);\n}\nvar SCROLL_DISPATCHER_PROVIDER = {\n    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n    provide: ScrollDispatcher,\n    deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone],\n    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nvar ViewportRuler = (function () {\n    /**\n     * @param {?} scrollDispatcher\n     */\n    function ViewportRuler(scrollDispatcher) {\n        var _this = this;\n        // Initially cache the document rectangle.\n        this._cacheViewportGeometry();\n        // Subscribe to scroll and resize events and update the document rectangle on changes.\n        scrollDispatcher.scrolled(null, function () { return _this._cacheViewportGeometry(); });\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @param {?=} documentRect\n     * @return {?}\n     */\n    ViewportRuler.prototype.getViewportRect = function (documentRect) {\n        if (documentRect === void 0) { documentRect = this._documentRect; }\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        var /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n        var /** @type {?} */ height = window.innerHeight;\n        var /** @type {?} */ width = window.innerWidth;\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height: height,\n            width: width,\n        };\n    };\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @param {?=} documentRect\n     * @return {?}\n     */\n    ViewportRuler.prototype.getViewportScrollPosition = function (documentRect) {\n        if (documentRect === void 0) { documentRect = this._documentRect; }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        var /** @type {?} */ top = -documentRect.top || document.body.scrollTop || window.scrollY || 0;\n        var /** @type {?} */ left = -documentRect.left || document.body.scrollLeft || window.scrollX || 0;\n        return { top: top, left: left };\n    };\n    /**\n     * Caches the latest client rectangle of the document element.\n     * @return {?}\n     */\n    ViewportRuler.prototype._cacheViewportGeometry = function () {\n        this._documentRect = document.documentElement.getBoundingClientRect();\n    };\n    return ViewportRuler;\n}());\nViewportRuler.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nViewportRuler.ctorParameters = function () { return [\n    { type: ScrollDispatcher, },\n]; };\n/**\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, scrollDispatcher) {\n    return parentRuler || new ViewportRuler(scrollDispatcher);\n}\nvar VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n/** OpaqueToken that can be used to specify the global ripple options. */\nvar MD_RIPPLE_GLOBAL_OPTIONS = new OpaqueToken('md-ripple-global-options');\nvar MdRipple = (function () {\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} ruler\n     * @param {?} globalOptions\n     */\n    function MdRipple(elementRef, ngZone, ruler, \n        // Type needs to be `any` because of https://github.com/angular/angular/issues/12631\n        globalOptions) {\n        /**\n         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n         * will be the distance from the center of the ripple to the furthest corner of the host element's\n         * bounding rectangle.\n         */\n        this.radius = 0;\n        /**\n         * If set, the normal duration of ripple animations is divided by this value. For example,\n         * setting it to 0.5 will cause the animations to take twice as long.\n         * A changed speedFactor will not modify the fade-out duration of the ripples.\n         */\n        this.speedFactor = 1;\n        this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler);\n        this._globalOptions = globalOptions ? globalOptions : {};\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MdRipple.prototype.ngOnChanges = function (changes) {\n        if (changes['trigger'] && this.trigger) {\n            this._rippleRenderer.setTriggerElement(this.trigger);\n        }\n        this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n        this._rippleRenderer.rippleConfig = this.rippleConfig;\n    };\n    /**\n     * @return {?}\n     */\n    MdRipple.prototype.ngOnDestroy = function () {\n        // Set the trigger element to null to cleanup all listeners.\n        this._rippleRenderer.setTriggerElement(null);\n    };\n    /**\n     * Launches a manual ripple at the specified position.\n     * @param {?} pageX\n     * @param {?} pageY\n     * @param {?=} config\n     * @return {?}\n     */\n    MdRipple.prototype.launch = function (pageX, pageY, config) {\n        if (config === void 0) { config = this.rippleConfig; }\n        return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n    };\n    /**\n     * Fades out all currently showing ripple elements.\n     * @return {?}\n     */\n    MdRipple.prototype.fadeOutAll = function () {\n        this._rippleRenderer.fadeOutAll();\n    };\n    Object.defineProperty(MdRipple.prototype, \"rippleConfig\", {\n        /**\n         * Ripple configuration from the directive's input values.\n         * @return {?}\n         */\n        get: function () {\n            return {\n                centered: this.centered,\n                speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n                radius: this.radius,\n                color: this.color\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MdRipple;\n}());\nMdRipple.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n                exportAs: 'mdRipple',\n                host: {\n                    '[class.mat-ripple]': 'true',\n                    '[class.mat-ripple-unbounded]': 'unbounded'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdRipple.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: NgZone, },\n    { type: ViewportRuler, },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS,] },] },\n]; };\nMdRipple.propDecorators = {\n    'trigger': [{ type: Input, args: ['mdRippleTrigger',] },],\n    'centered': [{ type: Input, args: ['mdRippleCentered',] },],\n    'disabled': [{ type: Input, args: ['mdRippleDisabled',] },],\n    'radius': [{ type: Input, args: ['mdRippleRadius',] },],\n    'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor',] },],\n    'color': [{ type: Input, args: ['mdRippleColor',] },],\n    'unbounded': [{ type: Input, args: ['mdRippleUnbounded',] },],\n};\nvar MdRippleModule = (function () {\n    function MdRippleModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdRippleModule.forRoot = function () {\n        return {\n            ngModule: MdRippleModule,\n            providers: []\n        };\n    };\n    return MdRippleModule;\n}());\nMdRippleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CompatibilityModule],\n                exports: [MdRipple, CompatibilityModule],\n                declarations: [MdRipple],\n                providers: [VIEWPORT_RULER_PROVIDER, SCROLL_DISPATCHER_PROVIDER],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdRippleModule.ctorParameters = function () { return []; };\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nvar MdPseudoCheckbox = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     */\n    function MdPseudoCheckbox(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        /** Display state of the checkbox. */\n        this.state = 'unchecked';\n        /** Whether the checkbox is disabled. */\n        this.disabled = false;\n        this.color = 'accent';\n    }\n    Object.defineProperty(MdPseudoCheckbox.prototype, \"color\", {\n        /**\n         * Color of the checkbox.\n         * @return {?}\n         */\n        get: function () { return this._color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (value) {\n                var /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n                this._renderer.setElementClass(nativeElement, \"mat-\" + this.color, false);\n                this._renderer.setElementClass(nativeElement, \"mat-\" + value, true);\n                this._color = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    return MdPseudoCheckbox;\n}());\nMdPseudoCheckbox.decorators = [\n    { type: Component, args: [{ encapsulation: ViewEncapsulation.None,\n                selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n                styles: [\".mat-pseudo-checkbox{width:20px;height:20px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;transition:border-color 90ms cubic-bezier(0,0,.2,.1),background-color 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:'';border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:9px;left:2px;width:16px;opacity:1}.mat-pseudo-checkbox-checked::after{top:5px;left:3px;width:12px;height:5px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1} /*# sourceMappingURL=pseudo-checkbox.css.map */ \"],\n                template: '',\n                host: {\n                    '[class.mat-pseudo-checkbox]': 'true',\n                    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n                    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n                    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdPseudoCheckbox.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer, },\n]; };\nMdPseudoCheckbox.propDecorators = {\n    'state': [{ type: Input },],\n    'disabled': [{ type: Input },],\n    'color': [{ type: Input },],\n};\nvar MdSelectionModule = (function () {\n    function MdSelectionModule() {\n    }\n    return MdSelectionModule;\n}());\nMdSelectionModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MdPseudoCheckbox],\n                declarations: [MdPseudoCheckbox]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSelectionModule.ctorParameters = function () { return []; };\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nvar _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nvar MdOptionSelectionChange = (function () {\n    /**\n     * @param {?} source\n     * @param {?=} isUserInput\n     */\n    function MdOptionSelectionChange(source, isUserInput) {\n        if (isUserInput === void 0) { isUserInput = false; }\n        this.source = source;\n        this.isUserInput = isUserInput;\n    }\n    return MdOptionSelectionChange;\n}());\n/**\n * Single option inside of a `<md-select>` element.\n */\nvar MdOption = (function () {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _isCompatibilityMode\n     */\n    function MdOption(_element, _renderer, _isCompatibilityMode) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._isCompatibilityMode = _isCompatibilityMode;\n        this._selected = false;\n        this._active = false;\n        this._disabled = false;\n        this._id = \"md-option-\" + _uniqueIdCounter++;\n        /** Whether the wrapping component is in multiple selection mode. */\n        this.multiple = false;\n        /** Event emitted when the option is selected or deselected. */\n        this.onSelectionChange = new EventEmitter();\n    }\n    Object.defineProperty(MdOption.prototype, \"id\", {\n        /**\n         * The unique ID of the option.\n         * @return {?}\n         */\n        get: function () { return this._id; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdOption.prototype, \"selected\", {\n        /**\n         * Whether or not the option is currently selected.\n         * @return {?}\n         */\n        get: function () { return this._selected; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdOption.prototype, \"disabled\", {\n        /**\n         * Whether the option is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdOption.prototype, \"active\", {\n        /**\n         * Whether or not the option is currently active and ready to be selected.\n         * An active option displays styles as if it is focused, but the\n         * focus is actually retained somewhere else. This comes in handy\n         * for components like autocomplete where focus must remain on the input.\n         * @return {?}\n         */\n        get: function () {\n            return this._active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdOption.prototype, \"viewValue\", {\n        /**\n         * The displayed value of the option. It is necessary to show the selected option in the\n         * select's trigger.\n         * @return {?}\n         */\n        get: function () {\n            // TODO(kara): Add input property alternative for node envs.\n            return this._getHostElement().textContent.trim();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Selects the option.\n     * @return {?}\n     */\n    MdOption.prototype.select = function () {\n        this._selected = true;\n        this._emitSelectionChangeEvent();\n    };\n    /**\n     * Deselects the option.\n     * @return {?}\n     */\n    MdOption.prototype.deselect = function () {\n        this._selected = false;\n        this._emitSelectionChangeEvent();\n    };\n    /**\n     * Sets focus onto this option.\n     * @return {?}\n     */\n    MdOption.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n    };\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     * @return {?}\n     */\n    MdOption.prototype.setActiveStyles = function () {\n        this._active = true;\n    };\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     * @return {?}\n     */\n    MdOption.prototype.setInactiveStyles = function () {\n        this._active = false;\n    };\n    /**\n     * Ensures the option is selected when activated from the keyboard.\n     * @param {?} event\n     * @return {?}\n     */\n    MdOption.prototype._handleKeydown = function (event) {\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this._selectViaInteraction();\n        }\n    };\n    /**\n     * Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.\n     * @return {?}\n     */\n    MdOption.prototype._selectViaInteraction = function () {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._emitSelectionChangeEvent(true);\n        }\n    };\n    /**\n     * Returns the correct tabindex for the option depending on disabled state.\n     * @return {?}\n     */\n    MdOption.prototype._getTabIndex = function () {\n        return this.disabled ? '-1' : '0';\n    };\n    /**\n     * Fetches the host DOM element.\n     * @return {?}\n     */\n    MdOption.prototype._getHostElement = function () {\n        return this._element.nativeElement;\n    };\n    /**\n     * Emits the selection change event.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    MdOption.prototype._emitSelectionChangeEvent = function (isUserInput) {\n        if (isUserInput === void 0) { isUserInput = false; }\n        this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n    };\n    ;\n    return MdOption;\n}());\nMdOption.decorators = [\n    { type: Component, args: [{ selector: 'md-option, mat-option',\n                host: {\n                    'role': 'option',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[class.mat-selected]': 'selected',\n                    '[class.mat-option-multiple]': 'multiple',\n                    '[class.mat-active]': 'active',\n                    '[id]': 'id',\n                    '[attr.aria-selected]': 'selected.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[class.mat-option-disabled]': 'disabled',\n                    '(click)': '_selectViaInteraction()',\n                    '(keydown)': '_handleKeydown($event)',\n                    '[class.mat-option]': 'true',\n                },\n                template: \"<span [ngSwitch]=\\\"_isCompatibilityMode\\\" *ngIf=\\\"multiple\\\"> <mat-pseudo-checkbox class=\\\"mat-option-pseudo-checkbox\\\" *ngSwitchCase=\\\"true\\\" [state]=\\\"selected ? 'checked' : ''\\\" color=\\\"primary\\\"></mat-pseudo-checkbox> <md-pseudo-checkbox class=\\\"mat-option-pseudo-checkbox\\\" *ngSwitchDefault [state]=\\\"selected ? 'checked' : ''\\\" color=\\\"primary\\\"></md-pseudo-checkbox> </span> <ng-content></ng-content> <div class=\\\"mat-option-ripple\\\" *ngIf=\\\"!disabled\\\" md-ripple [mdRippleTrigger]=\\\"_getHostElement()\\\"> </div> \",\n                encapsulation: ViewEncapsulation.None\n            },] },\n];\n/**\n * @nocollapse\n */\nMdOption.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE,] },] },\n]; };\nMdOption.propDecorators = {\n    'value': [{ type: Input },],\n    'disabled': [{ type: Input },],\n    'onSelectionChange': [{ type: Output },],\n};\nvar MdOptionModule = (function () {\n    function MdOptionModule() {\n    }\n    /**\n     * @return {?}\n     */\n    MdOptionModule.forRoot = function () {\n        return {\n            ngModule: MdOptionModule,\n            providers: []\n        };\n    };\n    return MdOptionModule;\n}());\nMdOptionModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MdRippleModule, CommonModule, MdSelectionModule],\n                exports: [MdOption],\n                declarations: [MdOption]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdOptionModule.ctorParameters = function () { return []; };\n/**\n * Wrapper around Error that sets the error message.\n * \\@docs-private\n */\nvar MdError = (function (_super) {\n    __extends(MdError, _super);\n    /**\n     * @param {?} value\n     */\n    function MdError(value) {\n        var _this = _super.call(this) || this;\n        _this.message = value;\n        return _this;\n    }\n    return MdError;\n}(Error));\n/**\n * Exception thrown when attempting to attach a null portal to a host.\n * \\@docs-private\n */\nvar NullPortalError = (function (_super) {\n    __extends(NullPortalError, _super);\n    function NullPortalError() {\n        return _super.call(this, 'Must provide a portal to attach') || this;\n    }\n    return NullPortalError;\n}(MdError));\n/**\n * Exception thrown when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n */\nvar PortalAlreadyAttachedError = (function (_super) {\n    __extends(PortalAlreadyAttachedError, _super);\n    function PortalAlreadyAttachedError() {\n        return _super.call(this, 'Host already has a portal attached') || this;\n    }\n    return PortalAlreadyAttachedError;\n}(MdError));\n/**\n * Exception thrown when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n */\nvar PortalHostAlreadyDisposedError = (function (_super) {\n    __extends(PortalHostAlreadyDisposedError, _super);\n    function PortalHostAlreadyDisposedError() {\n        return _super.call(this, 'This PortalHost has already been disposed') || this;\n    }\n    return PortalHostAlreadyDisposedError;\n}(MdError));\n/**\n * Exception thrown when attempting to attach an unknown portal type.\n * \\@docs-private\n */\nvar UnknownPortalTypeError = (function (_super) {\n    __extends(UnknownPortalTypeError, _super);\n    function UnknownPortalTypeError() {\n        return _super.call(this, 'Attempting to attach an unknown Portal type. ' +\n            'BasePortalHost accepts either a ComponentPortal or a TemplatePortal.') || this;\n    }\n    return UnknownPortalTypeError;\n}(MdError));\n/**\n * Exception thrown when attempting to attach a portal to a null host.\n * \\@docs-private\n */\nvar NullPortalHostError = (function (_super) {\n    __extends(NullPortalHostError, _super);\n    function NullPortalHostError() {\n        return _super.call(this, 'Attempting to attach a portal to a null PortalHost') || this;\n    }\n    return NullPortalHostError;\n}(MdError));\n/**\n * Exception thrown when attempting to detach a portal that is not attached.\n * \\@docs-private\n */\nvar NoPortalAttachedError = (function (_super) {\n    __extends(NoPortalAttachedError, _super);\n    function NoPortalAttachedError() {\n        return _super.call(this, 'Attempting to detach a portal that is not attached to a host') || this;\n    }\n    return NoPortalAttachedError;\n}(MdError));\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nvar Portal = (function () {\n    function Portal() {\n    }\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.attach = function (host) {\n        if (host == null) {\n            throw new NullPortalHostError();\n        }\n        if (host.hasAttached()) {\n            throw new PortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return (host.attach(this));\n    };\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    Portal.prototype.detach = function () {\n        var /** @type {?} */ host = this._attachedHost;\n        if (host == null) {\n            throw new NoPortalAttachedError();\n        }\n        this._attachedHost = null;\n        return host.detach();\n    };\n    Object.defineProperty(Portal.prototype, \"isAttached\", {\n        /**\n         * Whether this portal is attached to a host.\n         * @return {?}\n         */\n        get: function () {\n            return this._attachedHost != null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n     * the PortalHost when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.setAttachedHost = function (host) {\n        this._attachedHost = host;\n    };\n    return Portal;\n}());\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nvar ComponentPortal = (function (_super) {\n    __extends(ComponentPortal, _super);\n    /**\n     * @param {?} component\n     * @param {?=} viewContainerRef\n     * @param {?=} injector\n     */\n    function ComponentPortal(component, viewContainerRef, injector) {\n        if (viewContainerRef === void 0) { viewContainerRef = null; }\n        if (injector === void 0) { injector = null; }\n        var _this = _super.call(this) || this;\n        _this.component = component;\n        _this.viewContainerRef = viewContainerRef;\n        _this.injector = injector;\n        return _this;\n    }\n    return ComponentPortal;\n}(Portal));\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nvar TemplatePortal = (function (_super) {\n    __extends(TemplatePortal, _super);\n    /**\n     * @param {?} template\n     * @param {?} viewContainerRef\n     */\n    function TemplatePortal(template, viewContainerRef) {\n        var _this = _super.call(this) || this;\n        /**\n         * Additional locals for the instantiated embedded view.\n         * These locals can be seen as \"exports\" for the template, such as how ngFor has\n         * index / event / odd.\n         * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n         */\n        _this.locals = new Map();\n        _this.templateRef = template;\n        _this.viewContainerRef = viewContainerRef;\n        return _this;\n    }\n    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.templateRef.elementRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} host\n     * @param {?=} locals\n     * @return {?}\n     */\n    TemplatePortal.prototype.attach = function (host, locals) {\n        this.locals = locals == null ? new Map() : locals;\n        return _super.prototype.attach.call(this, host);\n    };\n    /**\n     * @return {?}\n     */\n    TemplatePortal.prototype.detach = function () {\n        this.locals = new Map();\n        return _super.prototype.detach.call(this);\n    };\n    return TemplatePortal;\n}(Portal));\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\n * ComponentPortal or a TemplatePortal.\n * @abstract\n */\nvar BasePortalHost = (function () {\n    function BasePortalHost() {\n        this._isDisposed = false;\n    }\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    BasePortalHost.prototype.hasAttached = function () {\n        return !!this._attachedPortal;\n    };\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalHost.prototype.attach = function (portal) {\n        if (!portal) {\n            throw new NullPortalError();\n        }\n        if (this.hasAttached()) {\n            throw new PortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throw new PortalHostAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throw new UnknownPortalTypeError();\n    };\n    /**\n     * @abstract\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalHost.prototype.attachComponentPortal = function (portal) { };\n    /**\n     * @abstract\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalHost.prototype.attachTemplatePortal = function (portal) { };\n    /**\n     * @return {?}\n     */\n    BasePortalHost.prototype.detach = function () {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    };\n    /**\n     * @return {?}\n     */\n    BasePortalHost.prototype.dispose = function () {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    BasePortalHost.prototype.setDisposeFn = function (fn) {\n        this._disposeFn = fn;\n    };\n    /**\n     * @return {?}\n     */\n    BasePortalHost.prototype._invokeDisposeFn = function () {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    };\n    return BasePortalHost;\n}());\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n *\n * Usage:\n * <ng-template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </ng-template>\n */\nvar TemplatePortalDirective = (function (_super) {\n    __extends(TemplatePortalDirective, _super);\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    function TemplatePortalDirective(templateRef, viewContainerRef) {\n        return _super.call(this, templateRef, viewContainerRef) || this;\n    }\n    return TemplatePortalDirective;\n}(TemplatePortal));\nTemplatePortalDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n            },] },\n];\n/**\n * @nocollapse\n */\nTemplatePortalDirective.ctorParameters = function () { return [\n    { type: TemplateRef, },\n    { type: ViewContainerRef, },\n]; };\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * <ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nvar PortalHostDirective = (function (_super) {\n    __extends(PortalHostDirective, _super);\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _viewContainerRef\n     */\n    function PortalHostDirective(_componentFactoryResolver, _viewContainerRef) {\n        var _this = _super.call(this) || this;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._viewContainerRef = _viewContainerRef;\n        return _this;\n    }\n    Object.defineProperty(PortalHostDirective.prototype, \"_deprecatedPortal\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.portal; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.portal = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PortalHostDirective.prototype, \"portal\", {\n        /**\n         * Portal associated with the Portal host.\n         * @return {?}\n         */\n        get: function () {\n            return this._portal;\n        },\n        /**\n         * @param {?} portal\n         * @return {?}\n         */\n        set: function (portal) {\n            if (this.hasAttached()) {\n                _super.prototype.detach.call(this);\n            }\n            if (portal) {\n                _super.prototype.attach.call(this, portal);\n            }\n            this._portal = portal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    PortalHostDirective.prototype.ngOnDestroy = function () {\n        _super.prototype.dispose.call(this);\n        this._portal = null;\n    };\n    /**\n     * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal host.\n     * @return {?}\n     */\n    PortalHostDirective.prototype.attachComponentPortal = function (portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalHost.\n        var /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        var /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        var /** @type {?} */ ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.parentInjector);\n        _super.prototype.setDisposeFn.call(this, function () { return ref.destroy(); });\n        this._portal = portal;\n        return ref;\n    };\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @param {?} portal Portal to be attached.\n     * @return {?}\n     */\n    PortalHostDirective.prototype.attachTemplatePortal = function (portal) {\n        var _this = this;\n        portal.setAttachedHost(this);\n        this._viewContainerRef.createEmbeddedView(portal.templateRef);\n        _super.prototype.setDisposeFn.call(this, function () { return _this._viewContainerRef.clear(); });\n        this._portal = portal;\n        // TODO(jelbourn): return locals from view\n        return new Map();\n    };\n    return PortalHostDirective;\n}(BasePortalHost));\nPortalHostDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                inputs: ['portal: cdkPortalHost']\n            },] },\n];\n/**\n * @nocollapse\n */\nPortalHostDirective.ctorParameters = function () { return [\n    { type: ComponentFactoryResolver, },\n    { type: ViewContainerRef, },\n]; };\nPortalHostDirective.propDecorators = {\n    '_deprecatedPortal': [{ type: Input, args: ['portalHost',] },],\n};\nvar PortalModule = (function () {\n    function PortalModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    PortalModule.forRoot = function () {\n        return {\n            ngModule: PortalModule,\n            providers: []\n        };\n    };\n    return PortalModule;\n}());\nPortalModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [TemplatePortalDirective, PortalHostDirective],\n                declarations: [TemplatePortalDirective, PortalHostDirective],\n            },] },\n];\n/**\n * @nocollapse\n */\nPortalModule.ctorParameters = function () { return []; };\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nvar OverlayState = (function () {\n    function OverlayState() {\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop **/\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /** The direction of the text in the overlay panel. */\n        this.direction = 'ltr';\n        // TODO(jelbourn): configuration still to add\n        // - focus trap\n        // - disable pointer events\n        // - z-index\n    }\n    return OverlayState;\n}());\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nvar DomPortalHost = (function (_super) {\n    __extends(DomPortalHost, _super);\n    /**\n     * @param {?} _hostDomElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _defaultInjector\n     */\n    function DomPortalHost(_hostDomElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        var _this = _super.call(this) || this;\n        _this._hostDomElement = _hostDomElement;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._appRef = _appRef;\n        _this._defaultInjector = _defaultInjector;\n        return _this;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?}\n     */\n    DomPortalHost.prototype.attachComponentPortal = function (portal) {\n        var _this = this;\n        var /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        var /** @type {?} */ componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.parentInjector);\n            this.setDisposeFn(function () { return componentRef.destroy(); });\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(function () {\n                _this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    };\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param {?} portal Portal to be attached.\n     * @return {?}\n     */\n    DomPortalHost.prototype.attachTemplatePortal = function (portal) {\n        var _this = this;\n        var /** @type {?} */ viewContainer = portal.viewContainerRef;\n        var /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef);\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\n        // To move the view to the specified host element. We just re-append the existing root nodes.\n        viewRef.rootNodes.forEach(function (rootNode) { return _this._hostDomElement.appendChild(rootNode); });\n        this.setDisposeFn((function () {\n            var /** @type {?} */ index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return new Map();\n    };\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    DomPortalHost.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        if (this._hostDomElement.parentNode != null) {\n            this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n        }\n    };\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    DomPortalHost.prototype._getComponentRootNode = function (componentRef) {\n        return (((componentRef.hostView)).rootNodes[0]);\n    };\n    return DomPortalHost;\n}(BasePortalHost));\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nvar OverlayRef = (function () {\n    /**\n     * @param {?} _portalHost\n     * @param {?} _pane\n     * @param {?} _state\n     * @param {?} _ngZone\n     */\n    function OverlayRef(_portalHost, _pane, _state, _ngZone) {\n        this._portalHost = _portalHost;\n        this._pane = _pane;\n        this._state = _state;\n        this._ngZone = _ngZone;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n    }\n    Object.defineProperty(OverlayRef.prototype, \"overlayElement\", {\n        /**\n         * The overlay's HTML element\n         * @return {?}\n         */\n        get: function () {\n            return this._pane;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attaches the overlay to a portal instance and adds the backdrop.\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    OverlayRef.prototype.attach = function (portal) {\n        var /** @type {?} */ attachResult = this._portalHost.attach(portal);\n        // Update the pane element with the given state configuration.\n        this._updateStackingOrder();\n        this.updateSize();\n        this.updateDirection();\n        this.updatePosition();\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._state.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        return attachResult;\n    };\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} Resolves when the overlay has been detached.\n     */\n    OverlayRef.prototype.detach = function () {\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        return this._portalHost.detach();\n    };\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    OverlayRef.prototype.dispose = function () {\n        if (this._state.positionStrategy) {\n            this._state.positionStrategy.dispose();\n        }\n        this.detachBackdrop();\n        this._portalHost.dispose();\n    };\n    /**\n     * Checks whether the overlay has been attached.\n     * @return {?}\n     */\n    OverlayRef.prototype.hasAttached = function () {\n        return this._portalHost.hasAttached();\n    };\n    /**\n     * Returns an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    OverlayRef.prototype.backdropClick = function () {\n        return this._backdropClick.asObservable();\n    };\n    /**\n     * Gets the current state config of the overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.getState = function () {\n        return this._state;\n    };\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    OverlayRef.prototype.updatePosition = function () {\n        if (this._state.positionStrategy) {\n            this._state.positionStrategy.apply(this._pane);\n        }\n    };\n    /**\n     * Updates the text direction of the overlay panel. *\n     * @return {?}\n     */\n    OverlayRef.prototype.updateDirection = function () {\n        this._pane.setAttribute('dir', this._state.direction);\n    };\n    /**\n     * Updates the size of the overlay based on the overlay config.\n     * @return {?}\n     */\n    OverlayRef.prototype.updateSize = function () {\n        if (this._state.width || this._state.width === 0) {\n            this._pane.style.width = formatCssUnit(this._state.width);\n        }\n        if (this._state.height || this._state.height === 0) {\n            this._pane.style.height = formatCssUnit(this._state.height);\n        }\n        if (this._state.minWidth || this._state.minWidth === 0) {\n            this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n        }\n        if (this._state.minHeight || this._state.minHeight === 0) {\n            this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n        }\n    };\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    OverlayRef.prototype._togglePointerEvents = function (enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    };\n    /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype._attachBackdrop = function () {\n        var _this = this;\n        this._backdropElement = document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        this._backdropElement.classList.add(this._state.backdropClass);\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._pane.parentElement.insertBefore(this._backdropElement, this._pane);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', function () { return _this._backdropClick.next(null); });\n        // Add class to fade-in the backdrop after one frame.\n        requestAnimationFrame(function () {\n            if (_this._backdropElement) {\n                _this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n            }\n        });\n    };\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n    OverlayRef.prototype._updateStackingOrder = function () {\n        if (this._pane.nextSibling) {\n            this._pane.parentNode.appendChild(this._pane);\n        }\n    };\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.detachBackdrop = function () {\n        var _this = this;\n        var /** @type {?} */ backdropToDetach = this._backdropElement;\n        if (backdropToDetach) {\n            var /** @type {?} */ finishDetach_1 = function () {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (_this._backdropElement == backdropToDetach) {\n                    _this._backdropElement = null;\n                }\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            backdropToDetach.classList.remove(this._state.backdropClass);\n            backdropToDetach.addEventListener('transitionend', finishDetach_1);\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            this._ngZone.runOutsideAngular(function () {\n                setTimeout(finishDetach_1, 500);\n            });\n        }\n    };\n    return OverlayRef;\n}());\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value) {\n    return typeof value === 'string' ? (value) : value + \"px\";\n}\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nvar ConnectionPositionPair = (function () {\n    /**\n     * @param {?} origin\n     * @param {?} overlay\n     */\n    function ConnectionPositionPair(origin, overlay) {\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n    return ConnectionPositionPair;\n}());\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nvar ScrollableViewProperties = (function () {\n    function ScrollableViewProperties() {\n    }\n    return ScrollableViewProperties;\n}());\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nvar ConnectedOverlayPositionChange = (function () {\n    /**\n     * @param {?} connectionPair\n     * @param {?} scrollableViewProperties\n     */\n    function ConnectedOverlayPositionChange(connectionPair, scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n    return ConnectedOverlayPositionChange;\n}());\n/**\n * @nocollapse\n */\nConnectedOverlayPositionChange.ctorParameters = function () { return [\n    { type: ConnectionPositionPair, },\n    { type: ScrollableViewProperties, decorators: [{ type: Optional },] },\n]; };\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nvar ConnectedPositionStrategy = (function () {\n    /**\n     * @param {?} _connectedTo\n     * @param {?} _originPos\n     * @param {?} _overlayPos\n     * @param {?} _viewportRuler\n     */\n    function ConnectedPositionStrategy(_connectedTo, _originPos, _overlayPos, _viewportRuler) {\n        this._connectedTo = _connectedTo;\n        this._originPos = _originPos;\n        this._overlayPos = _overlayPos;\n        this._viewportRuler = _viewportRuler;\n        this._dir = 'ltr';\n        this._offsetX = 0;\n        this._offsetY = 0;\n        this.scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        this._onPositionChange = new Subject();\n        this._origin = this._connectedTo.nativeElement;\n        this.withFallbackPosition(_originPos, _overlayPos);\n    }\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"_isRtl\", {\n        /**\n         * Whether the we're dealing with an RTL context\n         * @return {?}\n         */\n        get: function () {\n            return this._dir === 'rtl';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"onPositionChange\", {\n        /**\n         * Emits an event when the connection point changes.\n         * @return {?}\n         */\n        get: function () {\n            return this._onPositionChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         * @return {?}\n         */\n        get: function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * To be used to for any cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.dispose = function () { };\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     *\n     * @param {?} element Element to which to apply the CSS styles.\n     * @return {?} Resolves when the styles have been applied.\n     */\n    ConnectedPositionStrategy.prototype.apply = function (element) {\n        // Cache the overlay pane element in case re-calculating position is necessary\n        this._pane = element;\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        var /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n        var /** @type {?} */ overlayRect = element.getBoundingClientRect();\n        // We use the viewport rect to determine whether a position would go off-screen.\n        var /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n        // Fallback point if none of the fallbacks fit into the viewport.\n        var /** @type {?} */ fallbackPoint = null;\n        // We want to place the overlay in the first of the preferred positions such that the\n        // overlay fits on-screen.\n        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {\n            var pos = _a[_i];\n            // Get the (x, y) point of connection on the origin, and then use that to get the\n            // (top, left) coordinate for the overlay at `pos`.\n            var /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n            var /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n            // If the overlay in the calculated position fits on-screen, put it there and we're done.\n            if (overlayPoint.fitsInViewport) {\n                this._setElementPosition(element, overlayPoint);\n                // Save the last connected position in case the position needs to be re-calculated.\n                this._lastConnectedPosition = pos;\n                // Notify that the position has been changed along with its change properties.\n                var /** @type {?} */ scrollableViewProperties = this.getScrollableViewProperties(element);\n                var /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n                this._onPositionChange.next(positionChange);\n                return Promise.resolve(null);\n            }\n            else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n                fallbackPoint = overlayPoint;\n            }\n        }\n        // If none of the preferred positions were in the viewport, take the one\n        // with the largest visible area.\n        this._setElementPosition(element, fallbackPoint);\n        return Promise.resolve(null);\n    };\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.recalculateLastPosition = function () {\n        var /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n        var /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n        var /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n        var /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n        var /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n        var /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n        this._setElementPosition(this._pane, overlayPoint);\n    };\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {\n        this.scrollables = scrollables;\n    };\n    /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos) {\n        this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n        return this;\n    };\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withDirection = function (dir) {\n        this._dir = dir;\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetX = function (offset) {\n        this._offsetX = offset;\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetY = function (offset) {\n        this._offsetY = offset;\n        return this;\n    };\n    /**\n     * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n     * @param {?} rect\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getStartX = function (rect) {\n        return this._isRtl ? rect.right : rect.left;\n    };\n    /**\n     * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n     * @param {?} rect\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getEndX = function (rect) {\n        return this._isRtl ? rect.left : rect.right;\n    };\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getOriginConnectionPoint = function (originRect, pos) {\n        var /** @type {?} */ originStartX = this._getStartX(originRect);\n        var /** @type {?} */ originEndX = this._getEndX(originRect);\n        var /** @type {?} */ x;\n        if (pos.originX == 'center') {\n            x = originStartX + (originRect.width / 2);\n        }\n        else {\n            x = pos.originX == 'start' ? originStartX : originEndX;\n        }\n        var /** @type {?} */ y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x: x, y: y };\n    };\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected, as well as how much of the element\n     * would be inside the viewport at that position.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} viewportRect\n     * @param {?} pos\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, viewportRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n        // relative to the origin point.\n        var /** @type {?} */ overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n        }\n        var /** @type {?} */ overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        var /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n        var /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n        // How much the overlay would overflow at this position, on each side.\n        var /** @type {?} */ leftOverflow = 0 - x;\n        var /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n        var /** @type {?} */ topOverflow = 0 - y;\n        var /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n        // Visible parts of the element on each axis.\n        var /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n        var /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n        // The area of the element that's within the viewport.\n        var /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n        var /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n        return { x: x, y: y, fitsInViewport: fitsInViewport, visibleArea: visibleArea };\n    };\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @param {?} overlay\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.getScrollableViewProperties = function (overlay) {\n        var _this = this;\n        var /** @type {?} */ originBounds = this._getElementBounds(this._origin);\n        var /** @type {?} */ overlayBounds = this._getElementBounds(overlay);\n        var /** @type {?} */ scrollContainerBounds = this.scrollables.map(function (scrollable) {\n            return _this._getElementBounds(scrollable.getElementRef().nativeElement);\n        });\n        return {\n            isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),\n            isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    };\n    /**\n     * Whether the element is completely out of the view of any of the containers.\n     * @param {?} elementBounds\n     * @param {?} containersBounds\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.isElementOutsideView = function (elementBounds, containersBounds) {\n        return containersBounds.some(function (containerBounds) {\n            var /** @type {?} */ outsideAbove = elementBounds.bottom < containerBounds.top;\n            var /** @type {?} */ outsideBelow = elementBounds.top > containerBounds.bottom;\n            var /** @type {?} */ outsideLeft = elementBounds.right < containerBounds.left;\n            var /** @type {?} */ outsideRight = elementBounds.left > containerBounds.right;\n            return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n        });\n    };\n    /**\n     * Whether the element is clipped by any of the containers.\n     * @param {?} elementBounds\n     * @param {?} containersBounds\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.isElementClipped = function (elementBounds, containersBounds) {\n        return containersBounds.some(function (containerBounds) {\n            var /** @type {?} */ clippedAbove = elementBounds.top < containerBounds.top;\n            var /** @type {?} */ clippedBelow = elementBounds.bottom > containerBounds.bottom;\n            var /** @type {?} */ clippedLeft = elementBounds.left < containerBounds.left;\n            var /** @type {?} */ clippedRight = elementBounds.right > containerBounds.right;\n            return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n        });\n    };\n    /**\n     * Physically positions the overlay element to the given coordinate.\n     * @param {?} element\n     * @param {?} overlayPoint\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._setElementPosition = function (element, overlayPoint) {\n        element.style.left = overlayPoint.x + 'px';\n        element.style.top = overlayPoint.y + 'px';\n    };\n    /**\n     * Returns the bounding positions of the provided element with respect to the viewport.\n     * @param {?} element\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getElementBounds = function (element) {\n        var /** @type {?} */ boundingClientRect = element.getBoundingClientRect();\n        return {\n            top: boundingClientRect.top,\n            right: boundingClientRect.left + boundingClientRect.width,\n            bottom: boundingClientRect.top + boundingClientRect.height,\n            left: boundingClientRect.left\n        };\n    };\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._subtractOverflows = function (length) {\n        var overflows = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            overflows[_i - 1] = arguments[_i];\n        }\n        return overflows.reduce(function (currentValue, currentOverflow) {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    };\n    return ConnectedPositionStrategy;\n}());\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nvar GlobalPositionStrategy = (function () {\n    function GlobalPositionStrategy() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?} value New top offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.top = function (value) {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?} value New left offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.left = function (value) {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?} value New bottom offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.bottom = function (value) {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?} value New right offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.right = function (value) {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param {?} value New width for the overlay\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.width = function (value) {\n        this._width = value;\n        // When the width is 100%, we should reset the `left` and the offset,\n        // in order to ensure that the element is flush against the viewport edge.\n        if (value === '100%') {\n            this.left('0px');\n        }\n        return this;\n    };\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param {?} value New height for the overlay\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.height = function (value) {\n        this._height = value;\n        // When the height is 100%, we should reset the `top` and the offset,\n        // in order to ensure that the element is flush against the viewport edge.\n        if (value === '100%') {\n            this.top('0px');\n        }\n        return this;\n    };\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {\n        if (offset === void 0) { offset = ''; }\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    };\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.centerVertically = function (offset) {\n        if (offset === void 0) { offset = ''; }\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    };\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     *\n     * @param {?} element Element to which to apply the CSS.\n     * @return {?} Resolved when the styles have been applied.\n     */\n    GlobalPositionStrategy.prototype.apply = function (element) {\n        if (!this._wrapper) {\n            this._wrapper = document.createElement('div');\n            this._wrapper.classList.add('cdk-global-overlay-wrapper');\n            element.parentNode.insertBefore(this._wrapper, element);\n            this._wrapper.appendChild(element);\n        }\n        var /** @type {?} */ styles = element.style;\n        var /** @type {?} */ parentStyles = ((element.parentNode)).style;\n        styles.position = this._cssPosition;\n        styles.marginTop = this._topOffset;\n        styles.marginLeft = this._leftOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        styles.width = this._width;\n        styles.height = this._height;\n        parentStyles.justifyContent = this._justifyContent;\n        parentStyles.alignItems = this._alignItems;\n        return Promise.resolve(null);\n    };\n    /**\n     * Removes the wrapper element from the DOM.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.dispose = function () {\n        if (this._wrapper && this._wrapper.parentNode) {\n            this._wrapper.parentNode.removeChild(this._wrapper);\n            this._wrapper = null;\n        }\n    };\n    return GlobalPositionStrategy;\n}());\n/**\n * Builder for overlay position strategy.\n */\nvar OverlayPositionBuilder = (function () {\n    /**\n     * @param {?} _viewportRuler\n     */\n    function OverlayPositionBuilder(_viewportRuler) {\n        this._viewportRuler = _viewportRuler;\n    }\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.global = function () {\n        return new GlobalPositionStrategy();\n    };\n    /**\n     * Creates a relative position strategy.\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n    };\n    return OverlayPositionBuilder;\n}());\nOverlayPositionBuilder.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nOverlayPositionBuilder.ctorParameters = function () { return [\n    { type: ViewportRuler, },\n]; };\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nvar OverlayContainer = (function () {\n    function OverlayContainer() {\n    }\n    Object.defineProperty(OverlayContainer.prototype, \"themeClass\", {\n        /**\n         * Base theme to be applied to all overlay-based components.\n         * @return {?}\n         */\n        get: function () { return this._themeClass; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._containerElement) {\n                this._containerElement.classList.remove(this._themeClass);\n                if (value) {\n                    this._containerElement.classList.add(value);\n                }\n            }\n            this._themeClass = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This method returns the overlay container element.  It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    OverlayContainer.prototype.getContainerElement = function () {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    };\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    OverlayContainer.prototype._createContainer = function () {\n        var /** @type {?} */ container = document.createElement('div');\n        container.classList.add('cdk-overlay-container');\n        if (this._themeClass) {\n            container.classList.add(this._themeClass);\n        }\n        document.body.appendChild(container);\n        this._containerElement = container;\n    };\n    return OverlayContainer;\n}());\nOverlayContainer.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nOverlayContainer.ctorParameters = function () { return []; };\n/**\n * @param {?} parentContainer\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer) {\n    return parentContainer || new OverlayContainer();\n}\nvar OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n/** Next overlay unique ID. */\nvar nextUniqueId = 0;\n/** The default state for newly created overlays. */\nvar defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nvar Overlay = (function () {\n    /**\n     * @param {?} _overlayContainer\n     * @param {?} _componentFactoryResolver\n     * @param {?} _positionBuilder\n     * @param {?} _appRef\n     * @param {?} _injector\n     * @param {?} _ngZone\n     */\n    function Overlay(_overlayContainer, _componentFactoryResolver, _positionBuilder, _appRef, _injector, _ngZone) {\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n    }\n    /**\n     * Creates an overlay.\n     * @param {?=} state State to apply to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    Overlay.prototype.create = function (state$$1) {\n        if (state$$1 === void 0) { state$$1 = defaultState; }\n        return this._createOverlayRef(this._createPaneElement(), state$$1);\n    };\n    /**\n     * Returns a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?}\n     */\n    Overlay.prototype.position = function () {\n        return this._positionBuilder;\n    };\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @return {?} Newly-created pane element\n     */\n    Overlay.prototype._createPaneElement = function () {\n        var /** @type {?} */ pane = document.createElement('div');\n        pane.id = \"cdk-overlay-\" + nextUniqueId++;\n        pane.classList.add('cdk-overlay-pane');\n        this._overlayContainer.getContainerElement().appendChild(pane);\n        return pane;\n    };\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal host.\n     * @return {?} A portal host for the given DOM element.\n     */\n    Overlay.prototype._createPortalHost = function (pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    };\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param {?} pane DOM element for the overlay\n     * @param {?} state\n     * @return {?}\n     */\n    Overlay.prototype._createOverlayRef = function (pane, state$$1) {\n        return new OverlayRef(this._createPortalHost(pane), pane, state$$1, this._ngZone);\n    };\n    return Overlay;\n}());\nOverlay.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nOverlay.ctorParameters = function () { return [\n    { type: OverlayContainer, },\n    { type: ComponentFactoryResolver, },\n    { type: OverlayPositionBuilder, },\n    { type: ApplicationRef, },\n    { type: Injector, },\n    { type: NgZone, },\n]; };\n/** Providers for Overlay and its related injectables. */\nvar OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    VIEWPORT_RULER_PROVIDER,\n    SCROLL_DISPATCHER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n];\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nvar Scrollable = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _scroll\n     * @param {?} _ngZone\n     * @param {?} _renderer\n     */\n    function Scrollable(_elementRef, _scroll, _ngZone, _renderer) {\n        this._elementRef = _elementRef;\n        this._scroll = _scroll;\n        this._ngZone = _ngZone;\n        this._renderer = _renderer;\n        this._elementScrolled = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    Scrollable.prototype.ngOnInit = function () {\n        var _this = this;\n        this._scrollListener = this._ngZone.runOutsideAngular(function () {\n            return _this._renderer.listen(_this.getElementRef().nativeElement, 'scroll', function (event) {\n                _this._elementScrolled.next(event);\n            });\n        });\n        this._scroll.register(this);\n    };\n    /**\n     * @return {?}\n     */\n    Scrollable.prototype.ngOnDestroy = function () {\n        this._scroll.deregister(this);\n        if (this._scrollListener) {\n            this._scrollListener();\n            this._scrollListener = null;\n        }\n    };\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    Scrollable.prototype.elementScrolled = function () {\n        return this._elementScrolled.asObservable();\n    };\n    /**\n     * @return {?}\n     */\n    Scrollable.prototype.getElementRef = function () {\n        return this._elementRef;\n    };\n    return Scrollable;\n}());\nScrollable.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-scrollable]'\n            },] },\n];\n/**\n * @nocollapse\n */\nScrollable.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: ScrollDispatcher, },\n    { type: NgZone, },\n    { type: Renderer, },\n]; };\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nvar defaultPositionList = [\n    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n];\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nvar OverlayOrigin = (function () {\n    /**\n     * @param {?} elementRef\n     */\n    function OverlayOrigin(elementRef) {\n        this.elementRef = elementRef;\n    }\n    return OverlayOrigin;\n}());\nOverlayOrigin.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin]',\n                exportAs: 'cdkOverlayOrigin',\n            },] },\n];\n/**\n * @nocollapse\n */\nOverlayOrigin.ctorParameters = function () { return [\n    { type: ElementRef, },\n]; };\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nvar ConnectedOverlayDirective = (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     * @param {?} _dir\n     */\n    function ConnectedOverlayDirective(_overlay, templateRef, viewContainerRef, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._open = false;\n        this._hasBackdrop = false;\n        this._offsetX = 0;\n        this._offsetY = 0;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    }\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"offsetX\", {\n        /**\n         * The offset in pixels for the overlay connection point on the x-axis\n         * @return {?}\n         */\n        get: function () {\n            return this._offsetX;\n        },\n        /**\n         * @param {?} offsetX\n         * @return {?}\n         */\n        set: function (offsetX) {\n            this._offsetX = offsetX;\n            if (this._position) {\n                this._position.withOffsetX(offsetX);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"offsetY\", {\n        /**\n         * The offset in pixels for the overlay connection point on the y-axis\n         * @return {?}\n         */\n        get: function () {\n            return this._offsetY;\n        },\n        /**\n         * @param {?} offsetY\n         * @return {?}\n         */\n        set: function (offsetY) {\n            this._offsetY = offsetY;\n            if (this._position) {\n                this._position.withOffsetY(offsetY);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"hasBackdrop\", {\n        /**\n         * Whether or not the overlay should attach a backdrop.\n         * @return {?}\n         */\n        get: function () {\n            return this._hasBackdrop;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._hasBackdrop = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"open\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._open;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            value ? this._attachOverlay() : this._detachOverlay();\n            this._open = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"overlayRef\", {\n        /**\n         * The associated overlay reference.\n         * @return {?}\n         */\n        get: function () {\n            return this._overlayRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"dir\", {\n        /**\n         * The element's layout direction.\n         * @return {?}\n         */\n        get: function () {\n            return this._dir ? this._dir.value : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype.ngOnDestroy = function () {\n        this._destroyOverlay();\n    };\n    /**\n     * Creates an overlay\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._createOverlay = function () {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n    };\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._buildConfig = function () {\n        var /** @type {?} */ overlayConfig = new OverlayState();\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        overlayConfig.hasBackdrop = this.hasBackdrop;\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        this._position = (this._createPositionStrategy());\n        overlayConfig.positionStrategy = this._position;\n        return overlayConfig;\n    };\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._createPositionStrategy = function () {\n        var /** @type {?} */ pos = this.positions[0];\n        var /** @type {?} */ originPoint = { originX: pos.originX, originY: pos.originY };\n        var /** @type {?} */ overlayPoint = { overlayX: pos.overlayX, overlayY: pos.overlayY };\n        var /** @type {?} */ strategy = this._overlay.position()\n            .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n            .withOffsetX(this.offsetX)\n            .withOffsetY(this.offsetY);\n        this._handlePositionChanges(strategy);\n        return strategy;\n    };\n    /**\n     * @param {?} strategy\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._handlePositionChanges = function (strategy) {\n        var _this = this;\n        for (var /** @type {?} */ i = 1; i < this.positions.length; i++) {\n            strategy.withFallbackPosition({ originX: this.positions[i].originX, originY: this.positions[i].originY }, { overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY });\n        }\n        this._positionSubscription =\n            strategy.onPositionChange.subscribe(function (pos) { return _this.positionChange.emit(pos); });\n    };\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._attachOverlay = function () {\n        var _this = this;\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        this._position.withDirection(this.dir);\n        this._overlayRef.getState().direction = this.dir;\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {\n                _this.backdropClick.emit();\n            });\n        }\n    };\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._detachOverlay = function () {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        if (this._backdropSubscription) {\n            this._backdropSubscription.unsubscribe();\n            this._backdropSubscription = null;\n        }\n    };\n    /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._destroyOverlay = function () {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        if (this._backdropSubscription) {\n            this._backdropSubscription.unsubscribe();\n        }\n        if (this._positionSubscription) {\n            this._positionSubscription.unsubscribe();\n        }\n    };\n    return ConnectedOverlayDirective;\n}());\nConnectedOverlayDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay]',\n                exportAs: 'cdkConnectedOverlay'\n            },] },\n];\n/**\n * @nocollapse\n */\nConnectedOverlayDirective.ctorParameters = function () { return [\n    { type: Overlay, },\n    { type: TemplateRef, },\n    { type: ViewContainerRef, },\n    { type: Dir, decorators: [{ type: Optional },] },\n]; };\nConnectedOverlayDirective.propDecorators = {\n    'origin': [{ type: Input },],\n    'positions': [{ type: Input },],\n    'offsetX': [{ type: Input },],\n    'offsetY': [{ type: Input },],\n    'width': [{ type: Input },],\n    'height': [{ type: Input },],\n    'minWidth': [{ type: Input },],\n    'minHeight': [{ type: Input },],\n    'backdropClass': [{ type: Input },],\n    'hasBackdrop': [{ type: Input },],\n    'open': [{ type: Input },],\n    'backdropClick': [{ type: Output },],\n    'positionChange': [{ type: Output },],\n    'attach': [{ type: Output },],\n    'detach': [{ type: Output },],\n};\nvar OverlayModule = (function () {\n    function OverlayModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    OverlayModule.forRoot = function () {\n        return {\n            ngModule: OverlayModule,\n            providers: [],\n        };\n    };\n    return OverlayModule;\n}());\nOverlayModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [PortalModule],\n                exports: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],\n                declarations: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],\n                providers: [OVERLAY_PROVIDERS],\n            },] },\n];\n/**\n * @nocollapse\n */\nOverlayModule.ctorParameters = function () { return []; };\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nvar hasV8BreakIterator = typeof (window) !== 'undefined' ?\n    (window.Intl && ((window.Intl)).v8BreakIterator) :\n    (typeof (Intl) !== 'undefined' && ((Intl)).v8BreakIterator);\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n * \\@docs-private\n */\nvar Platform = (function () {\n    function Platform() {\n        /** Layout Engines */\n        this.EDGE = /(edge)/i.test(navigator.userAgent);\n        this.TRIDENT = /(msie|trident)/i.test(navigator.userAgent);\n        // EdgeHTML and Trident mock Blink specific things and need to excluded from this check.\n        this.BLINK = !!(window.chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT;\n        // Webkit is part of the userAgent in EdgeHTML Blink and Trident, so we need to\n        // ensure that Webkit runs standalone and is not use as another engines base.\n        this.WEBKIT = /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n        /** Browsers and Platform Types */\n        this.IOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n        this.FIREFOX = /(firefox|minefield)/i.test(navigator.userAgent);\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n        this.ANDROID = /android/i.test(navigator.userAgent) && !this.TRIDENT;\n    }\n    return Platform;\n}());\nPlatform.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nPlatform.ctorParameters = function () { return []; };\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nvar InteractivityChecker = (function () {\n    /**\n     * @param {?} _platform\n     */\n    function InteractivityChecker(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is disabled.\n     */\n    InteractivityChecker.prototype.isDisabled = function (element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    };\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @param {?} element\n     * @return {?} Whether the element is visible.\n     */\n    InteractivityChecker.prototype.isVisible = function (element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    };\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is tabbable.\n     */\n    InteractivityChecker.prototype.isTabbable = function (element) {\n        var /** @type {?} */ frameElement = (getWindow(element).frameElement);\n        if (frameElement) {\n            var /** @type {?} */ frameType = frameElement && frameElement.nodeName.toLowerCase();\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n            if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n                return false;\n            }\n            // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n            if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        var /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n        var /** @type {?} */ tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe') {\n            // The frames may be tabbable depending on content, but it's not possibly to reliably\n            // investigate the content of the frames.\n            return false;\n        }\n        if (nodeName === 'audio') {\n            if (!element.hasAttribute('controls')) {\n                // By default an <audio> element without the controls enabled is not tabbable.\n                return false;\n            }\n            else if (this._platform.BLINK) {\n                // In Blink <audio controls> elements are always tabbable.\n                return true;\n            }\n        }\n        if (nodeName === 'video') {\n            if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n                // In Trident a <video> element without the controls enabled is not tabbable.\n                return false;\n            }\n            else if (this._platform.BLINK || this._platform.FIREFOX) {\n                // In Chrome and Firefox <video controls> elements are always tabbable.\n                return true;\n            }\n        }\n        if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n            // In all Blink and WebKit based browsers <object> elements are never tabbable.\n            return false;\n        }\n        // In iOS the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        return element.tabIndex >= 0;\n    };\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is focusable.\n     */\n    InteractivityChecker.prototype.isFocusable = function (element) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n    };\n    return InteractivityChecker;\n}());\nInteractivityChecker.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nInteractivityChecker.ctorParameters = function () { return [\n    { type: Platform, },\n]; };\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element) {\n    var /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n    return nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an <input type=\"hidden\">.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    var /** @type {?} */ tabIndex = element.getAttribute('tabindex');\n    // IE11 parses tabindex=\"\" as the value \"-32768\"\n    if (tabIndex == '-32768') {\n        return false;\n    }\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    var /** @type {?} */ tabIndex = parseInt(element.getAttribute('tabindex'), 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element) {\n    var /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n    var /** @type {?} */ inputType = nodeName === 'input' && ((element)).type;\n    return inputType === 'text'\n        || inputType === 'password'\n        || nodeName === 'select'\n        || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node) {\n    return node.ownerDocument.defaultView || window;\n}\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * NOTE: This class currently uses a very simple (naive) approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\n * This will be replaced with a more intelligent solution before the library is considered stable.\n */\nvar FocusTrap = (function () {\n    /**\n     * @param {?} _element\n     * @param {?} _checker\n     * @param {?} _ngZone\n     * @param {?=} deferAnchors\n     */\n    function FocusTrap(_element, _checker, _ngZone, deferAnchors) {\n        if (deferAnchors === void 0) { deferAnchors = false; }\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    Object.defineProperty(FocusTrap.prototype, \"enabled\", {\n        /**\n         * Whether the focus trap is active.\n         * @return {?}\n         */\n        get: function () { return this._enabled; },\n        /**\n         * @param {?} val\n         * @return {?}\n         */\n        set: function (val) {\n            this._enabled = val;\n            if (this._startAnchor && this._endAnchor) {\n                this._startAnchor.tabIndex = this._endAnchor.tabIndex = this._enabled ? 0 : -1;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroys the focus trap by cleaning up the anchors.\n     * @return {?}\n     */\n    FocusTrap.prototype.destroy = function () {\n        if (this._startAnchor && this._startAnchor.parentNode) {\n            this._startAnchor.parentNode.removeChild(this._startAnchor);\n        }\n        if (this._endAnchor && this._endAnchor.parentNode) {\n            this._endAnchor.parentNode.removeChild(this._endAnchor);\n        }\n        this._startAnchor = this._endAnchor = null;\n    };\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @return {?}\n     */\n    FocusTrap.prototype.attachAnchors = function () {\n        var _this = this;\n        if (!this._startAnchor) {\n            this._startAnchor = this._createAnchor();\n        }\n        if (!this._endAnchor) {\n            this._endAnchor = this._createAnchor();\n        }\n        this._ngZone.runOutsideAngular(function () {\n            _this._startAnchor.addEventListener('focus', function () { return _this.focusLastTabbableElement(); });\n            _this._endAnchor.addEventListener('focus', function () { return _this.focusFirstTabbableElement(); });\n            _this._element.parentNode.insertBefore(_this._startAnchor, _this._element);\n            _this._element.parentNode.insertBefore(_this._endAnchor, _this._element.nextSibling);\n        });\n    };\n    /**\n     * Waits for microtask queue to empty, then focuses\n     * the first tabbable element within the focus trap region.\n     * @return {?}\n     */\n    FocusTrap.prototype.focusFirstTabbableElementWhenReady = function () {\n        var _this = this;\n        this._ngZone.onMicrotaskEmpty.first().subscribe(function () { return _this.focusFirstTabbableElement(); });\n    };\n    /**\n     * Waits for microtask queue to empty, then focuses\n     * the last tabbable element within the focus trap region.\n     * @return {?}\n     */\n    FocusTrap.prototype.focusLastTabbableElementWhenReady = function () {\n        var _this = this;\n        this._ngZone.onMicrotaskEmpty.first().subscribe(function () { return _this.focusLastTabbableElement(); });\n    };\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @return {?}\n     */\n    FocusTrap.prototype.focusFirstTabbableElement = function () {\n        var /** @type {?} */ redirectToElement = (this._element.querySelector('[cdk-focus-start]')) ||\n            this._getFirstTabbableElement(this._element);\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n    };\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @return {?}\n     */\n    FocusTrap.prototype.focusLastTabbableElement = function () {\n        var /** @type {?} */ focusTargets = this._element.querySelectorAll('[cdk-focus-end]');\n        var /** @type {?} */ redirectToElement = null;\n        if (focusTargets.length) {\n            redirectToElement = (focusTargets[focusTargets.length - 1]);\n        }\n        else {\n            redirectToElement = this._getLastTabbableElement(this._element);\n        }\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n    };\n    /**\n     * Get the first tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n    FocusTrap.prototype._getFirstTabbableElement = function (root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n        // back to `childNodes` which includes text nodes, comments etc.\n        var /** @type {?} */ children = root.children || root.childNodes;\n        for (var /** @type {?} */ i = 0; i < children.length; i++) {\n            var /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n                this._getFirstTabbableElement(/** @type {?} */ (children[i])) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    };\n    /**\n     * Get the last tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n    FocusTrap.prototype._getLastTabbableElement = function (root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        var /** @type {?} */ children = root.children || root.childNodes;\n        for (var /** @type {?} */ i = children.length - 1; i >= 0; i--) {\n            var /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n                this._getLastTabbableElement(/** @type {?} */ (children[i])) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    };\n    /**\n     * Creates an anchor element.\n     * @return {?}\n     */\n    FocusTrap.prototype._createAnchor = function () {\n        var /** @type {?} */ anchor = document.createElement('div');\n        anchor.tabIndex = this._enabled ? 0 : -1;\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        return anchor;\n    };\n    return FocusTrap;\n}());\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nvar FocusTrapFactory = (function () {\n    /**\n     * @param {?} _checker\n     * @param {?} _ngZone\n     */\n    function FocusTrapFactory(_checker, _ngZone) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n    }\n    /**\n     * @param {?} element\n     * @param {?=} deferAnchors\n     * @return {?}\n     */\n    FocusTrapFactory.prototype.create = function (element, deferAnchors) {\n        if (deferAnchors === void 0) { deferAnchors = false; }\n        return new FocusTrap(element, this._checker, this._ngZone, deferAnchors);\n    };\n    return FocusTrapFactory;\n}());\nFocusTrapFactory.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nFocusTrapFactory.ctorParameters = function () { return [\n    { type: InteractivityChecker, },\n    { type: NgZone, },\n]; };\n/**\n * Directive for trapping focus within a region.\n * @deprecated\n */\nvar FocusTrapDeprecatedDirective = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     */\n    function FocusTrapDeprecatedDirective(_elementRef, _focusTrapFactory) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    Object.defineProperty(FocusTrapDeprecatedDirective.prototype, \"disabled\", {\n        /**\n         * Whether the focus trap is active.\n         * @return {?}\n         */\n        get: function () { return !this.focusTrap.enabled; },\n        /**\n         * @param {?} val\n         * @return {?}\n         */\n        set: function (val) {\n            this.focusTrap.enabled = !coerceBooleanProperty(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FocusTrapDeprecatedDirective.prototype.ngOnDestroy = function () {\n        this.focusTrap.destroy();\n    };\n    /**\n     * @return {?}\n     */\n    FocusTrapDeprecatedDirective.prototype.ngAfterContentInit = function () {\n        this.focusTrap.attachAnchors();\n    };\n    return FocusTrapDeprecatedDirective;\n}());\nFocusTrapDeprecatedDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-focus-trap',\n            },] },\n];\n/**\n * @nocollapse\n */\nFocusTrapDeprecatedDirective.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: FocusTrapFactory, },\n]; };\nFocusTrapDeprecatedDirective.propDecorators = {\n    'disabled': [{ type: Input },],\n};\n/**\n * Directive for trapping focus within a region.\n */\nvar FocusTrapDirective = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     */\n    function FocusTrapDirective(_elementRef, _focusTrapFactory) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    Object.defineProperty(FocusTrapDirective.prototype, \"enabled\", {\n        /**\n         * Whether the focus trap is active.\n         * @return {?}\n         */\n        get: function () { return this.focusTrap.enabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this.focusTrap.enabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FocusTrapDirective.prototype.ngOnDestroy = function () {\n        this.focusTrap.destroy();\n    };\n    /**\n     * @return {?}\n     */\n    FocusTrapDirective.prototype.ngAfterContentInit = function () {\n        this.focusTrap.attachAnchors();\n    };\n    return FocusTrapDirective;\n}());\nFocusTrapDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkTrapFocus]',\n                exportAs: 'cdkTrapFocus',\n            },] },\n];\n/**\n * @nocollapse\n */\nFocusTrapDirective.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: FocusTrapFactory, },\n]; };\nFocusTrapDirective.propDecorators = {\n    'enabled': [{ type: Input, args: ['cdkTrapFocus',] },],\n};\nvar LIVE_ANNOUNCER_ELEMENT_TOKEN = new OpaqueToken('liveAnnouncerElement');\nvar LiveAnnouncer = (function () {\n    /**\n     * @param {?} elementToken\n     */\n    function LiveAnnouncer(elementToken) {\n        // We inject the live element as `any` because the constructor signature cannot reference\n        // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n        // causes TypeScript to preserve the constructor signature types.\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    /**\n     * Announces a message to screenreaders.\n     * @param {?} message Message to be announced to the screenreader\n     * @param {?=} politeness The politeness of the announcer element\n     * @return {?}\n     */\n    LiveAnnouncer.prototype.announce = function (message, politeness) {\n        var _this = this;\n        if (politeness === void 0) { politeness = 'polite'; }\n        this._liveElement.textContent = '';\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        setTimeout(function () { return _this._liveElement.textContent = message; }, 100);\n    };\n    /**\n     * Removes the aria-live element from the DOM.\n     * @return {?}\n     */\n    LiveAnnouncer.prototype._removeLiveElement = function () {\n        if (this._liveElement && this._liveElement.parentNode) {\n            this._liveElement.parentNode.removeChild(this._liveElement);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    LiveAnnouncer.prototype._createLiveElement = function () {\n        var /** @type {?} */ liveEl = document.createElement('div');\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        document.body.appendChild(liveEl);\n        return liveEl;\n    };\n    return LiveAnnouncer;\n}());\nLiveAnnouncer.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nLiveAnnouncer.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] },] },\n]; };\n/**\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_PROVIDER_FACTORY(parentDispatcher, liveElement) {\n    return parentDispatcher || new LiveAnnouncer(liveElement);\n}\nvar LIVE_ANNOUNCER_PROVIDER = {\n    // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n    provide: LiveAnnouncer,\n    deps: [\n        [new Optional(), new SkipSelf(), LiveAnnouncer],\n        [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)]\n    ],\n    useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\nvar supportedInputTypes;\n/**\n * @return {?} The input types supported by this browser.\n */\nfunction getSupportedInputTypes() {\n    if (!supportedInputTypes) {\n        var /** @type {?} */ featureTestInput_1 = document.createElement('input');\n        supportedInputTypes = new Set([\n            // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n            // first changing it to something else:\n            // The specified value \"\" does not conform to the required format.\n            // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n            'color',\n            'button',\n            'checkbox',\n            'date',\n            'datetime-local',\n            'email',\n            'file',\n            'hidden',\n            'image',\n            'month',\n            'number',\n            'password',\n            'radio',\n            'range',\n            'reset',\n            'search',\n            'submit',\n            'tel',\n            'text',\n            'time',\n            'url',\n            'week',\n        ].filter(function (value) {\n            featureTestInput_1.setAttribute('type', value);\n            return featureTestInput_1.type === value;\n        }));\n    }\n    return supportedInputTypes;\n}\nvar PlatformModule = (function () {\n    function PlatformModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    PlatformModule.forRoot = function () {\n        return {\n            ngModule: PlatformModule,\n            providers: [],\n        };\n    };\n    return PlatformModule;\n}());\nPlatformModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [Platform]\n            },] },\n];\n/**\n * @nocollapse\n */\nPlatformModule.ctorParameters = function () { return []; };\nvar A11yModule = (function () {\n    function A11yModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    A11yModule.forRoot = function () {\n        return {\n            ngModule: A11yModule,\n            providers: [],\n        };\n    };\n    return A11yModule;\n}());\nA11yModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, PlatformModule],\n                declarations: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n                exports: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n                providers: [InteractivityChecker, FocusTrapFactory, LIVE_ANNOUNCER_PROVIDER]\n            },] },\n];\n/**\n * @nocollapse\n */\nA11yModule.ctorParameters = function () { return []; };\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nvar FullscreenOverlayContainer = (function (_super) {\n    __extends(FullscreenOverlayContainer, _super);\n    function FullscreenOverlayContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._createContainer = function () {\n        var _this = this;\n        _super.prototype._createContainer.call(this);\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(function () { return _this._adjustParentForFullscreenChange(); });\n    };\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = function () {\n        if (!this._containerElement) {\n            return;\n        }\n        var /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n        var /** @type {?} */ parent = fullscreenElement || document.body;\n        parent.appendChild(this._containerElement);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._addFullscreenChangeListener = function (fn) {\n        if (document.fullscreenEnabled) {\n            document.addEventListener('fullscreenchange', fn);\n        }\n        else if (document.webkitFullscreenEnabled) {\n            document.addEventListener('webkitfullscreenchange', fn);\n        }\n        else if (((document)).mozFullScreenEnabled) {\n            document.addEventListener('mozfullscreenchange', fn);\n        }\n        else if (((document)).msFullscreenEnabled) {\n            document.addEventListener('MSFullscreenChange', fn);\n        }\n    };\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype.getFullscreenElement = function () {\n        return document.fullscreenElement ||\n            document.webkitFullscreenElement ||\n            ((document)).mozFullScreenElement ||\n            ((document)).msFullscreenElement ||\n            null;\n    };\n    return FullscreenOverlayContainer;\n}(OverlayContainer));\nFullscreenOverlayContainer.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nFullscreenOverlayContainer.ctorParameters = function () { return []; };\nvar GestureConfig = (function (_super) {\n    __extends(GestureConfig, _super);\n    function GestureConfig() {\n        var _this = _super.call(this) || this;\n        _this._hammer = typeof window !== 'undefined' ? ((window)).Hammer : null;\n        /* List of new event names to add to the gesture support list */\n        _this.events = _this._hammer ? [\n            'longpress',\n            'slide',\n            'slidestart',\n            'slideend',\n            'slideright',\n            'slideleft'\n        ] : [];\n        if (!_this._hammer && isDevMode()) {\n            console.warn('Could not find HammerJS. Certain Angular Material ' +\n                'components may not work correctly.');\n        }\n        return _this;\n    }\n    /**\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n     *\n     * Our gesture names come from the Material Design gestures spec:\n     * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n     *\n     * More information on default recognizers can be found in Hammer docs:\n     * http://hammerjs.github.io/recognizer-pan/\n     * http://hammerjs.github.io/recognizer-press/\n     *\n     * @param {?} element Element to which to assign the new HammerJS gestures.\n     * @return {?} Newly-created HammerJS instance.\n     */\n    GestureConfig.prototype.buildHammer = function (element) {\n        var /** @type {?} */ mc = new this._hammer(element);\n        // Default Hammer Recognizers.\n        var /** @type {?} */ pan = new this._hammer.Pan();\n        var /** @type {?} */ swipe = new this._hammer.Swipe();\n        var /** @type {?} */ press = new this._hammer.Press();\n        // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n        // Otherwise the previous `recognizeWith` will be dropped.\n        // TODO: Confirm threshold numbers with Material Design UX Team\n        var /** @type {?} */ slide = this._createRecognizer(pan, { event: 'slide', threshold: 0 }, swipe);\n        var /** @type {?} */ longpress = this._createRecognizer(press, { event: 'longpress', time: 500 });\n        // Overwrite the default `pan` event to use the swipe event.\n        pan.recognizeWith(swipe);\n        // Add customized gestures to Hammer manager\n        mc.add([swipe, press, pan, slide, longpress]);\n        return (mc);\n    };\n    /**\n     * Creates a new recognizer, without affecting the default recognizers of HammerJS\n     * @param {?} base\n     * @param {?} options\n     * @param {...?} inheritances\n     * @return {?}\n     */\n    GestureConfig.prototype._createRecognizer = function (base, options) {\n        var inheritances = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            inheritances[_i - 2] = arguments[_i];\n        }\n        var /** @type {?} */ recognizer = new ((base.constructor))(options);\n        inheritances.push(base);\n        inheritances.forEach(function (item) { return recognizer.recognizeWith(item); });\n        return recognizer;\n    };\n    return GestureConfig;\n}(HammerGestureConfig));\nGestureConfig.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nGestureConfig.ctorParameters = function () { return []; };\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nvar SelectionModel = (function () {\n    /**\n     * @param {?=} _isMulti\n     * @param {?=} initiallySelectedValues\n     * @param {?=} _emitChanges\n     */\n    function SelectionModel(_isMulti, initiallySelectedValues, _emitChanges) {\n        if (_isMulti === void 0) { _isMulti = false; }\n        if (_emitChanges === void 0) { _emitChanges = true; }\n        var _this = this;\n        this._isMulti = _isMulti;\n        this._emitChanges = _emitChanges;\n        this._selection = new Set();\n        this._deselectedToEmit = [];\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.onChange = this._emitChanges ? new Subject() : null;\n        if (initiallySelectedValues) {\n            if (_isMulti) {\n                initiallySelectedValues.forEach(function (value) { return _this._markSelected(value); });\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    Object.defineProperty(SelectionModel.prototype, \"selected\", {\n        /**\n         * Selected value(s).\n         * @return {?}\n         */\n        get: function () {\n            if (!this._selected) {\n                this._selected = Array.from(this._selection.values());\n            }\n            return this._selected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Selects a value or an array of values.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.select = function (value) {\n        this._markSelected(value);\n        this._emitChangeEvent();\n    };\n    /**\n     * Deselects a value or an array of values.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.deselect = function (value) {\n        this._unmarkSelected(value);\n        this._emitChangeEvent();\n    };\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.toggle = function (value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    };\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    SelectionModel.prototype.clear = function () {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    };\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.isSelected = function (value) {\n        return this._selection.has(value);\n    };\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    SelectionModel.prototype.isEmpty = function () {\n        return this._selection.size === 0;\n    };\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    SelectionModel.prototype.hasValue = function () {\n        return !this.isEmpty();\n    };\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    SelectionModel.prototype.sort = function (predicate) {\n        if (this._isMulti && this.selected) {\n            this._selected.sort(predicate);\n        }\n    };\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @return {?}\n     */\n    SelectionModel.prototype._emitChangeEvent = function () {\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            var /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n            this.onChange.next(eventData);\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n        this._selected = null;\n    };\n    /**\n     * Selects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype._markSelected = function (value) {\n        if (!this.isSelected(value)) {\n            if (!this._isMulti) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    };\n    /**\n     * Deselects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype._unmarkSelected = function (value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    };\n    /**\n     * Clears out the selected values.\n     * @return {?}\n     */\n    SelectionModel.prototype._unmarkAll = function () {\n        var _this = this;\n        if (!this.isEmpty()) {\n            this._selection.forEach(function (value) { return _this._unmarkSelected(value); });\n        }\n    };\n    return SelectionModel;\n}());\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nvar SelectionChange = (function () {\n    /**\n     * @param {?=} added\n     * @param {?=} removed\n     */\n    function SelectionChange(added, removed) {\n        this.added = added;\n        this.removed = removed;\n    }\n    return SelectionChange;\n}());\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nfunction isFakeMousedownFromScreenReader(event) {\n    return event.buttons === 0;\n}\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nvar UniqueSelectionDispatcher = (function () {\n    function UniqueSelectionDispatcher() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    UniqueSelectionDispatcher.prototype.notify = function (id, name) {\n        for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {\n            var listener = _a[_i];\n            listener(id, name);\n        }\n    };\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?}\n     */\n    UniqueSelectionDispatcher.prototype.listen = function (listener) {\n        this._listeners.push(listener);\n    };\n    return UniqueSelectionDispatcher;\n}());\nUniqueSelectionDispatcher.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nUniqueSelectionDispatcher.ctorParameters = function () { return []; };\n/**\n * @param {?} parentDispatcher\n * @return {?}\n */\nfunction UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(parentDispatcher) {\n    return parentDispatcher || new UniqueSelectionDispatcher();\n}\nvar UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n    // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n    provide: UniqueSelectionDispatcher,\n    deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n    useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nvar TOUCH_BUFFER_MS = 650;\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nvar FocusOriginMonitor = (function () {\n    /**\n     * @param {?} _ngZone\n     */\n    function FocusOriginMonitor(_ngZone) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        this._origin = null;\n        this._windowFocused = false;\n        this._elementInfo = new WeakMap();\n        this._ngZone.runOutsideAngular(function () { return _this._registerDocumentEvents(); });\n    }\n    /**\n     * Monitors focus on an element and applies appropriate CSS classes.\n     * @param {?} element The element to monitor\n     * @param {?} renderer The renderer to use to apply CSS classes to the element.\n     * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n     * @return {?} An observable that emits when the focus state of the element changes.\n     *     When the element is blurred, null will be emitted.\n     */\n    FocusOriginMonitor.prototype.monitor = function (element, renderer, checkChildren) {\n        var _this = this;\n        // Check if we're already monitoring this element.\n        if (this._elementInfo.has(element)) {\n            var /** @type {?} */ info_1 = this._elementInfo.get(element);\n            info_1.checkChildren = checkChildren;\n            return info_1.subject.asObservable();\n        }\n        // Create monitored element info.\n        var /** @type {?} */ info = {\n            unlisten: null,\n            checkChildren: checkChildren,\n            renderer: renderer,\n            subject: new Subject()\n        };\n        this._elementInfo.set(element, info);\n        // Start listening. We need to listen in capture phase since focus events don't bubble.\n        var /** @type {?} */ focusListener = function (event) { return _this._onFocus(event, element); };\n        var /** @type {?} */ blurListener = function (event) { return _this._onBlur(event, element); };\n        this._ngZone.runOutsideAngular(function () {\n            element.addEventListener('focus', focusListener, true);\n            element.addEventListener('blur', blurListener, true);\n        });\n        // Create an unlisten function for later.\n        info.unlisten = function () {\n            element.removeEventListener('focus', focusListener, true);\n            element.removeEventListener('blur', blurListener, true);\n        };\n        return info.subject.asObservable();\n    };\n    /**\n     * Stops monitoring an element and removes all focus classes.\n     * @param {?} element The element to stop monitoring.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype.stopMonitoring = function (element) {\n        var /** @type {?} */ elementInfo = this._elementInfo.get(element);\n        if (elementInfo) {\n            elementInfo.unlisten();\n            elementInfo.subject.complete();\n            this._setClasses(element, null);\n            this._elementInfo.delete(element);\n        }\n    };\n    /**\n     * Focuses the element via the specified focus origin.\n     * @param {?} element The element to focus.\n     * @param {?} renderer The renderer to use to invoke the focus method on the element.\n     * @param {?} origin The focus origin.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype.focusVia = function (element, renderer, origin) {\n        this._setOriginForCurrentEventQueue(origin);\n        renderer.invokeElementMethod(element, 'focus');\n    };\n    /**\n     * Register necessary event listeners on the document and window.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._registerDocumentEvents = function () {\n        var _this = this;\n        // Note: we listen to events in the capture phase so we can detect them even if the user stops\n        // propagation.\n        // On keydown record the origin and clear any touch event that may be in progress.\n        document.addEventListener('keydown', function () {\n            _this._lastTouchTarget = null;\n            _this._setOriginForCurrentEventQueue('keyboard');\n        }, true);\n        // On mousedown record the origin only if there is not touch target, since a mousedown can\n        // happen as a result of a touch event.\n        document.addEventListener('mousedown', function () {\n            if (!_this._lastTouchTarget) {\n                _this._setOriginForCurrentEventQueue('mouse');\n            }\n        }, true);\n        // When the touchstart event fires the focus event is not yet in the event queue. This means\n        // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n        // see if a focus happens.\n        document.addEventListener('touchstart', function (event) {\n            if (_this._touchTimeout != null) {\n                clearTimeout(_this._touchTimeout);\n            }\n            _this._lastTouchTarget = event.target;\n            _this._touchTimeout = setTimeout(function () { return _this._lastTouchTarget = null; }, TOUCH_BUFFER_MS);\n        }, true);\n        // Make a note of when the window regains focus, so we can restore the origin info for the\n        // focused element.\n        window.addEventListener('focus', function () {\n            _this._windowFocused = true;\n            setTimeout(function () { return _this._windowFocused = false; }, 0);\n        });\n    };\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param {?} element The element to update the classes on.\n     * @param {?} origin The focus origin.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._setClasses = function (element, origin) {\n        var /** @type {?} */ renderer = this._elementInfo.get(element).renderer;\n        renderer.setElementClass(element, 'cdk-focused', !!origin);\n        renderer.setElementClass(element, 'cdk-touch-focused', origin === 'touch');\n        renderer.setElementClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n        renderer.setElementClass(element, 'cdk-mouse-focused', origin === 'mouse');\n        renderer.setElementClass(element, 'cdk-program-focused', origin === 'program');\n    };\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @param {?} origin The origin to set.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._setOriginForCurrentEventQueue = function (origin) {\n        var _this = this;\n        this._origin = origin;\n        setTimeout(function () { return _this._origin = null; }, 0);\n    };\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param {?} event The focus event to check.\n     * @return {?} Whether the event was caused by a touch.\n     */\n    FocusOriginMonitor.prototype._wasCausedByTouch = function (event) {\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n        // Consider the following dom structure:\n        //\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\n        //   <div #child (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // If the user touches the #child element and the #parent is programmatically focused as a\n        // result, this code will still consider it to have been caused by the touch event and will\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n        // relatively small edge-case that can be worked around by using\n        // focusVia(parentEl, renderer,  'program') to focus the parent element.\n        //\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\n        // for the first focus event after the touchstart, and then the first blur event after that\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\n        // touchstart.\n        var /** @type {?} */ focusTarget = event.target;\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    };\n    /**\n     * Handles focus events on a registered element.\n     * @param {?} event The focus event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._onFocus = function (event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        if (!this._elementInfo.get(element).checkChildren && element !== event.target) {\n            return;\n        }\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\n        //    the element from before the window blurred.\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n        // 3) The element was programmatically focused, in which case we should mark the origin as\n        //    'program'.\n        if (!this._origin) {\n            if (this._windowFocused && this._lastFocusOrigin) {\n                this._origin = this._lastFocusOrigin;\n            }\n            else if (this._wasCausedByTouch(event)) {\n                this._origin = 'touch';\n            }\n            else {\n                this._origin = 'program';\n            }\n        }\n        this._setClasses(element, this._origin);\n        this._elementInfo.get(element).subject.next(this._origin);\n        this._lastFocusOrigin = this._origin;\n        this._origin = null;\n    };\n    /**\n     * Handles blur events on a registered element.\n     * @param {?} event The blur event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._onBlur = function (event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        if (this._elementInfo.get(element).checkChildren && event.relatedTarget instanceof Node &&\n            element.contains(event.relatedTarget)) {\n            return;\n        }\n        this._setClasses(element, null);\n        this._elementInfo.get(element).subject.next(null);\n    };\n    return FocusOriginMonitor;\n}());\nFocusOriginMonitor.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nFocusOriginMonitor.ctorParameters = function () { return [\n    { type: NgZone, },\n]; };\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nvar CdkMonitorFocus = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusOriginMonitor\n     * @param {?} renderer\n     */\n    function CdkMonitorFocus(_elementRef, _focusOriginMonitor, renderer) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        this.cdkFocusChange = new EventEmitter();\n        this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(function (origin) { return _this.cdkFocusChange.emit(origin); });\n    }\n    /**\n     * @return {?}\n     */\n    CdkMonitorFocus.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n    };\n    return CdkMonitorFocus;\n}());\nCdkMonitorFocus.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n            },] },\n];\n/**\n * @nocollapse\n */\nCdkMonitorFocus.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: FocusOriginMonitor, },\n    { type: Renderer, },\n]; };\nCdkMonitorFocus.propDecorators = {\n    'cdkFocusChange': [{ type: Output },],\n};\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @return {?}\n */\nfunction FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone) {\n    return parentDispatcher || new FocusOriginMonitor(ngZone);\n}\nvar FOCUS_ORIGIN_MONITOR_PROVIDER = {\n    // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n    provide: FocusOriginMonitor,\n    deps: [[new Optional(), new SkipSelf(), FocusOriginMonitor], NgZone],\n    useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nfunction applyCssTransform(element, transformValue) {\n    // It's important to trim the result, because the browser will ignore the set operation\n    // if the string contains only whitespace.\n    var /** @type {?} */ value = transformValue.trim();\n    element.style.transform = value;\n    element.style.webkitTransform = value;\n}\nvar StyleModule = (function () {\n    function StyleModule() {\n    }\n    return StyleModule;\n}());\nStyleModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [CdkMonitorFocus],\n                exports: [CdkMonitorFocus],\n                providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],\n            },] },\n];\n/**\n * @nocollapse\n */\nStyleModule.ctorParameters = function () { return []; };\n/**\n * \\@docs-private\n */\nvar AnimationCurves = (function () {\n    function AnimationCurves() {\n    }\n    return AnimationCurves;\n}());\nAnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\nAnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\nAnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\nAnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n/**\n * \\@docs-private\n */\nvar AnimationDurations = (function () {\n    function AnimationDurations() {\n    }\n    return AnimationDurations;\n}());\nAnimationDurations.COMPLEX = '375ms';\nAnimationDurations.ENTERING = '225ms';\nAnimationDurations.EXITING = '195ms';\n/**\n * Coerces a data-bound value (typically a string) to a number.\n * @param {?} value\n * @param {?=} fallbackValue\n * @return {?}\n */\nfunction coerceNumberProperty(value, fallbackValue) {\n    if (fallbackValue === void 0) { fallbackValue = 0; }\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return isNaN(parseFloat(/** @type {?} */ (value))) || isNaN(Number(value)) ? fallbackValue : Number(value);\n}\nvar MdCoreModule = (function () {\n    function MdCoreModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdCoreModule.forRoot = function () {\n        return {\n            ngModule: MdCoreModule,\n            providers: [],\n        };\n    };\n    return MdCoreModule;\n}());\nMdCoreModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    MdLineModule,\n                    RtlModule,\n                    MdRippleModule,\n                    ObserveContentModule,\n                    PortalModule,\n                    OverlayModule,\n                    A11yModule,\n                    MdOptionModule,\n                    MdSelectionModule,\n                ],\n                exports: [\n                    MdLineModule,\n                    RtlModule,\n                    MdRippleModule,\n                    ObserveContentModule,\n                    PortalModule,\n                    OverlayModule,\n                    A11yModule,\n                    MdOptionModule,\n                    MdSelectionModule,\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCoreModule.ctorParameters = function () { return []; };\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nvar MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MdButtonToggleGroup; }),\n    multi: true\n};\nvar _uniqueIdCounter$1 = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nvar MdButtonToggleChange = (function () {\n    function MdButtonToggleChange() {\n    }\n    return MdButtonToggleChange;\n}());\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nvar MdButtonToggleGroup = (function () {\n    function MdButtonToggleGroup() {\n        this._value = null;\n        this._name = \"md-button-toggle-group-\" + _uniqueIdCounter$1++;\n        this._disabled = null;\n        this._vertical = false;\n        this._selected = null;\n        this._isInitialized = false;\n        this._controlValueAccessorChangeFn = function (value) { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this.onTouched = function () { };\n        /** Child button toggle buttons. */\n        this._buttonToggles = null;\n        this._change = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.ngAfterViewInit = function () {\n        this._isInitialized = true;\n    };\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"name\", {\n        /**\n         * `name` attribute for the underlying `input` element.\n         * @return {?}\n         */\n        get: function () {\n            return this._name;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._name = value;\n            this._updateButtonToggleNames();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"disabled\", {\n        /**\n         * Whether the toggle group is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"vertical\", {\n        /**\n         * Whether the toggle group is vertical.\n         * @return {?}\n         */\n        get: function () {\n            return this._vertical;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._vertical = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"value\", {\n        /**\n         * Value of the toggle group.\n         * @return {?}\n         */\n        get: function () {\n            return this._value;\n        },\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        set: function (newValue) {\n            if (this._value != newValue) {\n                this._value = newValue;\n                this._updateSelectedButtonToggleFromValue();\n                // Only emit a change event if the view is completely initialized.\n                // We don't want to emit a change event for the initial values.\n                if (this._isInitialized) {\n                    this._emitChangeEvent();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"selected\", {\n        /**\n         * Whether the toggle group is selected.\n         * @return {?}\n         */\n        get: function () {\n            return this._selected;\n        },\n        /**\n         * @param {?} selected\n         * @return {?}\n         */\n        set: function (selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n            if (selected && !selected.checked) {\n                selected.checked = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"change\", {\n        /**\n         * Event emitted when the group's value changes.\n         * @return {?}\n         */\n        get: function () {\n            return this._change.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype._updateButtonToggleNames = function () {\n        var _this = this;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(function (toggle) {\n                toggle.name = _this._name;\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype._updateSelectedButtonToggleFromValue = function () {\n        var _this = this;\n        var /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n        if (this._buttonToggles != null && !isAlreadySelected) {\n            var /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(function (buttonToggle) { return buttonToggle.value == _this._value; })[0];\n            if (matchingButtonToggle) {\n                this.selected = matchingButtonToggle;\n            }\n            else if (this.value == null) {\n                this.selected = null;\n                this._buttonToggles.forEach(function (buttonToggle) {\n                    buttonToggle.checked = false;\n                });\n            }\n        }\n    };\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdButtonToggleChange();\n        event.source = this._selected;\n        event.value = this._value;\n        this._controlValueAccessorChangeFn(event.value);\n        this._change.emit(event);\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * Registers a callback that will be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn On change callback function.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback that will be triggered when the control has been touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn On touch callback function.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the component should be disabled.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    return MdButtonToggleGroup;\n}());\nMdButtonToggleGroup.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n                providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n                host: {\n                    '[class.mat-button-toggle-group]': 'true',\n                    'role': 'radiogroup',\n                    '[class.mat-button-toggle-vertical]': 'vertical'\n                },\n                exportAs: 'mdButtonToggleGroup',\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButtonToggleGroup.ctorParameters = function () { return []; };\nMdButtonToggleGroup.propDecorators = {\n    '_buttonToggles': [{ type: ContentChildren, args: [forwardRef(function () { return MdButtonToggle; }),] },],\n    'name': [{ type: Input },],\n    'disabled': [{ type: Input },],\n    'vertical': [{ type: Input },],\n    'value': [{ type: Input },],\n    'selected': [{ type: Input },],\n    'change': [{ type: Output },],\n};\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nvar MdButtonToggleGroupMultiple = (function () {\n    function MdButtonToggleGroupMultiple() {\n        this._disabled = null;\n        this._vertical = false;\n    }\n    Object.defineProperty(MdButtonToggleGroupMultiple.prototype, \"disabled\", {\n        /**\n         * Whether the toggle group is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = (value != null && value !== false) ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroupMultiple.prototype, \"vertical\", {\n        /**\n         * Whether the toggle group is vertical.\n         * @return {?}\n         */\n        get: function () {\n            return this._vertical;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._vertical = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MdButtonToggleGroupMultiple;\n}());\nMdButtonToggleGroupMultiple.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n                exportAs: 'mdButtonToggleGroup',\n                host: {\n                    '[class.mat-button-toggle-group]': 'true',\n                    '[class.mat-button-toggle-vertical]': 'vertical'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButtonToggleGroupMultiple.ctorParameters = function () { return []; };\nMdButtonToggleGroupMultiple.propDecorators = {\n    'disabled': [{ type: Input },],\n    'vertical': [{ type: Input },],\n};\n/**\n * Single button inside of a toggle group.\n */\nvar MdButtonToggle = (function () {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} toggleGroupMultiple\n     * @param {?} _buttonToggleDispatcher\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _focusOriginMonitor\n     */\n    function MdButtonToggle(toggleGroup, toggleGroupMultiple, _buttonToggleDispatcher, _renderer, _elementRef, _focusOriginMonitor) {\n        var _this = this;\n        this._buttonToggleDispatcher = _buttonToggleDispatcher;\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        this._checked = false;\n        this._disabled = null;\n        this._value = null;\n        this._isSingleSelector = null;\n        this._change = new EventEmitter();\n        this.buttonToggleGroup = toggleGroup;\n        this.buttonToggleGroupMultiple = toggleGroupMultiple;\n        if (this.buttonToggleGroup) {\n            _buttonToggleDispatcher.listen(function (id, name) {\n                if (id != _this.id && name == _this.name) {\n                    _this.checked = false;\n                }\n            });\n            this._type = 'radio';\n            this.name = this.buttonToggleGroup.name;\n            this._isSingleSelector = true;\n        }\n        else {\n            // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n            // toggled on or off.\n            this._type = 'checkbox';\n            this._isSingleSelector = false;\n        }\n    }\n    Object.defineProperty(MdButtonToggle.prototype, \"inputId\", {\n        /**\n         * Unique ID for the underlying `input` element.\n         * @return {?}\n         */\n        get: function () {\n            return this.id + \"-input\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggle.prototype, \"checked\", {\n        /**\n         * Whether the button is checked.\n         * @return {?}\n         */\n        get: function () {\n            return this._checked;\n        },\n        /**\n         * @param {?} newCheckedState\n         * @return {?}\n         */\n        set: function (newCheckedState) {\n            if (this._isSingleSelector) {\n                if (newCheckedState) {\n                    // Notify all button toggles with the same name (in the same group) to un-check.\n                    this._buttonToggleDispatcher.notify(this.id, this.name);\n                }\n            }\n            this._checked = newCheckedState;\n            if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n                this.buttonToggleGroup.selected = this;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggle.prototype, \"value\", {\n        /**\n         * MdButtonToggleGroup reads this to assign its own value.\n         * @return {?}\n         */\n        get: function () {\n            return this._value;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._value != value) {\n                if (this.buttonToggleGroup != null && this.checked) {\n                    this.buttonToggleGroup.value = value;\n                }\n                this._value = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggle.prototype, \"disabled\", {\n        /**\n         * Whether the button is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n                (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = (value != null && value !== false) ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggle.prototype, \"change\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._change.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdButtonToggle.prototype.ngOnInit = function () {\n        if (this.id == null) {\n            this.id = \"md-button-toggle-\" + _uniqueIdCounter$1++;\n        }\n        if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n            this._checked = true;\n        }\n        this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n    };\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n    MdButtonToggle.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');\n    };\n    /**\n     * Toggle the state of the current button toggle.\n     * @return {?}\n     */\n    MdButtonToggle.prototype._toggle = function () {\n        this.checked = !this.checked;\n    };\n    /**\n     * Checks the button toggle due to an interaction with the underlying native input.\n     * @param {?} event\n     * @return {?}\n     */\n    MdButtonToggle.prototype._onInputChange = function (event) {\n        event.stopPropagation();\n        if (this._isSingleSelector) {\n            // Propagate the change one-way via the group, which will in turn mark this\n            // button toggle as checked.\n            this.checked = true;\n            this.buttonToggleGroup.selected = this;\n            this.buttonToggleGroup.onTouched();\n        }\n        else {\n            this._toggle();\n        }\n        // Emit a change event when the native input does.\n        this._emitChangeEvent();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdButtonToggle.prototype._onInputClick = function (event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /**\n     * Dispatch change event with current value.\n     * @return {?}\n     */\n    MdButtonToggle.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdButtonToggleChange();\n        event.source = this;\n        event.value = this._value;\n        this._change.emit(event);\n    };\n    return MdButtonToggle;\n}());\nMdButtonToggle.decorators = [\n    { type: Component, args: [{ selector: 'md-button-toggle, mat-button-toggle',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-button-toggle-label\\\"> <input #input class=\\\"mat-button-toggle-input cdk-visually-hidden\\\" [type]=\\\"_type\\\" [id]=\\\"inputId\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [name]=\\\"name\\\" (change)=\\\"_onInputChange($event)\\\" (click)=\\\"_onInputClick($event)\\\"> <div class=\\\"mat-button-toggle-label-content\\\"> <ng-content></ng-content> </div> </label> <!-- the touchstart handler prevents the overlay from capturing the initial tap on touch devices --> <div class=\\\"mat-button-toggle-focus-overlay\\\" (touchstart)=\\\"$event.preventDefault()\\\"></div> \",\n                styles: [\".mat-button-toggle-group{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);position:relative;display:inline-flex;flex-direction:row;border-radius:2px;cursor:pointer;white-space:nowrap}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle-disabled .mat-button-toggle-label-content{cursor:default}.mat-button-toggle{white-space:nowrap;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;position:relative}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;cursor:pointer}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;position:absolute;top:0;left:0;right:0;bottom:0} /*# sourceMappingURL=button-toggle.css.map */ \"],\n                encapsulation: ViewEncapsulation.None,\n                host: {\n                    '[class.mat-button-toggle]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButtonToggle.ctorParameters = function () { return [\n    { type: MdButtonToggleGroup, decorators: [{ type: Optional },] },\n    { type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional },] },\n    { type: UniqueSelectionDispatcher, },\n    { type: Renderer, },\n    { type: ElementRef, },\n    { type: FocusOriginMonitor, },\n]; };\nMdButtonToggle.propDecorators = {\n    '_inputElement': [{ type: ViewChild, args: ['input',] },],\n    'id': [{ type: HostBinding }, { type: Input },],\n    'name': [{ type: Input },],\n    'checked': [{ type: HostBinding, args: ['class.mat-button-toggle-checked',] }, { type: Input },],\n    'value': [{ type: Input },],\n    'disabled': [{ type: HostBinding, args: ['class.mat-button-toggle-disabled',] }, { type: Input },],\n    'change': [{ type: Output },],\n};\nvar MdButtonToggleModule = (function () {\n    function MdButtonToggleModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdButtonToggleModule.forRoot = function () {\n        return {\n            ngModule: MdButtonToggleModule,\n            providers: []\n        };\n    };\n    return MdButtonToggleModule;\n}());\nMdButtonToggleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [FormsModule, CompatibilityModule],\n                exports: [\n                    MdButtonToggleGroup,\n                    MdButtonToggleGroupMultiple,\n                    MdButtonToggle,\n                    CompatibilityModule,\n                ],\n                declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n                providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, FocusOriginMonitor]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButtonToggleModule.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdButtonCssMatStyler = (function () {\n    function MdButtonCssMatStyler() {\n    }\n    return MdButtonCssMatStyler;\n}());\nMdButtonCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\n                host: {\n                    '[class.mat-button]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButtonCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdRaisedButtonCssMatStyler = (function () {\n    function MdRaisedButtonCssMatStyler() {\n    }\n    return MdRaisedButtonCssMatStyler;\n}());\nMdRaisedButtonCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[md-raised-button], button[mat-raised-button], ' +\n                    'a[md-raised-button], a[mat-raised-button]',\n                host: {\n                    '[class.mat-raised-button]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdRaisedButtonCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdIconButtonCssMatStyler = (function () {\n    function MdIconButtonCssMatStyler() {\n    }\n    return MdIconButtonCssMatStyler;\n}());\nMdIconButtonCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\n                host: {\n                    '[class.mat-icon-button]': 'true',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdIconButtonCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdFabCssMatStyler = (function () {\n    function MdFabCssMatStyler() {\n    }\n    return MdFabCssMatStyler;\n}());\nMdFabCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\n                host: {\n                    '[class.mat-fab]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdFabCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdMiniFabCssMatStyler = (function () {\n    function MdMiniFabCssMatStyler() {\n    }\n    return MdMiniFabCssMatStyler;\n}());\nMdMiniFabCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\n                host: {\n                    '[class.mat-mini-fab]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdMiniFabCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Material design button.\n */\nvar MdButton = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _focusOriginMonitor\n     */\n    function MdButton(_elementRef, _renderer, _focusOriginMonitor) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        /** Whether the button is round. */\n        this._isRoundButton = this._hasAttributeWithPrefix('fab', 'mini-fab');\n        /** Whether the button is icon button. */\n        this._isIconButton = this._hasAttributeWithPrefix('icon-button');\n        this._disableRipple = false;\n        this._disabled = null;\n        this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n    }\n    Object.defineProperty(MdButton.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect for this button is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this._disableRipple = coerceBooleanProperty(v); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButton.prototype, \"disabled\", {\n        /**\n         * Whether the button is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value) ? true : null; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdButton.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n    };\n    Object.defineProperty(MdButton.prototype, \"color\", {\n        /**\n         * The color of the button. Can be `primary`, `accent`, or `warn`.\n         * @return {?}\n         */\n        get: function () { return this._color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._updateColor(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdButton.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdButton.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this._renderer.setElementClass(this._getHostElement(), \"mat-\" + color, isAdd);\n        }\n    };\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n    MdButton.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n    };\n    /**\n     * @return {?}\n     */\n    MdButton.prototype._getHostElement = function () {\n        return this._elementRef.nativeElement;\n    };\n    /**\n     * @return {?}\n     */\n    MdButton.prototype._isRippleDisabled = function () {\n        return this.disableRipple || this.disabled;\n    };\n    /**\n     * Gets whether the button has one of the given attributes\n     * with either an 'md-' or 'mat-' prefix.\n     * @param {...?} unprefixedAttributeNames\n     * @return {?}\n     */\n    MdButton.prototype._hasAttributeWithPrefix = function () {\n        var _this = this;\n        var unprefixedAttributeNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            unprefixedAttributeNames[_i] = arguments[_i];\n        }\n        return unprefixedAttributeNames.some(function (suffix) {\n            var /** @type {?} */ el = _this._getHostElement();\n            return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n        });\n    };\n    return MdButton;\n}());\nMdButton.decorators = [\n    { type: Component, args: [{ selector: 'button[md-button], button[md-raised-button], button[md-icon-button],' +\n                    'button[md-fab], button[md-mini-fab],' +\n                    'button[mat-button], button[mat-raised-button], button[mat-icon-button],' +\n                    'button[mat-fab], button[mat-mini-fab]',\n                host: {\n                    '[disabled]': 'disabled',\n                },\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span> <div md-ripple *ngIf=\\\"!_isRippleDisabled()\\\" class=\\\"mat-button-ripple\\\" [class.mat-button-ripple-round]=\\\"_isRoundButton || _isIconButton\\\" [mdRippleCentered]=\\\"_isIconButton\\\" [mdRippleTrigger]=\\\"_getHostElement()\\\"></div> <!-- the touchstart handler prevents the overlay from capturing the initial tap on touch devices --> <div class=\\\"mat-button-focus-overlay\\\" (touchstart)=\\\"$event.preventDefault()\\\"></div> \",\n                styles: [\".mat-button,.mat-fab,.mat-icon-button,.mat-mini-fab,.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-weight:500;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px}[disabled].mat-button,[disabled].mat-fab,[disabled].mat-icon-button,[disabled].mat-mini-fab,[disabled].mat-raised-button{cursor:default}.cdk-keyboard-focused.mat-button .mat-button-focus-overlay,.cdk-keyboard-focused.mat-fab .mat-button-focus-overlay,.cdk-keyboard-focused.mat-icon-button .mat-button-focus-overlay,.cdk-keyboard-focused.mat-mini-fab .mat-button-focus-overlay,.cdk-keyboard-focused.mat-raised-button .mat-button-focus-overlay{opacity:1}.mat-button::-moz-focus-inner,.mat-fab::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-mini-fab::-moz-focus-inner,.mat-raised-button::-moz-focus-inner{border:0}.mat-fab,.mat-mini-fab,.mat-raised-button{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-fab:not([disabled]):active,.mat-mini-fab:not([disabled]):active,.mat-raised-button:not([disabled]):active{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}[disabled].mat-fab,[disabled].mat-mini-fab,[disabled].mat-raised-button{box-shadow:none}.mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{transition:none;opacity:0}.mat-button:hover .mat-button-focus-overlay{opacity:1}.mat-fab{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab:not([disabled]):active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-fab .mat-icon,.mat-fab i{padding:16px 0;line-height:24px}.mat-mini-fab{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab:not([disabled]):active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-mini-fab .mat-icon,.mat-mini-fab i{padding:8px 0;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button,.mat-icon-button,.mat-raised-button{color:currentColor}.mat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*{vertical-align:middle}.mat-button-focus-overlay,.mat-button-ripple{position:absolute;top:0;left:0;bottom:0;right:0}.mat-button-focus-overlay{background-color:rgba(0,0,0,.12);border-radius:inherit;pointer-events:none;opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}@media screen and (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:rgba(255,255,255,.5)}}.mat-button-ripple-round{border-radius:50%;z-index:1}@media screen and (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}} /*# sourceMappingURL=button.css.map */ \"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButton.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: FocusOriginMonitor, },\n]; };\nMdButton.propDecorators = {\n    'disableRipple': [{ type: Input },],\n    'disabled': [{ type: Input },],\n    'color': [{ type: Input },],\n};\n/**\n * Raised Material design button.\n */\nvar MdAnchor = (function (_super) {\n    __extends(MdAnchor, _super);\n    /**\n     * @param {?} elementRef\n     * @param {?} renderer\n     * @param {?} focusOriginMonitor\n     */\n    function MdAnchor(elementRef, renderer, focusOriginMonitor) {\n        return _super.call(this, elementRef, renderer, focusOriginMonitor) || this;\n    }\n    Object.defineProperty(MdAnchor.prototype, \"tabIndex\", {\n        /**\n         * \\@docs-private\n         * @return {?}\n         */\n        get: function () {\n            return this.disabled ? -1 : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdAnchor.prototype, \"_isAriaDisabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.disabled ? 'true' : 'false';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdAnchor.prototype._haltDisabledEvents = function (event) {\n        // A disabled button shouldn't apply any actions\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    };\n    return MdAnchor;\n}(MdButton));\nMdAnchor.decorators = [\n    { type: Component, args: [{ selector: \"a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]\",\n                host: {\n                    '[attr.disabled]': 'disabled',\n                    '[attr.aria-disabled]': '_isAriaDisabled',\n                    '(click)': '_haltDisabledEvents($event)',\n                },\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span> <div md-ripple *ngIf=\\\"!_isRippleDisabled()\\\" class=\\\"mat-button-ripple\\\" [class.mat-button-ripple-round]=\\\"_isRoundButton || _isIconButton\\\" [mdRippleCentered]=\\\"_isIconButton\\\" [mdRippleTrigger]=\\\"_getHostElement()\\\"></div> <!-- the touchstart handler prevents the overlay from capturing the initial tap on touch devices --> <div class=\\\"mat-button-focus-overlay\\\" (touchstart)=\\\"$event.preventDefault()\\\"></div> \",\n                styles: [\".mat-button,.mat-fab,.mat-icon-button,.mat-mini-fab,.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-weight:500;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px}[disabled].mat-button,[disabled].mat-fab,[disabled].mat-icon-button,[disabled].mat-mini-fab,[disabled].mat-raised-button{cursor:default}.cdk-keyboard-focused.mat-button .mat-button-focus-overlay,.cdk-keyboard-focused.mat-fab .mat-button-focus-overlay,.cdk-keyboard-focused.mat-icon-button .mat-button-focus-overlay,.cdk-keyboard-focused.mat-mini-fab .mat-button-focus-overlay,.cdk-keyboard-focused.mat-raised-button .mat-button-focus-overlay{opacity:1}.mat-button::-moz-focus-inner,.mat-fab::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-mini-fab::-moz-focus-inner,.mat-raised-button::-moz-focus-inner{border:0}.mat-fab,.mat-mini-fab,.mat-raised-button{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-fab:not([disabled]):active,.mat-mini-fab:not([disabled]):active,.mat-raised-button:not([disabled]):active{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}[disabled].mat-fab,[disabled].mat-mini-fab,[disabled].mat-raised-button{box-shadow:none}.mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{transition:none;opacity:0}.mat-button:hover .mat-button-focus-overlay{opacity:1}.mat-fab{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab:not([disabled]):active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-fab .mat-icon,.mat-fab i{padding:16px 0;line-height:24px}.mat-mini-fab{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab:not([disabled]):active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-mini-fab .mat-icon,.mat-mini-fab i{padding:8px 0;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button,.mat-icon-button,.mat-raised-button{color:currentColor}.mat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*{vertical-align:middle}.mat-button-focus-overlay,.mat-button-ripple{position:absolute;top:0;left:0;bottom:0;right:0}.mat-button-focus-overlay{background-color:rgba(0,0,0,.12);border-radius:inherit;pointer-events:none;opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}@media screen and (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:rgba(255,255,255,.5)}}.mat-button-ripple-round{border-radius:50%;z-index:1}@media screen and (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}} /*# sourceMappingURL=button.css.map */ \"],\n                encapsulation: ViewEncapsulation.None\n            },] },\n];\n/**\n * @nocollapse\n */\nMdAnchor.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: FocusOriginMonitor, },\n]; };\nMdAnchor.propDecorators = {\n    'tabIndex': [{ type: HostBinding, args: ['tabIndex',] },],\n};\nvar MdButtonModule = (function () {\n    function MdButtonModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdButtonModule.forRoot = function () {\n        return {\n            ngModule: MdButtonModule,\n            providers: []\n        };\n    };\n    return MdButtonModule;\n}());\nMdButtonModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MdRippleModule,\n                    CompatibilityModule,\n                    StyleModule,\n                ],\n                exports: [\n                    MdButton,\n                    MdAnchor,\n                    CompatibilityModule,\n                    MdButtonCssMatStyler,\n                    MdRaisedButtonCssMatStyler,\n                    MdIconButtonCssMatStyler,\n                    MdFabCssMatStyler,\n                    MdMiniFabCssMatStyler,\n                ],\n                declarations: [\n                    MdButton,\n                    MdAnchor,\n                    MdButtonCssMatStyler,\n                    MdRaisedButtonCssMatStyler,\n                    MdIconButtonCssMatStyler,\n                    MdFabCssMatStyler,\n                    MdMiniFabCssMatStyler,\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdButtonModule.ctorParameters = function () { return []; };\n/** Monotonically increasing integer used to auto-generate unique ids for checkbox components. */\nvar nextId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nvar MD_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MdCheckbox; }),\n    multi: true\n};\nvar TransitionCheckState = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n/**\n * Change event object emitted by MdCheckbox.\n */\nvar MdCheckboxChange = (function () {\n    function MdCheckboxChange() {\n    }\n    return MdCheckboxChange;\n}());\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nvar MdCheckbox = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _focusOriginMonitor\n     */\n    function MdCheckbox(_renderer, _elementRef, _changeDetectorRef, _focusOriginMonitor) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        /** A unique id for the checkbox. If one is not supplied, it is auto-generated. */\n        this.id = \"md-checkbox-\" + ++nextId;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        this.labelPosition = 'after';\n        this._disabled = false;\n        /** Tabindex value that is passed to the underlying input element. */\n        this.tabIndex = 0;\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        this.change = new EventEmitter();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * \\@docs-private\n         */\n        this.onTouched = function () { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = TransitionCheckState.Init;\n        this._checked = false;\n        this._indeterminate = false;\n        this._controlValueAccessorChangeFn = function (value) { };\n        this.color = 'accent';\n    }\n    Object.defineProperty(MdCheckbox.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect for this checkbox is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"inputId\", {\n        /**\n         * ID of the native input element inside `<md-checkbox>`\n         * @return {?}\n         */\n        get: function () {\n            return \"input-\" + this.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"required\", {\n        /**\n         * Whether the checkbox is required.\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"align\", {\n        /**\n         * Whether or not the checkbox should appear before or after the label.\n         * @deprecated\n         * @return {?}\n         */\n        get: function () {\n            // align refers to the checkbox relative to the label, while labelPosition refers to the\n            // label relative to the checkbox. As such, they are inverted.\n            return this.labelPosition == 'after' ? 'start' : 'end';\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this.labelPosition = (v == 'start') ? 'after' : 'before';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"disabled\", {\n        /**\n         * Whether the checkbox is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdCheckbox.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this._focusedSubscription = this._focusOriginMonitor\n            .monitor(this._inputElement.nativeElement, this._renderer, false)\n            .subscribe(function (focusOrigin) {\n            if (!_this._focusedRipple && (focusOrigin === 'keyboard' || focusOrigin === 'program')) {\n                _this._focusedRipple = _this._ripple.launch(0, 0, { persistent: true, centered: true });\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdCheckbox.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n    };\n    Object.defineProperty(MdCheckbox.prototype, \"checked\", {\n        /**\n         * Whether the checkbox is checked. Note that setting `checked` will immediately set\n         * `indeterminate` to false.\n         * @return {?}\n         */\n        get: function () {\n            return this._checked;\n        },\n        /**\n         * @param {?} checked\n         * @return {?}\n         */\n        set: function (checked) {\n            var _this = this;\n            if (checked != this.checked) {\n                if (this._indeterminate) {\n                    Promise.resolve().then(function () {\n                        _this._indeterminate = false;\n                        _this.indeterminateChange.emit(_this._indeterminate);\n                    });\n                }\n                this._checked = checked;\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"indeterminate\", {\n        /**\n         * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n         * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n         * checkable items. Note that whenever `checked` is set, indeterminate is immediately set to\n         * false. This differs from the web platform in that indeterminate state on native\n         * checkboxes is only remove when the user manually checks the checkbox (rather than setting the\n         * `checked` property programmatically). However, we feel that this behavior is more accommodating\n         * to the way consumers would envision using this component.\n         * @return {?}\n         */\n        get: function () {\n            return this._indeterminate;\n        },\n        /**\n         * @param {?} indeterminate\n         * @return {?}\n         */\n        set: function (indeterminate) {\n            var /** @type {?} */ changed = indeterminate != this._indeterminate;\n            this._indeterminate = indeterminate;\n            if (changed) {\n                if (this._indeterminate) {\n                    this._transitionCheckState(TransitionCheckState.Indeterminate);\n                }\n                else {\n                    this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n                }\n                this.indeterminateChange.emit(this._indeterminate);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"color\", {\n        /**\n         * The color of the button. Can be `primary`, `accent`, or `warn`.\n         * @return {?}\n         */\n        get: function () { return this._color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._updateColor(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdCheckbox.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdCheckbox.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this._renderer.setElementClass(this._elementRef.nativeElement, \"mat-\" + color, isAdd);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdCheckbox.prototype._isRippleDisabled = function () {\n        return this.disableRipple || this.disabled;\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    MdCheckbox.prototype.writeValue = function (value) {\n        this.checked = !!value;\n    };\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Function to be called on change.\n     * @return {?}\n     */\n    MdCheckbox.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback to be triggered when the control has been touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be triggered when the checkbox is touched.\n     * @return {?}\n     */\n    MdCheckbox.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the checkbox should be disabled.\n     * @return {?}\n     */\n    MdCheckbox.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * @param {?} newState\n     * @return {?}\n     */\n    MdCheckbox.prototype._transitionCheckState = function (newState) {\n        var /** @type {?} */ oldState = this._currentCheckState;\n        var /** @type {?} */ renderer = this._renderer;\n        var /** @type {?} */ elementRef = this._elementRef;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, false);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, true);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdCheckbox.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    };\n    /**\n     * Informs the component when we lose focus in order to style accordingly\n     * @return {?}\n     */\n    MdCheckbox.prototype._onInputBlur = function () {\n        this._removeFocusedRipple();\n        this.onTouched();\n    };\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    MdCheckbox.prototype.toggle = function () {\n        this.checked = !this.checked;\n    };\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    MdCheckbox.prototype._onInputClick = function (event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        this._removeFocusedRipple();\n        if (!this.disabled) {\n            this.toggle();\n            this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n    };\n    /**\n     * Focuses the checkbox.\n     * @return {?}\n     */\n    MdCheckbox.prototype.focus = function () {\n        this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'program');\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdCheckbox.prototype._onInteractionEvent = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    };\n    /**\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    MdCheckbox.prototype._getAnimationClassForCheckStateTransition = function (oldState, newState) {\n        var /** @type {?} */ animSuffix;\n        switch (oldState) {\n            case TransitionCheckState.Init:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === TransitionCheckState.Checked) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == TransitionCheckState.Indeterminate) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case TransitionCheckState.Unchecked:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case TransitionCheckState.Checked:\n                animSuffix = newState === TransitionCheckState.Unchecked ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case TransitionCheckState.Indeterminate:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n        }\n        return \"mat-checkbox-anim-\" + animSuffix;\n    };\n    /**\n     * Fades out the focused state ripple.\n     * @return {?}\n     */\n    MdCheckbox.prototype._removeFocusedRipple = function () {\n        if (this._focusedRipple) {\n            this._focusedRipple.fadeOut();\n            this._focusedRipple = null;\n        }\n    };\n    return MdCheckbox;\n}());\nMdCheckbox.decorators = [\n    { type: Component, args: [{ selector: 'md-checkbox, mat-checkbox',\n                template: \"<label class=\\\"mat-checkbox-layout\\\" #label> <div class=\\\"mat-checkbox-inner-container\\\"> <input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (blur)=\\\"_onInputBlur()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"> <div md-ripple *ngIf=\\\"!_isRippleDisabled()\\\" class=\\\"mat-checkbox-ripple\\\" [mdRippleTrigger]=\\\"label\\\" [mdRippleCentered]=\\\"true\\\"></div> <div class=\\\"mat-checkbox-frame\\\"></div> <div class=\\\"mat-checkbox-background\\\"> <svg version=\\\"1.1\\\" class=\\\"mat-checkbox-checkmark\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"> <path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/> </svg> <!-- Element for rendering the indeterminate state checkbox. --> <div class=\\\"mat-checkbox-mixedmark\\\"></div> </div> </div> <span class=\\\"mat-checkbox-label\\\"> <ng-content></ng-content> </span> </label> \",\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-checkmark,.mat-checkbox-frame{bottom:0;left:0;position:absolute;right:0;top:0}.mat-checkbox-checkmark,.mat-checkbox-mixedmark{width:calc(100% - 4px)}.mat-checkbox-background,.mat-checkbox-frame{border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-checkbox-label{cursor:pointer}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex}.mat-checkbox-inner-container{display:inline-block;height:20px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:20px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-layout .mat-checkbox-label{line-height:24px}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}.mat-checkbox-checkmark{width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.66667px}.mat-checkbox-mixedmark{height:2px;opacity:0;transform:scaleX(0) rotate(0)}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox-ripple{position:absolute;left:-15px;top:-15px;right:-15px;bottom:-15px;border-radius:50%;z-index:1;pointer-events:none} /*# sourceMappingURL=checkbox.css.map */ \"],\n                host: {\n                    '[class.mat-checkbox]': 'true',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                },\n                providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCheckbox.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n    { type: ChangeDetectorRef, },\n    { type: FocusOriginMonitor, },\n]; };\nMdCheckbox.propDecorators = {\n    'ariaLabel': [{ type: Input, args: ['aria-label',] },],\n    'ariaLabelledby': [{ type: Input, args: ['aria-labelledby',] },],\n    'id': [{ type: Input },],\n    'disableRipple': [{ type: Input },],\n    'required': [{ type: Input },],\n    'align': [{ type: Input },],\n    'labelPosition': [{ type: Input },],\n    'disabled': [{ type: Input },],\n    'tabIndex': [{ type: Input },],\n    'name': [{ type: Input },],\n    'change': [{ type: Output },],\n    'indeterminateChange': [{ type: Output },],\n    'value': [{ type: Input },],\n    '_inputElement': [{ type: ViewChild, args: ['input',] },],\n    '_ripple': [{ type: ViewChild, args: [MdRipple,] },],\n    'checked': [{ type: Input },],\n    'indeterminate': [{ type: Input },],\n    'color': [{ type: Input },],\n};\nvar MdCheckboxModule = (function () {\n    function MdCheckboxModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdCheckboxModule.forRoot = function () {\n        return {\n            ngModule: MdCheckboxModule,\n            providers: []\n        };\n    };\n    return MdCheckboxModule;\n}());\nMdCheckboxModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, MdRippleModule, CompatibilityModule],\n                exports: [MdCheckbox, CompatibilityModule],\n                declarations: [MdCheckbox],\n                providers: [FocusOriginMonitor]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCheckboxModule.ctorParameters = function () { return []; };\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nvar MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MdRadioGroup; }),\n    multi: true\n};\nvar _uniqueIdCounter$2 = 0;\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nvar MdRadioChange = (function () {\n    function MdRadioChange() {\n    }\n    return MdRadioChange;\n}());\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nvar MdRadioGroup = (function () {\n    function MdRadioGroup() {\n        this._value = null;\n        this._name = \"md-radio-group-\" + _uniqueIdCounter$2++;\n        this._disabled = false;\n        this._selected = null;\n        this._isInitialized = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = function (value) { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * \\@docs-private\n         */\n        this.onTouched = function () { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Child radio buttons. */\n        this._radios = null;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this.labelPosition = 'after';\n    }\n    Object.defineProperty(MdRadioGroup.prototype, \"name\", {\n        /**\n         * Name of the radio button group. All radio buttons inside this group will use this name.\n         * @return {?}\n         */\n        get: function () { return this._name; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._name = value;\n            this._updateRadioButtonNames();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioGroup.prototype, \"align\", {\n        /**\n         * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n         * @deprecated\n         * @return {?}\n         */\n        get: function () {\n            // align refers to the checkbox relative to the label, while labelPosition refers to the\n            // label relative to the checkbox. As such, they are inverted.\n            return this.labelPosition == 'after' ? 'start' : 'end';\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this.labelPosition = (v == 'start') ? 'after' : 'before';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioGroup.prototype, \"disabled\", {\n        /**\n         * Whether the radio button is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            // The presence of *any* disabled value makes the component disabled, *except* for false.\n            this._disabled = (value != null && value !== false) ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioGroup.prototype, \"value\", {\n        /**\n         * Value of the radio button.\n         * @return {?}\n         */\n        get: function () { return this._value; },\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        set: function (newValue) {\n            if (this._value != newValue) {\n                // Set this before proceeding to ensure no circular loop occurs with selection.\n                this._value = newValue;\n                this._updateSelectedRadioFromValue();\n                this._checkSelectedRadioButton();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdRadioGroup.prototype._checkSelectedRadioButton = function () {\n        if (this.selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    };\n    Object.defineProperty(MdRadioGroup.prototype, \"selected\", {\n        /**\n         * Whether the radio button is selected.\n         * @return {?}\n         */\n        get: function () { return this._selected; },\n        /**\n         * @param {?} selected\n         * @return {?}\n         */\n        set: function (selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n            this._checkSelectedRadioButton();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n    MdRadioGroup.prototype.ngAfterContentInit = function () {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MdRadioGroup.\n        this._isInitialized = true;\n    };\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n    MdRadioGroup.prototype._touch = function () {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioGroup.prototype._updateRadioButtonNames = function () {\n        var _this = this;\n        if (this._radios) {\n            this._radios.forEach(function (radio) {\n                radio.name = _this.name;\n            });\n        }\n    };\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @return {?}\n     */\n    MdRadioGroup.prototype._updateSelectedRadioFromValue = function () {\n        var _this = this;\n        // If the value already matches the selected radio, do nothing.\n        var /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(function (radio) {\n                radio.checked = _this.value == radio.value;\n                if (radio.checked) {\n                    _this._selected = radio;\n                }\n            });\n        }\n    };\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    MdRadioGroup.prototype._emitChangeEvent = function () {\n        if (this._isInitialized) {\n            var /** @type {?} */ event = new MdRadioChange();\n            event.source = this._selected;\n            event.value = this._value;\n            this.change.emit(event);\n        }\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    MdRadioGroup.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MdRadioGroup.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MdRadioGroup.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n    MdRadioGroup.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    return MdRadioGroup;\n}());\nMdRadioGroup.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-radio-group, mat-radio-group',\n                providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n                host: {\n                    'role': 'radiogroup',\n                    '[class.mat-radio-group]': 'true',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdRadioGroup.ctorParameters = function () { return []; };\nMdRadioGroup.propDecorators = {\n    'change': [{ type: Output },],\n    '_radios': [{ type: ContentChildren, args: [forwardRef(function () { return MdRadioButton; }),] },],\n    'name': [{ type: Input },],\n    'align': [{ type: Input },],\n    'labelPosition': [{ type: Input },],\n    'disabled': [{ type: Input },],\n    'value': [{ type: Input },],\n    'selected': [{ type: Input },],\n};\n/**\n * A radio-button. May be inside of\n */\nvar MdRadioButton = (function () {\n    /**\n     * @param {?} radioGroup\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _focusOriginMonitor\n     * @param {?} _radioDispatcher\n     */\n    function MdRadioButton(radioGroup, _elementRef, _renderer, _focusOriginMonitor, _radioDispatcher) {\n        var _this = this;\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        /** The unique ID for the radio button. */\n        this.id = \"md-radio-\" + _uniqueIdCounter$2++;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        this._checked = false;\n        this._value = null;\n        this.radioGroup = radioGroup;\n        _radioDispatcher.listen(function (id, name) {\n            if (id != _this.id && name == _this.name) {\n                _this.checked = false;\n            }\n        });\n    }\n    Object.defineProperty(MdRadioButton.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect for this radio button is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"checked\", {\n        /**\n         * Whether this radio button is checked.\n         * @return {?}\n         */\n        get: function () {\n            return this._checked;\n        },\n        /**\n         * @param {?} newCheckedState\n         * @return {?}\n         */\n        set: function (newCheckedState) {\n            if (this._checked != newCheckedState) {\n                this._checked = newCheckedState;\n                if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n                    this.radioGroup.selected = this;\n                }\n                else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n                    // When unchecking the selected radio button, update the selected radio\n                    // property on the group.\n                    this.radioGroup.selected = null;\n                }\n                if (newCheckedState) {\n                    // Notify all radio buttons with the same name to un-check.\n                    this._radioDispatcher.notify(this.id, this.name);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"value\", {\n        /**\n         * The value of this radio button.\n         * @return {?}\n         */\n        get: function () {\n            return this._value;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._value != value) {\n                this._value = value;\n                if (this.radioGroup != null) {\n                    if (!this.checked) {\n                        // Update checked when the value changed to match the radio group's value\n                        this.checked = this.radioGroup.value == value;\n                    }\n                    if (this.checked) {\n                        this.radioGroup.selected = this;\n                    }\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"align\", {\n        /**\n         * Whether or not the radio-button should appear before or after the label.\n         * @deprecated\n         * @return {?}\n         */\n        get: function () {\n            // align refers to the checkbox relative to the label, while labelPosition refers to the\n            // label relative to the checkbox. As such, they are inverted.\n            return this.labelPosition == 'after' ? 'start' : 'end';\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this.labelPosition = (v == 'start') ? 'after' : 'before';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"labelPosition\", {\n        /**\n         * Whether the label should appear after or before the radio button. Defaults to 'after'\n         * @return {?}\n         */\n        get: function () {\n            return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._labelPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"disabled\", {\n        /**\n         * Whether the radio button is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            // The presence of *any* disabled value makes the component disabled, *except* for false.\n            this._disabled = (value != null && value !== false) ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"inputId\", {\n        /**\n         * ID of the native input element inside `<md-radio-button>`\n         * @return {?}\n         */\n        get: function () {\n            return this.id + \"-input\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focuses the radio button.\n     * @return {?}\n     */\n    MdRadioButton.prototype.focus = function () {\n        this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'keyboard');\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype.ngOnInit = function () {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this._focusOriginMonitorSubscription = this._focusOriginMonitor\n            .monitor(this._inputElement.nativeElement, this._renderer, false)\n            .subscribe(function (focusOrigin) {\n            if (focusOrigin === 'keyboard' && !_this._focusedRippleRef) {\n                _this._focusedRippleRef = _this._ripple.launch(0, 0, { persistent: true, centered: true });\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n    };\n    /**\n     * Dispatch change event with current value.\n     * @return {?}\n     */\n    MdRadioButton.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdRadioChange();\n        event.source = this;\n        event.value = this._value;\n        this.change.emit(event);\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype._isRippleDisabled = function () {\n        return this.disableRipple || this.disabled;\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype._onInputBlur = function () {\n        if (this._focusedRippleRef) {\n            this._focusedRippleRef.fadeOut();\n            this._focusedRippleRef = null;\n        }\n        if (this.radioGroup) {\n            this.radioGroup._touch();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdRadioButton.prototype._onInputClick = function (event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n    MdRadioButton.prototype._onInputChange = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        var /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            this.radioGroup._touch();\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    };\n    return MdRadioButton;\n}());\nMdRadioButton.decorators = [\n    { type: Component, args: [{ selector: 'md-radio-button, mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content --> <!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. --> <label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label> <!-- The actual 'radio' part of the control. --> <div class=\\\"mat-radio-container\\\"> <div class=\\\"mat-radio-outer-circle\\\"></div> <div class=\\\"mat-radio-inner-circle\\\"></div> <div md-ripple *ngIf=\\\"!_isRippleDisabled()\\\" class=\\\"mat-radio-ripple\\\" [mdRippleTrigger]=\\\"label\\\" [mdRippleCentered]=\\\"true\\\"></div> </div> <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\" [id]=\\\"inputId\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [name]=\\\"name\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onInputChange($event)\\\" (blur)=\\\"_onInputBlur()\\\" (click)=\\\"_onInputClick($event)\\\"> <!-- The label content for radio control. --> <div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\"> <ng-content></ng-content> </div> </label> \",\n                styles: [\".mat-radio-button{display:inline-block;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif}.mat-radio-label{cursor:pointer;display:inline-flex;align-items:baseline;white-space:nowrap}.mat-radio-container{box-sizing:border-box;display:inline-block;height:20px;position:relative;width:20px;top:2px}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;transform:scale(0);width:20px}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}.mat-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-ripple{position:absolute;left:-15px;top:-15px;right:-15px;bottom:-15px;border-radius:50%;z-index:1;pointer-events:none} /*# sourceMappingURL=radio.css.map */ \"],\n                encapsulation: ViewEncapsulation.None,\n                host: {\n                    '[class.mat-radio-button]': 'true',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[attr.id]': 'id',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdRadioButton.ctorParameters = function () { return [\n    { type: MdRadioGroup, decorators: [{ type: Optional },] },\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: FocusOriginMonitor, },\n    { type: UniqueSelectionDispatcher, },\n]; };\nMdRadioButton.propDecorators = {\n    'id': [{ type: Input },],\n    'name': [{ type: Input },],\n    'ariaLabel': [{ type: Input, args: ['aria-label',] },],\n    'ariaLabelledby': [{ type: Input, args: ['aria-labelledby',] },],\n    'disableRipple': [{ type: Input },],\n    'checked': [{ type: Input },],\n    'value': [{ type: Input },],\n    'align': [{ type: Input },],\n    'labelPosition': [{ type: Input },],\n    'disabled': [{ type: Input },],\n    'change': [{ type: Output },],\n    '_ripple': [{ type: ViewChild, args: [MdRipple,] },],\n    '_inputElement': [{ type: ViewChild, args: ['input',] },],\n};\nvar MdRadioModule = (function () {\n    function MdRadioModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdRadioModule.forRoot = function () {\n        return {\n            ngModule: MdRadioModule,\n            providers: [],\n        };\n    };\n    return MdRadioModule;\n}());\nMdRadioModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, MdRippleModule, CompatibilityModule],\n                exports: [MdRadioGroup, MdRadioButton, CompatibilityModule],\n                providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, FocusOriginMonitor],\n                declarations: [MdRadioGroup, MdRadioButton],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdRadioModule.ctorParameters = function () { return []; };\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nvar ListKeyManager = (function () {\n    /**\n     * @param {?} _items\n     */\n    function ListKeyManager(_items) {\n        this._items = _items;\n        this._activeItemIndex = null;\n        this._tabOut = new Subject();\n        this._wrap = false;\n    }\n    /**\n     * Turns on wrapping mode, which ensures that the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     *\n     * @return {?} The ListKeyManager that the method was called on.\n     */\n    ListKeyManager.prototype.withWrap = function () {\n        this._wrap = true;\n        return this;\n    };\n    /**\n     * Sets the active item to the item at the index specified.\n     *\n     * @param {?} index The index of the item to be set as active.\n     * @return {?}\n     */\n    ListKeyManager.prototype.setActiveItem = function (index) {\n        this._activeItemIndex = index;\n        this._activeItem = this._items.toArray()[index];\n    };\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param {?} event Keyboard event to be used for determining which element should be active.\n     * @return {?}\n     */\n    ListKeyManager.prototype.onKeydown = function (event) {\n        switch (event.keyCode) {\n            case DOWN_ARROW:\n                this.setNextItemActive();\n                break;\n            case UP_ARROW:\n                this.setPreviousItemActive();\n                break;\n            case HOME:\n                this.setFirstItemActive();\n                break;\n            case END:\n                this.setLastItemActive();\n                break;\n            case TAB:\n                // Note that we shouldn't prevent the default action on tab.\n                this._tabOut.next(null);\n                return;\n            default:\n                return;\n        }\n        event.preventDefault();\n    };\n    Object.defineProperty(ListKeyManager.prototype, \"activeItemIndex\", {\n        /**\n         * Returns the index of the currently active item.\n         * @return {?}\n         */\n        get: function () {\n            return this._activeItemIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListKeyManager.prototype, \"activeItem\", {\n        /**\n         * Returns the currently active item.\n         * @return {?}\n         */\n        get: function () {\n            return this._activeItem;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the active item to the first enabled item in the list.\n     * @return {?}\n     */\n    ListKeyManager.prototype.setFirstItemActive = function () {\n        this._setActiveItemByIndex(0, 1);\n    };\n    /**\n     * Sets the active item to the last enabled item in the list.\n     * @return {?}\n     */\n    ListKeyManager.prototype.setLastItemActive = function () {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    };\n    /**\n     * Sets the active item to the next enabled item in the list.\n     * @return {?}\n     */\n    ListKeyManager.prototype.setNextItemActive = function () {\n        this._activeItemIndex === null ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    };\n    /**\n     * Sets the active item to a previous enabled item in the list.\n     * @return {?}\n     */\n    ListKeyManager.prototype.setPreviousItemActive = function () {\n        this._activeItemIndex === null && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    };\n    /**\n     * Allows setting of the activeItemIndex without any other effects.\n     * @param {?} index The new activeItemIndex.\n     * @return {?}\n     */\n    ListKeyManager.prototype.updateActiveItemIndex = function (index) {\n        this._activeItemIndex = index;\n    };\n    Object.defineProperty(ListKeyManager.prototype, \"tabOut\", {\n        /**\n         * Observable that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         * @return {?}\n         */\n        get: function () {\n            return this._tabOut.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     * @param {?} delta\n     * @param {?=} items\n     * @return {?}\n     */\n    ListKeyManager.prototype._setActiveItemByDelta = function (delta, items) {\n        if (items === void 0) { items = this._items.toArray(); }\n        this._wrap ? this._setActiveInWrapMode(delta, items)\n            : this._setActiveInDefaultMode(delta, items);\n    };\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     * @param {?} delta\n     * @param {?} items\n     * @return {?}\n     */\n    ListKeyManager.prototype._setActiveInWrapMode = function (delta, items) {\n        // when active item would leave menu, wrap to beginning or end\n        this._activeItemIndex =\n            (this._activeItemIndex + delta + items.length) % items.length;\n        // skip all disabled menu items recursively until an enabled one is reached\n        if (items[this._activeItemIndex].disabled) {\n            this._setActiveInWrapMode(delta, items);\n        }\n        else {\n            this.setActiveItem(this._activeItemIndex);\n        }\n    };\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     * @param {?} delta\n     * @param {?} items\n     * @return {?}\n     */\n    ListKeyManager.prototype._setActiveInDefaultMode = function (delta, items) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta, items);\n    };\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     * @param {?} index\n     * @param {?} fallbackDelta\n     * @param {?=} items\n     * @return {?}\n     */\n    ListKeyManager.prototype._setActiveItemByIndex = function (index, fallbackDelta, items) {\n        if (items === void 0) { items = this._items.toArray(); }\n        if (!items[index]) {\n            return;\n        }\n        while (items[index].disabled) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    };\n    return ListKeyManager;\n}());\nvar FocusKeyManager = (function (_super) {\n    __extends(FocusKeyManager, _super);\n    /**\n     * @param {?} items\n     */\n    function FocusKeyManager(items) {\n        return _super.call(this, items) || this;\n    }\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds focuses the newly active item.\n     * @param {?} index\n     * @return {?}\n     */\n    FocusKeyManager.prototype.setActiveItem = function (index) {\n        _super.prototype.setActiveItem.call(this, index);\n        this.activeItem.focus();\n    };\n    return FocusKeyManager;\n}(ListKeyManager));\n/**\n * The following are all the animations for the md-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material md-select animation.\n */\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nvar transformPlaceholder = trigger('transformPlaceholder', [\n    state('floating-ltr', style({\n        top: '-22px',\n        left: '-2px',\n        transform: \"scale(0.75)\"\n    })),\n    state('floating-rtl', style({\n        top: '-22px',\n        left: '2px',\n        transform: \"scale(0.75)\"\n    })),\n    transition('* => *', animate(\"400ms cubic-bezier(0.25, 0.8, 0.25, 1)\"))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n *\n * When the panel is attached to the DOM, it expands its width 32px, scales it up to\n * 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n *\n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nvar transformPanel = trigger('transformPanel', [\n    state('showing', style({\n        opacity: 1,\n        minWidth: 'calc(100% + 32px)',\n        transform: \"scaleY(1)\"\n    })),\n    transition('void => *', [\n        style({\n            opacity: 0,\n            minWidth: '100%',\n            transform: \"scaleY(0)\"\n        }),\n        animate(\"150ms cubic-bezier(0.25, 0.8, 0.25, 1)\")\n    ]),\n    transition('* => void', [\n        animate('250ms 100ms linear', style({ opacity: 0 }))\n    ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nvar fadeInContent = trigger('fadeInContent', [\n    state('showing', style({ opacity: 1 })),\n    transition('void => showing', [\n        style({ opacity: 0 }),\n        animate(\"150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)\")\n    ])\n]);\n/**\n * Exception thrown when attempting to change a select's `multiple` option after initialization.\n * \\@docs-private\n */\nvar MdSelectDynamicMultipleError = (function (_super) {\n    __extends(MdSelectDynamicMultipleError, _super);\n    function MdSelectDynamicMultipleError() {\n        return _super.call(this, 'Cannot change `multiple` mode of select after initialization.') || this;\n    }\n    return MdSelectDynamicMultipleError;\n}(MdError));\n/**\n * Exception thrown when attempting to assign a non-array value to a select in `multiple` mode.\n * Note that `undefined` and `null` are still valid values to allow for resetting the value.\n * \\@docs-private\n */\nvar MdSelectNonArrayValueError = (function (_super) {\n    __extends(MdSelectNonArrayValueError, _super);\n    function MdSelectNonArrayValueError() {\n        return _super.call(this, 'Cannot assign truthy non-array value to select in `multiple` mode.') || this;\n    }\n    return MdSelectNonArrayValueError;\n}(MdError));\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The fixed height of every option element. */\nvar SELECT_OPTION_HEIGHT = 48;\n/** The max height of the select's overlay panel */\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/** The max number of options visible at once in the select panel. */\nvar SELECT_MAX_OPTIONS_DISPLAYED = 5;\n/** The fixed height of the select's trigger element. */\nvar SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n * (SELECT_OPTION_HEIGHT (48) - SELECT_TRIGGER_HEIGHT (30)) / 2 = 9\n */\nvar SELECT_OPTION_HEIGHT_ADJUSTMENT = 9;\n/** The panel's padding on the x-axis */\nvar SELECT_PANEL_PADDING_X = 16;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nvar SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nvar SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nvar SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n */\nvar MdSelectChange = (function () {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    function MdSelectChange(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n    return MdSelectChange;\n}());\nvar MdSelect = (function () {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _viewportRuler\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _control\n     * @param {?} tabIndex\n     */\n    function MdSelect(_element, _renderer, _viewportRuler, _changeDetectorRef, _dir, _control, tabIndex) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._control = _control;\n        this._panelOpen = false;\n        this._required = false;\n        this._disabled = false;\n        this._scrollTop = 0;\n        this._multiple = false;\n        this._placeholderState = '';\n        /** View -> model callback called when value changes */\n        this._onChange = function (value) { };\n        /** View -> model callback called when select has been touched */\n        this._onTouched = function () { };\n        /** The IDs of child options to be passed to the aria-owns attribute. */\n        this._optionIds = '';\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /** Whether the panel's animation is done. */\n        this._panelDoneAnimating = false;\n        /**\n         * The x-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text when\n         * the panel opens. Will change based on LTR or RTL text direction.\n         */\n        this._offsetX = 0;\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        this._floatPlaceholder = 'auto';\n        /** Aria label of the select. If not specified, the placeholder will be used as label. */\n        this.ariaLabel = '';\n        /** Input that can be used to specify the `aria-labelledby` attribute. */\n        this.ariaLabelledby = '';\n        /** Event emitted when the select has been opened. */\n        this.onOpen = new EventEmitter();\n        /** Event emitted when the select has been closed. */\n        this.onClose = new EventEmitter();\n        /** Event emitted when the selected value has been changed by the user. */\n        this.change = new EventEmitter();\n        if (this._control) {\n            this._control.valueAccessor = this;\n        }\n        this._tabIndex = parseInt(tabIndex) || 0;\n    }\n    Object.defineProperty(MdSelect.prototype, \"placeholder\", {\n        /**\n         * Placeholder to be shown if no value has been selected.\n         * @return {?}\n         */\n        get: function () { return this._placeholder; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            var _this = this;\n            this._placeholder = value;\n            // Must wait to record the trigger width to ensure placeholder width is included.\n            Promise.resolve(null).then(function () { return _this._triggerWidth = _this._getWidth(); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"disabled\", {\n        /**\n         * Whether the component is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"required\", {\n        /**\n         * Whether the component is required.\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"multiple\", {\n        /**\n         * Whether the user should be allowed to select multiple options.\n         * @return {?}\n         */\n        get: function () { return this._multiple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._selectionModel) {\n                throw new MdSelectDynamicMultipleError();\n            }\n            this._multiple = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"floatPlaceholder\", {\n        /**\n         * Whether to float the placeholder text.\n         * @return {?}\n         */\n        get: function () { return this._floatPlaceholder; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._floatPlaceholder = value || 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"tabIndex\", {\n        /**\n         * Tab index for the select element.\n         * @return {?}\n         */\n        get: function () { return this._disabled ? -1 : this._tabIndex; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (typeof value !== 'undefined') {\n                this._tabIndex = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"optionSelectionChanges\", {\n        /**\n         * Combined stream of all of the child options' change events.\n         * @return {?}\n         */\n        get: function () {\n            return Observable.merge.apply(Observable, this.options.map(function (option) { return option.onSelectionChange; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSelect.prototype.ngOnInit = function () {\n        this._selectionModel = new SelectionModel(this.multiple, null, false);\n    };\n    /**\n     * @return {?}\n     */\n    MdSelect.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._initKeyManager();\n        this._changeSubscription = this.options.changes.startWith(null).subscribe(function () {\n            _this._resetOptions();\n            if (_this._control) {\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve(null).then(function () { return _this._setSelectionByValue(_this._control.value); });\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdSelect.prototype.ngOnDestroy = function () {\n        this._dropSubscriptions();\n        if (this._changeSubscription) {\n            this._changeSubscription.unsubscribe();\n        }\n        if (this._tabSubscription) {\n            this._tabSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    MdSelect.prototype.toggle = function () {\n        this.panelOpen ? this.close() : this.open();\n    };\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    MdSelect.prototype.open = function () {\n        if (this.disabled || !this.options.length) {\n            return;\n        }\n        this._calculateOverlayPosition();\n        this._placeholderState = this._floatPlaceholderState();\n        this._panelOpen = true;\n    };\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    MdSelect.prototype.close = function () {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            if (this._selectionModel.isEmpty()) {\n                this._placeholderState = '';\n            }\n            this._focusHost();\n        }\n    };\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    MdSelect.prototype.writeValue = function (value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    };\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    MdSelect.prototype.registerOnChange = function (fn) {\n        this._onChange = fn;\n    };\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    MdSelect.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    MdSelect.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    Object.defineProperty(MdSelect.prototype, \"panelOpen\", {\n        /**\n         * Whether or not the overlay panel is open.\n         * @return {?}\n         */\n        get: function () {\n            return this._panelOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"selected\", {\n        /**\n         * The currently selected option.\n         * @return {?}\n         */\n        get: function () {\n            return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"triggerValue\", {\n        /**\n         * The value displayed in the trigger.\n         * @return {?}\n         */\n        get: function () {\n            if (this._multiple) {\n                var /** @type {?} */ selectedOptions = this._selectionModel.selected.map(function (option) { return option.viewValue; });\n                if (this._isRtl()) {\n                    selectedOptions.reverse();\n                }\n                // TODO(crisbeto): delimiter should be configurable for proper localization.\n                return selectedOptions.join(', ');\n            }\n            return this._selectionModel.selected[0].viewValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    MdSelect.prototype._isRtl = function () {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    };\n    /**\n     * The width of the trigger element. This is necessary to match\n     * the overlay width to the trigger width.\n     * @return {?}\n     */\n    MdSelect.prototype._getWidth = function () {\n        return this._getTriggerRect().width;\n    };\n    /**\n     * Ensures the panel opens if activated by the keyboard.\n     * @param {?} event\n     * @return {?}\n     */\n    MdSelect.prototype._handleKeydown = function (event) {\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this.open();\n        }\n    };\n    /**\n     * When the panel element is finished transforming in (though not fading in), it\n     * emits an event and focuses an option if the panel is open.\n     * @return {?}\n     */\n    MdSelect.prototype._onPanelDone = function () {\n        if (this.panelOpen) {\n            this._focusCorrectOption();\n            this.onOpen.emit();\n        }\n        else {\n            this.onClose.emit();\n            this._panelDoneAnimating = false;\n        }\n    };\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     * @return {?}\n     */\n    MdSelect.prototype._onFadeInDone = function () {\n        this._panelDoneAnimating = this.panelOpen;\n    };\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    MdSelect.prototype._onBlur = function () {\n        if (!this.panelOpen) {\n            this._onTouched();\n        }\n    };\n    /**\n     * Sets the scroll position of the scroll container. This must be called after\n     * the overlay pane is attached or the scroll container element will not yet be\n     * present in the DOM.\n     * @return {?}\n     */\n    MdSelect.prototype._setScrollTop = function () {\n        var /** @type {?} */ scrollContainer = this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel');\n        scrollContainer.scrollTop = this._scrollTop;\n    };\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @param {?} value\n     * @return {?}\n     */\n    MdSelect.prototype._setSelectionByValue = function (value) {\n        var _this = this;\n        var /** @type {?} */ isArray = Array.isArray(value);\n        if (this.multiple && value && !isArray) {\n            throw new MdSelectNonArrayValueError();\n        }\n        if (isArray) {\n            this._clearSelection();\n            value.forEach(function (currentValue) { return _this._selectValue(currentValue); });\n            this._sortValues();\n        }\n        else if (!this._selectValue(value)) {\n            this._clearSelection();\n        }\n        this._setValueWidth();\n        if (this._selectionModel.isEmpty()) {\n            this._placeholderState = '';\n        }\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Finds and selects and option based on its value.\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    MdSelect.prototype._selectValue = function (value) {\n        var /** @type {?} */ correspondingOption = this.options.find(function (option) { return option.value === value; });\n        if (correspondingOption) {\n            correspondingOption.select();\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    };\n    /**\n     * Clears the select trigger and deselects every option in the list.\n     * @param {?=} skip Option that should not be deselected.\n     * @return {?}\n     */\n    MdSelect.prototype._clearSelection = function (skip) {\n        this._selectionModel.clear();\n        this.options.forEach(function (option) {\n            if (option !== skip) {\n                option.deselect();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdSelect.prototype._getTriggerRect = function () {\n        return this.trigger.nativeElement.getBoundingClientRect();\n    };\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @return {?}\n     */\n    MdSelect.prototype._initKeyManager = function () {\n        var _this = this;\n        this._keyManager = new FocusKeyManager(this.options);\n        this._tabSubscription = this._keyManager.tabOut.subscribe(function () { return _this.close(); });\n    };\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @return {?}\n     */\n    MdSelect.prototype._resetOptions = function () {\n        this._dropSubscriptions();\n        this._listenToOptions();\n        this._setOptionIds();\n        this._setOptionMultiple();\n    };\n    /**\n     * Listens to user-generated selection events on each option.\n     * @return {?}\n     */\n    MdSelect.prototype._listenToOptions = function () {\n        var _this = this;\n        this._optionSubscription = this.optionSelectionChanges\n            .filter(function (event) { return event.isUserInput; })\n            .subscribe(function (event) {\n            _this._onSelect(event.source);\n            _this._setValueWidth();\n            if (!_this.multiple) {\n                _this.close();\n            }\n        });\n    };\n    /**\n     * Invoked when an option is clicked.\n     * @param {?} option\n     * @return {?}\n     */\n    MdSelect.prototype._onSelect = function (option) {\n        var /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n        if (this.multiple) {\n            this._selectionModel.toggle(option);\n            wasSelected ? option.deselect() : option.select();\n            this._sortValues();\n        }\n        else {\n            this._clearSelection(option);\n            this._selectionModel.select(option);\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n    };\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @return {?}\n     */\n    MdSelect.prototype._sortValues = function () {\n        var _this = this;\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.options.forEach(function (option) {\n                if (option.selected) {\n                    _this._selectionModel.select(option);\n                }\n            });\n        }\n    };\n    /**\n     * Unsubscribes from all option subscriptions.\n     * @return {?}\n     */\n    MdSelect.prototype._dropSubscriptions = function () {\n        if (this._optionSubscription) {\n            this._optionSubscription.unsubscribe();\n            this._optionSubscription = null;\n        }\n    };\n    /**\n     * Emits change event to set the model value.\n     * @return {?}\n     */\n    MdSelect.prototype._propagateChanges = function () {\n        var /** @type {?} */ valueToEmit = Array.isArray(this.selected) ?\n            this.selected.map(function (option) { return option.value; }) :\n            this.selected.value;\n        this._onChange(valueToEmit);\n        this.change.emit(new MdSelectChange(this, valueToEmit));\n    };\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @return {?}\n     */\n    MdSelect.prototype._setOptionIds = function () {\n        this._optionIds = this.options.map(function (option) { return option.id; }).join(' ');\n    };\n    /**\n     * Sets the `multiple` property on each option. The promise is necessary\n     * in order to avoid Angular errors when modifying the property after init.\n     * TODO: there should be a better way of doing this.\n     * @return {?}\n     */\n    MdSelect.prototype._setOptionMultiple = function () {\n        var _this = this;\n        if (this.multiple) {\n            Promise.resolve(null).then(function () {\n                _this.options.forEach(function (option) { return option.multiple = _this.multiple; });\n            });\n        }\n    };\n    /**\n     * Must set the width of the selected option's value programmatically\n     * because it is absolutely positioned and otherwise will not clip\n     * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n     * @return {?}\n     */\n    MdSelect.prototype._setValueWidth = function () {\n        this._selectedValueWidth = this._triggerWidth - 13;\n    };\n    /**\n     * Focuses the selected item. If no option is selected, it will focus\n     * the first item instead.\n     * @return {?}\n     */\n    MdSelect.prototype._focusCorrectOption = function () {\n        if (this._selectionModel.isEmpty()) {\n            this._keyManager.setFirstItemActive();\n        }\n        else {\n            this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0]));\n        }\n    };\n    /**\n     * Focuses the host element when the panel closes.\n     * @return {?}\n     */\n    MdSelect.prototype._focusHost = function () {\n        this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');\n    };\n    /**\n     * Gets the index of the provided option in the option list.\n     * @param {?} option\n     * @return {?}\n     */\n    MdSelect.prototype._getOptionIndex = function (option) {\n        return this.options.reduce(function (result, current, index) {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    };\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @return {?}\n     */\n    MdSelect.prototype._calculateOverlayPosition = function () {\n        this._offsetX = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X : SELECT_PANEL_PADDING_X;\n        if (!this._isRtl()) {\n            this._offsetX *= -1;\n        }\n        var /** @type {?} */ panelHeight = Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n        var /** @type {?} */ scrollContainerHeight = this.options.length * SELECT_OPTION_HEIGHT;\n        // The farthest the panel can be scrolled before it hits the bottom\n        var /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n        if (this._selectionModel.hasValue()) {\n            var /** @type {?} */ selectedIndex = this._getOptionIndex(this._selectionModel.selected[0]);\n            // We must maintain a scroll buffer so the selected option will be scrolled to the\n            // center of the overlay panel rather than the top.\n            var /** @type {?} */ scrollBuffer = panelHeight / 2;\n            this._scrollTop = this._calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll);\n            this._offsetY = this._calculateOverlayOffset(selectedIndex, scrollBuffer, maxScroll);\n        }\n        else {\n            // If no option is selected, the panel centers on the first option. In this case,\n            // we must only adjust for the height difference between the option element\n            // and the trigger element, then multiply it by -1 to ensure the panel moves\n            // in the correct direction up the page.\n            this._offsetY = (SELECT_OPTION_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1;\n        }\n        this._checkOverlayWithinViewport(maxScroll);\n    };\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MdSelect.prototype._calculateOverlayScroll = function (selectedIndex, scrollBuffer, maxScroll) {\n        var /** @type {?} */ optionOffsetFromScrollTop = SELECT_OPTION_HEIGHT * selectedIndex;\n        var /** @type {?} */ halfOptionHeight = SELECT_OPTION_HEIGHT / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        var /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return clampValue(0, optimalScrollPosition, maxScroll);\n    };\n    /**\n     * Figures out the appropriate animation state for the placeholder.\n     * @return {?}\n     */\n    MdSelect.prototype._getPlaceholderAnimationState = function () {\n        if (this.floatPlaceholder === 'never') {\n            return '';\n        }\n        if (this.floatPlaceholder === 'always') {\n            return this._floatPlaceholderState();\n        }\n        return this._placeholderState;\n    };\n    /**\n     * Determines the CSS `visibility` of the placeholder element.\n     * @return {?}\n     */\n    MdSelect.prototype._getPlaceholderVisibility = function () {\n        return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ?\n            'visible' : 'hidden';\n    };\n    Object.defineProperty(MdSelect.prototype, \"_ariaLabel\", {\n        /**\n         * Returns the aria-label of the select component.\n         * @return {?}\n         */\n        get: function () {\n            // If an ariaLabelledby value has been set, the select should not overwrite the\n            // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n            return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MdSelect.prototype._calculateOverlayOffset = function (selectedIndex, scrollBuffer, maxScroll) {\n        var /** @type {?} */ optionOffsetFromPanelTop;\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * SELECT_OPTION_HEIGHT;\n        }\n        else if (this._scrollTop === maxScroll) {\n            var /** @type {?} */ firstDisplayedIndex = this.options.length - SELECT_MAX_OPTIONS_DISPLAYED;\n            var /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop =\n                selectedDisplayIndex * SELECT_OPTION_HEIGHT + SELECT_PANEL_PADDING_Y;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - SELECT_OPTION_HEIGHT / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height\n        // difference, multiplied by -1 to ensure that the overlay moves in the correct\n        // direction up the page.\n        return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n    };\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MdSelect.prototype._checkOverlayWithinViewport = function (maxScroll) {\n        var /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n        var /** @type {?} */ triggerRect = this._getTriggerRect();\n        var /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        var /** @type {?} */ bottomSpaceAvailable = viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        var /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n        var /** @type {?} */ totalPanelHeight = Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n        var /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    };\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    MdSelect.prototype._adjustPanelUp = function (panelHeightBottom, bottomSpaceAvailable) {\n        var /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = \"50% bottom 0px\";\n        }\n    };\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MdSelect.prototype._adjustPanelDown = function (panelHeightTop, topSpaceAvailable, maxScroll) {\n        var /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = \"50% top 0px\";\n            return;\n        }\n    };\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @return {?}\n     */\n    MdSelect.prototype._getOriginBasedOnOption = function () {\n        var /** @type {?} */ originY = Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_OPTION_HEIGHT / 2;\n        return \"50% \" + originY + \"px 0px\";\n    };\n    /**\n     * Figures out the floating placeholder state value.\n     * @return {?}\n     */\n    MdSelect.prototype._floatPlaceholderState = function () {\n        return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n    };\n    return MdSelect;\n}());\nMdSelect.decorators = [\n    { type: Component, args: [{ selector: 'md-select, mat-select',\n                template: \"<div class=\\\"mat-select-trigger\\\" cdk-overlay-origin (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger> <span class=\\\"mat-select-placeholder\\\" [class.mat-floating-placeholder]=\\\"_selectionModel.hasValue()\\\" [@transformPlaceholder]=\\\"_getPlaceholderAnimationState()\\\" [style.visibility]=\\\"_getPlaceholderVisibility()\\\" [style.width.px]=\\\"_selectedValueWidth\\\"> {{ placeholder }} </span> <span class=\\\"mat-select-value\\\" *ngIf=\\\"_selectionModel.hasValue()\\\"> <span class=\\\"mat-select-value-text\\\">{{ triggerValue }}</span> </span> <span class=\\\"mat-select-arrow\\\"></span> <span class=\\\"mat-select-underline\\\"></span> </div> <ng-template cdk-connected-overlay [origin]=\\\"origin\\\" [open]=\\\"panelOpen\\\" hasBackdrop (backdropClick)=\\\"close()\\\" backdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [positions]=\\\"_positions\\\" [minWidth]=\\\"_triggerWidth\\\" [offsetY]=\\\"_offsetY\\\" [offsetX]=\\\"_offsetX\\\" (attach)=\\\"_setScrollTop()\\\"> <div class=\\\"mat-select-panel\\\" [@transformPanel]=\\\"'showing'\\\" (@transformPanel.done)=\\\"_onPanelDone()\\\" (keydown)=\\\"_keyManager.onKeydown($event)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [class.mat-select-panel-done-animating]=\\\"_panelDoneAnimating\\\"> <div class=\\\"mat-select-content\\\" [@fadeInContent]=\\\"'showing'\\\" (@fadeInContent.done)=\\\"_onFadeInDone()\\\"> <ng-content></ng-content> </div> </div> </ng-template> \",\n                styles: [\".mat-select{display:inline-block;outline:0;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif}.mat-select-trigger{display:flex;align-items:center;height:30px;min-width:112px;cursor:pointer;position:relative;box-sizing:border-box;font-size:16px}[aria-disabled=true] .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-underline{position:absolute;bottom:0;left:0;right:0;height:1px}[aria-disabled=true] .mat-select-underline{background-image:linear-gradient(to right,rgba(0,0,0,.26) 0,rgba(0,0,0,.26) 33%,transparent 0);background-size:4px 1px;background-repeat:repeat-x;background-color:transparent;background-position:0 bottom}.mat-select-placeholder{position:relative;padding:0 2px;transform-origin:left top;flex-grow:1}.mat-select-placeholder.mat-floating-placeholder{top:-22px;left:-2px;text-align:left;transform:scale(.75)}[dir=rtl] .mat-select-placeholder{transform-origin:right top}[dir=rtl] .mat-select-placeholder.mat-floating-placeholder{left:2px;text-align:right}[aria-required=true] .mat-select-placeholder::after{content:'*'}.mat-select-value{position:absolute;max-width:calc(100% - 18px);flex-grow:1;top:0;left:0;bottom:0;display:flex;align-items:center}[dir=rtl] .mat-select-value{left:auto;right:0}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;line-height:30px}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%}@media screen and (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}} /*# sourceMappingURL=select.css.map */ \"],\n                encapsulation: ViewEncapsulation.None,\n                host: {\n                    'role': 'listbox',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_ariaLabel',\n                    '[attr.aria-labelledby]': 'ariaLabelledby',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': '_control?.invalid || \"false\"',\n                    '[attr.aria-owns]': '_optionIds',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select]': 'true',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    transformPlaceholder,\n                    transformPanel,\n                    fadeInContent\n                ],\n                exportAs: 'mdSelect',\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSelect.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: ViewportRuler, },\n    { type: ChangeDetectorRef, },\n    { type: Dir, decorators: [{ type: Optional },] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional },] },\n    { type: undefined, decorators: [{ type: Attribute, args: ['tabindex',] },] },\n]; };\nMdSelect.propDecorators = {\n    'trigger': [{ type: ViewChild, args: ['trigger',] },],\n    'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective,] },],\n    'options': [{ type: ContentChildren, args: [MdOption,] },],\n    'placeholder': [{ type: Input },],\n    'disabled': [{ type: Input },],\n    'required': [{ type: Input },],\n    'multiple': [{ type: Input },],\n    'floatPlaceholder': [{ type: Input },],\n    'tabIndex': [{ type: Input },],\n    'ariaLabel': [{ type: Input, args: ['aria-label',] },],\n    'ariaLabelledby': [{ type: Input, args: ['aria-labelledby',] },],\n    'onOpen': [{ type: Output },],\n    'onClose': [{ type: Output },],\n    'change': [{ type: Output },],\n};\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min, n, max) {\n    return Math.min(Math.max(min, n), max);\n}\nvar MdSelectModule = (function () {\n    function MdSelectModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdSelectModule.forRoot = function () {\n        return {\n            ngModule: MdSelectModule,\n            providers: []\n        };\n    };\n    return MdSelectModule;\n}());\nMdSelectModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MdOptionModule,\n                    CompatibilityModule,\n                ],\n                exports: [MdSelect, MdOptionModule, CompatibilityModule],\n                declarations: [MdSelect],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSelectModule.ctorParameters = function () { return []; };\nvar MD_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MdSlideToggle; }),\n    multi: true\n};\nvar MdSlideToggleChange = (function () {\n    function MdSlideToggleChange() {\n    }\n    return MdSlideToggleChange;\n}());\n// Increasing integer for generating unique ids for slide-toggle components.\nvar nextId$1 = 0;\n/**\n * Two-state control, which can be also called `switch`.\n */\nvar MdSlideToggle = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _focusOriginMonitor\n     */\n    function MdSlideToggle(_elementRef, _renderer, _focusOriginMonitor) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._uniqueId = \"md-slide-toggle-\" + ++nextId$1;\n        this._checked = false;\n        this._isMousedown = false;\n        this._slideRenderer = null;\n        this._disabled = false;\n        this._required = false;\n        this._disableRipple = false;\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Used to specify the tabIndex value for the underlying input element. */\n        this.tabIndex = 0;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        this._change = new EventEmitter();\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = this._change.asObservable();\n    }\n    Object.defineProperty(MdSlideToggle.prototype, \"disabled\", {\n        /**\n         * Whether the slide-toggle is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlideToggle.prototype, \"required\", {\n        /**\n         * Whether the slide-toggle is required.\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlideToggle.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect for this slide-toggle is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlideToggle.prototype, \"inputId\", {\n        /**\n         * Returns the unique id for the visual hidden input.\n         * @return {?}\n         */\n        get: function () { return (this.id || this._uniqueId) + \"-input\"; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._slideRenderer = new SlideToggleRenderer(this._elementRef);\n        this._focusOriginMonitor\n            .monitor(this._inputElement.nativeElement, this._renderer, false)\n            .subscribe(function (focusOrigin) { return _this._onInputFocusChange(focusOrigin); });\n    };\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n    };\n    /**\n     * The onChangeEvent method will be also called on click.\n     * This is because everything for the slide-toggle is wrapped inside of a label,\n     * which triggers a onChange event on click.\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onChangeEvent = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.\n        if (!this.disabled && !this._slideRenderer.dragging) {\n            this.toggle();\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onInputClick = function (event) {\n        this.onTouched();\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype._setMousedown = function () {\n        var _this = this;\n        // We only *show* the focus style when focus has come to the button via the keyboard.\n        // The Material Design spec is silent on this topic, and without doing this, the\n        // button continues to look :active after clicking.\n        // @see http://marcysutton.com/button-focus-hell/\n        this._isMousedown = true;\n        setTimeout(function () { return _this._isMousedown = false; }, 100);\n    };\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    MdSlideToggle.prototype.writeValue = function (value) {\n        this.checked = value;\n    };\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    MdSlideToggle.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    MdSlideToggle.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    MdSlideToggle.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * Focuses the slide-toggle.\n     * @return {?}\n     */\n    MdSlideToggle.prototype.focus = function () {\n        this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'program');\n    };\n    Object.defineProperty(MdSlideToggle.prototype, \"checked\", {\n        /**\n         * Whether the slide-toggle is checked.\n         * @return {?}\n         */\n        get: function () { return !!this._checked; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this.checked !== !!value) {\n                this._checked = value;\n                this.onChange(this._checked);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlideToggle.prototype, \"color\", {\n        /**\n         * The color of the slide-toggle. Can be primary, accent, or warn.\n         * @return {?}\n         */\n        get: function () { return this._color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._updateColor(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    MdSlideToggle.prototype.toggle = function () {\n        this.checked = !this.checked;\n    };\n    /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onInputFocusChange = function (focusOrigin) {\n        if (!this._focusRipple && focusOrigin === 'keyboard') {\n            // For keyboard focus show a persistent ripple as focus indicator.\n            this._focusRipple = this._ripple.launch(0, 0, { persistent: true, centered: true });\n        }\n        else if (!focusOrigin) {\n            this.onTouched();\n            // Fade out and clear the focus ripple if one is currently present.\n            if (this._focusRipple) {\n                this._focusRipple.fadeOut();\n                this._focusRipple = null;\n            }\n        }\n    };\n    /**\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdSlideToggle.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdSlideToggle.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this._renderer.setElementClass(this._elementRef.nativeElement, \"mat-\" + color, isAdd);\n        }\n    };\n    /**\n     * Emits the change event to the `change` output EventEmitter\n     * @return {?}\n     */\n    MdSlideToggle.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdSlideToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._change.emit(event);\n    };\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onDragStart = function () {\n        if (!this.disabled) {\n            this._slideRenderer.startThumbDrag(this.checked);\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onDrag = function (event) {\n        if (this._slideRenderer.dragging) {\n            this._slideRenderer.updateThumbPosition(event.deltaX);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onDragEnd = function () {\n        var _this = this;\n        if (this._slideRenderer.dragging) {\n            var /** @type {?} */ _previousChecked = this.checked;\n            this.checked = this._slideRenderer.dragPercentage > 50;\n            if (_previousChecked !== this.checked) {\n                this._emitChangeEvent();\n            }\n            // The drag should be stopped outside of the current event handler, because otherwise the\n            // click event will be fired before and will revert the drag change.\n            setTimeout(function () { return _this._slideRenderer.stopThumbDrag(); });\n        }\n    };\n    return MdSlideToggle;\n}());\nMdSlideToggle.decorators = [\n    { type: Component, args: [{ selector: 'md-slide-toggle, mat-slide-toggle',\n                host: {\n                    '[class.mat-slide-toggle]': 'true',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '(mousedown)': '_setMousedown()'\n                },\n                template: \"<label class=\\\"mat-slide-toggle-label\\\" #label> <div class=\\\"mat-slide-toggle-bar\\\"> <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [tabIndex]=\\\"tabIndex\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onChangeEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"> <div class=\\\"mat-slide-toggle-thumb-container\\\" (slidestart)=\\\"_onDragStart()\\\" (slide)=\\\"_onDrag($event)\\\" (slideend)=\\\"_onDragEnd()\\\"> <div class=\\\"mat-slide-toggle-thumb\\\"></div> <div class=\\\"mat-slide-toggle-ripple\\\" md-ripple [mdRippleTrigger]=\\\"label\\\" [mdRippleCentered]=\\\"true\\\" [mdRippleDisabled]=\\\"disableRipple || disabled\\\"> </div> </div> </div> <span class=\\\"mat-slide-toggle-content\\\"> <ng-content></ng-content> </span> </label> \",\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;line-height:24px;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-content{font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-weight:500}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;cursor:pointer}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging{transition-duration:0s}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:solid 1px #000}}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;border-radius:8px}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-bar{background:#fff}}.mat-slide-toggle-input{bottom:0;left:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}.mat-slide-toggle-ripple{position:absolute;top:-13px;left:-13px;height:46px;width:46px;border-radius:50%;z-index:1;pointer-events:none} /*# sourceMappingURL=slide-toggle.css.map */ \"],\n                providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSlideToggle.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: FocusOriginMonitor, },\n]; };\nMdSlideToggle.propDecorators = {\n    'name': [{ type: Input },],\n    'id': [{ type: Input },],\n    'tabIndex': [{ type: Input },],\n    'labelPosition': [{ type: Input },],\n    'ariaLabel': [{ type: Input, args: ['aria-label',] },],\n    'ariaLabelledby': [{ type: Input, args: ['aria-labelledby',] },],\n    'disabled': [{ type: Input },],\n    'required': [{ type: Input },],\n    'disableRipple': [{ type: Input },],\n    'change': [{ type: Output },],\n    '_inputElement': [{ type: ViewChild, args: ['input',] },],\n    '_ripple': [{ type: ViewChild, args: [MdRipple,] },],\n    'checked': [{ type: Input },],\n    'color': [{ type: Input },],\n};\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nvar SlideToggleRenderer = (function () {\n    /**\n     * @param {?} _elementRef\n     */\n    function SlideToggleRenderer(_elementRef) {\n        this._elementRef = _elementRef;\n        /** Whether the thumb is currently being dragged. */\n        this.dragging = false;\n        this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n        this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n    /**\n     * Initializes the drag of the slide-toggle.\n     * @param {?} checked\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype.startThumbDrag = function (checked) {\n        if (this.dragging) {\n            return;\n        }\n        this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n        this._thumbEl.classList.add('mat-dragging');\n        this._previousChecked = checked;\n        this.dragging = true;\n    };\n    /**\n     * Resets the current drag and returns the new checked value.\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype.stopThumbDrag = function () {\n        if (!this.dragging) {\n            return;\n        }\n        this.dragging = false;\n        this._thumbEl.classList.remove('mat-dragging');\n        // Reset the transform because the component will take care of the thumb position after drag.\n        applyCssTransform(this._thumbEl, '');\n        return this.dragPercentage > 50;\n    };\n    /**\n     * Updates the thumb containers position from the specified distance.\n     * @param {?} distance\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype.updateThumbPosition = function (distance) {\n        this.dragPercentage = this._getDragPercentage(distance);\n        // Calculate the moved distance based on the thumb bar width.\n        var /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n        applyCssTransform(this._thumbEl, \"translate3d(\" + dragX + \"px, 0, 0)\");\n    };\n    /**\n     * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n     * @param {?} distance\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype._getDragPercentage = function (distance) {\n        var /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n        // When the toggle was initially checked, then we have to start the drag at the end.\n        if (this._previousChecked) {\n            percentage += 100;\n        }\n        return Math.max(0, Math.min(percentage, 100));\n    };\n    return SlideToggleRenderer;\n}());\nvar MdSlideToggleModule = (function () {\n    function MdSlideToggleModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdSlideToggleModule.forRoot = function () {\n        return {\n            ngModule: MdSlideToggleModule,\n            providers: []\n        };\n    };\n    return MdSlideToggleModule;\n}());\nMdSlideToggleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [FormsModule, MdRippleModule, CompatibilityModule],\n                exports: [MdSlideToggle, CompatibilityModule],\n                declarations: [MdSlideToggle],\n                providers: [\n                    FOCUS_ORIGIN_MONITOR_PROVIDER,\n                    { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSlideToggleModule.ctorParameters = function () { return []; };\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nvar MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\nvar DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\nvar MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\nvar MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nvar MD_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MdSlider; }),\n    multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nvar MdSliderChange = (function () {\n    function MdSliderChange() {\n    }\n    return MdSliderChange;\n}());\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nvar MdSlider = (function () {\n    /**\n     * @param {?} renderer\n     * @param {?} _elementRef\n     * @param {?} _focusOriginMonitor\n     * @param {?} _dir\n     */\n    function MdSlider(renderer, _elementRef, _focusOriginMonitor, _dir) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        this._dir = _dir;\n        this._disabled = false;\n        this._invert = false;\n        this._max = 100;\n        this._min = 0;\n        this._step = 1;\n        this._thumbLabel = false;\n        this._tickInterval = 0;\n        this._value = null;\n        this._vertical = false;\n        this.color = 'accent';\n        /** Event emitted when the slider value has changed. */\n        this.change = new EventEmitter();\n        /** Event emitted when the slider thumb moves. */\n        this.input = new EventEmitter();\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this.onTouched = function () { };\n        this._percent = 0;\n        /**\n         * Whether or not the thumb is sliding.\n         * Used to determine if there should be a transition for the thumb and fill track.\n         */\n        this._isSliding = false;\n        /**\n         * Whether or not the slider is active (clicked or sliding).\n         * Used to shrink and grow the thumb as according to the Material Design spec.\n         */\n        this._isActive = false;\n        this._tickIntervalPercent = 0;\n        this._renderer = null;\n        this._sliderDimensions = null;\n        this._controlValueAccessorChangeFn = function () { };\n        this._lastChangeValue = null;\n        this._lastInputValue = null;\n        this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, true)\n            .subscribe(function (origin) { return _this._isActive = !!origin && origin !== 'keyboard'; });\n        this._renderer = new SliderRenderer(this._elementRef);\n    }\n    Object.defineProperty(MdSlider.prototype, \"disabled\", {\n        /**\n         * Whether or not the slider is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"invert\", {\n        /**\n         * Whether the slider is inverted.\n         * @return {?}\n         */\n        get: function () { return this._invert; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._invert = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"max\", {\n        /**\n         * The maximum value that the slider can have.\n         * @return {?}\n         */\n        get: function () {\n            return this._max;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._max = coerceNumberProperty(v, this._max);\n            this._percent = this._calculatePercentage(this._value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"min\", {\n        /**\n         * The minimum value that the slider can have.\n         * @return {?}\n         */\n        get: function () {\n            return this._min;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._min = coerceNumberProperty(v, this._min);\n            // If the value wasn't explicitly set by the user, set it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            this._percent = this._calculatePercentage(this._value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"step\", {\n        /**\n         * The values at which the thumb will snap.\n         * @return {?}\n         */\n        get: function () { return this._step; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._step = coerceNumberProperty(v, this._step);\n            if (this._step % 1 !== 0) {\n                this._roundLabelTo = this._step.toString().split('.').pop().length;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"thumbLabel\", {\n        /**\n         * Whether or not to show the thumb label.\n         * @return {?}\n         */\n        get: function () { return this._thumbLabel; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._thumbLabel = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_thumbLabelDeprecated\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this._thumbLabel; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._thumbLabel = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"tickInterval\", {\n        /**\n         * How often to show ticks. Relative to the step so that a tick always appears on a step.\n         * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n         * @return {?}\n         */\n        get: function () { return this._tickInterval; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (value === 'auto') {\n                this._tickInterval = 'auto';\n            }\n            else if (typeof value === 'number' || typeof value === 'string') {\n                this._tickInterval = coerceNumberProperty(value, /** @type {?} */ (this._tickInterval));\n            }\n            else {\n                this._tickInterval = 0;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_tickIntervalDeprecated\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.tickInterval; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.tickInterval = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"value\", {\n        /**\n         * Value of the slider.\n         * @return {?}\n         */\n        get: function () {\n            // If the value needs to be read and it is still uninitialized, initialize it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            return this._value;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._value = coerceNumberProperty(v, this._value);\n            this._percent = this._calculatePercentage(this._value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"vertical\", {\n        /**\n         * Whether the slider is vertical.\n         * @return {?}\n         */\n        get: function () { return this._vertical; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._vertical = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"displayValue\", {\n        /**\n         * The value to be used for display purposes.\n         * @return {?}\n         */\n        get: function () {\n            // Note that this could be improved further by rounding something like 0.999 to 1 or\n            // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n            // every change detection cycle.\n            if (this._roundLabelTo && this.value % 1 !== 0) {\n                return this.value.toFixed(this._roundLabelTo);\n            }\n            return this.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"percent\", {\n        /**\n         * The percentage of the slider that coincides with the value.\n         * @return {?}\n         */\n        get: function () { return this._clamp(this._percent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_invertAxis\", {\n        /**\n         * Whether the axis of the slider is inverted.\n         * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n         * @return {?}\n         */\n        get: function () {\n            // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n            // top. However from a y-axis standpoint this is inverted.\n            return this.vertical ? !this.invert : this.invert;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_isMinValue\", {\n        /**\n         * Whether the slider is at its minimum value.\n         * @return {?}\n         */\n        get: function () {\n            return this.percent === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_thumbGap\", {\n        /**\n         * The amount of space to leave between the slider thumb and the track fill & track background\n         * elements.\n         * @return {?}\n         */\n        get: function () {\n            if (this.disabled) {\n                return DISABLED_THUMB_GAP;\n            }\n            if (this._isMinValue && !this.thumbLabel) {\n                return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n            }\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_trackBackgroundStyles\", {\n        /**\n         * CSS styles for the track background element.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            var /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n            return {\n                'transform': \"translate\" + axis + \"(\" + sign + this._thumbGap + \"px) scale\" + axis + \"(\" + (1 - this.percent) + \")\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_trackFillStyles\", {\n        /**\n         * CSS styles for the track fill element.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            var /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n            return {\n                'transform': \"translate\" + axis + \"(\" + sign + this._thumbGap + \"px) scale\" + axis + \"(\" + this.percent + \")\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_ticksContainerStyles\", {\n        /**\n         * CSS styles for the ticks container element.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the ticks container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            var /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n            var /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n            return {\n                'transform': \"translate\" + axis + \"(\" + sign + offset + \"%)\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_ticksStyles\", {\n        /**\n         * CSS styles for the ticks element.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n            var /** @type {?} */ backgroundSize = this.vertical ? \"2px \" + tickSize + \"%\" : tickSize + \"% 2px\";\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            // Depending on the direction we pushed the ticks container, push the ticks the opposite\n            // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n            // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n            var /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n            var /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n            var /** @type {?} */ styles = {\n                'backgroundSize': backgroundSize,\n                // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n                'transform': \"translateZ(0) translate\" + axis + \"(\" + sign + tickSize / 2 + \"%)\" + rotate\n            };\n            if (this._isMinValue && this._thumbGap) {\n                var /** @type {?} */ side = this.vertical ?\n                    (this._invertAxis ? 'Bottom' : 'Top') :\n                    (this._invertAxis ? 'Right' : 'Left');\n                styles[\"padding\" + side] = this._thumbGap + \"px\";\n            }\n            return styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_thumbContainerStyles\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the thumb container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            var /** @type {?} */ invertOffset = (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n            var /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n            return {\n                'transform': \"translate\" + axis + \"(-\" + offset + \"%)\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_invertMouseCoords\", {\n        /**\n         * Whether mouse events should be converted to a slider position by calculating their distance\n         * from the right or bottom edge of the slider as opposed to the top or left.\n         * @return {?}\n         */\n        get: function () {\n            return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_direction\", {\n        /**\n         * The language direction for this slider element.\n         * @return {?}\n         */\n        get: function () {\n            return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onMouseenter = function () {\n        if (this.disabled) {\n            return;\n        }\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._renderer.getSliderDimensions();\n        this._updateTickIntervalPercent();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlider.prototype._onClick = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        this._isSliding = false;\n        this._renderer.addFocus();\n        this._updateValueFromPosition({ x: event.clientX, y: event.clientY });\n        /* Emits a change and input event if the value changed. */\n        this._emitInputEvent();\n        this._emitValueIfChanged();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlider.prototype._onSlide = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        // Prevent the slide from selecting anything else.\n        event.preventDefault();\n        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });\n        // Native range elements always emit `input` events when the value changed while sliding.\n        this._emitInputEvent();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlider.prototype._onSlideStart = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        // Simulate mouseenter in case this is a mobile device.\n        this._onMouseenter();\n        event.preventDefault();\n        this._isSliding = true;\n        this._renderer.addFocus();\n        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onSlideEnd = function () {\n        this._isSliding = false;\n        this._emitValueIfChanged();\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onFocus = function () {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._renderer.getSliderDimensions();\n        this._updateTickIntervalPercent();\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onBlur = function () {\n        this.onTouched();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlider.prototype._onKeydown = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case PAGE_UP:\n                this._increment(10);\n                break;\n            case PAGE_DOWN:\n                this._increment(-10);\n                break;\n            case END:\n                this.value = this.max;\n                break;\n            case HOME:\n                this.value = this.min;\n                break;\n            case LEFT_ARROW:\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                // sighted users, therefore we do not swap the meaning.\n                this._increment(this._direction == 'rtl' ? 1 : -1);\n                break;\n            case UP_ARROW:\n                this._increment(1);\n                break;\n            case RIGHT_ARROW:\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                this._increment(this._direction == 'rtl' ? -1 : 1);\n                break;\n            case DOWN_ARROW:\n                this._increment(-1);\n                break;\n            default:\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                // it.\n                return;\n        }\n        this._isSliding = true;\n        event.preventDefault();\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onKeyup = function () {\n        this._isSliding = false;\n    };\n    /**\n     * Increments the slider by the given number of steps (negative number decrements).\n     * @param {?} numSteps\n     * @return {?}\n     */\n    MdSlider.prototype._increment = function (numSteps) {\n        this.value = this._clamp(this.value + this.step * numSteps, this.min, this.max);\n        this._emitInputEvent();\n        this._emitValueIfChanged();\n    };\n    /**\n     * Calculate the new value from the new physical location. The value will always be snapped.\n     * @param {?} pos\n     * @return {?}\n     */\n    MdSlider.prototype._updateValueFromPosition = function (pos) {\n        if (!this._sliderDimensions) {\n            return;\n        }\n        var /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        var /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        var /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n        // The exact value is calculated from the event and used to find the closest snap value.\n        var /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n        if (this._invertMouseCoords) {\n            percent = 1 - percent;\n        }\n        var /** @type {?} */ exactValue = this._calculateValue(percent);\n        // This calculation finds the closest step by finding the closest whole number divisible by the\n        // step relative to the min.\n        var /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n        // The value needs to snap to the min and max.\n        this.value = this._clamp(closestValue, this.min, this.max);\n    };\n    /**\n     * Emits a change event if the current value is different from the last emitted value.\n     * @return {?}\n     */\n    MdSlider.prototype._emitValueIfChanged = function () {\n        if (this.value != this._lastChangeValue) {\n            var /** @type {?} */ event = this._createChangeEvent();\n            this._lastChangeValue = this.value;\n            this._controlValueAccessorChangeFn(this.value);\n            this.change.emit(event);\n        }\n    };\n    /**\n     * Emits an input event when the current value is different from the last emitted value.\n     * @return {?}\n     */\n    MdSlider.prototype._emitInputEvent = function () {\n        if (this.value != this._lastInputValue) {\n            var /** @type {?} */ event = this._createChangeEvent();\n            this._lastInputValue = this.value;\n            this.input.emit(event);\n        }\n    };\n    /**\n     * Updates the amount of space between ticks as a percentage of the width of the slider.\n     * @return {?}\n     */\n    MdSlider.prototype._updateTickIntervalPercent = function () {\n        if (!this.tickInterval) {\n            return;\n        }\n        if (this.tickInterval == 'auto') {\n            var /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            var /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n            var /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n            var /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n            this._tickIntervalPercent = pixelsPerTick / trackSize;\n        }\n        else {\n            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n        }\n    };\n    /**\n     * Creates a slider change object from the specified value.\n     * @param {?=} value\n     * @return {?}\n     */\n    MdSlider.prototype._createChangeEvent = function (value) {\n        if (value === void 0) { value = this.value; }\n        var /** @type {?} */ event = new MdSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n    };\n    /**\n     * Calculates the percentage of the slider that a value is.\n     * @param {?} value\n     * @return {?}\n     */\n    MdSlider.prototype._calculatePercentage = function (value) {\n        return (value - this.min) / (this.max - this.min);\n    };\n    /**\n     * Calculates the value a percentage of the slider corresponds to.\n     * @param {?} percentage\n     * @return {?}\n     */\n    MdSlider.prototype._calculateValue = function (percentage) {\n        return this.min + percentage * (this.max - this.min);\n    };\n    /**\n     * Return a number between two numbers.\n     * @param {?} value\n     * @param {?=} min\n     * @param {?=} max\n     * @return {?}\n     */\n    MdSlider.prototype._clamp = function (value, min, max) {\n        if (min === void 0) { min = 0; }\n        if (max === void 0) { max = 1; }\n        return Math.max(min, Math.min(value, max));\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    MdSlider.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * Registers a callback to eb triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MdSlider.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MdSlider.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    MdSlider.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    return MdSlider;\n}());\nMdSlider.decorators = [\n    { type: Component, args: [{ selector: 'md-slider, mat-slider',\n                providers: [MD_SLIDER_VALUE_ACCESSOR],\n                host: {\n                    '[class.mat-slider]': 'true',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                    '(click)': '_onClick($event)',\n                    '(keydown)': '_onKeydown($event)',\n                    '(keyup)': '_onKeyup()',\n                    '(mouseenter)': '_onMouseenter()',\n                    '(slide)': '_onSlide($event)',\n                    '(slideend)': '_onSlideEnd()',\n                    '(slidestart)': '_onSlideStart($event)',\n                    'role': 'slider',\n                    'tabindex': '0',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.aria-valuemax]': 'max',\n                    '[attr.aria-valuemin]': 'min',\n                    '[attr.aria-valuenow]': 'value',\n                    '[class.mat-primary]': 'color == \"primary\"',\n                    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n                    '[class.mat-warn]': 'color == \"warn\"',\n                    '[class.mat-slider-disabled]': 'disabled',\n                    '[class.mat-slider-has-ticks]': 'tickInterval',\n                    '[class.mat-slider-horizontal]': '!vertical',\n                    '[class.mat-slider-axis-inverted]': '_invertAxis',\n                    '[class.mat-slider-sliding]': '_isSliding',\n                    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                    '[class.mat-slider-vertical]': 'vertical',\n                    '[class.mat-slider-min-value]': '_isMinValue',\n                    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n                },\n                template: \"<div class=\\\"mat-slider-wrapper\\\"> <div class=\\\"mat-slider-track-wrapper\\\"> <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_trackBackgroundStyles\\\"></div> <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div> </div> <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\"> <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div> </div> <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\"> <div class=\\\"mat-slider-focus-ring\\\"></div> <div class=\\\"mat-slider-thumb\\\"></div> <div class=\\\"mat-slider-thumb-label\\\"> <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span> </div> </div> </div> \",\n                styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:0;vertical-align:middle}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{box-sizing:border-box;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.cdk-keyboard-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(.7);transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),border-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform .4s cubic-bezier(.25,.8,.25,1),border-radius .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label-text{z-index:1;font-size:12px;font-weight:700;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-sliding .mat-slider-thumb-container,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-track-fill{transition-duration:0s}.mat-slider-has-ticks .mat-slider-wrapper::after{content:'';position:absolute;border:0 solid rgba(0,0,0,.6);opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.cdk-focused .mat-slider-thumb-label-text{opacity:1}.cdk-mouse-focused .mat-slider-thumb,.cdk-program-focused .mat-slider-thumb,.cdk-touch-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.mat-slider-horizontal .mat-slider-ticks{background:repeating-linear-gradient(to right,rgba(0,0,0,.6),rgba(0,0,0,.6) 2px,transparent 0,transparent) repeat;background:-moz-repeating-linear-gradient(.0001deg,rgba(0,0,0,.6),rgba(0,0,0,.6) 2px,transparent 0,transparent) repeat;background-clip:content-box;height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{background:repeating-linear-gradient(to bottom,rgba(0,0,0,.6),rgba(0,0,0,.6) 2px,transparent 0,transparent) repeat;background-clip:content-box;width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%} /*# sourceMappingURL=slider.css.map */ \"],\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSlider.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n    { type: FocusOriginMonitor, },\n    { type: Dir, decorators: [{ type: Optional },] },\n]; };\nMdSlider.propDecorators = {\n    'disabled': [{ type: Input },],\n    'invert': [{ type: Input },],\n    'max': [{ type: Input },],\n    'min': [{ type: Input },],\n    'step': [{ type: Input },],\n    'thumbLabel': [{ type: Input },],\n    '_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label',] },],\n    'tickInterval': [{ type: Input },],\n    '_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval',] },],\n    'value': [{ type: Input },],\n    'vertical': [{ type: Input },],\n    'color': [{ type: Input },],\n    'change': [{ type: Output },],\n    'input': [{ type: Output },],\n};\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n * \\@docs-private\n */\nvar SliderRenderer = (function () {\n    /**\n     * @param {?} elementRef\n     */\n    function SliderRenderer(elementRef) {\n        this._sliderElement = elementRef.nativeElement;\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     * @return {?}\n     */\n    SliderRenderer.prototype.getSliderDimensions = function () {\n        var /** @type {?} */ wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');\n        return wrapperElement.getBoundingClientRect();\n    };\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     * @return {?}\n     */\n    SliderRenderer.prototype.addFocus = function () {\n        this._sliderElement.focus();\n    };\n    return SliderRenderer;\n}());\nvar MdSliderModule = (function () {\n    function MdSliderModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdSliderModule.forRoot = function () {\n        return {\n            ngModule: MdSliderModule,\n            providers: []\n        };\n    };\n    return MdSliderModule;\n}());\nMdSliderModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, FormsModule, CompatibilityModule, StyleModule, RtlModule],\n                exports: [MdSlider, CompatibilityModule],\n                declarations: [MdSlider],\n                providers: [{ provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSliderModule.ctorParameters = function () { return []; };\n/**\n * Exception thrown when two MdSidenav are matching the same side.\n */\nvar MdDuplicatedSidenavError = (function (_super) {\n    __extends(MdDuplicatedSidenavError, _super);\n    /**\n     * @param {?} align\n     */\n    function MdDuplicatedSidenavError(align) {\n        return _super.call(this, \"A sidenav was already declared for 'align=\\\"\" + align + \"\\\"'\") || this;\n    }\n    return MdDuplicatedSidenavError;\n}(MdError));\n/**\n * Sidenav toggle promise result.\n */\nvar MdSidenavToggleResult = (function () {\n    /**\n     * @param {?} type\n     * @param {?} animationFinished\n     */\n    function MdSidenavToggleResult(type, animationFinished) {\n        this.type = type;\n        this.animationFinished = animationFinished;\n    }\n    return MdSidenavToggleResult;\n}());\n/**\n * <md-sidenav> component.\n *\n * This component corresponds to the drawer of the sidenav.\n *\n * Please refer to README.md for examples on how to use it.\n */\nvar MdSidenav = (function () {\n    /**\n     * @param {?} _elementRef The DOM element reference. Used for transition and width calculation.\n     *     If not available we do not hook on transitions.\n     * @param {?} _renderer\n     * @param {?} _focusTrapFactory\n     */\n    function MdSidenav(_elementRef, _renderer, _focusTrapFactory) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._align = 'start';\n        /** Mode of the sidenav; whether 'over' or 'side'. */\n        this.mode = 'over';\n        this._disableClose = false;\n        /** Whether the sidenav is opened. */\n        this._opened = false;\n        /** Event emitted when the sidenav is being opened. Use this to synchronize animations. */\n        this.onOpenStart = new EventEmitter();\n        /** Event emitted when the sidenav is fully opened. */\n        this.onOpen = new EventEmitter();\n        /** Event emitted when the sidenav is being closed. Use this to synchronize animations. */\n        this.onCloseStart = new EventEmitter();\n        /** Event emitted when the sidenav is fully closed. */\n        this.onClose = new EventEmitter();\n        /** Event emitted when the sidenav alignment changes. */\n        this.onAlignChanged = new EventEmitter();\n        this._toggleAnimationPromise = null;\n        this._resolveToggleAnimationPromise = null;\n        this._elementFocusedBeforeSidenavWasOpened = null;\n        this.onOpen.subscribe(function () {\n            _this._elementFocusedBeforeSidenavWasOpened = document.activeElement;\n            if (_this.isFocusTrapEnabled && _this._focusTrap) {\n                _this._focusTrap.focusFirstTabbableElementWhenReady();\n            }\n        });\n        this.onClose.subscribe(function () {\n            if (_this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {\n                _this._renderer.invokeElementMethod(_this._elementFocusedBeforeSidenavWasOpened, 'focus');\n            }\n            else {\n                _this._renderer.invokeElementMethod(_this._elementRef.nativeElement, 'blur');\n            }\n            _this._elementFocusedBeforeSidenavWasOpened = null;\n        });\n    }\n    Object.defineProperty(MdSidenav.prototype, \"align\", {\n        /**\n         * Direction which the sidenav is aligned in.\n         * @return {?}\n         */\n        get: function () { return this._align; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            // Make sure we have a valid value.\n            value = (value == 'end') ? 'end' : 'start';\n            if (value != this._align) {\n                this._align = value;\n                this.onAlignChanged.emit();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"disableClose\", {\n        /**\n         * Whether the sidenav can be closed with the escape key or not.\n         * @return {?}\n         */\n        get: function () { return this._disableClose; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableClose = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"isFocusTrapEnabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            // The focus trap is only enabled when the sidenav is open in any mode other than side.\n            return this.opened && this.mode !== 'side';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSidenav.prototype.ngAfterContentInit = function () {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._focusTrap.enabled = this.isFocusTrapEnabled;\n        // This can happen when the sidenav is set to opened in\n        // the template and the transition hasn't ended.\n        if (this._toggleAnimationPromise) {\n            this._resolveToggleAnimationPromise(true);\n            this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenav.prototype.ngOnDestroy = function () {\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    };\n    Object.defineProperty(MdSidenav.prototype, \"opened\", {\n        /**\n         * Whether the sidenav is opened. We overload this because we trigger an event when it\n         * starts or end.\n         * @return {?}\n         */\n        get: function () { return this._opened; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this.toggle(coerceBooleanProperty(v));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Open this sidenav, and return a Promise that will resolve when it's fully opened (or get\n     * rejected if it didn't).\n     * @return {?}\n     */\n    MdSidenav.prototype.open = function () {\n        return this.toggle(true);\n    };\n    /**\n     * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get\n     * rejected if it didn't).\n     * @return {?}\n     */\n    MdSidenav.prototype.close = function () {\n        return this.toggle(false);\n    };\n    /**\n     * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or\n     * close() when it's closed.\n     * @param {?=} isOpen Whether the sidenav should be open.\n     * @return {?} Resolves with the result of whether the sidenav was opened or closed.\n     */\n    MdSidenav.prototype.toggle = function (isOpen) {\n        var _this = this;\n        if (isOpen === void 0) { isOpen = !this.opened; }\n        // Shortcut it if we're already opened.\n        if (isOpen === this.opened) {\n            return this._toggleAnimationPromise ||\n                Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));\n        }\n        this._opened = isOpen;\n        if (this._focusTrap) {\n            this._focusTrap.enabled = this.isFocusTrapEnabled;\n        }\n        if (isOpen) {\n            this.onOpenStart.emit();\n        }\n        else {\n            this.onCloseStart.emit();\n        }\n        if (this._toggleAnimationPromise) {\n            this._resolveToggleAnimationPromise(false);\n        }\n        this._toggleAnimationPromise = new Promise(function (resolve) {\n            _this._resolveToggleAnimationPromise = function (animationFinished) { return resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished)); };\n        });\n        return this._toggleAnimationPromise;\n    };\n    /**\n     * Handles the keyboard events.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    MdSidenav.prototype.handleKeydown = function (event) {\n        if (event.keyCode === ESCAPE && !this.disableClose) {\n            this.close();\n            event.stopPropagation();\n        }\n    };\n    /**\n     * When transition has finished, set the internal state for classes and emit the proper event.\n     * The event passed is actually of type TransitionEvent, but that type is not available in\n     * Android so we use any.\n     * @param {?} transitionEvent\n     * @return {?}\n     */\n    MdSidenav.prototype._onTransitionEnd = function (transitionEvent) {\n        if (transitionEvent.target == this._elementRef.nativeElement\n            && transitionEvent.propertyName.endsWith('transform')) {\n            if (this._opened) {\n                this.onOpen.emit();\n            }\n            else {\n                this.onClose.emit();\n            }\n            if (this._toggleAnimationPromise) {\n                this._resolveToggleAnimationPromise(true);\n                this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n            }\n        }\n    };\n    Object.defineProperty(MdSidenav.prototype, \"_isClosing\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return !this._opened && !!this._toggleAnimationPromise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_isOpening\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._opened && !!this._toggleAnimationPromise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_isClosed\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return !this._opened && !this._toggleAnimationPromise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_isOpened\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._opened && !this._toggleAnimationPromise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_isEnd\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.align == 'end';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_modeSide\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'side';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_modeOver\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'over';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_modePush\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'push';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_width\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this._elementRef.nativeElement) {\n                return this._elementRef.nativeElement.offsetWidth;\n            }\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MdSidenav;\n}());\nMdSidenav.decorators = [\n    { type: Component, args: [{ selector: 'md-sidenav, mat-sidenav',\n                // TODO(mmalerba): move template to separate file.\n                template: \"<ng-content></ng-content> \",\n                host: {\n                    '[class.mat-sidenav]': 'true',\n                    '(transitionend)': '_onTransitionEnd($event)',\n                    '(keydown)': 'handleKeydown($event)',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-sidenav-closed]': '_isClosed',\n                    '[class.mat-sidenav-closing]': '_isClosing',\n                    '[class.mat-sidenav-end]': '_isEnd',\n                    '[class.mat-sidenav-opened]': '_isOpened',\n                    '[class.mat-sidenav-opening]': '_isOpening',\n                    '[class.mat-sidenav-over]': '_modeOver',\n                    '[class.mat-sidenav-push]': '_modePush',\n                    '[class.mat-sidenav-side]': '_modeSide',\n                    'tabIndex': '-1'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSidenav.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: FocusTrapFactory, },\n]; };\nMdSidenav.propDecorators = {\n    'align': [{ type: Input },],\n    'mode': [{ type: Input },],\n    'disableClose': [{ type: Input },],\n    'onOpenStart': [{ type: Output, args: ['open-start',] },],\n    'onOpen': [{ type: Output, args: ['open',] },],\n    'onCloseStart': [{ type: Output, args: ['close-start',] },],\n    'onClose': [{ type: Output, args: ['close',] },],\n    'onAlignChanged': [{ type: Output, args: ['align-changed',] },],\n    'opened': [{ type: Input },],\n};\n/**\n * <md-sidenav-container> component.\n *\n * This is the parent component to one or two <md-sidenav>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nvar MdSidenavContainer = (function () {\n    /**\n     * @param {?} _dir\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _ngZone\n     */\n    function MdSidenavContainer(_dir, _element, _renderer, _ngZone) {\n        var _this = this;\n        this._dir = _dir;\n        this._element = _element;\n        this._renderer = _renderer;\n        this._ngZone = _ngZone;\n        /** Event emitted when the sidenav backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Whether to enable open/close trantions. */\n        this._enableTransitions = false;\n        // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n        // properties to point to the proper start/end.\n        if (_dir != null) {\n            _dir.dirChange.subscribe(function () { return _this._validateDrawers(); });\n        }\n    }\n    Object.defineProperty(MdSidenavContainer.prototype, \"start\", {\n        /**\n         * The sidenav child with the `start` alignment.\n         * @return {?}\n         */\n        get: function () { return this._start; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenavContainer.prototype, \"end\", {\n        /**\n         * The sidenav child with the `end` alignment.\n         * @return {?}\n         */\n        get: function () { return this._end; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        // On changes, assert on consistency.\n        this._sidenavs.changes.subscribe(function () { return _this._validateDrawers(); });\n        this._sidenavs.forEach(function (sidenav) {\n            _this._watchSidenavToggle(sidenav);\n            _this._watchSidenavAlign(sidenav);\n        });\n        this._validateDrawers();\n        // Give the view a chance to render the initial state, then enable transitions.\n        this._ngZone.onMicrotaskEmpty.first().subscribe(function () { return _this._enableTransitions = true; });\n    };\n    /**\n     * Subscribes to sidenav events in order to set a class on the main container element when the\n     * sidenav is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     * @param {?} sidenav\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._watchSidenavToggle = function (sidenav) {\n        var _this = this;\n        if (!sidenav || sidenav.mode === 'side') {\n            return;\n        }\n        sidenav.onOpen.subscribe(function () { return _this._setContainerClass(sidenav, true); });\n        sidenav.onClose.subscribe(function () { return _this._setContainerClass(sidenav, false); });\n    };\n    /**\n     * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align\n     * changes.\n     * @param {?} sidenav\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._watchSidenavAlign = function (sidenav) {\n        var _this = this;\n        if (!sidenav) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping sides at the same time.\n        sidenav.onAlignChanged.subscribe(function () { return _this._ngZone.onMicrotaskEmpty.first().subscribe(function () { return _this._validateDrawers(); }); });\n    };\n    /**\n     * Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element.\n     * @param {?} sidenav\n     * @param {?} bool\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._setContainerClass = function (sidenav, bool) {\n        this._renderer.setElementClass(this._element.nativeElement, 'mat-sidenav-opened', bool);\n    };\n    /**\n     * Validate the state of the sidenav children components.\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._validateDrawers = function () {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end sidenav.\n        // NOTE: We must call toArray on _sidenavs even though it's iterable\n        // (see https://github.com/Microsoft/TypeScript/issues/3164).\n        for (var _i = 0, _a = this._sidenavs.toArray(); _i < _a.length; _i++) {\n            var sidenav = _a[_i];\n            if (sidenav.align == 'end') {\n                if (this._end != null) {\n                    throw new MdDuplicatedSidenavError('end');\n                }\n                this._end = sidenav;\n            }\n            else {\n                if (this._start != null) {\n                    throw new MdDuplicatedSidenavError('start');\n                }\n                this._start = sidenav;\n            }\n        }\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir == null || this._dir.value == 'ltr') {\n            this._left = this._start;\n            this._right = this._end;\n        }\n        else {\n            this._left = this._end;\n            this._right = this._start;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._onBackdropClicked = function () {\n        this.backdropClick.emit();\n        this._closeModalSidenav();\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._closeModalSidenav = function () {\n        // Close all open sidenav's where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(function (sidenav) { return sidenav && !sidenav.disableClose && sidenav.mode !== 'side'; })\n            .forEach(function (sidenav) { return sidenav.close(); });\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._isShowingBackdrop = function () {\n        return (this._isSidenavOpen(this._start) && this._start.mode != 'side')\n            || (this._isSidenavOpen(this._end) && this._end.mode != 'side');\n    };\n    /**\n     * @param {?} side\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._isSidenavOpen = function (side) {\n        return side != null && side.opened;\n    };\n    /**\n     * Return the width of the sidenav, if it's in the proper mode and opened.\n     * This may relayout the view, so do not call this often.\n     * @param {?} sidenav\n     * @param {?} mode\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getSidenavEffectiveWidth = function (sidenav, mode) {\n        return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getMarginLeft = function () {\n        return this._getSidenavEffectiveWidth(this._left, 'side');\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getMarginRight = function () {\n        return this._getSidenavEffectiveWidth(this._right, 'side');\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getPositionLeft = function () {\n        return this._getSidenavEffectiveWidth(this._left, 'push');\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getPositionRight = function () {\n        return this._getSidenavEffectiveWidth(this._right, 'push');\n    };\n    /**\n     * Returns the horizontal offset for the content area.  There should never be a value for both\n     * left and right, so by subtracting the right value from the left value, we should always get\n     * the appropriate offset.\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getPositionOffset = function () {\n        return this._getPositionLeft() - this._getPositionRight();\n    };\n    /**\n     * This is using [ngStyle] rather than separate [style...] properties because [style.transform]\n     * doesn't seem to work right now.\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getStyles = function () {\n        return {\n            marginLeft: this._getMarginLeft() + \"px\",\n            marginRight: this._getMarginRight() + \"px\",\n            transform: \"translate3d(\" + this._getPositionOffset() + \"px, 0, 0)\"\n        };\n    };\n    return MdSidenavContainer;\n}());\nMdSidenavContainer.decorators = [\n    { type: Component, args: [{ selector: 'md-sidenav-container, mat-sidenav-container',\n                // Do not use ChangeDetectionStrategy.OnPush. It does not work for this component because\n                // technically it is a sibling of MdSidenav (on the content tree) and isn't updated when MdSidenav\n                // changes its state.\n                template: \"<div class=\\\"mat-sidenav-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" [class.mat-sidenav-shown]=\\\"_isShowingBackdrop()\\\"></div> <ng-content select=\\\"md-sidenav, mat-sidenav\\\"></ng-content> <div class=\\\"mat-sidenav-content\\\" [ngStyle]=\\\"_getStyles()\\\" cdk-scrollable> <ng-content></ng-content> </div> \",\n                styles: [\".mat-sidenav-container{position:relative;transform:translate3d(0,0,0);box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-sidenav-container[fullscreen]{position:absolute;top:0;left:0;right:0;bottom:0}.mat-sidenav-container[fullscreen].mat-sidenav-opened{overflow:hidden}.mat-sidenav-backdrop{position:absolute;top:0;left:0;right:0;bottom:0;display:block;z-index:2;visibility:hidden}.mat-sidenav-backdrop.mat-sidenav-shown{visibility:visible}@media screen and (-ms-high-contrast:active){.mat-sidenav-backdrop{opacity:.5}}.mat-sidenav-content{position:relative;transform:translate3d(0,0,0);display:block;height:100%;overflow:auto}.mat-sidenav{position:relative;transform:translate3d(0,0,0);display:block;position:absolute;top:0;bottom:0;z-index:3;min-width:5vw;outline:0;box-sizing:border-box;height:100%;overflow-y:auto;transform:translate3d(-100%,0,0)}.mat-sidenav.mat-sidenav-closed{visibility:hidden}.mat-sidenav.mat-sidenav-opened,.mat-sidenav.mat-sidenav-opening{transform:translate3d(0,0,0)}.mat-sidenav.mat-sidenav-side{z-index:1}.mat-sidenav.mat-sidenav-end{right:0;transform:translate3d(100%,0,0)}.mat-sidenav.mat-sidenav-end.mat-sidenav-closed{visibility:hidden}.mat-sidenav.mat-sidenav-end.mat-sidenav-opened,.mat-sidenav.mat-sidenav-end.mat-sidenav-opening{transform:translate3d(0,0,0)}[dir=rtl] .mat-sidenav{transform:translate3d(100%,0,0)}[dir=rtl] .mat-sidenav.mat-sidenav-closed{visibility:hidden}[dir=rtl] .mat-sidenav.mat-sidenav-opened,[dir=rtl] .mat-sidenav.mat-sidenav-opening{transform:translate3d(0,0,0)}[dir=rtl] .mat-sidenav.mat-sidenav-end{left:0;right:auto;transform:translate3d(-100%,0,0)}[dir=rtl] .mat-sidenav.mat-sidenav-end.mat-sidenav-closed{visibility:hidden}[dir=rtl] .mat-sidenav.mat-sidenav-end.mat-sidenav-opened,[dir=rtl] .mat-sidenav.mat-sidenav-end.mat-sidenav-opening{transform:translate3d(0,0,0)}.mat-sidenav.mat-sidenav-opened:not(.mat-sidenav-side),.mat-sidenav.mat-sidenav-opening:not(.mat-sidenav-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)} /*# sourceMappingURL=sidenav.css.map */ \",\n                    \".mat-sidenav-transition .mat-sidenav{transition:transform .4s cubic-bezier(.25,.8,.25,1)}.mat-sidenav-transition .mat-sidenav-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-sidenav-transition .mat-sidenav-backdrop.mat-sidenav-shown{transition:background-color .4s cubic-bezier(.25,.8,.25,1)} /*# sourceMappingURL=sidenav-transitions.css.map */ \"],\n                host: {\n                    '[class.mat-sidenav-container]': 'true',\n                    '[class.mat-sidenav-transition]': '_enableTransitions',\n                },\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSidenavContainer.ctorParameters = function () { return [\n    { type: Dir, decorators: [{ type: Optional },] },\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: NgZone, },\n]; };\nMdSidenavContainer.propDecorators = {\n    '_sidenavs': [{ type: ContentChildren, args: [MdSidenav,] },],\n    'backdropClick': [{ type: Output },],\n};\nvar MdSidenavModule = (function () {\n    function MdSidenavModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdSidenavModule.forRoot = function () {\n        return {\n            ngModule: MdSidenavModule,\n            providers: []\n        };\n    };\n    return MdSidenavModule;\n}());\nMdSidenavModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, CompatibilityModule, A11yModule, OverlayModule],\n                exports: [MdSidenavContainer, MdSidenav, CompatibilityModule],\n                declarations: [MdSidenavContainer, MdSidenav],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSidenavModule.ctorParameters = function () { return []; };\nvar MdListDivider = (function () {\n    function MdListDivider() {\n    }\n    return MdListDivider;\n}());\nMdListDivider.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-divider, mat-divider'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListDivider.ctorParameters = function () { return []; };\n/**\n * Token used to inject the list type into child MdListItem components so they can know whether\n * they're in a nav list (and thus should use an MdRipple).\n */\nvar LIST_TYPE_TOKEN = new OpaqueToken('list_type');\nvar NORMAL_LIST_TYPE = 'normal_list_type';\nvar NAV_LIST_TYPE = 'nav_list_type';\nvar MdList = (function () {\n    function MdList() {\n    }\n    return MdList;\n}());\nMdList.decorators = [\n    { type: Component, args: [{ selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n                host: {\n                    'role': 'list'\n                },\n                template: '<ng-content></ng-content>',\n                styles: [\".mat-list,.mat-nav-list{padding-top:8px;display:block}.mat-list .mat-subheader,.mat-nav-list .mat-subheader{display:block;box-sizing:border-box;height:48px;padding:16px;margin:0;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-size:14px;font-weight:500}.mat-list .mat-subheader:first-child,.mat-nav-list .mat-subheader:first-child{margin-top:-8px}.mat-list .mat-list-item,.mat-nav-list .mat-list-item{display:block}.mat-list .mat-list-item .mat-list-item-content,.mat-nav-list .mat-list-item .mat-list-item-content{display:flex;flex-direction:row;align-items:center;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;box-sizing:border-box;font-size:16px;height:48px;padding:0 16px;position:relative}.mat-list .mat-list-item.mat-list-item-avatar .mat-list-item-content,.mat-nav-list .mat-list-item.mat-list-item-avatar .mat-list-item-content{height:56px}.mat-list .mat-list-item.mat-2-line .mat-list-item-content,.mat-nav-list .mat-list-item.mat-2-line .mat-list-item-content{height:72px}.mat-list .mat-list-item.mat-3-line .mat-list-item-content,.mat-nav-list .mat-list-item.mat-3-line .mat-list-item-content{height:88px}.mat-list .mat-list-item.mat-multi-line .mat-list-item-content,.mat-nav-list .mat-list-item.mat-multi-line .mat-list-item-content{height:100%;padding:8px 16px}.mat-list .mat-list-item .mat-list-text,.mat-nav-list .mat-list-item .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0 16px}.mat-list .mat-list-item .mat-list-text>*,.mat-nav-list .mat-list-item .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list .mat-list-item .mat-list-text:empty,.mat-nav-list .mat-list-item .mat-list-text:empty{display:none}.mat-list .mat-list-item .mat-list-text:first-child,.mat-nav-list .mat-list-item .mat-list-text:first-child{padding:0}.mat-list .mat-list-item .mat-list-avatar,.mat-nav-list .mat-list-item .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%}.mat-list .mat-list-item .mat-list-icon,.mat-nav-list .mat-list-item .mat-list-icon{width:24px;height:24px;border-radius:50%;padding:4px}.mat-list .mat-list-item .mat-line,.mat-nav-list .mat-list-item .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list .mat-list-item .mat-line:nth-child(n+2),.mat-nav-list .mat-list-item .mat-line:nth-child(n+2){font-size:14px}.mat-list[dense],.mat-nav-list[dense]{padding-top:4px;display:block}.mat-list[dense] .mat-subheader,.mat-nav-list[dense] .mat-subheader{display:block;box-sizing:border-box;height:40px;padding:16px;margin:0;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-size:13px;font-weight:500}.mat-list[dense] .mat-subheader:first-child,.mat-nav-list[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list[dense] .mat-list-item,.mat-nav-list[dense] .mat-list-item{display:block}.mat-list[dense] .mat-list-item .mat-list-item-content,.mat-nav-list[dense] .mat-list-item .mat-list-item-content{display:flex;flex-direction:row;align-items:center;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;box-sizing:border-box;font-size:13px;height:40px;padding:0 16px;position:relative}.mat-list[dense] .mat-list-item.mat-list-item-avatar .mat-list-item-content,.mat-nav-list[dense] .mat-list-item.mat-list-item-avatar .mat-list-item-content{height:48px}.mat-list[dense] .mat-list-item.mat-2-line .mat-list-item-content,.mat-nav-list[dense] .mat-list-item.mat-2-line .mat-list-item-content{height:60px}.mat-list[dense] .mat-list-item.mat-3-line .mat-list-item-content,.mat-nav-list[dense] .mat-list-item.mat-3-line .mat-list-item-content{height:76px}.mat-list[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-nav-list[dense] .mat-list-item.mat-multi-line .mat-list-item-content{height:100%;padding:8px 16px}.mat-list[dense] .mat-list-item .mat-list-text,.mat-nav-list[dense] .mat-list-item .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0 16px}.mat-list[dense] .mat-list-item .mat-list-text>*,.mat-nav-list[dense] .mat-list-item .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list[dense] .mat-list-item .mat-list-text:empty,.mat-nav-list[dense] .mat-list-item .mat-list-text:empty{display:none}.mat-list[dense] .mat-list-item .mat-list-text:first-child,.mat-nav-list[dense] .mat-list-item .mat-list-text:first-child{padding:0}.mat-list[dense] .mat-list-item .mat-list-avatar,.mat-nav-list[dense] .mat-list-item .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%}.mat-list[dense] .mat-list-item .mat-list-icon,.mat-nav-list[dense] .mat-list-item .mat-list-icon{width:24px;height:24px;border-radius:50%;padding:4px}.mat-list[dense] .mat-list-item .mat-line,.mat-nav-list[dense] .mat-list-item .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list[dense] .mat-list-item .mat-line:nth-child(n+2),.mat-nav-list[dense] .mat-list-item .mat-line:nth-child(n+2){font-size:13px}.mat-divider{display:block;border-top-style:solid;border-top-width:1px;margin:0}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item-content{cursor:pointer}.mat-nav-list .mat-list-item-content.mat-list-item-focus,.mat-nav-list .mat-list-item-content:hover{outline:0} /*# sourceMappingURL=list.css.map */ \"],\n                providers: [{ provide: LIST_TYPE_TOKEN, useValue: NORMAL_LIST_TYPE }],\n                encapsulation: ViewEncapsulation.None\n            },] },\n];\n/**\n * @nocollapse\n */\nMdList.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdListCssMatStyler = (function () {\n    function MdListCssMatStyler() {\n    }\n    return MdListCssMatStyler;\n}());\nMdListCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-list, mat-list',\n                host: {\n                    '[class.mat-list]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdNavListCssMatStyler = (function () {\n    function MdNavListCssMatStyler() {\n    }\n    return MdNavListCssMatStyler;\n}());\nMdNavListCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-nav-list, mat-nav-list',\n                host: {\n                    '[class.mat-nav-list]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdNavListCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive to set the ListType token to NAV_LIST_TYPE.\n */\nvar MdNavListTokenSetter = (function () {\n    function MdNavListTokenSetter() {\n    }\n    return MdNavListTokenSetter;\n}());\nMdNavListTokenSetter.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-nav-list, mat-nav-list',\n                providers: [{ provide: LIST_TYPE_TOKEN, useValue: NAV_LIST_TYPE }],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdNavListTokenSetter.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdDividerCssMatStyler = (function () {\n    function MdDividerCssMatStyler() {\n    }\n    return MdDividerCssMatStyler;\n}());\nMdDividerCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-divider, mat-divider',\n                host: {\n                    '[class.mat-divider]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDividerCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdListAvatarCssMatStyler = (function () {\n    function MdListAvatarCssMatStyler() {\n    }\n    return MdListAvatarCssMatStyler;\n}());\nMdListAvatarCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-list-avatar], [mat-list-avatar]',\n                host: {\n                    '[class.mat-list-avatar]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListAvatarCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdListIconCssMatStyler = (function () {\n    function MdListIconCssMatStyler() {\n    }\n    return MdListIconCssMatStyler;\n}());\nMdListIconCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-list-icon], [mat-list-icon]',\n                host: {\n                    '[class.mat-list-icon]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListIconCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdListSubheaderCssMatStyler = (function () {\n    function MdListSubheaderCssMatStyler() {\n    }\n    return MdListSubheaderCssMatStyler;\n}());\nMdListSubheaderCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-subheader], [mat-subheader]',\n                host: {\n                    '[class.mat-subheader]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListSubheaderCssMatStyler.ctorParameters = function () { return []; };\nvar MdListItem = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _listType\n     */\n    function MdListItem(_renderer, _element, _listType) {\n        this._renderer = _renderer;\n        this._element = _element;\n        this._listType = _listType;\n        /**\n         * Whether the ripple effect on click should be disabled. This applies only to list items that\n         * are children of an md-nav-list; md-list items never have ripples.\n         */\n        this.disableRipple = false;\n        this._hasFocus = false;\n    }\n    Object.defineProperty(MdListItem.prototype, \"_hasAvatar\", {\n        /**\n         * @param {?} avatar\n         * @return {?}\n         */\n        set: function (avatar) {\n            this._renderer.setElementClass(this._element.nativeElement, 'mat-list-item-avatar', avatar != null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdListItem.prototype.ngAfterContentInit = function () {\n        this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n    };\n    /**\n     * Whether this list item should show a ripple effect when clicked.\n     * @return {?}\n     */\n    MdListItem.prototype.isRippleEnabled = function () {\n        return !this.disableRipple && (this._listType === NAV_LIST_TYPE);\n    };\n    /**\n     * @return {?}\n     */\n    MdListItem.prototype._handleFocus = function () {\n        this._hasFocus = true;\n    };\n    /**\n     * @return {?}\n     */\n    MdListItem.prototype._handleBlur = function () {\n        this._hasFocus = false;\n    };\n    return MdListItem;\n}());\nMdListItem.decorators = [\n    { type: Component, args: [{ selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n                host: {\n                    'role': 'listitem',\n                    '(focus)': '_handleFocus()',\n                    '(blur)': '_handleBlur()',\n                    '[class.mat-list-item]': 'true',\n                },\n                template: \"<div class=\\\"mat-list-item-content\\\" [class.mat-list-item-focus]=\\\"_hasFocus\\\" md-ripple [mdRippleDisabled]=\\\"!isRippleEnabled()\\\"> <ng-content select=\\\"[md-list-avatar],[md-list-icon], [mat-list-avatar], [mat-list-icon]\\\"></ng-content> <div class=\\\"mat-list-text\\\"><ng-content select=\\\"[md-line], [mat-line]\\\"></ng-content></div> <ng-content></ng-content> </div> \",\n                encapsulation: ViewEncapsulation.None\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListItem.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIST_TYPE_TOKEN,] },] },\n]; };\nMdListItem.propDecorators = {\n    'disableRipple': [{ type: Input },],\n    '_lines': [{ type: ContentChildren, args: [MdLine,] },],\n    '_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler,] },],\n};\nvar MdListModule = (function () {\n    function MdListModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdListModule.forRoot = function () {\n        return {\n            ngModule: MdListModule,\n            providers: []\n        };\n    };\n    return MdListModule;\n}());\nMdListModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MdLineModule, MdRippleModule, CompatibilityModule],\n                exports: [\n                    MdList,\n                    MdListItem,\n                    MdListDivider,\n                    MdListAvatarCssMatStyler,\n                    MdLineModule,\n                    CompatibilityModule,\n                    MdListIconCssMatStyler,\n                    MdListCssMatStyler,\n                    MdNavListCssMatStyler,\n                    MdDividerCssMatStyler,\n                    MdListSubheaderCssMatStyler,\n                    MdNavListTokenSetter,\n                ],\n                declarations: [\n                    MdList,\n                    MdListItem,\n                    MdListDivider,\n                    MdListAvatarCssMatStyler,\n                    MdListIconCssMatStyler,\n                    MdListCssMatStyler,\n                    MdNavListCssMatStyler,\n                    MdDividerCssMatStyler,\n                    MdListSubheaderCssMatStyler,\n                    MdNavListTokenSetter,\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdListModule.ctorParameters = function () { return []; };\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nfunction coerceToString(value) {\n    return \"\" + (value || '');\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nfunction coerceToNumber(value) {\n    return typeof value === 'string' ? parseInt(value, 10) : value;\n}\nvar MdGridTile = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     */\n    function MdGridTile(_renderer, _element) {\n        this._renderer = _renderer;\n        this._element = _element;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    Object.defineProperty(MdGridTile.prototype, \"rowspan\", {\n        /**\n         * Amount of rows that the grid tile takes up.\n         * @return {?}\n         */\n        get: function () { return this._rowspan; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._rowspan = coerceToNumber(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdGridTile.prototype, \"colspan\", {\n        /**\n         * Amount of columns that the grid tile takes up.\n         * @return {?}\n         */\n        get: function () { return this._colspan; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._colspan = coerceToNumber(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    MdGridTile.prototype._setStyle = function (property, value) {\n        this._renderer.setElementStyle(this._element.nativeElement, property, value);\n    };\n    return MdGridTile;\n}());\nMdGridTile.decorators = [\n    { type: Component, args: [{ selector: 'md-grid-tile, mat-grid-tile',\n                host: {\n                    'role': 'listitem',\n                    '[class.mat-grid-tile]': 'true',\n                },\n                template: \"<!-- TODO(kara): Revisit why this is a figure.--> <figure class=\\\"mat-figure\\\"> <ng-content></ng-content> </figure>\",\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{display:flex;position:absolute;align-items:center;justify-content:center;height:100%;top:0;right:0;bottom:0;left:0;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;font-size:16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer .mat-line,.mat-grid-tile .mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile .mat-grid-tile-footer .mat-line:nth-child(n+2),.mat-grid-tile .mat-grid-tile-header .mat-line:nth-child(n+2){font-size:12px}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none} /*# sourceMappingURL=grid-list.css.map */ \"],\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridTile.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n]; };\nMdGridTile.propDecorators = {\n    'rowspan': [{ type: Input },],\n    'colspan': [{ type: Input },],\n};\nvar MdGridTileText = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     */\n    function MdGridTileText(_renderer, _element) {\n        this._renderer = _renderer;\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    MdGridTileText.prototype.ngAfterContentInit = function () {\n        this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n    };\n    return MdGridTileText;\n}());\nMdGridTileText.decorators = [\n    { type: Component, args: [{ selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[md-grid-avatar], [mat-grid-avatar]\\\"></ng-content> <div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[md-line], [mat-line]\\\"></ng-content></div> <ng-content></ng-content> \"\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridTileText.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n]; };\nMdGridTileText.propDecorators = {\n    '_lines': [{ type: ContentChildren, args: [MdLine,] },],\n};\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdGridAvatarCssMatStyler = (function () {\n    function MdGridAvatarCssMatStyler() {\n    }\n    return MdGridAvatarCssMatStyler;\n}());\nMdGridAvatarCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-grid-avatar], [mat-grid-avatar]',\n                host: {\n                    '[class.mat-grid-avatar]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridAvatarCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdGridTileHeaderCssMatStyler = (function () {\n    function MdGridTileHeaderCssMatStyler() {\n    }\n    return MdGridTileHeaderCssMatStyler;\n}());\nMdGridTileHeaderCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-grid-tile-header, mat-grid-tile-header',\n                host: {\n                    '[class.mat-grid-tile-header]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridTileHeaderCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdGridTileFooterCssMatStyler = (function () {\n    function MdGridTileFooterCssMatStyler() {\n    }\n    return MdGridTileFooterCssMatStyler;\n}());\nMdGridTileFooterCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n                host: {\n                    '[class.mat-grid-tile-footer]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridTileFooterCssMatStyler.ctorParameters = function () { return []; };\n/**\n * Exception thrown when cols property is missing from grid-list\n * \\@docs-private\n */\nvar MdGridListColsError = (function (_super) {\n    __extends(MdGridListColsError, _super);\n    function MdGridListColsError() {\n        return _super.call(this, \"md-grid-list: must pass in number of columns. Example: <md-grid-list cols=\\\"3\\\">\") || this;\n    }\n    return MdGridListColsError;\n}(MdError));\n/**\n * Exception thrown when a tile's colspan is longer than the number of cols in list\n * \\@docs-private\n */\nvar MdGridTileTooWideError = (function (_super) {\n    __extends(MdGridTileTooWideError, _super);\n    /**\n     * @param {?} cols\n     * @param {?} listLength\n     */\n    function MdGridTileTooWideError(cols, listLength) {\n        return _super.call(this, \"md-grid-list: tile with colspan \" + cols + \" is wider than grid with cols=\\\"\" + listLength + \"\\\".\") || this;\n    }\n    return MdGridTileTooWideError;\n}(MdError));\n/**\n * Exception thrown when an invalid ratio is passed in as a rowHeight\n * \\@docs-private\n */\nvar MdGridListBadRatioError = (function (_super) {\n    __extends(MdGridListBadRatioError, _super);\n    /**\n     * @param {?} value\n     */\n    function MdGridListBadRatioError(value) {\n        return _super.call(this, \"md-grid-list: invalid ratio given for row-height: \\\"\" + value + \"\\\"\") || this;\n    }\n    return MdGridListBadRatioError;\n}(MdError));\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nvar TileCoordinator = (function () {\n    /**\n     * @param {?} numColumns\n     * @param {?} tiles\n     */\n    function TileCoordinator(numColumns, tiles) {\n        var _this = this;\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(function (tile) { return _this._trackTile(tile); });\n    }\n    Object.defineProperty(TileCoordinator.prototype, \"rowCount\", {\n        /**\n         * Gets the total number of rows occupied by tiles\n         * @return {?}\n         */\n        get: function () { return this.rowIndex + 1; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileCoordinator.prototype, \"rowspan\", {\n        /**\n         * Gets the total span of rows occupied by tiles.\n         * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ lastRowMax = Math.max.apply(Math, this.tracker);\n            // if any of the tiles has a rowspan that pushes it beyond the total row count,\n            // add the difference to the rowcount\n            return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Calculates the row and col position of a tile.\n     * @param {?} tile\n     * @return {?}\n     */\n    TileCoordinator.prototype._trackTile = function (tile) {\n        // Find a gap large enough for this tile.\n        var /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    };\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @param {?} tileCols\n     * @return {?}\n     */\n    TileCoordinator.prototype._findMatchingGap = function (tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw new MdGridTileTooWideError(tileCols, this.tracker.length);\n        }\n        // Start index is inclusive, end index is exclusive.\n        var /** @type {?} */ gapStartIndex = -1;\n        var /** @type {?} */ gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n        } while (gapEndIndex - gapStartIndex < tileCols);\n        return gapStartIndex;\n    };\n    /**\n     * Move \"down\" to the next row.\n     * @return {?}\n     */\n    TileCoordinator.prototype._nextRow = function () {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (var /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    };\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    TileCoordinator.prototype._findGapEndIndex = function (gapStartIndex) {\n        for (var /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    };\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    TileCoordinator.prototype._markTilePosition = function (start, tile) {\n        for (var /** @type {?} */ i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    };\n    return TileCoordinator;\n}());\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nvar TilePosition = (function () {\n    /**\n     * @param {?} row\n     * @param {?} col\n     */\n    function TilePosition(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n    return TilePosition;\n}());\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n */\nvar TileStyler = (function () {\n    function TileStyler() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    TileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    };\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    TileStyler.prototype.getBaseTileSize = function (sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return \"(\" + sizePercent + \"% - ( \" + this._gutterSize + \" * \" + gutterFraction + \" ))\";\n    };\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    TileStyler.prototype.getTilePosition = function (baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return calc(\"(\" + baseSize + \" + \" + this._gutterSize + \") * \" + offset);\n    };\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    TileStyler.prototype.getTileSize = function (baseSize, span) {\n        return \"(\" + baseSize + \" * \" + span + \") + (\" + (span - 1) + \" * \" + this._gutterSize + \")\";\n    };\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    TileStyler.prototype.setStyle = function (tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        var /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        var /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    };\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    TileStyler.prototype.setColStyles = function (tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        var /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        var /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    };\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    TileStyler.prototype.getGutterSpan = function () {\n        return this._gutterSize + \" * (\" + this._rowspan + \" - 1)\";\n    };\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    TileStyler.prototype.getTileSpan = function (tileHeight) {\n        return this._rowspan + \" * \" + this.getTileSize(tileHeight, 1);\n    };\n    /**\n     * Sets the vertical placement of the tile in the list.\n     * This method will be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    TileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) { };\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method will be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    TileStyler.prototype.getComputedHeight = function () { return null; };\n    return TileStyler;\n}());\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nvar FixedTileStyler = (function (_super) {\n    __extends(FixedTileStyler, _super);\n    /**\n     * @param {?} fixedRowHeight\n     */\n    function FixedTileStyler(fixedRowHeight) {\n        var _this = _super.call(this) || this;\n        _this.fixedRowHeight = fixedRowHeight;\n        return _this;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    FixedTileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {\n        _super.prototype.init.call(this, gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n    };\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    FixedTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    };\n    /**\n     * @return {?}\n     */\n    FixedTileStyler.prototype.getComputedHeight = function () {\n        return [\n            'height', calc(this.getTileSpan(this.fixedRowHeight) + \" + \" + this.getGutterSpan())\n        ];\n    };\n    return FixedTileStyler;\n}(TileStyler));\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nvar RatioTileStyler = (function (_super) {\n    __extends(RatioTileStyler, _super);\n    /**\n     * @param {?} value\n     */\n    function RatioTileStyler(value) {\n        var _this = _super.call(this) || this;\n        _this._parseRatio(value);\n        return _this;\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    RatioTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {\n        var /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use paddingTop and marginTop to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    };\n    /**\n     * @return {?}\n     */\n    RatioTileStyler.prototype.getComputedHeight = function () {\n        return [\n            'paddingBottom', calc(this.getTileSpan(this.baseTileHeight) + \" + \" + this.getGutterSpan())\n        ];\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RatioTileStyler.prototype._parseRatio = function (value) {\n        var /** @type {?} */ ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw new MdGridListBadRatioError(value);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    };\n    return RatioTileStyler;\n}(TileStyler));\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * \\@docs-private\n */\nvar FitTileStyler = (function (_super) {\n    __extends(FitTileStyler, _super);\n    function FitTileStyler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    FitTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {\n        // Percent of the available vertical space that one row takes up.\n        var /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        var /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        var /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    };\n    return FitTileStyler;\n}(TileStyler));\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) { return \"calc(\" + exp + \")\"; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nvar MD_FIT_MODE = 'fit';\nvar MdGridList = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    function MdGridList(_renderer, _element, _dir) {\n        this._renderer = _renderer;\n        this._element = _element;\n        this._dir = _dir;\n        this._gutter = '1px';\n    }\n    Object.defineProperty(MdGridList.prototype, \"cols\", {\n        /**\n         * Amount of columns in the grid list.\n         * @return {?}\n         */\n        get: function () { return this._cols; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._cols = coerceToNumber(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdGridList.prototype, \"gutterSize\", {\n        /**\n         * Size of the grid list's gutter in pixels.\n         * @return {?}\n         */\n        get: function () { return this._gutter; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._gutter = coerceToString(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdGridList.prototype, \"rowHeight\", {\n        /**\n         * Set internal representation of row height from the user-provided value.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._rowHeight = coerceToString(value);\n            this._setTileStyler();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdGridList.prototype.ngOnInit = function () {\n        this._checkCols();\n        this._checkRowHeight();\n    };\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    MdGridList.prototype.ngAfterContentChecked = function () {\n        this._layoutTiles();\n    };\n    /**\n     * Throw a friendly error if cols property is missing\n     * @return {?}\n     */\n    MdGridList.prototype._checkCols = function () {\n        if (!this.cols) {\n            throw new MdGridListColsError();\n        }\n    };\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @return {?}\n     */\n    MdGridList.prototype._checkRowHeight = function () {\n        if (!this._rowHeight) {\n            this._tileStyler = new RatioTileStyler('1:1');\n        }\n    };\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @return {?}\n     */\n    MdGridList.prototype._setTileStyler = function () {\n        if (this._rowHeight === MD_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(this._rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(this._rowHeight);\n        }\n    };\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @return {?}\n     */\n    MdGridList.prototype._layoutTiles = function () {\n        var _this = this;\n        var /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n        var /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        this._tiles.forEach(function (tile, index) {\n            var /** @type {?} */ pos = tracker.positions[index];\n            _this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    };\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    MdGridList.prototype._setListStyle = function (style$$1) {\n        if (style$$1) {\n            this._renderer.setElementStyle(this._element.nativeElement, style$$1[0], style$$1[1]);\n        }\n    };\n    return MdGridList;\n}());\nMdGridList.decorators = [\n    { type: Component, args: [{ selector: 'md-grid-list, mat-grid-list',\n                template: \"<div> <ng-content></ng-content> </div>\",\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{display:flex;position:absolute;align-items:center;justify-content:center;height:100%;top:0;right:0;bottom:0;left:0;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;font-size:16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer .mat-line,.mat-grid-tile .mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile .mat-grid-tile-footer .mat-line:nth-child(n+2),.mat-grid-tile .mat-grid-tile-header .mat-line:nth-child(n+2){font-size:12px}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none} /*# sourceMappingURL=grid-list.css.map */ \"],\n                host: {\n                    'role': 'list',\n                    '[class.mat-grid-list]': 'true',\n                },\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridList.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n    { type: Dir, decorators: [{ type: Optional },] },\n]; };\nMdGridList.propDecorators = {\n    '_tiles': [{ type: ContentChildren, args: [MdGridTile,] },],\n    'cols': [{ type: Input },],\n    'gutterSize': [{ type: Input },],\n    'rowHeight': [{ type: Input },],\n};\nvar MdGridListModule = (function () {\n    function MdGridListModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdGridListModule.forRoot = function () {\n        return {\n            ngModule: MdGridListModule,\n            providers: []\n        };\n    };\n    return MdGridListModule;\n}());\nMdGridListModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MdLineModule, CompatibilityModule],\n                exports: [\n                    MdGridList,\n                    MdGridTile,\n                    MdGridTileText,\n                    MdLineModule,\n                    CompatibilityModule,\n                    MdGridTileHeaderCssMatStyler,\n                    MdGridTileFooterCssMatStyler,\n                    MdGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MdGridList,\n                    MdGridTile,\n                    MdGridTileText,\n                    MdGridTileHeaderCssMatStyler,\n                    MdGridTileFooterCssMatStyler,\n                    MdGridAvatarCssMatStyler\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdGridListModule.ctorParameters = function () { return []; };\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardContent = (function () {\n    function MdCardContent() {\n    }\n    return MdCardContent;\n}());\nMdCardContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-card-content, mat-card-content',\n                host: {\n                    '[class.mat-card-content]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardContent.ctorParameters = function () { return []; };\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardTitle = (function () {\n    function MdCardTitle() {\n    }\n    return MdCardTitle;\n}());\nMdCardTitle.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-card-title, mat-card-title',\n                host: {\n                    '[class.mat-card-title]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardTitle.ctorParameters = function () { return []; };\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardSubtitle = (function () {\n    function MdCardSubtitle() {\n    }\n    return MdCardSubtitle;\n}());\nMdCardSubtitle.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-card-subtitle, mat-card-subtitle',\n                host: {\n                    '[class.mat-card-subtitle]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardSubtitle.ctorParameters = function () { return []; };\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardActions = (function () {\n    function MdCardActions() {\n    }\n    return MdCardActions;\n}());\nMdCardActions.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-card-actions, mat-card-actions',\n                host: {\n                    '[class.mat-card-actions]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardActions.ctorParameters = function () { return []; };\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardFooter = (function () {\n    function MdCardFooter() {\n    }\n    return MdCardFooter;\n}());\nMdCardFooter.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-card-footer, mat-card-footer',\n                host: {\n                    '[class.mat-card-footer]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardFooter.ctorParameters = function () { return []; };\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardSmImage = (function () {\n    function MdCardSmImage() {\n    }\n    return MdCardSmImage;\n}());\nMdCardSmImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-card-sm-image], [mat-card-sm-image]',\n                host: {\n                    '[class.mat-card-sm-image]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardSmImage.ctorParameters = function () { return []; };\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardMdImage = (function () {\n    function MdCardMdImage() {\n    }\n    return MdCardMdImage;\n}());\nMdCardMdImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-card-md-image], [mat-card-md-image]',\n                host: {\n                    '[class.mat-card-md-image]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardMdImage.ctorParameters = function () { return []; };\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardLgImage = (function () {\n    function MdCardLgImage() {\n    }\n    return MdCardLgImage;\n}());\nMdCardLgImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-card-lg-image], [mat-card-lg-image]',\n                host: {\n                    'class.mat-card-lg-image': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardLgImage.ctorParameters = function () { return []; };\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardImage = (function () {\n    function MdCardImage() {\n    }\n    return MdCardImage;\n}());\nMdCardImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-card-image], [mat-card-image]',\n                host: {\n                    '[class.mat-card-image]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardImage.ctorParameters = function () { return []; };\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardXlImage = (function () {\n    function MdCardXlImage() {\n    }\n    return MdCardXlImage;\n}());\nMdCardXlImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-card-xl-image], [mat-card-xl-image]',\n                host: {\n                    '[class.mat-card-xl-image]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardXlImage.ctorParameters = function () { return []; };\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardAvatar = (function () {\n    function MdCardAvatar() {\n    }\n    return MdCardAvatar;\n}());\nMdCardAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-card-avatar], [mat-card-avatar]',\n                host: {\n                    '[class.mat-card-avatar]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardAvatar.ctorParameters = function () { return []; };\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nvar MdCard = (function () {\n    function MdCard() {\n    }\n    return MdCard;\n}());\nMdCard.decorators = [\n    { type: Component, args: [{ selector: 'md-card, mat-card',\n                template: \"<ng-content></ng-content> \",\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);will-change:box-shadow;display:block;position:relative;padding:24px;border-radius:2px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif}.mat-card:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-card{outline:solid 1px}}.mat-card-flat{box-shadow:none}.mat-card-actions,.mat-card-content,.mat-card-subtitle,.mat-card-title{display:block;margin-bottom:16px}.mat-card-title{font-size:24px;font-weight:400}.mat-card-subtitle{font-size:14px}.mat-card-content{font-size:14px}.mat-card-actions{margin-left:-16px;margin-right:-16px;padding:8px 0}.mat-card-actions[align=end]{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 48px);margin:0 -24px 16px -24px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-footer{position:absolute;width:100%;min-height:5px;bottom:0;left:0}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button{margin:0 4px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header-text{margin:0 8px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0}.mat-card-header .mat-card-title{font-size:14px}.mat-card-lg-image,.mat-card-md-image,.mat-card-sm-image{margin:-8px 0}.mat-card-title-group{display:flex;justify-content:space-between;margin:0 -8px}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}@media (max-width:600px){.mat-card{padding:24px 16px}.mat-card-actions{margin-left:-8px;margin-right:-8px}.mat-card-image{width:calc(100% + 32px);margin:16px -16px}.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}.mat-card-header{margin:-8px 0 0 0}}.mat-card-content>:first-child,.mat-card>:first-child{margin-top:0}.mat-card-content>:last-child,.mat-card>:last-child{margin-bottom:0}.mat-card-image:first-child{margin-top:-24px}.mat-card>.mat-card-actions:last-child{margin-bottom:-16px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child{margin-left:0;margin-right:0}.mat-card-subtitle:not(:first-child),.mat-card-title:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px} /*# sourceMappingURL=card.css.map */ \"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    '[class.mat-card]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCard.ctorParameters = function () { return []; };\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nvar MdCardHeader = (function () {\n    function MdCardHeader() {\n    }\n    return MdCardHeader;\n}());\nMdCardHeader.decorators = [\n    { type: Component, args: [{ selector: 'md-card-header, mat-card-header',\n                template: \"<ng-content select=\\\"[md-card-avatar], [mat-card-avatar]\\\"></ng-content> <div class=\\\"mat-card-header-text\\\"> <ng-content select=\\\"md-card-title, mat-card-title, md-card-subtitle, mat-card-subtitle\\\"></ng-content> </div> <ng-content></ng-content> \",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    '[class.mat-card-header]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardHeader.ctorParameters = function () { return []; };\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nvar MdCardTitleGroup = (function () {\n    function MdCardTitleGroup() {\n    }\n    return MdCardTitleGroup;\n}());\nMdCardTitleGroup.decorators = [\n    { type: Component, args: [{ selector: 'md-card-title-group, mat-card-title-group',\n                template: \"<div> <ng-content select=\\\"md-card-title, mat-card-title, md-card-subtitle, mat-card-subtitle\\\"></ng-content> </div> <ng-content select=\\\"img\\\"></ng-content> <ng-content></ng-content> \",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    '[class.mat-card-title-group]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardTitleGroup.ctorParameters = function () { return []; };\nvar MdCardModule = (function () {\n    function MdCardModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdCardModule.forRoot = function () {\n        return {\n            ngModule: MdCardModule,\n            providers: []\n        };\n    };\n    return MdCardModule;\n}());\nMdCardModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CompatibilityModule],\n                exports: [\n                    MdCard,\n                    MdCardHeader,\n                    MdCardTitleGroup,\n                    MdCardContent,\n                    MdCardTitle,\n                    MdCardSubtitle,\n                    MdCardActions,\n                    MdCardFooter,\n                    MdCardSmImage,\n                    MdCardMdImage,\n                    MdCardLgImage,\n                    MdCardImage,\n                    MdCardXlImage,\n                    MdCardAvatar,\n                    CompatibilityModule,\n                ],\n                declarations: [\n                    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n                    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\n                    MdCardXlImage, MdCardAvatar,\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdCardModule.ctorParameters = function () { return []; };\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nvar MdChip = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdChip(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /** Whether or not the chip is disabled. Disabled chips cannot be focused. */\n        this._disabled = null;\n        /** Whether or not the chip is selected. */\n        this._selected = false;\n        /** The palette color of selected chips. */\n        this._color = 'primary';\n        /** Emitted when the chip is focused. */\n        this.onFocus = new EventEmitter();\n        /** Emitted when the chip is selected. */\n        this.select = new EventEmitter();\n        /** Emitted when the chip is deselected. */\n        this.deselect = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroy = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    MdChip.prototype.ngOnInit = function () {\n        this._addDefaultCSSClass();\n        this._updateColor(this._color);\n    };\n    /**\n     * @return {?}\n     */\n    MdChip.prototype.ngOnDestroy = function () {\n        this.destroy.emit({ chip: this });\n    };\n    Object.defineProperty(MdChip.prototype, \"disabled\", {\n        /**\n         * Whether or not the chip is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled;\n        },\n        /**\n         * Sets the disabled state of the chip.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value) ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdChip.prototype, \"_isAriaDisabled\", {\n        /**\n         * A String representation of the current disabled state.\n         * @return {?}\n         */\n        get: function () {\n            return String(coerceBooleanProperty(this.disabled));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdChip.prototype, \"selected\", {\n        /**\n         * Whether or not this chip is selected.\n         * @return {?}\n         */\n        get: function () {\n            return this._selected;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._selected = coerceBooleanProperty(value);\n            if (this._selected) {\n                this.select.emit({ chip: this });\n            }\n            else {\n                this.deselect.emit({ chip: this });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Toggles the current selected state of this chip.\n     * @return {?} Whether the chip is selected.\n     */\n    MdChip.prototype.toggleSelected = function () {\n        this.selected = !this.selected;\n        return this.selected;\n    };\n    Object.defineProperty(MdChip.prototype, \"color\", {\n        /**\n         * The color of the chip. Can be `primary`, `accent`, or `warn`.\n         * @return {?}\n         */\n        get: function () {\n            return this._color;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._updateColor(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    MdChip.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');\n        this.onFocus.emit({ chip: this });\n    };\n    /**\n     * Ensures events fire properly upon click.\n     * @param {?} event\n     * @return {?}\n     */\n    MdChip.prototype._handleClick = function (event) {\n        // Check disabled\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else {\n            this.focus();\n        }\n    };\n    /**\n     * Initializes the appropriate CSS classes based on the chip type (basic or standard).\n     * @return {?}\n     */\n    MdChip.prototype._addDefaultCSSClass = function () {\n        var /** @type {?} */ el = this._elementRef.nativeElement;\n        // Always add the `mat-chip` class\n        el.classList.add('mat-chip');\n        // If we are a basic chip, also add the `mat-basic-chip` class for :not() targeting\n        if (el.nodeName.toLowerCase() == 'mat-basic-chip' || el.hasAttribute('mat-basic-chip') ||\n            el.nodeName.toLowerCase() == 'md-basic-chip' || el.hasAttribute('md-basic-chip')) {\n            el.classList.add('mat-basic-chip');\n        }\n    };\n    /**\n     * Updates the private _color variable and the native element.\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdChip.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * Sets the mat-color on the native element.\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdChip.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this._renderer.setElementClass(this._elementRef.nativeElement, \"mat-\" + color, isAdd);\n        }\n    };\n    return MdChip;\n}());\nMdChip.decorators = [\n    { type: Component, args: [{\n                selector: \"md-basic-chip, [md-basic-chip], md-chip, [md-chip],\\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\",\n                template: \"<ng-content></ng-content>\",\n                host: {\n                    '[class.mat-chip]': 'true',\n                    'tabindex': '-1',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[attr.disabled]': 'disabled',\n                    '[attr.aria-disabled]': '_isAriaDisabled',\n                    '(click)': '_handleClick($event)'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdChip.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n]; };\nMdChip.propDecorators = {\n    'select': [{ type: Output },],\n    'deselect': [{ type: Output },],\n    'destroy': [{ type: Output },],\n    'disabled': [{ type: Input },],\n    'selected': [{ type: Input },],\n    'color': [{ type: Input },],\n};\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n *\n * Example:\n *\n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\nvar MdChipList = (function () {\n    /**\n     * @param {?} _elementRef\n     */\n    function MdChipList(_elementRef) {\n        this._elementRef = _elementRef;\n        this._subscribed = new WeakMap();\n        /** Whether or not the chip is selectable. */\n        this._selectable = true;\n    }\n    /**\n     * @return {?}\n     */\n    MdChipList.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._keyManager = new FocusKeyManager(this.chips).withWrap();\n        // Go ahead and subscribe all of the initial chips\n        this._subscribeChips(this.chips);\n        // When the list changes, re-subscribe\n        this.chips.changes.subscribe(function (chips) {\n            _this._subscribeChips(chips);\n        });\n    };\n    Object.defineProperty(MdChipList.prototype, \"selectable\", {\n        /**\n         * Whether or not this chip is selectable. When a chip is not selectable,\n         * it's selected state is always ignored.\n         * @return {?}\n         */\n        get: function () {\n            return this._selectable;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._selectable = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Programmatically focus the chip list. This in turn focuses the first\n     * non-disabled chip in this chip list.\n     * @return {?}\n     */\n    MdChipList.prototype.focus = function () {\n        // TODO: ARIA says this should focus the first `selected` chip.\n        this._keyManager.setFirstItemActive();\n    };\n    /**\n     * Passes relevant key presses to our key manager.\n     * @param {?} event\n     * @return {?}\n     */\n    MdChipList.prototype._keydown = function (event) {\n        var /** @type {?} */ target = (event.target);\n        // If they are on a chip, check for space/left/right, otherwise pass to our key manager\n        if (target && target.classList.contains('mat-chip')) {\n            switch (event.keyCode) {\n                case SPACE:\n                    // If we are selectable, toggle the focused chip\n                    if (this.selectable) {\n                        this._toggleSelectOnFocusedChip();\n                    }\n                    // Always prevent space from scrolling the page since the list has focus\n                    event.preventDefault();\n                    break;\n                case LEFT_ARROW:\n                    this._keyManager.setPreviousItemActive();\n                    event.preventDefault();\n                    break;\n                case RIGHT_ARROW:\n                    this._keyManager.setNextItemActive();\n                    event.preventDefault();\n                    break;\n                default:\n                    this._keyManager.onKeydown(event);\n            }\n        }\n    };\n    /**\n     * Toggles the selected state of the currently focused chip.\n     * @return {?}\n     */\n    MdChipList.prototype._toggleSelectOnFocusedChip = function () {\n        // Allow disabling of chip selection\n        if (!this.selectable) {\n            return;\n        }\n        var /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n        if (this._isValidIndex(focusedIndex)) {\n            var /** @type {?} */ focusedChip = this.chips.toArray()[focusedIndex];\n            if (focusedChip) {\n                focusedChip.toggleSelected();\n            }\n        }\n    };\n    /**\n     * Iterate through the list of chips and add them to our list of\n     * subscribed chips.\n     *\n     * @param {?} chips The list of chips to be subscribed.\n     * @return {?}\n     */\n    MdChipList.prototype._subscribeChips = function (chips) {\n        var _this = this;\n        chips.forEach(function (chip) { return _this._addChip(chip); });\n    };\n    /**\n     * Add a specific chip to our subscribed list. If the chip has\n     * already been subscribed, this ensures it is only subscribed\n     * once.\n     *\n     * @param {?} chip The chip to be subscribed (or checked for existing\n     * subscription).\n     * @return {?}\n     */\n    MdChipList.prototype._addChip = function (chip) {\n        var _this = this;\n        // If we've already been subscribed to a parent, do nothing\n        if (this._subscribed.has(chip)) {\n            return;\n        }\n        // Watch for focus events outside of the keyboard navigation\n        chip.onFocus.subscribe(function () {\n            var /** @type {?} */ chipIndex = _this.chips.toArray().indexOf(chip);\n            if (_this._isValidIndex(chipIndex)) {\n                _this._keyManager.updateActiveItemIndex(chipIndex);\n            }\n        });\n        // On destroy, remove the item from our list, and check focus\n        chip.destroy.subscribe(function () {\n            var /** @type {?} */ chipIndex = _this.chips.toArray().indexOf(chip);\n            if (_this._isValidIndex(chipIndex)) {\n                // Check whether the chip is the last item\n                if (chipIndex < _this.chips.length - 1) {\n                    _this._keyManager.setActiveItem(chipIndex);\n                }\n                else if (chipIndex - 1 >= 0) {\n                    _this._keyManager.setActiveItem(chipIndex - 1);\n                }\n            }\n            _this._subscribed.delete(chip);\n            chip.destroy.unsubscribe();\n        });\n        this._subscribed.set(chip, true);\n    };\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    MdChipList.prototype._isValidIndex = function (index) {\n        return index >= 0 && index < this.chips.length;\n    };\n    return MdChipList;\n}());\nMdChipList.decorators = [\n    { type: Component, args: [{ selector: 'md-chip-list, mat-chip-list',\n                template: \"<div class=\\\"mat-chip-list-wrapper\\\"><ng-content></ng-content></div>\",\n                host: {\n                    // Properties\n                    'tabindex': '0',\n                    'role': 'listbox',\n                    '[class.mat-chip-list]': 'true',\n                    // Events\n                    '(focus)': 'focus()',\n                    '(keydown)': '_keydown($event)'\n                },\n                queries: {\n                    chips: new ContentChildren(MdChip)\n                },\n                styles: [\".mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:flex-start}.mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip){margin:0 3px 0 3px}.mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):first-child{margin-left:0;margin-right:3px}[dir=rtl] .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):first-child{margin-left:3px;margin-right:0}.mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):last-child{margin-left:3px;margin-right:0}[dir=rtl] .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):last-child{margin-left:0;margin-right:3px}.mat-chip:not(.mat-basic-chip){display:inline-block;padding:8px 12px 8px 12px;border-radius:24px;font-size:13px;line-height:16px}.mat-chip-list-stacked .mat-chip-list-wrapper{display:block}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip){display:block;margin:0;margin-bottom:8px}[dir=rtl] .mat-chip-list-stacked .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip){margin:0;margin-bottom:8px}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):last-child,[dir=rtl] .mat-chip-list-stacked .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):last-child{margin-bottom:0} /*# sourceMappingURL=chips.css.map */ \"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/**\n * @nocollapse\n */\nMdChipList.ctorParameters = function () { return [\n    { type: ElementRef, },\n]; };\nMdChipList.propDecorators = {\n    'selectable': [{ type: Input },],\n};\nvar MdChipsModule = (function () {\n    function MdChipsModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdChipsModule.forRoot = function () {\n        return {\n            ngModule: MdChipsModule,\n            providers: []\n        };\n    };\n    return MdChipsModule;\n}());\nMdChipsModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [],\n                exports: [MdChipList, MdChip],\n                declarations: [MdChipList, MdChip]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdChipsModule.ctorParameters = function () { return []; };\n/**\n * Exception thrown when attempting to load an icon with a name that cannot be found.\n * \\@docs-private\n */\nvar MdIconNameNotFoundError = (function (_super) {\n    __extends(MdIconNameNotFoundError, _super);\n    /**\n     * @param {?} iconName\n     */\n    function MdIconNameNotFoundError(iconName) {\n        return _super.call(this, \"Unable to find icon with the name \\\"\" + iconName + \"\\\"\") || this;\n    }\n    return MdIconNameNotFoundError;\n}(MdError));\n/**\n * Exception thrown when attempting to load SVG content that does not contain the expected\n * <svg> tag.\n * \\@docs-private\n */\nvar MdIconSvgTagNotFoundError = (function (_super) {\n    __extends(MdIconSvgTagNotFoundError, _super);\n    function MdIconSvgTagNotFoundError() {\n        return _super.call(this, '<svg> tag not found') || this;\n    }\n    return MdIconSvgTagNotFoundError;\n}(MdError));\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nvar SvgIconConfig = (function () {\n    /**\n     * @param {?} url\n     */\n    function SvgIconConfig(url) {\n        this.url = url;\n        this.svgElement = null;\n    }\n    return SvgIconConfig;\n}());\n/** Returns the cache key to use for an icon namespace and name. */\nvar iconKey = function (namespace, name) { return namespace + ':' + name; };\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nvar MdIconRegistry = (function () {\n    /**\n     * @param {?} _http\n     * @param {?} _sanitizer\n     */\n    function MdIconRegistry(_http, _sanitizer) {\n        this._http = _http;\n        this._sanitizer = _sanitizer;\n        this._svgIconConfigs = new Map();\n        this._iconSetConfigs = new Map();\n        this._cachedIconsByUrl = new Map();\n        this._inProgressUrlFetches = new Map();\n        this._fontCssClassesByAlias = new Map();\n        this._defaultFontSetClass = 'material-icons';\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n    MdIconRegistry.prototype.addSvgIcon = function (iconName, url) {\n        return this.addSvgIconInNamespace('', iconName, url);\n    };\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n    MdIconRegistry.prototype.addSvgIconInNamespace = function (namespace, iconName, url) {\n        var /** @type {?} */ key = iconKey(namespace, iconName);\n        this._svgIconConfigs.set(key, new SvgIconConfig(url));\n        return this;\n    };\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param {?} url\n     * @return {?}\n     */\n    MdIconRegistry.prototype.addSvgIconSet = function (url) {\n        return this.addSvgIconSetInNamespace('', url);\n    };\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @return {?}\n     */\n    MdIconRegistry.prototype.addSvgIconSetInNamespace = function (namespace, url) {\n        var /** @type {?} */ config = new SvgIconConfig(url);\n        if (this._iconSetConfigs.has(namespace)) {\n            this._iconSetConfigs.get(namespace).push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    };\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the <md-icon> element.\n     *\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {?}\n     */\n    MdIconRegistry.prototype.registerFontClassAlias = function (alias, className) {\n        if (className === void 0) { className = alias; }\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    };\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n    MdIconRegistry.prototype.classNameForFontAlias = function (alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    };\n    /**\n     * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param {?} className\n     * @return {?}\n     */\n    MdIconRegistry.prototype.setDefaultFontSetClass = function (className) {\n        this._defaultFontSetClass = className;\n        return this;\n    };\n    /**\n     * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n    MdIconRegistry.prototype.getDefaultFontSetClass = function () {\n        return this._defaultFontSetClass;\n    };\n    /**\n     * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n    MdIconRegistry.prototype.getSvgIconFromUrl = function (safeUrl) {\n        var _this = this;\n        var /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (this._cachedIconsByUrl.has(url)) {\n            return Observable.of(cloneSvg(this._cachedIconsByUrl.get(url)));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(url))\n            .do(function (svg) { return _this._cachedIconsByUrl.set(url, svg); })\n            .map(function (svg) { return cloneSvg(svg); });\n    };\n    /**\n     * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an MdIconNameNotFoundError.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n    MdIconRegistry.prototype.getNamedSvgIcon = function (name, namespace) {\n        if (namespace === void 0) { namespace = ''; }\n        // Return (copy of) cached icon if possible.\n        var /** @type {?} */ key = iconKey(namespace, name);\n        if (this._svgIconConfigs.has(key)) {\n            return this._getSvgFromConfig(this._svgIconConfigs.get(key));\n        }\n        // See if we have any icon sets registered for the namespace.\n        var /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return Observable.throw(new MdIconNameNotFoundError(key));\n    };\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @param {?} config\n     * @return {?}\n     */\n    MdIconRegistry.prototype._getSvgFromConfig = function (config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return Observable.of(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config)\n                .do(function (svg) { return config.svgElement = svg; })\n                .map(function (svg) { return cloneSvg(svg); });\n        }\n    };\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * MdIconNameNotFoundError if no icon with the specified name can be found.\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    MdIconRegistry.prototype._getSvgFromIconSetConfigs = function (name, iconSetConfigs) {\n        var _this = this;\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        var /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return Observable.of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        var /** @type {?} */ iconSetFetchRequests = iconSetConfigs\n            .filter(function (iconSetConfig) { return !iconSetConfig.svgElement; })\n            .map(function (iconSetConfig) { return _this._loadSvgIconSetFromConfig(iconSetConfig)\n            .catch(function (err, caught) {\n            var /** @type {?} */ url = _this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(\"Loading icon set URL: \" + url + \" failed: \" + err);\n            return Observable.of(null);\n        })\n            .do(function (svg) {\n            // Cache SVG element.\n            if (svg) {\n                iconSetConfig.svgElement = svg;\n            }\n        }); });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return Observable.forkJoin(iconSetFetchRequests)\n            .map(function (ignoredResults) {\n            var /** @type {?} */ foundIcon = _this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw new MdIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        });\n    };\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    MdIconRegistry.prototype._extractIconWithNameFromAnySet = function (iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (var /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n            var /** @type {?} */ config = iconSetConfigs[i];\n            if (config.svgElement) {\n                var /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n    MdIconRegistry.prototype._loadSvgIconFromConfig = function (config) {\n        var _this = this;\n        return this._fetchUrl(config.url)\n            .map(function (svgText) { return _this._createSvgElementForSingleIcon(svgText); });\n    };\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n    MdIconRegistry.prototype._loadSvgIconSetFromConfig = function (config) {\n        var _this = this;\n        // TODO: Document that icons should only be loaded from trusted sources.\n        return this._fetchUrl(config.url)\n            .map(function (svgText) { return _this._svgElementFromString(svgText); });\n    };\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @param {?} responseText\n     * @return {?}\n     */\n    MdIconRegistry.prototype._createSvgElementForSingleIcon = function (responseText) {\n        var /** @type {?} */ svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg);\n        return svg;\n    };\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @return {?}\n     */\n    MdIconRegistry.prototype._extractSvgIconFromSet = function (iconSet, iconName) {\n        var /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n        if (!iconNode) {\n            return null;\n        }\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconNode.tagName.toLowerCase() == 'svg') {\n            return this._setSvgAttributes(/** @type {?} */ (iconNode.cloneNode(true)));\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        var /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconNode.cloneNode(true));\n        return this._setSvgAttributes(svg);\n    };\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @param {?} str\n     * @return {?}\n     */\n    MdIconRegistry.prototype._svgElementFromString = function (str) {\n        // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n        // creating an element from an HTML string.\n        var /** @type {?} */ div = document.createElement('DIV');\n        div.innerHTML = str;\n        var /** @type {?} */ svg = (div.querySelector('svg'));\n        if (!svg) {\n            throw new MdIconSvgTagNotFoundError();\n        }\n        return svg;\n    };\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @param {?} svg\n     * @return {?}\n     */\n    MdIconRegistry.prototype._setSvgAttributes = function (svg) {\n        if (!svg.getAttribute('xmlns')) {\n            svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        }\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        return svg;\n    };\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @param {?} safeUrl\n     * @return {?}\n     */\n    MdIconRegistry.prototype._fetchUrl = function (safeUrl) {\n        var _this = this;\n        var /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        if (this._inProgressUrlFetches.has(url)) {\n            return this._inProgressUrlFetches.get(url);\n        }\n        // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n        // Observable. Figure out why and fix it.\n        var /** @type {?} */ req = (this._http.get(url)\n            .map(function (response) { return response.text(); })\n            .finally(function () {\n            _this._inProgressUrlFetches.delete(url);\n        })\n            .share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    };\n    return MdIconRegistry;\n}());\nMdIconRegistry.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nMdIconRegistry.ctorParameters = function () { return [\n    { type: Http, },\n    { type: DomSanitizer, },\n]; };\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n    return (svg.cloneNode(true));\n}\n/**\n * Exception thrown when an invalid icon name is passed to an md-icon component.\n */\nvar MdIconInvalidNameError = (function (_super) {\n    __extends(MdIconInvalidNameError, _super);\n    /**\n     * @param {?} iconName\n     */\n    function MdIconInvalidNameError(iconName) {\n        return _super.call(this, \"Invalid icon name: \\\"\" + iconName + \"\\\"\") || this;\n    }\n    return MdIconInvalidNameError;\n}(MdError));\n/**\n * Component to display an icon. It can be used in the following ways:\n * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined\n *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.\n *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its\n *   server must be configured to allow cross-domain requests.\n *   Example:\n *     <md-icon svgSrc=\"assets/arrow.svg\"></md-icon>\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nvar MdIcon = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _mdIconRegistry\n     */\n    function MdIcon(_elementRef, _renderer, _mdIconRegistry) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._mdIconRegistry = _mdIconRegistry;\n        /** Screenreader label for the icon. */\n        this.hostAriaLabel = '';\n    }\n    Object.defineProperty(MdIcon.prototype, \"color\", {\n        /**\n         * Color of the icon.\n         * @return {?}\n         */\n        get: function () { return this._color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._updateColor(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdIcon.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdIcon.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this._renderer.setElementClass(this._elementRef.nativeElement, \"mat-\" + color, isAdd);\n        }\n    };\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws a MdIconInvalidNameError if the name contains two or more ':' separators.\n     * Examples:\n     *   'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws MdIconInvalidNameError)\n     * @param {?} iconName\n     * @return {?}\n     */\n    MdIcon.prototype._splitIconName = function (iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        var /** @type {?} */ parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                // Use default namespace.\n                return ['', parts[0]];\n            case 2:\n                return (parts);\n            default:\n                throw new MdIconInvalidNameError(iconName);\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MdIcon.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        var /** @type {?} */ changedInputs = Object.keys(changes);\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {\n            if (this.svgIcon) {\n                var _a = this._splitIconName(this.svgIcon), namespace = _a[0], iconName = _a[1];\n                this._mdIconRegistry.getNamedSvgIcon(iconName, namespace).first().subscribe(function (svg) { return _this._setSvgElement(svg); }, function (err) { return console.log(\"Error retrieving icon: \" + err.message); });\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n        this._updateAriaLabel();\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype.ngOnInit = function () {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype.ngAfterViewChecked = function () {\n        // Update aria label here because it may depend on the projected text content.\n        // (e.g. <md-icon>home</md-icon> should use 'home').\n        this._updateAriaLabel();\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype._updateAriaLabel = function () {\n        var /** @type {?} */ ariaLabel = this._getAriaLabel();\n        if (ariaLabel && ariaLabel !== this._previousAriaLabel) {\n            this._previousAriaLabel = ariaLabel;\n            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-label', ariaLabel);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype._getAriaLabel = function () {\n        // If the parent provided an aria-label attribute value, use it as-is. Otherwise look for a\n        // reasonable value from the alt attribute, font icon name, SVG icon name, or (for ligatures)\n        // the text content of the directive.\n        var /** @type {?} */ label = this.hostAriaLabel ||\n            this.alt ||\n            this.fontIcon ||\n            this._splitIconName(this.svgIcon)[1];\n        if (label) {\n            return label;\n        }\n        // The \"content\" of an SVG icon is not a useful label.\n        if (this._usingFontIcon()) {\n            var /** @type {?} */ text = this._elementRef.nativeElement.textContent;\n            if (text) {\n                return text;\n            }\n        }\n        // TODO: Warn here in dev mode.\n        return null;\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype._usingFontIcon = function () {\n        return !this.svgIcon;\n    };\n    /**\n     * @param {?} svg\n     * @return {?}\n     */\n    MdIcon.prototype._setSvgElement = function (svg) {\n        var /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n        // Remove existing child nodes and add the new SVG element.\n        // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,\n        // but it fails in IE11: https://github.com/angular/angular/issues/6327\n        layoutElement.innerHTML = '';\n        this._renderer.projectNodes(layoutElement, [svg]);\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype._updateFontIconClasses = function () {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        var /** @type {?} */ elem = this._elementRef.nativeElement;\n        var /** @type {?} */ fontSetClass = this.fontSet ?\n            this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n            this._mdIconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                this._renderer.setElementClass(elem, this._previousFontSetClass, false);\n            }\n            if (fontSetClass) {\n                this._renderer.setElementClass(elem, fontSetClass, true);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                this._renderer.setElementClass(elem, this._previousFontIconClass, false);\n            }\n            if (this.fontIcon) {\n                this._renderer.setElementClass(elem, this.fontIcon, true);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    };\n    return MdIcon;\n}());\nMdIcon.decorators = [\n    { type: Component, args: [{ template: '<ng-content></ng-content>',\n                selector: 'md-icon, mat-icon',\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px} /*# sourceMappingURL=icon.css.map */ \"],\n                host: {\n                    'role': 'img',\n                    '[class.mat-icon]': 'true',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdIcon.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: MdIconRegistry, },\n]; };\nMdIcon.propDecorators = {\n    'svgIcon': [{ type: Input },],\n    'fontSet': [{ type: Input },],\n    'fontIcon': [{ type: Input },],\n    'alt': [{ type: Input },],\n    'hostAriaLabel': [{ type: Input, args: ['aria-label',] },],\n    'color': [{ type: Input },],\n};\n/**\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, http, sanitizer) {\n    return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\nvar ICON_REGISTRY_PROVIDER = {\n    // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MdIconRegistry,\n    deps: [[new Optional(), new SkipSelf(), MdIconRegistry], Http, DomSanitizer],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\nvar MdIconModule = (function () {\n    function MdIconModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdIconModule.forRoot = function () {\n        return {\n            ngModule: MdIconModule,\n            providers: [],\n        };\n    };\n    return MdIconModule;\n}());\nMdIconModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [HttpModule, CompatibilityModule],\n                exports: [MdIcon, CompatibilityModule],\n                declarations: [MdIcon],\n                providers: [ICON_REGISTRY_PROVIDER],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdIconModule.ctorParameters = function () { return []; };\n// TODO(josephperrott): Benchpress tests.\n/** A single degree in radians. */\nvar DEGREE_IN_RADIANS = Math.PI / 180;\n/** Duration of the indeterminate animation. */\nvar DURATION_INDETERMINATE = 667;\n/** Duration of the indeterminate animation. */\nvar DURATION_DETERMINATE = 225;\n/** Start animation value of the indeterminate animation */\nvar startIndeterminate = 3;\n/** End animation value of the indeterminate animation */\nvar endIndeterminate = 80;\n/* Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden. */\nvar MAX_ANGLE = 359.99 / 100;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdProgressSpinnerCssMatStyler = (function () {\n    function MdProgressSpinnerCssMatStyler() {\n    }\n    return MdProgressSpinnerCssMatStyler;\n}());\nMdProgressSpinnerCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-progress-spinner, mat-progress-spinner',\n                host: {\n                    '[class.mat-progress-spinner]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdProgressSpinnerCssMatStyler.ctorParameters = function () { return []; };\n/**\n * <md-progress-spinner> component.\n */\nvar MdProgressSpinner = (function () {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     */\n    function MdProgressSpinner(_ngZone, _elementRef, _renderer) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._lastAnimationId = 0;\n        this._mode = 'determinate';\n        this._color = 'primary';\n    }\n    Object.defineProperty(MdProgressSpinner.prototype, \"_ariaValueMin\", {\n        /**\n         * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n         * because voiceover does not report the progress indicator as indeterminate if the aria min\n         * and/or max value are number values.\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'determinate' ? 0 : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressSpinner.prototype, \"_ariaValueMax\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'determinate' ? 100 : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressSpinner.prototype, \"interdeterminateInterval\", {\n        /**\n         * \\@docs-private\n         * @return {?}\n         */\n        get: function () {\n            return this._interdeterminateInterval;\n        },\n        /**\n         * \\@docs-private\n         * @param {?} interval\n         * @return {?}\n         */\n        set: function (interval) {\n            clearInterval(this._interdeterminateInterval);\n            this._interdeterminateInterval = interval;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clean up any animations that were running.\n     * @return {?}\n     */\n    MdProgressSpinner.prototype.ngOnDestroy = function () {\n        this._cleanupIndeterminateAnimation();\n    };\n    Object.defineProperty(MdProgressSpinner.prototype, \"color\", {\n        /**\n         * The color of the progress-spinner. Can be primary, accent, or warn.\n         * @return {?}\n         */\n        get: function () { return this._color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._updateColor(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressSpinner.prototype, \"value\", {\n        /**\n         * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n         * @return {?}\n         */\n        get: function () {\n            if (this.mode == 'determinate') {\n                return this._value;\n            }\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            if (v != null && this.mode == 'determinate') {\n                var /** @type {?} */ newValue = clamp(v);\n                this._animateCircle(this.value || 0, newValue);\n                this._value = newValue;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressSpinner.prototype, \"mode\", {\n        /**\n         * Mode of the progress circle\n         *\n         * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n         * mode is bound to the host as the attribute host.\n         * @return {?}\n         */\n        get: function () {\n            return this._mode;\n        },\n        /**\n         * @param {?} mode\n         * @return {?}\n         */\n        set: function (mode) {\n            if (mode !== this._mode) {\n                if (mode === 'indeterminate') {\n                    this._startIndeterminateAnimation();\n                }\n                else {\n                    this._cleanupIndeterminateAnimation();\n                    this._animateCircle(0, this._value);\n                }\n                this._mode = mode;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Animates the circle from one percentage value to another.\n     *\n     * @param {?} animateFrom The percentage of the circle filled starting the animation.\n     * @param {?} animateTo The percentage of the circle filled ending the animation.\n     * @param {?=} ease The easing function to manage the pace of change in the animation.\n     * @param {?=} duration The length of time to show the animation, in milliseconds.\n     * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n     *    of the circle.\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._animateCircle = function (animateFrom, animateTo, ease, duration, rotation) {\n        var _this = this;\n        if (ease === void 0) { ease = linearEase; }\n        if (duration === void 0) { duration = DURATION_DETERMINATE; }\n        if (rotation === void 0) { rotation = 0; }\n        var /** @type {?} */ id = ++this._lastAnimationId;\n        var /** @type {?} */ startTime = Date.now();\n        var /** @type {?} */ changeInValue = animateTo - animateFrom;\n        // No need to animate it if the values are the same\n        if (animateTo === animateFrom) {\n            this._renderArc(animateTo, rotation);\n        }\n        else {\n            var /** @type {?} */ animation_1 = function () {\n                var /** @type {?} */ elapsedTime = Math.max(0, Math.min(Date.now() - startTime, duration));\n                _this._renderArc(ease(elapsedTime, animateFrom, changeInValue, duration), rotation);\n                // Prevent overlapping animations by checking if a new animation has been called for and\n                // if the animation has lasted longer than the animation duration.\n                if (id === _this._lastAnimationId && elapsedTime < duration) {\n                    requestAnimationFrame(animation_1);\n                }\n            };\n            // Run the animation outside of Angular's zone, in order to avoid\n            // hitting ZoneJS and change detection on each frame.\n            this._ngZone.runOutsideAngular(animation_1);\n        }\n    };\n    /**\n     * Starts the indeterminate animation interval, if it is not already running.\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._startIndeterminateAnimation = function () {\n        var _this = this;\n        var /** @type {?} */ rotationStartPoint = 0;\n        var /** @type {?} */ start = startIndeterminate;\n        var /** @type {?} */ end = endIndeterminate;\n        var /** @type {?} */ duration = DURATION_INDETERMINATE;\n        var /** @type {?} */ animate$$1 = function () {\n            _this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n            // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n            rotationStartPoint = (rotationStartPoint + end) % 100;\n            var /** @type {?} */ temp = start;\n            start = -end;\n            end = -temp;\n        };\n        if (!this.interdeterminateInterval) {\n            this._ngZone.runOutsideAngular(function () {\n                _this.interdeterminateInterval = setInterval(animate$$1, duration + 50, 0, false);\n                animate$$1();\n            });\n        }\n    };\n    /**\n     * Removes interval, ending the animation.\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._cleanupIndeterminateAnimation = function () {\n        this.interdeterminateInterval = null;\n    };\n    /**\n     * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n     * DOM attribute on the `<path>`.\n     * @param {?} currentValue\n     * @param {?=} rotation\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._renderArc = function (currentValue, rotation) {\n        if (rotation === void 0) { rotation = 0; }\n        // Caches the path reference so it doesn't have to be looked up every time.\n        var /** @type {?} */ path = this._path = this._path || this._elementRef.nativeElement.querySelector('path');\n        // Ensure that the path was found. This may not be the case if the\n        // animation function fires too early.\n        if (path) {\n            path.setAttribute('d', getSvgArc(currentValue, rotation));\n        }\n    };\n    /**\n     * Updates the color of the progress-spinner by adding the new palette class to the element\n     * and removing the old one.\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * Sets the given palette class on the component element.\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this._renderer.setElementClass(this._elementRef.nativeElement, \"mat-\" + color, isAdd);\n        }\n    };\n    return MdProgressSpinner;\n}());\nMdProgressSpinner.decorators = [\n    { type: Component, args: [{ selector: 'md-progress-spinner, mat-progress-spinner',\n                host: {\n                    'role': 'progressbar',\n                    '[attr.aria-valuemin]': '_ariaValueMin',\n                    '[attr.aria-valuemax]': '_ariaValueMax'\n                },\n                template: \"<!-- preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's center. The center of the circle will remain at the center of the md-progress-spinner element containing the SVG. --> <svg viewBox=\\\"0 0 100 100\\\" preserveAspectRatio=\\\"xMidYMid meet\\\"> <path></path> </svg> \",\n                styles: [\":host{display:block;height:100px;width:100px;overflow:hidden}:host svg{height:100%;width:100%;transform-origin:center}:host path{fill:transparent;stroke-width:10px;transition:stroke .3s cubic-bezier(.35,0,.25,1)}:host[mode=indeterminate] svg{animation-duration:5.25s,2.887s;animation-name:mat-progress-spinner-sporadic-rotate,mat-progress-spinner-linear-rotate;animation-timing-function:cubic-bezier(.35,0,.25,1),linear;animation-iteration-count:infinite;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-sporadic-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}100%{transform:rotate(1080deg)}} /*# sourceMappingURL=progress-spinner.css.map */ \"],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdProgressSpinner.ctorParameters = function () { return [\n    { type: NgZone, },\n    { type: ElementRef, },\n    { type: Renderer, },\n]; };\nMdProgressSpinner.propDecorators = {\n    'color': [{ type: Input },],\n    'value': [{ type: Input }, { type: HostBinding, args: ['attr.aria-valuenow',] },],\n    'mode': [{ type: HostBinding, args: ['attr.mode',] }, { type: Input },],\n};\n/**\n * <md-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nvar MdSpinner = (function (_super) {\n    __extends(MdSpinner, _super);\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} renderer\n     */\n    function MdSpinner(elementRef, ngZone, renderer) {\n        var _this = _super.call(this, ngZone, elementRef, renderer) || this;\n        _this.mode = 'indeterminate';\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    MdSpinner.prototype.ngOnDestroy = function () {\n        // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n        // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n        _super.prototype.ngOnDestroy.call(this);\n    };\n    return MdSpinner;\n}(MdProgressSpinner));\nMdSpinner.decorators = [\n    { type: Component, args: [{ selector: 'md-spinner, mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    '[class.mat-spinner]': 'true',\n                },\n                template: \"<!-- preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's center. The center of the circle will remain at the center of the md-progress-spinner element containing the SVG. --> <svg viewBox=\\\"0 0 100 100\\\" preserveAspectRatio=\\\"xMidYMid meet\\\"> <path></path> </svg> \",\n                styles: [\":host{display:block;height:100px;width:100px;overflow:hidden}:host svg{height:100%;width:100%;transform-origin:center}:host path{fill:transparent;stroke-width:10px;transition:stroke .3s cubic-bezier(.35,0,.25,1)}:host[mode=indeterminate] svg{animation-duration:5.25s,2.887s;animation-name:mat-progress-spinner-sporadic-rotate,mat-progress-spinner-linear-rotate;animation-timing-function:cubic-bezier(.35,0,.25,1),linear;animation-iteration-count:infinite;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-sporadic-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}100%{transform:rotate(1080deg)}} /*# sourceMappingURL=progress-spinner.css.map */ \"],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSpinner.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: NgZone, },\n    { type: Renderer, },\n]; };\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v) {\n    return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius, pathRadius, angleInDegrees) {\n    var /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n    return (radius + (pathRadius * Math.cos(angleInRadians))) +\n        ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime, startValue, changeInValue, duration) {\n    return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime, startValue, changeInValue, duration) {\n    var /** @type {?} */ time = currentTime / duration;\n    var /** @type {?} */ timeCubed = Math.pow(time, 3);\n    var /** @type {?} */ timeQuad = Math.pow(time, 4);\n    var /** @type {?} */ timeQuint = Math.pow(time, 5);\n    return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n *\n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue, rotation) {\n    var /** @type {?} */ startPoint = rotation || 0;\n    var /** @type {?} */ radius = 50;\n    var /** @type {?} */ pathRadius = 40;\n    var /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n    var /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n    var /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n    var /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n    var /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n    var /** @type {?} */ largeArcFlag;\n    if (endAngle < 0) {\n        largeArcFlag = endAngle >= -180 ? 0 : 1;\n    }\n    else {\n        largeArcFlag = endAngle <= 180 ? 0 : 1;\n    }\n    return \"M\" + start + \"A\" + pathRadius + \",\" + pathRadius + \" 0 \" + largeArcFlag + \",\" + arcSweep + \" \" + end;\n}\nvar MdProgressSpinnerModule = (function () {\n    function MdProgressSpinnerModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdProgressSpinnerModule.forRoot = function () {\n        return {\n            ngModule: MdProgressSpinnerModule,\n            providers: []\n        };\n    };\n    return MdProgressSpinnerModule;\n}());\nMdProgressSpinnerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CompatibilityModule],\n                exports: [\n                    MdProgressSpinner,\n                    MdSpinner,\n                    CompatibilityModule,\n                    MdProgressSpinnerCssMatStyler\n                ],\n                declarations: [\n                    MdProgressSpinner,\n                    MdSpinner,\n                    MdProgressSpinnerCssMatStyler\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdProgressSpinnerModule.ctorParameters = function () { return []; };\n/**\n * <md-progress-bar> component.\n */\nvar MdProgressBar = (function () {\n    function MdProgressBar() {\n        /** Color of the progress bar. */\n        this.color = 'primary';\n        this._value = 0;\n        this._bufferValue = 0;\n        /**\n         * Mode of the progress bar.\n         *\n         * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n         * 'determinate'.\n         * Mirrored to mode attribute.\n         */\n        this.mode = 'determinate';\n    }\n    Object.defineProperty(MdProgressBar.prototype, \"value\", {\n        /**\n         * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n         * @return {?}\n         */\n        get: function () { return this._value; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this._value = clamp$1(v || 0); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressBar.prototype, \"bufferValue\", {\n        /**\n         * Buffer value of the progress bar. Defaults to zero.\n         * @return {?}\n         */\n        get: function () { return this._bufferValue; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this._bufferValue = clamp$1(v || 0); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the current transform value for the progress bar's primary indicator.\n     * @return {?}\n     */\n    MdProgressBar.prototype._primaryTransform = function () {\n        var /** @type {?} */ scale = this.value / 100;\n        return { transform: \"scaleX(\" + scale + \")\" };\n    };\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     * @return {?}\n     */\n    MdProgressBar.prototype._bufferTransform = function () {\n        if (this.mode == 'buffer') {\n            var /** @type {?} */ scale = this.bufferValue / 100;\n            return { transform: \"scaleX(\" + scale + \")\" };\n        }\n    };\n    return MdProgressBar;\n}());\nMdProgressBar.decorators = [\n    { type: Component, args: [{ selector: 'md-progress-bar, mat-progress-bar',\n                host: {\n                    'role': 'progressbar',\n                    'aria-valuemin': '0',\n                    'aria-valuemax': '100',\n                    '[class.mat-primary]': 'color == \"primary\"',\n                    '[class.mat-accent]': 'color == \"accent\"',\n                    '[class.mat-warn]': 'color == \"warn\"',\n                    '[class.mat-progress-bar]': 'true',\n                },\n                template: \"<!-- The background div is named as such because it appears below the other divs and is not sized based on values. --> <div class=\\\"mat-progress-bar-background mat-progress-bar-element\\\"></div> <div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div> <div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\"></div> <div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div> \",\n                styles: [\":host{display:block;height:5px;overflow:hidden;position:relative;transform:translateZ(0);transition:opacity 250ms linear;width:100%}:host .mat-progress-bar-element,:host .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}:host .mat-progress-bar-background{background-repeat:repeat-x;background-size:10px 4px;display:none}:host .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease,stroke .3s cubic-bezier(.35,0,.25,1)}:host .mat-progress-bar-secondary{display:none}:host .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease,stroke .3s cubic-bezier(.35,0,.25,1)}:host .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}:host[mode=query]{transform:rotateZ(180deg)}:host[mode=indeterminate] .mat-progress-bar-fill,:host[mode=query] .mat-progress-bar-fill{transition:none}:host[mode=indeterminate] .mat-progress-bar-primary,:host[mode=query] .mat-progress-bar-primary{animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}:host[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,:host[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}:host[mode=indeterminate] .mat-progress-bar-secondary,:host[mode=query] .mat-progress-bar-secondary{animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}:host[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,:host[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}:host[mode=buffer] .mat-progress-bar-background{animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}:host-context([dir=rtl]){transform:rotateY(180deg)}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-10px)}} /*# sourceMappingURL=progress-bar.css.map */ \"],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdProgressBar.ctorParameters = function () { return []; };\nMdProgressBar.propDecorators = {\n    'color': [{ type: Input },],\n    'value': [{ type: Input }, { type: HostBinding, args: ['attr.aria-valuenow',] },],\n    'bufferValue': [{ type: Input },],\n    'mode': [{ type: Input }, { type: HostBinding, args: ['attr.mode',] },],\n};\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp$1(v, min, max) {\n    if (min === void 0) { min = 0; }\n    if (max === void 0) { max = 100; }\n    return Math.max(min, Math.min(max, v));\n}\nvar MdProgressBarModule = (function () {\n    function MdProgressBarModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdProgressBarModule.forRoot = function () {\n        return {\n            ngModule: MdProgressBarModule,\n            providers: []\n        };\n    };\n    return MdProgressBarModule;\n}());\nMdProgressBarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, CompatibilityModule],\n                exports: [MdProgressBar, CompatibilityModule],\n                declarations: [MdProgressBar],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdProgressBarModule.ctorParameters = function () { return []; };\n/**\n * \\@docs-private\n */\nvar MdInputContainerPlaceholderConflictError = (function (_super) {\n    __extends(MdInputContainerPlaceholderConflictError, _super);\n    function MdInputContainerPlaceholderConflictError() {\n        return _super.call(this, 'Placeholder attribute and child element were both specified.') || this;\n    }\n    return MdInputContainerPlaceholderConflictError;\n}(MdError));\n/**\n * \\@docs-private\n */\nvar MdInputContainerUnsupportedTypeError = (function (_super) {\n    __extends(MdInputContainerUnsupportedTypeError, _super);\n    /**\n     * @param {?} type\n     */\n    function MdInputContainerUnsupportedTypeError(type) {\n        return _super.call(this, \"Input type \\\"\" + type + \"\\\" isn't supported by md-input-container.\") || this;\n    }\n    return MdInputContainerUnsupportedTypeError;\n}(MdError));\n/**\n * \\@docs-private\n */\nvar MdInputContainerDuplicatedHintError = (function (_super) {\n    __extends(MdInputContainerDuplicatedHintError, _super);\n    /**\n     * @param {?} align\n     */\n    function MdInputContainerDuplicatedHintError(align) {\n        return _super.call(this, \"A hint was already declared for 'align=\\\"\" + align + \"\\\"'.\") || this;\n    }\n    return MdInputContainerDuplicatedHintError;\n}(MdError));\n/**\n * \\@docs-private\n */\nvar MdInputContainerMissingMdInputError = (function (_super) {\n    __extends(MdInputContainerMissingMdInputError, _super);\n    function MdInputContainerMissingMdInputError() {\n        return _super.call(this, 'md-input-container must contain an mdInput directive. Did you forget to add mdInput ' +\n            'to the native input or textarea element?') || this;\n    }\n    return MdInputContainerMissingMdInputError;\n}(MdError));\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nvar MD_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'color',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nvar nextUniqueId$1 = 0;\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\nvar MdPlaceholder = (function () {\n    function MdPlaceholder() {\n    }\n    return MdPlaceholder;\n}());\nMdPlaceholder.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-placeholder, mat-placeholder'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdPlaceholder.ctorParameters = function () { return []; };\n/**\n * The hint directive, used to tag content as hint labels (going under the input).\n */\nvar MdHint = (function () {\n    function MdHint() {\n        // Whether to align the hint label at the start or end of the line.\n        this.align = 'start';\n        // Unique ID for the hint. Used for the aria-describedby on the input.\n        this.id = \"md-input-hint-\" + nextUniqueId$1++;\n    }\n    return MdHint;\n}());\nMdHint.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-hint, mat-hint',\n                host: {\n                    '[class.mat-hint]': 'true',\n                    '[class.mat-right]': 'align == \"end\"',\n                    '[attr.id]': 'id',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdHint.ctorParameters = function () { return []; };\nMdHint.propDecorators = {\n    'align': [{ type: Input },],\n    'id': [{ type: Input },],\n};\n/**\n * Directive, used to display a single error message under the input.\n */\nvar MdErrorDirective = (function () {\n    function MdErrorDirective() {\n    }\n    return MdErrorDirective;\n}());\nMdErrorDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-error, mat-error',\n                host: {\n                    '[class.mat-input-error]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdErrorDirective.ctorParameters = function () { return []; };\n/**\n * The input prefix.\n */\nvar MdPrefix = (function () {\n    function MdPrefix() {\n    }\n    return MdPrefix;\n}());\nMdPrefix.decorators = [\n    { type: Directive, args: [{\n                selector: '[mdPrefix], [matPrefix], [md-prefix]'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdPrefix.ctorParameters = function () { return []; };\n/**\n * The input suffix.\n */\nvar MdSuffix = (function () {\n    function MdSuffix() {\n    }\n    return MdSuffix;\n}());\nMdSuffix.decorators = [\n    { type: Directive, args: [{\n                selector: '[mdSuffix], [matSuffix], [md-suffix]'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSuffix.ctorParameters = function () { return []; };\n/**\n * The input directive, used to mark the input that `MdInputContainer` is wrapping.\n */\nvar MdInputDirective = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _ngControl\n     */\n    function MdInputDirective(_elementRef, _renderer, _ngControl) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._ngControl = _ngControl;\n        this._type = 'text';\n        this._placeholder = '';\n        this._disabled = false;\n        this._required = false;\n        /** Whether the element is focused or not. */\n        this.focused = false;\n        /**\n         * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n         */\n        this._placeholderChange = new EventEmitter();\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(function (t) { return getSupportedInputTypes().has(t); });\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    Object.defineProperty(MdInputDirective.prototype, \"disabled\", {\n        /**\n         * Whether the element is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._ngControl ? this._ngControl.disabled : this._disabled;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"id\", {\n        /**\n         * Unique id of the element.\n         * @return {?}\n         */\n        get: function () { return this._id; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._id = value || this._uid; },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    Object.defineProperty(MdInputDirective.prototype, \"placeholder\", {\n        /**\n         * Placeholder attribute of the element.\n         * @return {?}\n         */\n        get: function () { return this._placeholder; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._placeholder !== value) {\n                this._placeholder = value;\n                this._placeholderChange.emit(this._placeholder);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"required\", {\n        /**\n         * Whether the element is required.\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"type\", {\n        /**\n         * Input type of the element.\n         * @return {?}\n         */\n        get: function () { return this._type; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._type = value || 'text';\n            this._validateType();\n            // When using Angular inputs, developers are no longer able to set the properties on the native\n            // input element. To ensure that bindings for `type` work, we need to sync the setter\n            // with the native property. Textarea elements don't support the type property or attribute.\n            if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n                this._renderer.setElementProperty(this._elementRef.nativeElement, 'type', this._type);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"value\", {\n        /**\n         * The input element's value.\n         * @return {?}\n         */\n        get: function () { return this._elementRef.nativeElement.value; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._elementRef.nativeElement.value = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"empty\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return !this._isNeverEmpty() &&\n                (this.value == null || this.value === '') &&\n                // Check if the input contains bad input. If so, we know that it only appears empty because\n                // the value failed to parse. From the user's perspective it is not empty.\n                // TODO(mmalerba): Add e2e test for bad input case.\n                !this._isBadInput();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"_uid\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cachedUid = this._cachedUid || \"md-input-\" + nextUniqueId$1++; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focuses the input element.\n     * @return {?}\n     */\n    MdInputDirective.prototype.focus = function () { this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus'); };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._onFocus = function () { this.focused = true; };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._onBlur = function () { this.focused = false; };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._onInput = function () {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    };\n    /**\n     * Make sure the input is a supported type.\n     * @return {?}\n     */\n    MdInputDirective.prototype._validateType = function () {\n        if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {\n            throw new MdInputContainerUnsupportedTypeError(this._type);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._isNeverEmpty = function () { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._isBadInput = function () {\n        return ((this._elementRef.nativeElement)).validity.badInput;\n    };\n    /**\n     * Determines if the component host is a textarea. If not recognizable it returns false.\n     * @return {?}\n     */\n    MdInputDirective.prototype._isTextarea = function () {\n        var /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n        return nativeElement ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;\n    };\n    return MdInputDirective;\n}());\nMdInputDirective.decorators = [\n    { type: Directive, args: [{\n                selector: \"input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]\",\n                host: {\n                    '[class.mat-input-element]': 'true',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[id]': 'id',\n                    '[placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.aria-describedby]': 'ariaDescribedby || null',\n                    '(blur)': '_onBlur()',\n                    '(focus)': '_onFocus()',\n                    '(input)': '_onInput()',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdInputDirective.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self },] },\n]; };\nMdInputDirective.propDecorators = {\n    'disabled': [{ type: Input },],\n    'id': [{ type: Input },],\n    'placeholder': [{ type: Input },],\n    'required': [{ type: Input },],\n    'type': [{ type: Input },],\n    '_placeholderChange': [{ type: Output },],\n};\n/**\n * Component that represents a text input. It encapsulates the <input> HTMLElement and\n * improve on its behaviour, along with styling it according to the Material Design.\n */\nvar MdInputContainer = (function () {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     */\n    function MdInputContainer(_changeDetectorRef, _parentForm, _parentFormGroup) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        /** Alignment of the input container's content. */\n        this.align = 'start';\n        /** Color of the input divider, based on the theme. */\n        this.color = 'primary';\n        /** State of the md-hint and md-error animations. */\n        this._subscriptAnimationState = '';\n        this._hintLabel = '';\n        // Unique id for the hint label.\n        this._hintLabelId = \"md-input-hint-\" + nextUniqueId$1++;\n        this._floatPlaceholder = 'auto';\n    }\n    Object.defineProperty(MdInputContainer.prototype, \"dividerColor\", {\n        /**\n         * @deprecated Use color instead.\n         * @return {?}\n         */\n        get: function () { return this.color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this.color = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputContainer.prototype, \"_shouldAlwaysFloat\", {\n        /**\n         * Whether the floating label should always float or not.\n         * @return {?}\n         */\n        get: function () { return this._floatPlaceholder === 'always'; },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    Object.defineProperty(MdInputContainer.prototype, \"_canPlaceholderFloat\", {\n        /**\n         * Whether the placeholder can float or not.\n         * @return {?}\n         */\n        get: function () { return this._floatPlaceholder !== 'never'; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputContainer.prototype, \"hintLabel\", {\n        /**\n         * Text for the input hint.\n         * @return {?}\n         */\n        get: function () { return this._hintLabel; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._hintLabel = value;\n            this._processHints();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputContainer.prototype, \"floatPlaceholder\", {\n        /**\n         * Whether the placeholder should always float, never float or float as the user types.\n         * @return {?}\n         */\n        get: function () { return this._floatPlaceholder; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._floatPlaceholder = value || 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdInputContainer.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        if (!this._mdInputChild) {\n            throw new MdInputContainerMissingMdInputError();\n        }\n        this._processHints();\n        this._validatePlaceholders();\n        // Re-validate when things change.\n        this._hintChildren.changes.subscribe(function () { return _this._processHints(); });\n        this._mdInputChild._placeholderChange.subscribe(function () { return _this._validatePlaceholders(); });\n    };\n    /**\n     * @return {?}\n     */\n    MdInputContainer.prototype.ngAfterViewInit = function () {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n        this._changeDetectorRef.detectChanges();\n    };\n    /**\n     * Determines whether a class from the NgControl should be forwarded to the host element.\n     * @param {?} prop\n     * @return {?}\n     */\n    MdInputContainer.prototype._shouldForward = function (prop) {\n        var /** @type {?} */ control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n        return control && ((control))[prop];\n    };\n    /**\n     * Whether the input has a placeholder.\n     * @return {?}\n     */\n    MdInputContainer.prototype._hasPlaceholder = function () { return !!(this._mdInputChild.placeholder || this._placeholderChild); };\n    /**\n     * Focuses the underlying input.\n     * @return {?}\n     */\n    MdInputContainer.prototype._focusInput = function () { this._mdInputChild.focus(); };\n    /**\n     * Whether the input container is in an error state.\n     * @return {?}\n     */\n    MdInputContainer.prototype._isErrorState = function () {\n        var /** @type {?} */ control = this._mdInputChild._ngControl;\n        var /** @type {?} */ isInvalid = control && control.invalid;\n        var /** @type {?} */ isTouched = control && control.touched;\n        var /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n            (this._parentForm && this._parentForm.submitted);\n        return !!(isInvalid && (isTouched || isSubmitted));\n    };\n    /**\n     * Determines whether to display hints or errors.\n     * @return {?}\n     */\n    MdInputContainer.prototype._getDisplayedMessages = function () {\n        return (this._errorChildren.length > 0 && this._isErrorState()) ? 'error' : 'hint';\n    };\n    /**\n     * Ensure that there is only one placeholder (either `input` attribute or child element with the\n     * `md-placeholder` attribute.\n     * @return {?}\n     */\n    MdInputContainer.prototype._validatePlaceholders = function () {\n        if (this._mdInputChild.placeholder && this._placeholderChild) {\n            throw new MdInputContainerPlaceholderConflictError();\n        }\n    };\n    /**\n     * Does any extra processing that is required when handling the hints.\n     * @return {?}\n     */\n    MdInputContainer.prototype._processHints = function () {\n        this._validateHints();\n        this._syncAriaDescribedby();\n    };\n    /**\n     * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     * @return {?}\n     */\n    MdInputContainer.prototype._validateHints = function () {\n        var _this = this;\n        if (this._hintChildren) {\n            var /** @type {?} */ startHint_1 = null;\n            var /** @type {?} */ endHint_1 = null;\n            this._hintChildren.forEach(function (hint) {\n                if (hint.align == 'start') {\n                    if (startHint_1 || _this.hintLabel) {\n                        throw new MdInputContainerDuplicatedHintError('start');\n                    }\n                    startHint_1 = hint;\n                }\n                else if (hint.align == 'end') {\n                    if (endHint_1) {\n                        throw new MdInputContainerDuplicatedHintError('end');\n                    }\n                    endHint_1 = hint;\n                }\n            });\n        }\n    };\n    /**\n     * Sets the child input's `aria-describedby` to a space-separated list of the ids\n     * of the currently-specified hints, as well as a generated id for the hint label.\n     * @return {?}\n     */\n    MdInputContainer.prototype._syncAriaDescribedby = function () {\n        var /** @type {?} */ ids = [];\n        var /** @type {?} */ startHint = this._hintChildren ?\n            this._hintChildren.find(function (hint) { return hint.align === 'start'; }) : null;\n        var /** @type {?} */ endHint = this._hintChildren ?\n            this._hintChildren.find(function (hint) { return hint.align === 'end'; }) : null;\n        if (startHint) {\n            ids.push(startHint.id);\n        }\n        else if (this._hintLabel) {\n            ids.push(this._hintLabelId);\n        }\n        if (endHint) {\n            ids.push(endHint.id);\n        }\n        this._mdInputChild.ariaDescribedby = ids.join(' ');\n    };\n    return MdInputContainer;\n}());\nMdInputContainer.decorators = [\n    { type: Component, args: [{ selector: 'md-input-container, mat-input-container',\n                template: \"<div class=\\\"mat-input-wrapper\\\"> <div class=\\\"mat-input-table\\\"> <div class=\\\"mat-input-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\"> <!-- TODO(andrewseguin): remove [md-prefix] --> <ng-content select=\\\"[mdPrefix], [matPrefix], [md-prefix]\\\"></ng-content> </div> <div class=\\\"mat-input-infix\\\" [class.mat-end]=\\\"align == 'end'\\\"> <ng-content selector=\\\"input, textarea\\\"></ng-content> <span class=\\\"mat-input-placeholder-wrapper\\\"> <label class=\\\"mat-input-placeholder\\\" [attr.for]=\\\"_mdInputChild.id\\\" [class.mat-empty]=\\\"_mdInputChild.empty && !_shouldAlwaysFloat\\\" [class.mat-float]=\\\"_canPlaceholderFloat\\\" [class.mat-accent]=\\\"color == 'accent'\\\" [class.mat-warn]=\\\"color == 'warn'\\\" *ngIf=\\\"_hasPlaceholder()\\\"> <ng-content select=\\\"md-placeholder, mat-placeholder\\\"></ng-content> {{_mdInputChild.placeholder}} <span class=\\\"mat-placeholder-required\\\" *ngIf=\\\"_mdInputChild.required\\\">*</span> </label> </span> </div> <div class=\\\"mat-input-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\"> <!-- TODO(andrewseguin): remove [md-suffix] --> <ng-content select=\\\"[mdSuffix], [matSuffix], [md-suffix]\\\"></ng-content> </div> </div> <div class=\\\"mat-input-underline\\\" [class.mat-disabled]=\\\"_mdInputChild.disabled\\\"> <span class=\\\"mat-input-ripple\\\" [class.mat-accent]=\\\"color == 'accent'\\\" [class.mat-warn]=\\\"color == 'warn'\\\"></span> </div> <div class=\\\"mat-input-subscript-wrapper\\\" [ngSwitch]=\\\"_getDisplayedMessages()\\\"> <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\"> <ng-content select=\\\"md-error, mat-error\\\"></ng-content> </div> <div class=\\\"mat-input-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\"> <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div> <ng-content select=\\\"md-hint, mat-hint\\\"></ng-content> </div> </div> </div> \",\n                styles: [\".mat-input-container{display:inline-block;position:relative;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;line-height:normal;text-align:left}[dir=rtl] .mat-input-container{text-align:right}.mat-input-container .mat-icon{width:auto;height:auto;font-size:100%;vertical-align:top}.mat-input-wrapper{margin:1em 0;padding-bottom:6px}.mat-input-table{display:inline-table;flex-flow:column;vertical-align:bottom;width:100%}.mat-input-table>*{display:table-cell}.mat-input-infix{position:relative}.mat-input-element{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;width:100%;vertical-align:bottom}.mat-end .mat-input-element{text-align:right}[dir=rtl] .mat-end .mat-input-element{text-align:left}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element:-webkit-autofill+.mat-input-placeholder-wrapper .mat-float{display:block;transform:translateY(-1.35em) scale(.75);width:133.33333%;transition:none}.mat-input-element::placeholder{color:transparent}.mat-input-element::-moz-placeholder{color:transparent}.mat-input-element::-webkit-input-placeholder{color:transparent}.mat-input-element:-ms-input-placeholder{color:transparent}.mat-input-placeholder{position:absolute;left:0;top:0;font-size:100%;pointer-events:none;z-index:1;padding-top:1em;width:100%;display:none;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform:translateY(0);transform-origin:bottom left;transition:transform .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1)}.mat-input-placeholder.mat-empty{display:block;cursor:text}.mat-focused .mat-input-placeholder.mat-float,.mat-input-placeholder.mat-float:not(.mat-empty){display:block;transform:translateY(-1.35em) scale(.75);width:133.33333%}[dir=rtl] .mat-input-placeholder{transform-origin:bottom right;left:auto;right:0}.mat-input-placeholder:not(.mat-empty){transition:none}.mat-input-placeholder-wrapper{position:absolute;left:0;top:-1em;width:100%;padding-top:1em;overflow:hidden;pointer-events:none;transform:translate3d(0,0,0)}.mat-input-placeholder-wrapper::after{content:'';display:inline-table}.mat-input-underline{position:absolute;height:1px;width:100%;margin-top:4px;border-top-width:1px;border-top-style:solid}.mat-input-underline.mat-disabled{background-image:linear-gradient(to right,rgba(0,0,0,.26) 0,rgba(0,0,0,.26) 33%,transparent 0);background-size:4px 1px;background-repeat:repeat-x;border-top:0;background-position:0}.mat-input-underline .mat-input-ripple{position:absolute;height:2px;z-index:1;top:-1px;width:100%;transform-origin:top;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-focused .mat-input-underline .mat-input-ripple{opacity:1}.mat-input-subscript-wrapper{position:absolute;font-size:75%;top:100%;width:100%;margin-top:-1em;overflow:hidden}.mat-input-hint-wrapper::after,.mat-input-hint-wrapper::before{content:' ';display:table}.mat-input-hint-wrapper::after{clear:both}.mat-hint{display:block;float:left}.mat-hint.mat-right{float:right}[dir=rtl] .mat-hint{float:right}[dir=rtl] .mat-hint.mat-right{float:left}.mat-input-error{display:block}.mat-input-prefix,.mat-input-suffix{width:.1px;white-space:nowrap} /*# sourceMappingURL=input-container.css.map */ \"],\n                animations: [\n                    trigger('transitionMessages', [\n                        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n                        transition('void => enter', [\n                            style({ opacity: 0, transform: 'translateY(-100%)' }),\n                            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n                        ])\n                    ])\n                ],\n                host: {\n                    // Remove align attribute to prevent it from interfering with layout.\n                    '[attr.align]': 'null',\n                    '[class.mat-input-container]': 'true',\n                    '[class.mat-input-invalid]': '_isErrorState()',\n                    '[class.mat-focused]': '_mdInputChild.focused',\n                    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                    '[class.ng-touched]': '_shouldForward(\"touched\")',\n                    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                    '[class.ng-valid]': '_shouldForward(\"valid\")',\n                    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                    '[class.ng-pending]': '_shouldForward(\"pending\")',\n                    '(click)': '_focusInput()',\n                },\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdInputContainer.ctorParameters = function () { return [\n    { type: ChangeDetectorRef, },\n    { type: NgForm, decorators: [{ type: Optional },] },\n    { type: FormGroupDirective, decorators: [{ type: Optional },] },\n]; };\nMdInputContainer.propDecorators = {\n    'align': [{ type: Input },],\n    'color': [{ type: Input },],\n    'dividerColor': [{ type: Input },],\n    'hintLabel': [{ type: Input },],\n    'floatPlaceholder': [{ type: Input },],\n    '_mdInputChild': [{ type: ContentChild, args: [MdInputDirective,] },],\n    '_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder,] },],\n    '_errorChildren': [{ type: ContentChildren, args: [MdErrorDirective,] },],\n    '_hintChildren': [{ type: ContentChildren, args: [MdHint,] },],\n    '_prefixChildren': [{ type: ContentChildren, args: [MdPrefix,] },],\n    '_suffixChildren': [{ type: ContentChildren, args: [MdSuffix,] },],\n};\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nvar MdTextareaAutosize = (function () {\n    /**\n     * @param {?} _elementRef\n     */\n    function MdTextareaAutosize(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    Object.defineProperty(MdTextareaAutosize.prototype, \"mdAutosizeMinRows\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.minRows;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.minRows = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTextareaAutosize.prototype, \"mdAutosizeMaxRows\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.maxRows;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.maxRows = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTextareaAutosize.prototype, \"_minHeight\", {\n        /**\n         * The minimum height of the textarea as determined by minRows.\n         * @return {?}\n         */\n        get: function () {\n            return this.minRows ? this.minRows * this._cachedLineHeight + \"px\" : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTextareaAutosize.prototype, \"_maxHeight\", {\n        /**\n         * The maximum height of the textarea as determined by maxRows.\n         * @return {?}\n         */\n        get: function () {\n            return this.maxRows ? this.maxRows * this._cachedLineHeight + \"px\" : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdTextareaAutosize.prototype.ngOnInit = function () {\n        this._cacheTextareaLineHeight();\n        this.resizeToFitContent();\n    };\n    /**\n     * Cache the height of a single-row textarea.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @return {?}\n     */\n    MdTextareaAutosize.prototype._cacheTextareaLineHeight = function () {\n        var /** @type {?} */ textarea = (this._elementRef.nativeElement);\n        // Use a clone element because we have to override some styles.\n        var /** @type {?} */ textareaClone = (textarea.cloneNode(false));\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        textarea.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.offsetHeight;\n        textarea.parentNode.removeChild(textareaClone);\n    };\n    /**\n     * Resize the textarea to fit its content.\n     * @return {?}\n     */\n    MdTextareaAutosize.prototype.resizeToFitContent = function () {\n        var /** @type {?} */ textarea = (this._elementRef.nativeElement);\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        textarea.style.height = 'auto';\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = textarea.scrollHeight + \"px\";\n    };\n    return MdTextareaAutosize;\n}());\nMdTextareaAutosize.decorators = [\n    { type: Directive, args: [{\n                selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n                    'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'mdTextareaAutosize',\n                host: {\n                    '(input)': 'resizeToFitContent()',\n                    '[style.min-height]': '_minHeight',\n                    '[style.max-height]': '_maxHeight',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTextareaAutosize.ctorParameters = function () { return [\n    { type: ElementRef, },\n]; };\nMdTextareaAutosize.propDecorators = {\n    'minRows': [{ type: Input },],\n    'mdAutosizeMinRows': [{ type: Input },],\n    'maxRows': [{ type: Input },],\n    'mdAutosizeMaxRows': [{ type: Input },],\n};\nvar MdInputModule = (function () {\n    function MdInputModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdInputModule.forRoot = function () {\n        return {\n            ngModule: MdInputModule,\n            providers: [],\n        };\n    };\n    return MdInputModule;\n}());\nMdInputModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    MdErrorDirective,\n                    MdHint,\n                    MdInputContainer,\n                    MdInputDirective,\n                    MdPlaceholder,\n                    MdPrefix,\n                    MdSuffix,\n                    MdTextareaAutosize,\n                ],\n                imports: [\n                    CommonModule,\n                    FormsModule,\n                    PlatformModule,\n                ],\n                exports: [\n                    MdErrorDirective,\n                    MdHint,\n                    MdInputContainer,\n                    MdInputDirective,\n                    MdPlaceholder,\n                    MdPrefix,\n                    MdSuffix,\n                    MdTextareaAutosize,\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdInputModule.ctorParameters = function () { return []; };\n/**\n * Configuration used when opening a snack-bar.\n */\nvar MdSnackBarConfig = (function () {\n    function MdSnackBarConfig() {\n        /** The politeness level for the MdAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /** Message to be announced by the MdAriaLiveAnnouncer */\n        this.announcementMessage = '';\n        /** The view container to place the overlay for the snack bar into. */\n        this.viewContainerRef = null;\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n    }\n    return MdSnackBarConfig;\n}());\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nvar MdSnackBarRef = (function () {\n    /**\n     * @param {?} instance\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    function MdSnackBarRef(instance, containerInstance, _overlayRef) {\n        var _this = this;\n        this._overlayRef = _overlayRef;\n        this._afterClosed = new Subject();\n        this._onAction = new Subject();\n        // Sets the readonly instance of the snack bar content component.\n        this._instance = instance;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(function () { return _this.dismiss(); });\n        containerInstance._onExit().subscribe(function () { return _this._finishDismiss(); });\n    }\n    Object.defineProperty(MdSnackBarRef.prototype, \"instance\", {\n        /**\n         * The instance of the component making up the content of the snack bar.\n         * @return {?}\n         */\n        get: function () {\n            return this._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype.dismiss = function () {\n        if (!this._afterClosed.closed) {\n            this.containerInstance.exit();\n        }\n    };\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype._action = function () {\n        if (!this._onAction.closed) {\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    };\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    MdSnackBarRef.prototype._open = function () {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    };\n    /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype._finishDismiss = function () {\n        this._overlayRef.dispose();\n        this._afterClosed.next();\n        this._afterClosed.complete();\n    };\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype.afterDismissed = function () {\n        return this._afterClosed.asObservable();\n    };\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype.afterOpened = function () {\n        return this.containerInstance._onEnter();\n    };\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype.onAction = function () {\n        return this._onAction.asObservable();\n    };\n    return MdSnackBarRef;\n}());\n/**\n * Error that is thrown when attempting to attach a snack bar that is already attached.\n * \\@docs-private\n */\nvar MdSnackBarContentAlreadyAttached = (function (_super) {\n    __extends(MdSnackBarContentAlreadyAttached, _super);\n    function MdSnackBarContentAlreadyAttached() {\n        return _super.call(this, 'Attempting to attach snack bar content after content is already attached') || this;\n    }\n    return MdSnackBarContentAlreadyAttached;\n}(MdError));\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nvar SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nvar HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nvar MdSnackBarContainer = (function (_super) {\n    __extends(MdSnackBarContainer, _super);\n    /**\n     * @param {?} _ngZone\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdSnackBarContainer(_ngZone, _renderer, _elementRef) {\n        var _this = _super.call(this) || this;\n        _this._ngZone = _ngZone;\n        _this._renderer = _renderer;\n        _this._elementRef = _elementRef;\n        _this.onExit = new Subject();\n        _this.onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        _this.animationState = 'initial';\n        return _this;\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.attachComponentPortal = function (portal) {\n        if (this._portalHost.hasAttached()) {\n            throw new MdSnackBarContentAlreadyAttached();\n        }\n        if (this.snackBarConfig.extraClasses) {\n            // Not the most efficient way of adding classes, but the renderer doesn't allow us\n            // to pass in an array or a space-separated list.\n            for (var _i = 0, _a = this.snackBarConfig.extraClasses; _i < _a.length; _i++) {\n                var cssClass = _a[_i];\n                this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, true);\n            }\n        }\n        return this._portalHost.attachComponentPortal(portal);\n    };\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @param {?} portal\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.attachTemplatePortal = function (portal) {\n        throw Error('Not yet implemented');\n    };\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.onAnimationEnd = function (event) {\n        var _this = this;\n        if (event.toState === 'void' || event.toState === 'complete') {\n            this._completeExit();\n        }\n        if (event.toState === 'visible') {\n            this._ngZone.run(function () {\n                _this.onEnter.next();\n                _this.onEnter.complete();\n            });\n        }\n    };\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.enter = function () {\n        this.animationState = 'visible';\n    };\n    /**\n     * Returns an observable resolving when the enter animation completes.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype._onEnter = function () {\n        this.animationState = 'visible';\n        return this.onEnter.asObservable();\n    };\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.exit = function () {\n        this.animationState = 'complete';\n        return this._onExit();\n    };\n    /**\n     * Returns an observable that completes after the closing animation is done.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype._onExit = function () {\n        return this.onExit.asObservable();\n    };\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.ngOnDestroy = function () {\n        this._completeExit();\n    };\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype._completeExit = function () {\n        var _this = this;\n        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {\n            _this.onExit.next();\n            _this.onExit.complete();\n        });\n    };\n    return MdSnackBarContainer;\n}(BasePortalHost));\nMdSnackBarContainer.decorators = [\n    { type: Component, args: [{ selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalHost></ng-template> \",\n                styles: [\":host{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);background:#323232;border-radius:2px;box-sizing:content-box;display:block;height:20px;max-width:568px;min-width:288px;overflow:hidden;padding:14px 24px;transform:translateY(100%)}@media screen and (-ms-high-contrast:active){:host{border:solid 1px}} /*# sourceMappingURL=snack-bar-container.css.map */ \"],\n                host: {\n                    'role': 'alert',\n                    '[@state]': 'animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                animations: [\n                    trigger('state', [\n                        state('initial', style({ transform: 'translateY(100%)' })),\n                        state('visible', style({ transform: 'translateY(0%)' })),\n                        state('complete', style({ transform: 'translateY(100%)' })),\n                        transition('visible => complete', animate(HIDE_ANIMATION)),\n                        transition('initial => visible, void => visible', animate(SHOW_ANIMATION)),\n                    ])\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSnackBarContainer.ctorParameters = function () { return [\n    { type: NgZone, },\n    { type: Renderer, },\n    { type: ElementRef, },\n]; };\nMdSnackBarContainer.propDecorators = {\n    '_portalHost': [{ type: ViewChild, args: [PortalHostDirective,] },],\n};\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nvar SimpleSnackBar = (function () {\n    function SimpleSnackBar() {\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    SimpleSnackBar.prototype.dismiss = function () {\n        this.snackBarRef._action();\n    };\n    Object.defineProperty(SimpleSnackBar.prototype, \"hasAction\", {\n        /**\n         * If the action button should be shown.\n         * @return {?}\n         */\n        get: function () { return !!this.action; },\n        enumerable: true,\n        configurable: true\n    });\n    return SimpleSnackBar;\n}());\nSimpleSnackBar.decorators = [\n    { type: Component, args: [{ selector: 'simple-snack-bar',\n                template: \"<span class=\\\"mat-simple-snackbar-message\\\">{{message}}</span> <button class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\" (click)=\\\"dismiss()\\\">{{action}}</button> \",\n                styles: [\":host{display:flex;justify-content:space-between;color:#fff;line-height:20px;font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif}.mat-simple-snackbar-message{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-simple-snackbar-action{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;background:0 0;margin:-5px 0 0;padding:5px;text-transform:uppercase;color:inherit;line-height:inherit;flex-shrink:0;font-family:inherit;font-size:inherit;font-weight:600} /*# sourceMappingURL=simple-snack-bar.css.map */ \"],\n                host: {\n                    '[class.mat-simple-snackbar]': 'true',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nSimpleSnackBar.ctorParameters = function () { return []; };\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nfunction extendObject(dest) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    if (dest == null) {\n        throw TypeError('Cannot convert undefined or null to object');\n    }\n    for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {\n        var source = sources_1[_a];\n        if (source != null) {\n            for (var /** @type {?} */ key in source) {\n                if (source.hasOwnProperty(key)) {\n                    dest[key] = source[key];\n                }\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nvar MdSnackBar = (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _parentSnackBar\n     */\n    function MdSnackBar(_overlay, _live, _parentSnackBar) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._parentSnackBar = _parentSnackBar;\n    }\n    Object.defineProperty(MdSnackBar.prototype, \"_openedSnackBarRef\", {\n        /**\n         * Reference to the currently opened snackbar at *any* level.\n         * @return {?}\n         */\n        get: function () {\n            return this._parentSnackBar ?\n                this._parentSnackBar._openedSnackBarRef : this._snackBarRefAtThisLevel;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._parentSnackBar) {\n                this._parentSnackBar._openedSnackBarRef = value;\n            }\n            else {\n                this._snackBarRefAtThisLevel = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    MdSnackBar.prototype.openFromComponent = function (component, config) {\n        var _this = this;\n        config = _applyConfigDefaults(config);\n        var /** @type {?} */ overlayRef = this._createOverlay();\n        var /** @type {?} */ snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\n        var /** @type {?} */ snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(function () {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (_this._openedSnackBarRef == snackBarRef) {\n                _this._openedSnackBarRef = null;\n            }\n        });\n        // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\n        // animation is complete.\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.afterDismissed().subscribe(function () {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(function () {\n                setTimeout(function () { return snackBarRef.dismiss(); }, config.duration);\n            });\n        }\n        this._live.announce(config.announcementMessage, config.politeness);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    };\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    MdSnackBar.prototype.open = function (message, action, config) {\n        if (action === void 0) { action = ''; }\n        if (config === void 0) { config = {}; }\n        config.announcementMessage = message;\n        var /** @type {?} */ simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);\n        simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\n        simpleSnackBarRef.instance.message = message;\n        simpleSnackBarRef.instance.action = action;\n        return simpleSnackBarRef;\n    };\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    MdSnackBar.prototype.dismiss = function () {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    };\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    MdSnackBar.prototype._attachSnackBarContainer = function (overlayRef, config) {\n        var /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n        var /** @type {?} */ containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    };\n    /**\n     * Places a new component as the content of the snack bar container.\n     * @template T\n     * @param {?} component\n     * @param {?} container\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    MdSnackBar.prototype._attachSnackbarContent = function (component, container, overlayRef) {\n        var /** @type {?} */ portal = new ComponentPortal(component);\n        var /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n        return new MdSnackBarRef(contentRef.instance, container, overlayRef);\n    };\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @return {?}\n     */\n    MdSnackBar.prototype._createOverlay = function () {\n        var /** @type {?} */ state$$1 = new OverlayState();\n        state$$1.positionStrategy = this._overlay.position().global()\n            .centerHorizontally()\n            .bottom('0');\n        return this._overlay.create(state$$1);\n    };\n    return MdSnackBar;\n}());\nMdSnackBar.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nMdSnackBar.ctorParameters = function () { return [\n    { type: Overlay, },\n    { type: LiveAnnouncer, },\n    { type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf },] },\n]; };\n/**\n * Applies default options to the snackbar config.\n * @param {?} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config) {\n    return extendObject(new MdSnackBarConfig(), config);\n}\nvar MdSnackBarModule = (function () {\n    function MdSnackBarModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdSnackBarModule.forRoot = function () {\n        return {\n            ngModule: MdSnackBarModule,\n            providers: []\n        };\n    };\n    return MdSnackBarModule;\n}());\nMdSnackBarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    CompatibilityModule,\n                ],\n                exports: [MdSnackBarContainer, CompatibilityModule],\n                declarations: [MdSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n                providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdSnackBarModule.ctorParameters = function () { return []; };\n/**\n * Used to flag tab labels for use with the portal directive\n */\nvar MdTabLabel = (function (_super) {\n    __extends(MdTabLabel, _super);\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    function MdTabLabel(templateRef, viewContainerRef) {\n        return _super.call(this, templateRef, viewContainerRef) || this;\n    }\n    return MdTabLabel;\n}(TemplatePortalDirective));\nMdTabLabel.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-tab-label], [mat-tab-label]',\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabLabel.ctorParameters = function () { return [\n    { type: TemplateRef, },\n    { type: ViewContainerRef, },\n]; };\nvar MdTab = (function () {\n    /**\n     * @param {?} _viewContainerRef\n     */\n    function MdTab(_viewContainerRef) {\n        this._viewContainerRef = _viewContainerRef;\n        /** The plain text label for the tab, used when there is no template label. */\n        this.textLabel = '';\n        this._contentPortal = null;\n        /**\n         * The relatively indexed position where 0 represents the center, negative is left, and positive\n         * represents the right.\n         */\n        this.position = null;\n        /**\n         * The initial relatively index origin of the tab if it was created and selected after there\n         * was already a selected tab. Provides context of what position the tab should originate from.\n         */\n        this.origin = null;\n        this._disabled = false;\n    }\n    Object.defineProperty(MdTab.prototype, \"content\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._contentPortal; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTab.prototype, \"disabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * Whether the tab is disabled\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdTab.prototype.ngOnInit = function () {\n        this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n    };\n    return MdTab;\n}());\nMdTab.decorators = [\n    { type: Component, args: [{ selector: 'md-tab, mat-tab',\n                template: \"<!-- Create a template for the content of the <md-tab> so that we can grab a reference to this TemplateRef and use it in a Portal to render the tab content in the appropriate place in the tab-group. --> <ng-template><ng-content></ng-content></ng-template> \",\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTab.ctorParameters = function () { return [\n    { type: ViewContainerRef, },\n]; };\nMdTab.propDecorators = {\n    'templateLabel': [{ type: ContentChild, args: [MdTabLabel,] },],\n    '_content': [{ type: ViewChild, args: [TemplateRef,] },],\n    'textLabel': [{ type: Input, args: ['label',] },],\n    'disabled': [{ type: Input },],\n};\n/** Used to generate unique ID's for each tab component */\nvar nextId$2 = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nvar MdTabChangeEvent = (function () {\n    function MdTabChangeEvent() {\n    }\n    return MdTabChangeEvent;\n}());\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nvar MdTabGroup = (function () {\n    /**\n     * @param {?} _renderer\n     */\n    function MdTabGroup(_renderer) {\n        this._renderer = _renderer;\n        this._isInitialized = false;\n        this._indexToSelect = 0;\n        this._tabBodyWrapperHeight = null;\n        this._dynamicHeight = false;\n        this._selectedIndex = null;\n        /** Position of the tab header. */\n        this.headerPosition = 'above';\n        this._onFocusChange = new EventEmitter();\n        this._onSelectChange = new EventEmitter(true);\n        this._groupId = nextId$2++;\n    }\n    Object.defineProperty(MdTabGroup.prototype, \"dynamicHeight\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._dynamicHeight; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._dynamicHeight = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"_dynamicHeightDeprecated\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this._dynamicHeight; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._dynamicHeight = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"selectedIndex\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._selectedIndex; },\n        /**\n         * The index of the active tab.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._indexToSelect = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"selectedIndexChange\", {\n        /**\n         * Output to enable support for two-way binding on ([selectedIndex])\n         * @return {?}\n         */\n        get: function () {\n            return this.selectChange.map(function (event) { return event.index; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"focusChange\", {\n        /**\n         * Event emitted when focus has changed within a tab group.\n         * @return {?}\n         */\n        get: function () {\n            return this._onFocusChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"selectChange\", {\n        /**\n         * Event emitted when the tab selection has changed.\n         * @return {?}\n         */\n        get: function () {\n            return this._onSelectChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     * @return {?}\n     */\n    MdTabGroup.prototype.ngAfterContentChecked = function () {\n        var _this = this;\n        // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which\n        // ensures that values like NaN can't get through and which would otherwise throw the\n        // component into an infinite loop (since Math.max(NaN, 0) === NaN).\n        this._indexToSelect =\n            Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex != this._indexToSelect && this._selectedIndex != null) {\n            this._onSelectChange.emit(this._createChangeEvent(this._indexToSelect));\n        }\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this._tabs.forEach(function (tab, index) {\n            tab.position = index - _this._indexToSelect;\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (_this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n                tab.origin = _this._indexToSelect - _this._selectedIndex;\n            }\n        });\n        this._selectedIndex = this._indexToSelect;\n    };\n    /**\n     * Waits one frame for the view to update, then updates the ink bar\n     * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n     * @return {?}\n     */\n    MdTabGroup.prototype.ngAfterViewChecked = function () {\n        this._isInitialized = true;\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    MdTabGroup.prototype._focusChanged = function (index) {\n        this._onFocusChange.emit(this._createChangeEvent(index));\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    MdTabGroup.prototype._createChangeEvent = function (index) {\n        var /** @type {?} */ event = new MdTabChangeEvent;\n        event.index = index;\n        if (this._tabs && this._tabs.length) {\n            event.tab = this._tabs.toArray()[index];\n        }\n        return event;\n    };\n    /**\n     * Returns a unique id for each tab label element\n     * @param {?} i\n     * @return {?}\n     */\n    MdTabGroup.prototype._getTabLabelId = function (i) {\n        return \"md-tab-label-\" + this._groupId + \"-\" + i;\n    };\n    /**\n     * Returns a unique id for each tab content element\n     * @param {?} i\n     * @return {?}\n     */\n    MdTabGroup.prototype._getTabContentId = function (i) {\n        return \"md-tab-content-\" + this._groupId + \"-\" + i;\n    };\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     * @param {?} tabHeight\n     * @return {?}\n     */\n    MdTabGroup.prototype._setTabBodyWrapperHeight = function (tabHeight) {\n        if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n            return;\n        }\n        this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', this._tabBodyWrapperHeight + 'px');\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n            this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', tabHeight + 'px');\n        }\n    };\n    /**\n     * Removes the height of the tab body wrapper.\n     * @return {?}\n     */\n    MdTabGroup.prototype._removeTabBodyWrapperHeight = function () {\n        this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n        this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n    };\n    return MdTabGroup;\n}());\nMdTabGroup.decorators = [\n    { type: Component, args: [{ selector: 'md-tab-group, mat-tab-group',\n                template: \"<md-tab-header [selectedIndex]=\\\"selectedIndex\\\" #tabHeader (indexFocused)=\\\"_focusChanged($event)\\\" (selectFocusedIndex)=\\\"selectedIndex = $event\\\"> <div class=\\\"mat-tab-label\\\" role=\\\"tab\\\" md-tab-label-wrapper md-ripple *ngFor=\\\"let tab of _tabs; let i = index\\\" [id]=\\\"_getTabLabelId(i)\\\" [tabIndex]=\\\"selectedIndex == i ? 0 : -1\\\" [attr.aria-controls]=\\\"_getTabContentId(i)\\\" [attr.aria-selected]=\\\"selectedIndex == i\\\" [class.mat-tab-label-active]=\\\"selectedIndex == i\\\" [disabled]=\\\"tab.disabled\\\" (click)=\\\"tabHeader.focusIndex = selectedIndex = i\\\"> <!-- If there is a label template, use it. --> <ng-template [ngIf]=\\\"tab.templateLabel\\\"> <ng-template [cdkPortalHost]=\\\"tab.templateLabel\\\"></ng-template> </ng-template> <!-- If there is not a label template, fall back to the text label. --> <ng-template [ngIf]=\\\"!tab.templateLabel\\\">{{tab.textLabel}}</ng-template> </div> </md-tab-header> <div class=\\\"mat-tab-body-wrapper\\\" #tabBodyWrapper> <md-tab-body role=\\\"tabpanel\\\" *ngFor=\\\"let tab of _tabs; let i = index\\\" [id]=\\\"_getTabContentId(i)\\\" [attr.aria-labelledby]=\\\"_getTabLabelId(i)\\\" [class.mat-tab-body-active]=\\\"selectedIndex == i\\\" [content]=\\\"tab.content\\\" [position]=\\\"tab.position\\\" [origin]=\\\"tab.origin\\\" (onCentered)=\\\"_removeTabBodyWrapperHeight()\\\" (onCentering)=\\\"_setTabBodyWrapperHeight($event)\\\"> </md-tab-body> </div> \",\n                styles: [\":host{display:flex;flex-direction:column;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif}:host.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{line-height:48px;height:48px;padding:0 12px;font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-weight:500;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;position:relative}.mat-tab-label:focus{outline:0;opacity:1}@media (max-width:600px){.mat-tab-label{min-width:72px}}:host[mat-stretch-tabs] .mat-tab-label,:host[md-stretch-tabs] .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}.mat-tab-body{position:absolute;top:0;left:0;right:0;bottom:0;display:block;overflow:hidden}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}:host.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}.mat-tab-disabled{cursor:default;pointer-events:none} /*# sourceMappingURL=tab-group.css.map */ \"],\n                host: {\n                    '[class.mat-tab-group]': 'true',\n                    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n                    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabGroup.ctorParameters = function () { return [\n    { type: Renderer, },\n]; };\nMdTabGroup.propDecorators = {\n    '_tabs': [{ type: ContentChildren, args: [MdTab,] },],\n    '_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper',] },],\n    'dynamicHeight': [{ type: Input },],\n    '_dynamicHeightDeprecated': [{ type: Input, args: ['md-dynamic-height',] },],\n    'selectedIndex': [{ type: Input },],\n    'headerPosition': [{ type: Input },],\n    'selectedIndexChange': [{ type: Output },],\n    'focusChange': [{ type: Output },],\n    'selectChange': [{ type: Output },],\n};\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nvar MdTabLabelWrapper = (function () {\n    /**\n     * @param {?} elementRef\n     * @param {?} _renderer\n     */\n    function MdTabLabelWrapper(elementRef, _renderer) {\n        this.elementRef = elementRef;\n        this._renderer = _renderer;\n        this._disabled = false;\n    }\n    Object.defineProperty(MdTabLabelWrapper.prototype, \"disabled\", {\n        /**\n         * Whether the element is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets focus on the wrapper element\n     * @return {?}\n     */\n    MdTabLabelWrapper.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this.elementRef.nativeElement, 'focus');\n    };\n    /**\n     * @return {?}\n     */\n    MdTabLabelWrapper.prototype.getOffsetLeft = function () {\n        return this.elementRef.nativeElement.offsetLeft;\n    };\n    /**\n     * @return {?}\n     */\n    MdTabLabelWrapper.prototype.getOffsetWidth = function () {\n        return this.elementRef.nativeElement.offsetWidth;\n    };\n    return MdTabLabelWrapper;\n}());\nMdTabLabelWrapper.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',\n                host: {\n                    '[class.mat-tab-disabled]': 'disabled'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabLabelWrapper.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer, },\n]; };\nMdTabLabelWrapper.propDecorators = {\n    'disabled': [{ type: Input },],\n};\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nvar MdInkBar = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     */\n    function MdInkBar(_renderer, _elementRef, _ngZone) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n    }\n    /**\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\n     * Shows the ink bar if previously set as hidden.\n     * @param {?} element\n     * @return {?}\n     */\n    MdInkBar.prototype.alignToElement = function (element) {\n        var _this = this;\n        this.show();\n        this._ngZone.runOutsideAngular(function () {\n            requestAnimationFrame(function () {\n                _this._renderer.setElementStyle(_this._elementRef.nativeElement, 'left', _this._getLeftPosition(element));\n                _this._renderer.setElementStyle(_this._elementRef.nativeElement, 'width', _this._getElementWidth(element));\n            });\n        });\n    };\n    /**\n     * Shows the ink bar.\n     * @return {?}\n     */\n    MdInkBar.prototype.show = function () {\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n    };\n    /**\n     * Hides the ink bar.\n     * @return {?}\n     */\n    MdInkBar.prototype.hide = function () {\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n    };\n    /**\n     * Generates the pixel distance from the left based on the provided element in string format.\n     * @param {?} element\n     * @return {?}\n     */\n    MdInkBar.prototype._getLeftPosition = function (element) {\n        return element ? element.offsetLeft + 'px' : '0';\n    };\n    /**\n     * Generates the pixel width from the provided element in string format.\n     * @param {?} element\n     * @return {?}\n     */\n    MdInkBar.prototype._getElementWidth = function (element) {\n        return element ? element.offsetWidth + 'px' : '0';\n    };\n    return MdInkBar;\n}());\nMdInkBar.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-ink-bar, mat-ink-bar',\n                host: {\n                    '[class.mat-ink-bar]': 'true',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdInkBar.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n    { type: NgZone, },\n]; };\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nvar MdTabNavBar = (function () {\n    /**\n     * @param {?} _dir\n     */\n    function MdTabNavBar(_dir) {\n        var _this = this;\n        this._dir = _dir;\n        if (_dir) {\n            this._directionChange = _dir.dirChange.subscribe(function () { return _this._alignInkBar(); });\n        }\n    }\n    /**\n     * Notifies the component that the active link has been changed.\n     * @param {?} element\n     * @return {?}\n     */\n    MdTabNavBar.prototype.updateActiveLink = function (element) {\n        this._activeLinkChanged = this._activeLinkElement != element;\n        this._activeLinkElement = element;\n    };\n    /**\n     * Checks if the active link has been changed and, if so, will update the ink bar.\n     * @return {?}\n     */\n    MdTabNavBar.prototype.ngAfterContentChecked = function () {\n        if (this._activeLinkChanged) {\n            this._alignInkBar();\n            this._activeLinkChanged = false;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdTabNavBar.prototype.ngOnDestroy = function () {\n        if (this._directionChange) {\n            this._directionChange.unsubscribe();\n            this._directionChange = null;\n        }\n    };\n    /**\n     * Aligns the ink bar to the active link.\n     * @return {?}\n     */\n    MdTabNavBar.prototype._alignInkBar = function () {\n        this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    };\n    return MdTabNavBar;\n}());\nMdTabNavBar.decorators = [\n    { type: Component, args: [{ selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\n                template: \"<div class=\\\"mat-tab-links\\\"> <ng-content></ng-content> <md-ink-bar></md-ink-bar> </div> \",\n                styles: [\".mat-tab-nav-bar{overflow:hidden;position:relative;flex-shrink:0}.mat-tab-links{position:relative}.mat-tab-link{line-height:48px;height:48px;padding:0 12px;font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-weight:500;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-block;vertical-align:top;text-decoration:none;position:relative;overflow:hidden}.mat-tab-link:focus{outline:0;opacity:1}@media (max-width:600px){.mat-tab-link{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0} /*# sourceMappingURL=tab-nav-bar.css.map */ \"],\n                host: {\n                    '[class.mat-tab-nav-bar]': 'true',\n                },\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabNavBar.ctorParameters = function () { return [\n    { type: Dir, decorators: [{ type: Optional },] },\n]; };\nMdTabNavBar.propDecorators = {\n    '_inkBar': [{ type: ViewChild, args: [MdInkBar,] },],\n};\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nvar MdTabLink = (function () {\n    /**\n     * @param {?} _mdTabNavBar\n     * @param {?} _elementRef\n     */\n    function MdTabLink(_mdTabNavBar, _elementRef) {\n        this._mdTabNavBar = _mdTabNavBar;\n        this._elementRef = _elementRef;\n        this._isActive = false;\n    }\n    Object.defineProperty(MdTabLink.prototype, \"active\", {\n        /**\n         * Whether the link is active.\n         * @return {?}\n         */\n        get: function () { return this._isActive; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._isActive = value;\n            if (value) {\n                this._mdTabNavBar.updateActiveLink(this._elementRef);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MdTabLink;\n}());\nMdTabLink.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-tab-link], [mat-tab-link]',\n                host: {\n                    '[class.mat-tab-link]': 'true',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabLink.ctorParameters = function () { return [\n    { type: MdTabNavBar, },\n    { type: ElementRef, },\n]; };\nMdTabLink.propDecorators = {\n    'active': [{ type: Input },],\n};\n/**\n * Simple directive that extends the ripple and matches the selector of the MdTabLink. This\n * adds the ripple behavior to nav bar labels.\n */\nvar MdTabLinkRipple = (function (_super) {\n    __extends(MdTabLinkRipple, _super);\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} ruler\n     * @param {?} globalOptions\n     */\n    function MdTabLinkRipple(elementRef, ngZone, ruler, globalOptions) {\n        return _super.call(this, elementRef, ngZone, ruler, globalOptions) || this;\n    }\n    return MdTabLinkRipple;\n}(MdRipple));\nMdTabLinkRipple.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-tab-link], [mat-tab-link]',\n                host: {\n                    '[class.mat-tab-link]': 'true',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabLinkRipple.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: NgZone, },\n    { type: ViewportRuler, },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS,] },] },\n]; };\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nvar MdTabBody = (function () {\n    /**\n     * @param {?} _dir\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     */\n    function MdTabBody(_dir, _elementRef, _changeDetectorRef) {\n        this._dir = _dir;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Event emitted when the tab begins to animate towards the center as the active tab. */\n        this.onCentering = new EventEmitter();\n        /** Event emitted when the tab completes its animation towards the center. */\n        this.onCentered = new EventEmitter(true);\n        /** Whether the element is allowed to be animated. */\n        this._canBeAnimated = false;\n    }\n    Object.defineProperty(MdTabBody.prototype, \"position\", {\n        /**\n         * @param {?} position\n         * @return {?}\n         */\n        set: function (position) {\n            if (position < 0) {\n                this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n            }\n            else if (position > 0) {\n                this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n            }\n            else {\n                this._position = 'center';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabBody.prototype, \"origin\", {\n        /**\n         * The origin position from which this tab should appear when it is centered into view.\n         * @param {?} origin\n         * @return {?}\n         */\n        set: function (origin) {\n            if (origin == null) {\n                return;\n            }\n            var /** @type {?} */ dir = this._getLayoutDirection();\n            if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n                this._origin = 'left';\n            }\n            else {\n                this._origin = 'right';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     * @return {?}\n     */\n    MdTabBody.prototype.ngOnInit = function () {\n        if (this._position == 'center' && this._origin) {\n            this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n        }\n    };\n    /**\n     * After the view has been set, check if the tab content is set to the center and attach the\n     * content if it is not already attached.\n     * @return {?}\n     */\n    MdTabBody.prototype.ngAfterViewChecked = function () {\n        if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n            this._portalHost.attach(this._content);\n        }\n    };\n    /**\n     * After the content has been checked, determines whether the element should be allowed to\n     * animate. This has to be limited, because under a specific set of circumstances (see #2151),\n     * the animations can be triggered too early, which either crashes Chrome by putting it into an\n     * infinite loop (with Angular < 2.3.0) or throws an error because the element doesn't have a\n     * computed style (with Angular > 2.3.0). This can alternatively be determined by checking the\n     * transform: canBeAnimated = getComputedStyle(element) !== '', however document.contains should\n     * be faster since it doesn't cause a reflow.\n     *\n     * TODO: This can safely be removed after we stop supporting Angular < 2.4.2. The fix landed via\n     * https://github.com/angular/angular/commit/21030e9a1cf30e8101399d8535ed72d847a23ba6\n     * @return {?}\n     */\n    MdTabBody.prototype.ngAfterContentChecked = function () {\n        if (!this._canBeAnimated) {\n            this._canBeAnimated = document.body.contains(this._elementRef.nativeElement);\n            if (this._canBeAnimated) {\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    MdTabBody.prototype._onTranslateTabStarted = function (e) {\n        if (this._isCenterPosition(e.toState)) {\n            this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n        }\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    MdTabBody.prototype._onTranslateTabComplete = function (e) {\n        // If the end state is that the tab is not centered, then detach the content.\n        if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n            this._portalHost.detach();\n        }\n        // If the transition to the center is complete, emit an event.\n        if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n            this.onCentered.emit();\n        }\n    };\n    /**\n     * The text direction of the containing app.\n     * @return {?}\n     */\n    MdTabBody.prototype._getLayoutDirection = function () {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    };\n    /**\n     * Whether the provided position state is considered center, regardless of origin.\n     * @param {?} position\n     * @return {?}\n     */\n    MdTabBody.prototype._isCenterPosition = function (position) {\n        return position == 'center' ||\n            position == 'left-origin-center' ||\n            position == 'right-origin-center';\n    };\n    return MdTabBody;\n}());\nMdTabBody.decorators = [\n    { type: Component, args: [{ selector: 'md-tab-body, mat-tab-body',\n                template: \"<div class=\\\"mat-tab-body-content\\\" #content [@translateTab]=\\\"_canBeAnimated ? _position : null\\\" (@translateTab.start)=\\\"_onTranslateTabStarted($event)\\\" (@translateTab.done)=\\\"_onTranslateTabComplete($event)\\\"> <ng-template cdkPortalHost></ng-template> </div> \",\n                styles: [\".mat-tab-body-content{height:100%} /*# sourceMappingURL=tab-body.css.map */ \"],\n                host: {\n                    '[class.mat-tab-body]': 'true',\n                },\n                animations: [\n                    trigger('translateTab', [\n                        state('left', style({ transform: 'translate3d(-100%, 0, 0)' })),\n                        state('left-origin-center', style({ transform: 'translate3d(0, 0, 0)' })),\n                        state('right-origin-center', style({ transform: 'translate3d(0, 0, 0)' })),\n                        state('center', style({ transform: 'translate3d(0, 0, 0)' })),\n                        state('right', style({ transform: 'translate3d(100%, 0, 0)' })),\n                        transition('* => left, * => right, left => center, right => center', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n                        transition('void => left-origin-center', [\n                            style({ transform: 'translate3d(-100%, 0, 0)' }),\n                            animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n                        ]),\n                        transition('void => right-origin-center', [\n                            style({ transform: 'translate3d(100%, 0, 0)' }),\n                            animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n                        ])\n                    ])\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabBody.ctorParameters = function () { return [\n    { type: Dir, decorators: [{ type: Optional },] },\n    { type: ElementRef, },\n    { type: ChangeDetectorRef, },\n]; };\nMdTabBody.propDecorators = {\n    '_portalHost': [{ type: ViewChild, args: [PortalHostDirective,] },],\n    'onCentering': [{ type: Output },],\n    'onCentered': [{ type: Output },],\n    '_content': [{ type: Input, args: ['content',] },],\n    'position': [{ type: Input, args: ['position',] },],\n    'origin': [{ type: Input, args: ['origin',] },],\n};\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nvar EXAGGERATED_OVERSCROLL = 60;\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nvar MdTabHeader = (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _dir\n     */\n    function MdTabHeader(_elementRef, _dir) {\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._focusIndex = 0;\n        this._scrollDistance = 0;\n        this._selectedIndexChanged = false;\n        /** Whether the controls for pagination should be displayed */\n        this._showPaginationControls = false;\n        /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n        this._disableScrollAfter = true;\n        /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n        this._disableScrollBefore = true;\n        this._selectedIndex = 0;\n        /** Event emitted when the option is selected. */\n        this.selectFocusedIndex = new EventEmitter();\n        /** Event emitted when a label is focused. */\n        this.indexFocused = new EventEmitter();\n    }\n    Object.defineProperty(MdTabHeader.prototype, \"selectedIndex\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._selectedIndex; },\n        /**\n         * The index of the active tab.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._selectedIndexChanged = this._selectedIndex != value;\n            this._selectedIndex = value;\n            this._focusIndex = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdTabHeader.prototype.ngAfterContentChecked = function () {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this._tabLabelCount != this._labelWrappers.length) {\n            this._updatePagination();\n            this._tabLabelCount = this._labelWrappers.length;\n        }\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this._selectedIndexChanged) {\n            this._scrollToLabel(this._selectedIndex);\n            this._checkScrollingControls();\n            this._alignInkBarToSelectedTab();\n            this._selectedIndexChanged = false;\n        }\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this._scrollDistanceChanged) {\n            this._updateTabScrollPosition();\n            this._scrollDistanceChanged = false;\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdTabHeader.prototype._handleKeydown = function (event) {\n        switch (event.keyCode) {\n            case RIGHT_ARROW:\n                this._focusNextTab();\n                break;\n            case LEFT_ARROW:\n                this._focusPreviousTab();\n                break;\n            case ENTER:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                break;\n        }\n    };\n    /**\n     * Aligns the ink bar to the selected tab on load.\n     * @return {?}\n     */\n    MdTabHeader.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._alignInkBarToSelectedTab();\n        if (this._dir) {\n            this._directionChange = this._dir.dirChange.subscribe(function () { return _this._alignInkBarToSelectedTab(); });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdTabHeader.prototype.ngOnDestroy = function () {\n        if (this._directionChange) {\n            this._directionChange.unsubscribe();\n            this._directionChange = null;\n        }\n    };\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     * @return {?}\n     */\n    MdTabHeader.prototype._onContentChanges = function () {\n        this._updatePagination();\n        this._alignInkBarToSelectedTab();\n    };\n    /**\n     * Updating the view whether pagination should be enabled or not\n     * @return {?}\n     */\n    MdTabHeader.prototype._updatePagination = function () {\n        this._checkPaginationEnabled();\n        this._checkScrollingControls();\n        this._updateTabScrollPosition();\n    };\n    Object.defineProperty(MdTabHeader.prototype, \"focusIndex\", {\n        /**\n         * Tracks which element has focus; used for keyboard navigation\n         * @return {?}\n         */\n        get: function () { return this._focusIndex; },\n        /**\n         * When the focus index is set, we must manually send focus to the correct label\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (!this._isValidIndex(value) || this._focusIndex == value) {\n                return;\n            }\n            this._focusIndex = value;\n            this.indexFocused.emit(value);\n            this._setTabFocus(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     * @param {?} index\n     * @return {?}\n     */\n    MdTabHeader.prototype._isValidIndex = function (index) {\n        if (!this._labelWrappers) {\n            return true;\n        }\n        var /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n        return tab && !tab.disabled;\n    };\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     * @param {?} tabIndex\n     * @return {?}\n     */\n    MdTabHeader.prototype._setTabFocus = function (tabIndex) {\n        if (this._showPaginationControls) {\n            this._scrollToLabel(tabIndex);\n        }\n        if (this._labelWrappers && this._labelWrappers.length) {\n            this._labelWrappers.toArray()[tabIndex].focus();\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            var /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n            var /** @type {?} */ dir = this._getLayoutDirection();\n            if (dir == 'ltr') {\n                containerEl.scrollLeft = 0;\n            }\n            else {\n                containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    };\n    /**\n     * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n     * Valid offsets are 1 and -1.\n     * @param {?} offset\n     * @return {?}\n     */\n    MdTabHeader.prototype._moveFocus = function (offset) {\n        if (this._labelWrappers) {\n            var /** @type {?} */ tabs = this._labelWrappers.toArray();\n            for (var /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n                if (this._isValidIndex(i)) {\n                    this.focusIndex = i;\n                    return;\n                }\n            }\n        }\n    };\n    /**\n     * Increment the focus index by 1 until a valid tab is found.\n     * @return {?}\n     */\n    MdTabHeader.prototype._focusNextTab = function () {\n        this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n    };\n    /**\n     * Decrement the focus index by 1 until a valid tab is found.\n     * @return {?}\n     */\n    MdTabHeader.prototype._focusPreviousTab = function () {\n        this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n    };\n    /**\n     * The layout direction of the containing app.\n     * @return {?}\n     */\n    MdTabHeader.prototype._getLayoutDirection = function () {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    };\n    /**\n     * Performs the CSS transformation on the tab list that will cause the list to scroll.\n     * @return {?}\n     */\n    MdTabHeader.prototype._updateTabScrollPosition = function () {\n        var /** @type {?} */ translateX = this.scrollDistance + 'px';\n        if (this._getLayoutDirection() == 'ltr') {\n            translateX = '-' + translateX;\n        }\n        applyCssTransform(this._tabList.nativeElement, \"translate3d(\" + translateX + \", 0, 0)\");\n    };\n    Object.defineProperty(MdTabHeader.prototype, \"scrollDistance\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._scrollDistance; },\n        /**\n         * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n            // Mark that the scroll distance has changed so that after the view is checked, the CSS\n            // transformation can move the header.\n            this._scrollDistanceChanged = true;\n            this._checkScrollingControls();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} scrollDir\n     * @return {?}\n     */\n    MdTabHeader.prototype._scrollHeader = function (scrollDir) {\n        var /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n    };\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} labelIndex\n     * @return {?}\n     */\n    MdTabHeader.prototype._scrollToLabel = function (labelIndex) {\n        var /** @type {?} */ selectedLabel = this._labelWrappers\n            ? this._labelWrappers.toArray()[labelIndex]\n            : null;\n        if (!selectedLabel) {\n            return;\n        }\n        // The view length is the visible width of the tab labels.\n        var /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        var /** @type {?} */ labelBeforePos, /** @type {?} */ labelAfterPos;\n        if (this._getLayoutDirection() == 'ltr') {\n            labelBeforePos = selectedLabel.getOffsetLeft();\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n        }\n        else {\n            labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n        }\n        var /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n        var /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        }\n        else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    };\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    MdTabHeader.prototype._checkPaginationEnabled = function () {\n        this._showPaginationControls =\n            this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n        if (!this._showPaginationControls) {\n            this.scrollDistance = 0;\n        }\n    };\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    MdTabHeader.prototype._checkScrollingControls = function () {\n        // Check if the pagination arrows should be activated.\n        this._disableScrollBefore = this.scrollDistance == 0;\n        this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    };\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    MdTabHeader.prototype._getMaxScrollDistance = function () {\n        var /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n        var /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        return lengthOfTabList - viewLength;\n    };\n    /**\n     * Tells the ink-bar to align itself to the current label wrapper\n     * @return {?}\n     */\n    MdTabHeader.prototype._alignInkBarToSelectedTab = function () {\n        var /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length\n            ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement\n            : null;\n        this._inkBar.alignToElement(selectedLabelWrapper);\n    };\n    return MdTabHeader;\n}());\nMdTabHeader.decorators = [\n    { type: Component, args: [{ selector: 'md-tab-header, mat-tab-header',\n                template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\" aria-hidden=\\\"true\\\" md-ripple [mdRippleDisabled]=\\\"_disableScrollBefore\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\" (click)=\\\"_scrollHeader('before')\\\"> <div class=\\\"mat-tab-header-pagination-chevron\\\"></div> </div> <div class=\\\"mat-tab-label-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\"> <div class=\\\"mat-tab-list\\\" #tabList role=\\\"tablist\\\" (cdkObserveContent)=\\\"_onContentChanges()\\\"> <div class=\\\"mat-tab-labels\\\"> <ng-content></ng-content> </div> <md-ink-bar></md-ink-bar> </div> </div> <div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\" aria-hidden=\\\"true\\\" md-ripple [mdRippleDisabled]=\\\"_disableScrollAfter\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\" (click)=\\\"_scrollHeader('after')\\\"> <div class=\\\"mat-tab-header-pagination-chevron\\\"></div> </div> \",\n                styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-label{line-height:48px;height:48px;padding:0 12px;font-size:14px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-weight:500;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;position:relative}.mat-tab-label:focus{outline:0;opacity:1}@media (max-width:600px){.mat-tab-label{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.mat-tab-header-pagination{position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron{border-color:#ccc}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-labels{display:flex} /*# sourceMappingURL=tab-header.css.map */ \"],\n                encapsulation: ViewEncapsulation.None,\n                host: {\n                    'class': 'mat-tab-header',\n                    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n                    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabHeader.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Dir, decorators: [{ type: Optional },] },\n]; };\nMdTabHeader.propDecorators = {\n    '_labelWrappers': [{ type: ContentChildren, args: [MdTabLabelWrapper,] },],\n    '_inkBar': [{ type: ViewChild, args: [MdInkBar,] },],\n    '_tabListContainer': [{ type: ViewChild, args: ['tabListContainer',] },],\n    '_tabList': [{ type: ViewChild, args: ['tabList',] },],\n    'selectedIndex': [{ type: Input },],\n    'selectFocusedIndex': [{ type: Output },],\n    'indexFocused': [{ type: Output },],\n};\nvar MdTabsModule = (function () {\n    function MdTabsModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdTabsModule.forRoot = function () {\n        return {\n            ngModule: MdTabsModule,\n            providers: []\n        };\n    };\n    return MdTabsModule;\n}());\nMdTabsModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    PortalModule,\n                    MdRippleModule,\n                    ObserveContentModule,\n                ],\n                // Don't export all components because some are only to be used internally.\n                exports: [\n                    MdTabGroup,\n                    MdTabLabel,\n                    MdTab,\n                    MdTabNavBar,\n                    MdTabLink,\n                    MdTabLinkRipple\n                ],\n                declarations: [\n                    MdTabGroup,\n                    MdTabLabel,\n                    MdTab,\n                    MdInkBar,\n                    MdTabLabelWrapper,\n                    MdTabNavBar,\n                    MdTabLink,\n                    MdTabBody,\n                    MdTabLinkRipple,\n                    MdTabHeader\n                ],\n                providers: [VIEWPORT_RULER_PROVIDER, SCROLL_DISPATCHER_PROVIDER],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTabsModule.ctorParameters = function () { return []; };\nvar MdToolbarRow = (function () {\n    function MdToolbarRow() {\n    }\n    return MdToolbarRow;\n}());\nMdToolbarRow.decorators = [\n    { type: Directive, args: [{\n                selector: 'md-toolbar-row, mat-toolbar-row',\n                host: {\n                    '[class.mat-toolbar-row]': 'true',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdToolbarRow.ctorParameters = function () { return []; };\nvar MdToolbar = (function () {\n    /**\n     * @param {?} elementRef\n     * @param {?} renderer\n     */\n    function MdToolbar(elementRef, renderer) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n    }\n    Object.defineProperty(MdToolbar.prototype, \"color\", {\n        /**\n         * The color of the toolbar. Can be primary, accent, or warn.\n         * @return {?}\n         */\n        get: function () {\n            return this._color;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._updateColor(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newColor\n     * @return {?}\n     */\n    MdToolbar.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    /**\n     * @param {?} color\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdToolbar.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this.renderer.setElementClass(this.elementRef.nativeElement, \"mat-\" + color, isAdd);\n        }\n    };\n    return MdToolbar;\n}());\nMdToolbar.decorators = [\n    { type: Component, args: [{ selector: 'md-toolbar, mat-toolbar',\n                template: \"<div class=\\\"mat-toolbar-layout\\\"> <md-toolbar-row> <ng-content></ng-content> </md-toolbar-row> <ng-content select=\\\"md-toolbar-row, mat-toolbar-row\\\"></ng-content> </div> \",\n                styles: [\".mat-toolbar{display:flex;box-sizing:border-box;width:100%;font-size:20px;font-weight:500;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;padding:0 16px;flex-direction:column}.mat-toolbar .mat-toolbar-row{display:flex;box-sizing:border-box;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar{min-height:64px}.mat-toolbar-row{height:64px}@media (max-width:600px){.mat-toolbar{min-height:56px}.mat-toolbar-row{height:56px}} /*# sourceMappingURL=toolbar.css.map */ \"],\n                host: {\n                    '[class.mat-toolbar]': 'true',\n                    'role': 'toolbar'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            },] },\n];\n/**\n * @nocollapse\n */\nMdToolbar.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer, },\n]; };\nMdToolbar.propDecorators = {\n    'color': [{ type: Input },],\n};\nvar MdToolbarModule = (function () {\n    function MdToolbarModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdToolbarModule.forRoot = function () {\n        return {\n            ngModule: MdToolbarModule,\n            providers: []\n        };\n    };\n    return MdToolbarModule;\n}());\nMdToolbarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CompatibilityModule],\n                exports: [MdToolbar, MdToolbarRow, CompatibilityModule],\n                declarations: [MdToolbar, MdToolbarRow],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdToolbarModule.ctorParameters = function () { return []; };\n/**\n * Exception thrown when a tooltip has an invalid position.\n * \\@docs-private\n */\nvar MdTooltipInvalidPositionError = (function (_super) {\n    __extends(MdTooltipInvalidPositionError, _super);\n    /**\n     * @param {?} position\n     */\n    function MdTooltipInvalidPositionError(position) {\n        return _super.call(this, \"Tooltip position \\\"\" + position + \"\\\" is invalid.\") || this;\n    }\n    return MdTooltipInvalidPositionError;\n}(MdError));\n/** Time in ms to delay before changing the tooltip visibility to hidden */\nvar TOUCHEND_HIDE_DELAY = 1500;\n/** Time in ms to throttle repositioning after scroll events. */\nvar SCROLL_THROTTLE_MS = 20;\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\nvar MdTooltip = (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _elementRef\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _ngZone\n     * @param {?} _renderer\n     * @param {?} _platform\n     * @param {?} _dir\n     */\n    function MdTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _renderer, _platform, _dir) {\n        var _this = this;\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._renderer = _renderer;\n        this._platform = _platform;\n        this._dir = _dir;\n        this._position = 'below';\n        this._disabled = false;\n        /** The default delay in ms before showing the tooltip after show is called */\n        this.showDelay = 0;\n        /** The default delay in ms before hiding the tooltip after hide is called */\n        this.hideDelay = 0;\n        // The mouse events shouldn't be bound on iOS devices, because\n        // they can prevent the first tap from firing it's click event.\n        if (!_platform.IOS) {\n            _renderer.listen(_elementRef.nativeElement, 'mouseenter', function () { return _this.show(); });\n            _renderer.listen(_elementRef.nativeElement, 'mouseleave', function () { return _this.hide(); });\n        }\n    }\n    Object.defineProperty(MdTooltip.prototype, \"position\", {\n        /**\n         * Allows the user to define the position of the tooltip relative to the parent element\n         * @return {?}\n         */\n        get: function () { return this._position; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (value !== this._position) {\n                this._position = value;\n                // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n                // the tooltip.\n                if (this._tooltipInstance) {\n                    this._disposeTooltip();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"disabled\", {\n        /**\n         * Disables the display of the tooltip.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            // If tooltip is disabled, hide immediately.\n            if (this._disabled) {\n                this.hide(0);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_positionDeprecated\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this._position; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._position = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"message\", {\n        /**\n         * The message to be displayed in the tooltip\n         * @return {?}\n         */\n        get: function () { return this._message; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._message = value;\n            if (this._tooltipInstance) {\n                this._setTooltipMessage(this._message);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_deprecatedMessage\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.message; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.message = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matMessage\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.message; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.message = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matPosition\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.position; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.position = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matDisabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.disabled; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.disabled = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matHideDelay\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.hideDelay; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.hideDelay = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matShowDelay\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.showDelay; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.showDelay = v; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdTooltip.prototype.ngOnInit = function () {\n        var _this = this;\n        // When a scroll on the page occurs, update the position in case this tooltip needs\n        // to be repositioned.\n        this.scrollSubscription = this._scrollDispatcher.scrolled(SCROLL_THROTTLE_MS, function () {\n            if (_this._overlayRef) {\n                _this._overlayRef.updatePosition();\n            }\n        });\n    };\n    /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n    MdTooltip.prototype.ngOnDestroy = function () {\n        if (this._tooltipInstance) {\n            this._disposeTooltip();\n        }\n        if (this.scrollSubscription) {\n            this.scrollSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    MdTooltip.prototype.show = function (delay) {\n        if (delay === void 0) { delay = this.showDelay; }\n        if (this.disabled || !this._message || !this._message.trim()) {\n            return;\n        }\n        if (!this._tooltipInstance) {\n            this._createTooltip();\n        }\n        this._setTooltipMessage(this._message);\n        this._tooltipInstance.show(this._position, delay);\n    };\n    /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    MdTooltip.prototype.hide = function (delay) {\n        if (delay === void 0) { delay = this.hideDelay; }\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    };\n    /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n    MdTooltip.prototype.toggle = function () {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    };\n    /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n    MdTooltip.prototype._isTooltipVisible = function () {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    };\n    /**\n     * Create the tooltip to display\n     * @return {?}\n     */\n    MdTooltip.prototype._createTooltip = function () {\n        var _this = this;\n        this._createOverlay();\n        var /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = this._overlayRef.attach(portal).instance;\n        // Dispose the overlay when finished the shown tooltip.\n        this._tooltipInstance.afterHidden().subscribe(function () {\n            // Check first if the tooltip has already been removed through this components destroy.\n            if (_this._tooltipInstance) {\n                _this._disposeTooltip();\n            }\n        });\n    };\n    /**\n     * Create the overlay config and position strategy\n     * @return {?}\n     */\n    MdTooltip.prototype._createOverlay = function () {\n        var _this = this;\n        var /** @type {?} */ origin = this._getOrigin();\n        var /** @type {?} */ position = this._getOverlayPosition();\n        // Create connected position strategy that listens for scroll events to reposition.\n        // After position changes occur and the overlay is clipped by a parent scrollable then\n        // close the tooltip.\n        var /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n        strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n        strategy.onPositionChange.subscribe(function (change) {\n            if (change.scrollableViewProperties.isOverlayClipped &&\n                _this._tooltipInstance && _this._tooltipInstance.isVisible()) {\n                _this.hide(0);\n            }\n        });\n        var /** @type {?} */ config = new OverlayState();\n        config.positionStrategy = strategy;\n        this._overlayRef = this._overlay.create(config);\n    };\n    /**\n     * Disposes the current tooltip and the overlay it is attached to\n     * @return {?}\n     */\n    MdTooltip.prototype._disposeTooltip = function () {\n        this._overlayRef.dispose();\n        this._overlayRef = null;\n        this._tooltipInstance = null;\n    };\n    /**\n     * Returns the origin position based on the user's position preference\n     * @return {?}\n     */\n    MdTooltip.prototype._getOrigin = function () {\n        if (this.position == 'above' || this.position == 'below') {\n            return { originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom' };\n        }\n        var /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n        if (this.position == 'left' ||\n            this.position == 'before' && isDirectionLtr ||\n            this.position == 'after' && !isDirectionLtr) {\n            return { originX: 'start', originY: 'center' };\n        }\n        if (this.position == 'right' ||\n            this.position == 'after' && isDirectionLtr ||\n            this.position == 'before' && !isDirectionLtr) {\n            return { originX: 'end', originY: 'center' };\n        }\n        throw new MdTooltipInvalidPositionError(this.position);\n    };\n    /**\n     * Returns the overlay position based on the user's preference\n     * @return {?}\n     */\n    MdTooltip.prototype._getOverlayPosition = function () {\n        if (this.position == 'above') {\n            return { overlayX: 'center', overlayY: 'bottom' };\n        }\n        if (this.position == 'below') {\n            return { overlayX: 'center', overlayY: 'top' };\n        }\n        var /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n        if (this.position == 'left' ||\n            this.position == 'before' && isLtr ||\n            this.position == 'after' && !isLtr) {\n            return { overlayX: 'end', overlayY: 'center' };\n        }\n        if (this.position == 'right' ||\n            this.position == 'after' && isLtr ||\n            this.position == 'before' && !isLtr) {\n            return { overlayX: 'start', overlayY: 'center' };\n        }\n        throw new MdTooltipInvalidPositionError(this.position);\n    };\n    /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @param {?} message\n     * @return {?}\n     */\n    MdTooltip.prototype._setTooltipMessage = function (message) {\n        var _this = this;\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        this._tooltipInstance.message = message;\n        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {\n            if (_this._tooltipInstance) {\n                _this._overlayRef.updatePosition();\n            }\n        });\n    };\n    return MdTooltip;\n}());\nMdTooltip.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n                host: {\n                    '(longpress)': 'show()',\n                    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n                },\n                exportAs: 'mdTooltip',\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTooltip.ctorParameters = function () { return [\n    { type: Overlay, },\n    { type: ElementRef, },\n    { type: ScrollDispatcher, },\n    { type: ViewContainerRef, },\n    { type: NgZone, },\n    { type: Renderer, },\n    { type: Platform, },\n    { type: Dir, decorators: [{ type: Optional },] },\n]; };\nMdTooltip.propDecorators = {\n    'position': [{ type: Input, args: ['mdTooltipPosition',] },],\n    'disabled': [{ type: Input, args: ['mdTooltipDisabled',] },],\n    '_positionDeprecated': [{ type: Input, args: ['tooltip-position',] },],\n    'showDelay': [{ type: Input, args: ['mdTooltipShowDelay',] },],\n    'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay',] },],\n    'message': [{ type: Input, args: ['mdTooltip',] },],\n    '_deprecatedMessage': [{ type: Input, args: ['md-tooltip',] },],\n    '_matMessage': [{ type: Input, args: ['matTooltip',] },],\n    '_matPosition': [{ type: Input, args: ['matTooltipPosition',] },],\n    '_matDisabled': [{ type: Input, args: ['matTooltipDisabled',] },],\n    '_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay',] },],\n    '_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay',] },],\n};\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nvar TooltipComponent = (function () {\n    /**\n     * @param {?} _dir\n     * @param {?} _changeDetectorRef\n     */\n    function TooltipComponent(_dir, _changeDetectorRef) {\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** The transform origin used in the animation for showing and hiding the tooltip */\n        this._transformOrigin = 'bottom';\n        this._onHide = new Subject();\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param {?} position Position of the tooltip.\n     * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n     * @return {?}\n     */\n    TooltipComponent.prototype.show = function (position, delay) {\n        var _this = this;\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._setTransformOrigin(position);\n        this._showTimeoutId = setTimeout(function () {\n            _this._visibility = 'visible';\n            // If this was set to true immediately, then a body click that triggers show() would\n            // trigger interaction and close the tooltip right after it was displayed.\n            _this._closeOnInteraction = false;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            _this._changeDetectorRef.markForCheck();\n            setTimeout(function () { _this._closeOnInteraction = true; }, 0);\n        }, delay);\n    };\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n    TooltipComponent.prototype.hide = function (delay) {\n        var _this = this;\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n        }\n        this._hideTimeoutId = setTimeout(function () {\n            _this._visibility = 'hidden';\n            _this._closeOnInteraction = false;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            _this._changeDetectorRef.markForCheck();\n        }, delay);\n    };\n    /**\n     * Returns an observable that notifies when the tooltip has been hidden from view\n     * @return {?}\n     */\n    TooltipComponent.prototype.afterHidden = function () {\n        return this._onHide.asObservable();\n    };\n    /**\n     * Whether the tooltip is being displayed\n     * @return {?}\n     */\n    TooltipComponent.prototype.isVisible = function () {\n        return this._visibility === 'visible';\n    };\n    /**\n     * Sets the tooltip transform origin according to the tooltip position\n     * @param {?} value\n     * @return {?}\n     */\n    TooltipComponent.prototype._setTransformOrigin = function (value) {\n        var /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n        switch (value) {\n            case 'before':\n                this._transformOrigin = isLtr ? 'right' : 'left';\n                break;\n            case 'after':\n                this._transformOrigin = isLtr ? 'left' : 'right';\n                break;\n            case 'left':\n                this._transformOrigin = 'right';\n                break;\n            case 'right':\n                this._transformOrigin = 'left';\n                break;\n            case 'above':\n                this._transformOrigin = 'bottom';\n                break;\n            case 'below':\n                this._transformOrigin = 'top';\n                break;\n            default: throw new MdTooltipInvalidPositionError(value);\n        }\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    TooltipComponent.prototype._afterVisibilityAnimation = function (e) {\n        if (e.toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n    };\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.google.com/components/tooltips.html#tooltips-interaction\n     * @return {?}\n     */\n    TooltipComponent.prototype._handleBodyInteraction = function () {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    };\n    return TooltipComponent;\n}());\nTooltipComponent.decorators = [\n    { type: Component, args: [{ selector: 'md-tooltip-component, mat-tooltip-component',\n                template: \"<div class=\\\"mat-tooltip\\\" [style.transform-origin]=\\\"_transformOrigin\\\" [@state]=\\\"_visibility\\\" (@state.done)=\\\"_afterVisibilityAnimation($event)\\\"> {{message}} </div>\",\n                styles: [\":host{pointer-events:none}.mat-tooltip{color:#fff;padding:6px 8px;border-radius:2px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-size:10px;margin:14px;max-width:250px}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}} /*# sourceMappingURL=tooltip.css.map */ \"],\n                animations: [\n                    trigger('state', [\n                        state('void', style({ transform: 'scale(0)' })),\n                        state('initial', style({ transform: 'scale(0)' })),\n                        state('visible', style({ transform: 'scale(1)' })),\n                        state('hidden', style({ transform: 'scale(0)' })),\n                        transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n                        transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n                    ])\n                ],\n                host: {\n                    '(body:click)': 'this._handleBodyInteraction()'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nTooltipComponent.ctorParameters = function () { return [\n    { type: Dir, decorators: [{ type: Optional },] },\n    { type: ChangeDetectorRef, },\n]; };\nvar MdTooltipModule = (function () {\n    function MdTooltipModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdTooltipModule.forRoot = function () {\n        return {\n            ngModule: MdTooltipModule,\n            providers: []\n        };\n    };\n    return MdTooltipModule;\n}());\nMdTooltipModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [OverlayModule, CompatibilityModule, PlatformModule],\n                exports: [MdTooltip, TooltipComponent, CompatibilityModule],\n                declarations: [MdTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdTooltipModule.ctorParameters = function () { return []; };\n/**\n * Exception thrown when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n */\nvar MdMenuMissingError = (function (_super) {\n    __extends(MdMenuMissingError, _super);\n    function MdMenuMissingError() {\n        return _super.call(this, \"md-menu-trigger: must pass in an md-menu instance.\\n\\n    Example:\\n      <md-menu #menu=\\\"mdMenu\\\"></md-menu>\\n      <button [mdMenuTriggerFor]=\\\"menu\\\"></button>\\n    \") || this;\n    }\n    return MdMenuMissingError;\n}(MdError));\n/**\n * Exception thrown when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n */\nvar MdMenuInvalidPositionX = (function (_super) {\n    __extends(MdMenuInvalidPositionX, _super);\n    function MdMenuInvalidPositionX() {\n        return _super.call(this, \"x-position value must be either 'before' or after'.\\n      Example: <md-menu x-position=\\\"before\\\" #menu=\\\"mdMenu\\\"></md-menu>\\n    \") || this;\n    }\n    return MdMenuInvalidPositionX;\n}(MdError));\n/**\n * Exception thrown when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n */\nvar MdMenuInvalidPositionY = (function (_super) {\n    __extends(MdMenuInvalidPositionY, _super);\n    function MdMenuInvalidPositionY() {\n        return _super.call(this, \"y-position value must be either 'above' or below'.\\n      Example: <md-menu y-position=\\\"above\\\" #menu=\\\"mdMenu\\\"></md-menu>\\n    \") || this;\n    }\n    return MdMenuInvalidPositionY;\n}(MdError));\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nvar MdMenuItem = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdMenuItem(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._disabled = false;\n    }\n    /**\n     * Focuses the menu item.\n     * @return {?}\n     */\n    MdMenuItem.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n    };\n    Object.defineProperty(MdMenuItem.prototype, \"disabled\", {\n        /**\n         * Whether the menu item is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Used to set the `tabindex`.\n     * @return {?}\n     */\n    MdMenuItem.prototype._getTabIndex = function () {\n        return this._disabled ? '-1' : '0';\n    };\n    /**\n     * Used to set the HTML `disabled` attribute. Necessary for links to be disabled properly.\n     * @return {?}\n     */\n    MdMenuItem.prototype._getDisabledAttr = function () {\n        return this._disabled ? true : null;\n    };\n    /**\n     * Returns the host DOM element.\n     * @return {?}\n     */\n    MdMenuItem.prototype._getHostElement = function () {\n        return this._elementRef.nativeElement;\n    };\n    /**\n     * Prevents the default element actions if it is disabled.\n     * @param {?} event\n     * @return {?}\n     */\n    MdMenuItem.prototype._checkDisabled = function (event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    };\n    return MdMenuItem;\n}());\nMdMenuItem.decorators = [\n    { type: Component, args: [{ selector: '[md-menu-item], [mat-menu-item]',\n                host: {\n                    'role': 'menuitem',\n                    '[class.mat-menu-item]': 'true',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.disabled]': '_getDisabledAttr()',\n                    '(click)': '_checkDisabled($event)',\n                },\n                template: \"<ng-content></ng-content> <div class=\\\"mat-menu-ripple\\\" *ngIf=\\\"!disabled\\\" md-ripple [mdRippleTrigger]=\\\"_getHostElement()\\\"> </div> \",\n                exportAs: 'mdMenuItem'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdMenuItem.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n]; };\nMdMenuItem.propDecorators = {\n    'disabled': [{ type: Input },],\n};\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on AngularJS Material.\n */\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nvar transformMenu = trigger('transformMenu', [\n    state('showing', style({\n        opacity: 1,\n        transform: \"scale(1)\"\n    })),\n    transition('void => *', [\n        style({\n            opacity: 0,\n            transform: \"scale(0)\"\n        }),\n        animate(\"200ms cubic-bezier(0.25, 0.8, 0.25, 1)\")\n    ]),\n    transition('* => void', [\n        animate('50ms 100ms linear', style({ opacity: 0 }))\n    ])\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nvar fadeInItems = trigger('fadeInItems', [\n    state('showing', style({ opacity: 1 })),\n    transition('void => *', [\n        style({ opacity: 0 }),\n        animate(\"200ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)\")\n    ])\n]);\n// TODO(kara): prevent-close functionality\nvar MdMenu = (function () {\n    /**\n     * @param {?} posX\n     * @param {?} posY\n     * @param {?} deprecatedPosX\n     * @param {?} deprecatedPosY\n     */\n    function MdMenu(posX, posY, deprecatedPosX, deprecatedPosY) {\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Position of the menu in the X axis. */\n        this.positionX = 'after';\n        /** Position of the menu in the Y axis. */\n        this.positionY = 'below';\n        this.overlapTrigger = true;\n        /** Event emitted when the menu is closed. */\n        this.close = new EventEmitter();\n        // TODO(kara): Remove kebab-case attributes after next release\n        if (deprecatedPosX) {\n            this._setPositionX(deprecatedPosX);\n        }\n        if (deprecatedPosY) {\n            this._setPositionY(deprecatedPosY);\n        }\n        if (posX) {\n            this._setPositionX(posX);\n        }\n        if (posY) {\n            this._setPositionY(posY);\n        }\n        this.setPositionClasses(this.positionX, this.positionY);\n    }\n    /**\n     * @return {?}\n     */\n    MdMenu.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._keyManager = new FocusKeyManager(this.items).withWrap();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(function () {\n            _this._emitCloseEvent();\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdMenu.prototype.ngOnDestroy = function () {\n        if (this._tabSubscription) {\n            this._tabSubscription.unsubscribe();\n        }\n    };\n    Object.defineProperty(MdMenu.prototype, \"classList\", {\n        /**\n         * This method takes classes set on the host md-menu element and applies them on the\n         * menu template that displays in the overlay container.  Otherwise, it's difficult\n         * to style the containing menu from outside the component.\n         * @param {?} classes list of class names\n         * @return {?}\n         */\n        set: function (classes) {\n            this._classList = classes.split(' ').reduce(function (obj, className) {\n                obj[className] = true;\n                return obj;\n            }, {});\n            this.setPositionClasses(this.positionX, this.positionY);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focus the first item in the menu. This method is used by the menu trigger\n     * to focus the first item when the menu is opened by the ENTER key.\n     * @return {?}\n     */\n    MdMenu.prototype.focusFirstItem = function () {\n        this._keyManager.setFirstItemActive();\n    };\n    /**\n     * This emits a close event to which the trigger is subscribed. When emitted, the\n     * trigger will close the menu.\n     * @return {?}\n     */\n    MdMenu.prototype._emitCloseEvent = function () {\n        this.close.emit();\n    };\n    /**\n     * @param {?} pos\n     * @return {?}\n     */\n    MdMenu.prototype._setPositionX = function (pos) {\n        if (pos !== 'before' && pos !== 'after') {\n            throw new MdMenuInvalidPositionX();\n        }\n        this.positionX = pos;\n    };\n    /**\n     * @param {?} pos\n     * @return {?}\n     */\n    MdMenu.prototype._setPositionY = function (pos) {\n        if (pos !== 'above' && pos !== 'below') {\n            throw new MdMenuInvalidPositionY();\n        }\n        this.positionY = pos;\n    };\n    /**\n     * It's necessary to set position-based classes to ensure the menu panel animation\n     * folds out from the correct direction.\n     * @param {?} posX\n     * @param {?} posY\n     * @return {?}\n     */\n    MdMenu.prototype.setPositionClasses = function (posX, posY) {\n        this._classList['mat-menu-before'] = posX == 'before';\n        this._classList['mat-menu-after'] = posX == 'after';\n        this._classList['mat-menu-above'] = posY == 'above';\n        this._classList['mat-menu-below'] = posY == 'below';\n    };\n    return MdMenu;\n}());\nMdMenu.decorators = [\n    { type: Component, args: [{ selector: 'md-menu, mat-menu',\n                host: { 'role': 'menu' },\n                template: \"<ng-template> <div class=\\\"mat-menu-panel\\\" [ngClass]=\\\"_classList\\\" (keydown)=\\\"_keyManager.onKeydown($event)\\\" (click)=\\\"_emitCloseEvent()\\\" [@transformMenu]=\\\"'showing'\\\"> <div class=\\\"mat-menu-content\\\" [@fadeInItems]=\\\"'showing'\\\"> <ng-content></ng-content> </div> </div> </ng-template> \",\n                styles: [\".mat-menu-panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh + 48px)}.mat-menu-panel.mat-menu-after.mat-menu-below{transform-origin:left top}.mat-menu-panel.mat-menu-after.mat-menu-above{transform-origin:left bottom}.mat-menu-panel.mat-menu-before.mat-menu-below{transform-origin:right top}.mat-menu-panel.mat-menu-before.mat-menu-above{transform-origin:right bottom}[dir=rtl] .mat-menu-panel.mat-menu-after.mat-menu-below{transform-origin:right top}[dir=rtl] .mat-menu-panel.mat-menu-after.mat-menu-above{transform-origin:right bottom}[dir=rtl] .mat-menu-panel.mat-menu-before.mat-menu-below{transform-origin:left top}[dir=rtl] .mat-menu-panel.mat-menu-before.mat-menu-above{transform-origin:left bottom}@media screen and (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content{padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;font-size:16px;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;text-align:left;text-decoration:none;position:relative}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px}button.mat-menu-item{width:100%}.mat-menu-ripple{position:absolute;top:0;left:0;bottom:0;right:0} /*# sourceMappingURL=menu.css.map */ \"],\n                encapsulation: ViewEncapsulation.None,\n                animations: [\n                    transformMenu,\n                    fadeInItems\n                ],\n                exportAs: 'mdMenu'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdMenu.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: Attribute, args: ['xPosition',] },] },\n    { type: undefined, decorators: [{ type: Attribute, args: ['yPosition',] },] },\n    { type: undefined, decorators: [{ type: Attribute, args: ['x-position',] },] },\n    { type: undefined, decorators: [{ type: Attribute, args: ['y-position',] },] },\n]; };\nMdMenu.propDecorators = {\n    'templateRef': [{ type: ViewChild, args: [TemplateRef,] },],\n    'items': [{ type: ContentChildren, args: [MdMenuItem,] },],\n    'overlapTrigger': [{ type: Input },],\n    'classList': [{ type: Input, args: ['class',] },],\n    'close': [{ type: Output },],\n};\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nvar MdMenuTrigger = (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _element\n     * @param {?} _viewContainerRef\n     * @param {?} _renderer\n     * @param {?} _dir\n     */\n    function MdMenuTrigger(_overlay, _element, _viewContainerRef, _renderer, _dir) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._renderer = _renderer;\n        this._dir = _dir;\n        this._menuOpen = false;\n        this._openedByMouse = false;\n        /** Event emitted when the associated menu is opened. */\n        this.onMenuOpen = new EventEmitter();\n        /** Event emitted when the associated menu is closed. */\n        this.onMenuClose = new EventEmitter();\n    }\n    Object.defineProperty(MdMenuTrigger.prototype, \"_deprecatedMdMenuTriggerFor\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.menu; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.menu = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdMenuTrigger.prototype, \"_deprecatedMatMenuTriggerFor\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.menu; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.menu = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdMenuTrigger.prototype, \"_matMenuTriggerFor\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.menu; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.menu = v; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this._checkMenu();\n        this.menu.close.subscribe(function () { return _this.closeMenu(); });\n    };\n    /**\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.ngOnDestroy = function () { this.destroyMenu(); };\n    Object.defineProperty(MdMenuTrigger.prototype, \"menuOpen\", {\n        /**\n         * Whether the menu is open.\n         * @return {?}\n         */\n        get: function () { return this._menuOpen; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Toggles the menu between the open and closed states.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.toggleMenu = function () {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    };\n    /**\n     * Opens the menu.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.openMenu = function () {\n        if (!this._menuOpen) {\n            this._createOverlay();\n            this._overlayRef.attach(this._portal);\n            this._subscribeToBackdrop();\n            this._initMenu();\n        }\n    };\n    /**\n     * Closes the menu.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.closeMenu = function () {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this._backdropSubscription.unsubscribe();\n            this._resetMenu();\n        }\n    };\n    /**\n     * Removes the menu from the DOM.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.destroyMenu = function () {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n            this._cleanUpSubscriptions();\n        }\n    };\n    /**\n     * Focuses the menu trigger.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.focus = function () {\n        this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');\n    };\n    Object.defineProperty(MdMenuTrigger.prototype, \"dir\", {\n        /**\n         * The text direction of the containing app.\n         * @return {?}\n         */\n        get: function () {\n            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This method ensures that the menu closes when the overlay backdrop is clicked.\n     * We do not use first() here because doing so would not catch clicks from within\n     * the menu, and it would fail to unsubscribe properly. Instead, we unsubscribe\n     * explicitly when the menu is closed or destroyed.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._subscribeToBackdrop = function () {\n        var _this = this;\n        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {\n            _this.menu._emitCloseEvent();\n        });\n    };\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._initMenu = function () {\n        this._setIsMenuOpen(true);\n        // Should only set focus if opened via the keyboard, so keyboard users can\n        // can easily navigate menu items. According to spec, mouse users should not\n        // see the focus style.\n        if (!this._openedByMouse) {\n            this.menu.focusFirstItem();\n        }\n    };\n    ;\n    /**\n     * This method resets the menu when it's closed, most importantly restoring\n     * focus to the menu trigger if the menu was opened via the keyboard.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._resetMenu = function () {\n        this._setIsMenuOpen(false);\n        // Focus only needs to be reset to the host element if the menu was opened\n        // by the keyboard and manually shifted to the first menu item.\n        if (!this._openedByMouse) {\n            this.focus();\n        }\n        this._openedByMouse = false;\n    };\n    /**\n     * @param {?} isOpen\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._setIsMenuOpen = function (isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n    };\n    /**\n     *  This method checks that a valid instance of MdMenu has been passed into\n     *  mdMenuTriggerFor. If not, an exception is thrown.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._checkMenu = function () {\n        if (!this.menu) {\n            throw new MdMenuMissingError();\n        }\n    };\n    /**\n     *  This method creates the overlay from the provided menu's template and saves its\n     *  OverlayRef so that it can be attached to the DOM when openMenu is called.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._createOverlay = function () {\n        if (!this._overlayRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n            var /** @type {?} */ config = this._getOverlayConfig();\n            this._subscribeToPositions(/** @type {?} */ (config.positionStrategy));\n            this._overlayRef = this._overlay.create(config);\n        }\n    };\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @return {?} OverlayState\n     */\n    MdMenuTrigger.prototype._getOverlayConfig = function () {\n        var /** @type {?} */ overlayState = new OverlayState();\n        overlayState.positionStrategy = this._getPosition()\n            .withDirection(this.dir);\n        overlayState.hasBackdrop = true;\n        overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\n        overlayState.direction = this.dir;\n        return overlayState;\n    };\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     * @param {?} position\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._subscribeToPositions = function (position) {\n        var _this = this;\n        this._positionSubscription = position.onPositionChange.subscribe(function (change) {\n            var /** @type {?} */ posX = change.connectionPair.originX === 'start' ? 'after' : 'before';\n            var /** @type {?} */ posY = change.connectionPair.originY === 'top' ? 'below' : 'above';\n            if (!_this.menu.overlapTrigger) {\n                posY = posY === 'below' ? 'above' : 'below';\n            }\n            _this.menu.setPositionClasses(posX, posY);\n        });\n    };\n    /**\n     * This method builds the position strategy for the overlay, so the menu is properly connected\n     * to the trigger.\n     * @return {?} ConnectedPositionStrategy\n     */\n    MdMenuTrigger.prototype._getPosition = function () {\n        var _a = this.menu.positionX === 'before' ? ['end', 'start'] : ['start', 'end'], posX = _a[0], fallbackX = _a[1];\n        var _b = this.menu.positionY === 'above' ? ['bottom', 'top'] : ['top', 'bottom'], overlayY = _b[0], fallbackOverlayY = _b[1];\n        var /** @type {?} */ originY = overlayY;\n        var /** @type {?} */ fallbackOriginY = fallbackOverlayY;\n        if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            fallbackOriginY = fallbackOverlayY === 'top' ? 'bottom' : 'top';\n        }\n        return this._overlay.position()\n            .connectedTo(this._element, { originX: posX, originY: originY }, { overlayX: posX, overlayY: overlayY })\n            .withFallbackPosition({ originX: fallbackX, originY: originY }, { overlayX: fallbackX, overlayY: overlayY })\n            .withFallbackPosition({ originX: posX, originY: fallbackOriginY }, { overlayX: posX, overlayY: fallbackOverlayY })\n            .withFallbackPosition({ originX: fallbackX, originY: fallbackOriginY }, { overlayX: fallbackX, overlayY: fallbackOverlayY });\n    };\n    /**\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._cleanUpSubscriptions = function () {\n        if (this._backdropSubscription) {\n            this._backdropSubscription.unsubscribe();\n        }\n        if (this._positionSubscription) {\n            this._positionSubscription.unsubscribe();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._handleMousedown = function (event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            this._openedByMouse = true;\n        }\n    };\n    return MdMenuTrigger;\n}());\nMdMenuTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: \"[md-menu-trigger-for], [mat-menu-trigger-for],\\n             [mdMenuTriggerFor], [matMenuTriggerFor]\",\n                host: {\n                    'aria-haspopup': 'true',\n                    '(mousedown)': '_handleMousedown($event)',\n                    '(click)': 'toggleMenu()',\n                },\n                exportAs: 'mdMenuTrigger'\n            },] },\n];\n/**\n * @nocollapse\n */\nMdMenuTrigger.ctorParameters = function () { return [\n    { type: Overlay, },\n    { type: ElementRef, },\n    { type: ViewContainerRef, },\n    { type: Renderer, },\n    { type: Dir, decorators: [{ type: Optional },] },\n]; };\nMdMenuTrigger.propDecorators = {\n    '_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for',] },],\n    '_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for',] },],\n    '_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor',] },],\n    'menu': [{ type: Input, args: ['mdMenuTriggerFor',] },],\n    'onMenuOpen': [{ type: Output },],\n    'onMenuClose': [{ type: Output },],\n};\nvar MdMenuModule = (function () {\n    function MdMenuModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdMenuModule.forRoot = function () {\n        return {\n            ngModule: MdMenuModule,\n            providers: [],\n        };\n    };\n    return MdMenuModule;\n}());\nMdMenuModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    CommonModule,\n                    MdRippleModule,\n                    CompatibilityModule,\n                ],\n                exports: [MdMenu, MdMenuItem, MdMenuTrigger, CompatibilityModule],\n                declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdMenuModule.ctorParameters = function () { return []; };\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nvar MdDialogRef = (function () {\n    /**\n     * @param {?} _overlayRef\n     * @param {?} _containerInstance\n     */\n    function MdDialogRef(_overlayRef, _containerInstance) {\n        var _this = this;\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this._afterClosed = new Subject();\n        _containerInstance._onAnimationStateChange.subscribe(function (state$$1) {\n            if (state$$1 === 'exit-start') {\n                // Transition the backdrop in parallel with the dialog.\n                _this._overlayRef.detachBackdrop();\n            }\n            else if (state$$1 === 'exit') {\n                _this._overlayRef.dispose();\n                _this._afterClosed.next(_this._result);\n                _this._afterClosed.complete();\n                _this.componentInstance = null;\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\n     * @return {?}\n     */\n    MdDialogRef.prototype.close = function (dialogResult) {\n        this._result = dialogResult;\n        this._containerInstance._exit();\n    };\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    MdDialogRef.prototype.afterClosed = function () {\n        return this._afterClosed.asObservable();\n    };\n    /**\n     * Updates the dialog's position.\n     * @param {?=} position New dialog position.\n     * @return {?}\n     */\n    MdDialogRef.prototype.updatePosition = function (position) {\n        var /** @type {?} */ strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    };\n    /**\n     * Updates the dialog's width and height.\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {?}\n     */\n    MdDialogRef.prototype.updateSize = function (width, height) {\n        if (width === void 0) { width = 'auto'; }\n        if (height === void 0) { height = 'auto'; }\n        this._getPositionStrategy().width(width).height(height);\n        this._overlayRef.updatePosition();\n        return this;\n    };\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @return {?}\n     */\n    MdDialogRef.prototype._getPositionStrategy = function () {\n        return (this._overlayRef.getState().positionStrategy);\n    };\n    return MdDialogRef;\n}());\nvar MD_DIALOG_DATA = new OpaqueToken('MdDialogData');\n/**\n * Custom injector type specifically for instantiating components with a dialog.\n */\nvar DialogInjector = (function () {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _dialogRef\n     * @param {?} _data\n     */\n    function DialogInjector(_parentInjector, _dialogRef, _data) {\n        this._parentInjector = _parentInjector;\n        this._dialogRef = _dialogRef;\n        this._data = _data;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    DialogInjector.prototype.get = function (token, notFoundValue) {\n        if (token === MdDialogRef) {\n            return this._dialogRef;\n        }\n        if (token === MD_DIALOG_DATA && this._data) {\n            return this._data;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    };\n    return DialogInjector;\n}());\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nvar MdDialogConfig = (function () {\n    function MdDialogConfig() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Whether the user can use escape or clicking outside to close a modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n    return MdDialogConfig;\n}());\n/**\n * Exception thrown when a ComponentPortal is attached to a DomPortalHost without an origin.\n * \\@docs-private\n */\nvar MdDialogContentAlreadyAttachedError = (function (_super) {\n    __extends(MdDialogContentAlreadyAttachedError, _super);\n    function MdDialogContentAlreadyAttachedError() {\n        return _super.call(this, 'Attempting to attach dialog content after content is already attached') || this;\n    }\n    return MdDialogContentAlreadyAttachedError;\n}(MdError));\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nvar MdDialogContainer = (function (_super) {\n    __extends(MdDialogContainer, _super);\n    /**\n     * @param {?} _ngZone\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     */\n    function MdDialogContainer(_ngZone, _renderer, _elementRef, _focusTrapFactory) {\n        var _this = _super.call(this) || this;\n        _this._ngZone = _ngZone;\n        _this._renderer = _renderer;\n        _this._elementRef = _elementRef;\n        _this._focusTrapFactory = _focusTrapFactory;\n        _this._elementFocusedBeforeDialogWasOpened = null;\n        /** State of the dialog animation. */\n        _this._state = 'enter';\n        /** Emits the current animation state whenever it changes. */\n        _this._onAnimationStateChange = new EventEmitter();\n        return _this;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    MdDialogContainer.prototype.attachComponentPortal = function (portal) {\n        if (this._portalHost.hasAttached()) {\n            throw new MdDialogContentAlreadyAttachedError();\n        }\n        return this._portalHost.attachComponentPortal(portal);\n    };\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    MdDialogContainer.prototype.attachTemplatePortal = function (portal) {\n        if (this._portalHost.hasAttached()) {\n            throw new MdDialogContentAlreadyAttachedError();\n        }\n        return this._portalHost.attachTemplatePortal(portal);\n    };\n    /**\n     * Moves the focus inside the focus trap.\n     * @return {?}\n     */\n    MdDialogContainer.prototype._trapFocus = function () {\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        }\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        this._elementFocusedBeforeDialogWasOpened = (document.activeElement);\n        this._focusTrap.focusFirstTabbableElementWhenReady();\n    };\n    /**\n     * Kicks off the leave animation.\n     * \\@docs-private\n     * @return {?}\n     */\n    MdDialogContainer.prototype._exit = function () {\n        this._state = 'exit';\n        this._onAnimationStateChange.emit('exit-start');\n    };\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    MdDialogContainer.prototype._onAnimationDone = function (event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        this._onAnimationStateChange.emit(/** @type {?} */ (event.toState));\n    };\n    /**\n     * @return {?}\n     */\n    MdDialogContainer.prototype.ngOnDestroy = function () {\n        // When the dialog is destroyed, return focus to the element that originally had it before\n        // the dialog was opened. Wait for the DOM to finish settling before changing the focus so\n        // that it doesn't end up back on the <body>. Also note that we need the extra check, because\n        // IE can set the `activeElement` to null in some cases.\n        var /** @type {?} */ toFocus = (this._elementFocusedBeforeDialogWasOpened);\n        // We shouldn't use `this` inside of the NgZone subscription, because it causes a memory leak.\n        var /** @type {?} */ animationStream = this._onAnimationStateChange;\n        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {\n            if (toFocus && 'focus' in toFocus) {\n                toFocus.focus();\n            }\n            animationStream.complete();\n        });\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    };\n    return MdDialogContainer;\n}(BasePortalHost));\nMdDialogContainer.decorators = [\n    { type: Component, args: [{ selector: 'md-dialog-container, mat-dialog-container',\n                template: \"<ng-template cdkPortalHost></ng-template> \",\n                styles: [\".mat-dialog-container{box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);display:block;padding:24px;border-radius:2px;box-sizing:border-box;overflow:auto;max-width:80vw;width:100%;height:100%}@media screen and (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto}.mat-dialog-title{font-size:20px;font-weight:700;margin:0 0 20px;display:block}.mat-dialog-actions{padding:12px 0;display:flex}.mat-dialog-actions:last-child{margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center} /*# sourceMappingURL=dialog.css.map */ \"],\n                encapsulation: ViewEncapsulation.None,\n                animations: [\n                    trigger('slideDialog', [\n                        state('void', style({ transform: 'translateY(25%) scale(0.9)', opacity: 0 })),\n                        state('enter', style({ transform: 'translateY(0%) scale(1)', opacity: 1 })),\n                        state('exit', style({ transform: 'translateY(25%)', opacity: 0 })),\n                        transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n                    ])\n                ],\n                host: {\n                    '[class.mat-dialog-container]': 'true',\n                    '[attr.role]': 'dialogConfig?.role',\n                    '[@slideDialog]': '_state',\n                    '(@slideDialog.done)': '_onAnimationDone($event)',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDialogContainer.ctorParameters = function () { return [\n    { type: NgZone, },\n    { type: Renderer, },\n    { type: ElementRef, },\n    { type: FocusTrapFactory, },\n]; };\nMdDialogContainer.propDecorators = {\n    '_portalHost': [{ type: ViewChild, args: [PortalHostDirective,] },],\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nvar MdDialog = (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _parentDialog\n     */\n    function MdDialog(_overlay, _injector, _parentDialog) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._parentDialog = _parentDialog;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenAtThisLevel = new Subject();\n        this._boundKeydown = this._handleKeydown.bind(this);\n        /** Gets an observable that is notified when a dialog has been opened. */\n        this.afterOpen = this._afterOpen.asObservable();\n        /** Gets an observable that is notified when all open dialog have finished closing. */\n        this.afterAllClosed = this._afterAllClosed.asObservable();\n    }\n    Object.defineProperty(MdDialog.prototype, \"_openDialogs\", {\n        /**\n         * Keeps track of the currently-open dialogs.\n         * @return {?}\n         */\n        get: function () {\n            return this._parentDialog ? this._parentDialog._openDialogs : this._openDialogsAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDialog.prototype, \"_afterOpen\", {\n        /**\n         * Subject for notifying the user that a dialog has opened.\n         * @return {?}\n         */\n        get: function () {\n            return this._parentDialog ? this._parentDialog._afterOpen : this._afterOpenAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDialog.prototype, \"_afterAllClosed\", {\n        /**\n         * Subject for notifying the user that all open dialogs have finished closing.\n         * @return {?}\n         */\n        get: function () {\n            return this._parentDialog ?\n                this._parentDialog._afterAllClosed : this._afterAllClosedAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    MdDialog.prototype.open = function (componentOrTemplateRef, config) {\n        var _this = this;\n        config = _applyConfigDefaults$1(config);\n        var /** @type {?} */ overlayRef = this._createOverlay(config);\n        var /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n        var /** @type {?} */ dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        if (!this._openDialogs.length && !this._parentDialog) {\n            document.addEventListener('keydown', this._boundKeydown);\n        }\n        this._openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(function () { return _this._removeOpenDialog(dialogRef); });\n        this._afterOpen.next(dialogRef);\n        return dialogRef;\n    };\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n    MdDialog.prototype.closeAll = function () {\n        var /** @type {?} */ i = this._openDialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            this._openDialogs[i].close();\n        }\n    };\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n    MdDialog.prototype._createOverlay = function (config) {\n        var /** @type {?} */ overlayState = this._getOverlayState(config);\n        return this._overlay.create(overlayState);\n    };\n    /**\n     * Creates an overlay state from a dialog config.\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n    MdDialog.prototype._getOverlayState = function (dialogConfig) {\n        var /** @type {?} */ overlayState = new OverlayState();\n        overlayState.hasBackdrop = true;\n        overlayState.positionStrategy = this._overlay.position().global();\n        return overlayState;\n    };\n    /**\n     * Attaches an MdDialogContainer to a dialog's already-created overlay.\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n    MdDialog.prototype._attachDialogContainer = function (overlay, config) {\n        var /** @type {?} */ viewContainer = config ? config.viewContainerRef : null;\n        var /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, viewContainer);\n        var /** @type {?} */ containerRef = overlay.attach(containerPortal);\n        containerRef.instance.dialogConfig = config;\n        return containerRef.instance;\n    };\n    /**\n     * Attaches the user-provided component to the already-created MdDialogContainer.\n     * @template T\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n     */\n    MdDialog.prototype._attachDialogContent = function (componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        var /** @type {?} */ dialogRef = new MdDialogRef(overlayRef, dialogContainer);\n        if (!config.disableClose) {\n            // When the dialog backdrop is clicked, we want to close it.\n            overlayRef.backdropClick().first().subscribe(function () { return dialogRef.close(); });\n        }\n        // We create an injector specifically for the component we're instantiating so that it can\n        // inject the MdDialogRef. This allows a component loaded inside of a dialog to close itself\n        // and, optionally, to return a value.\n        var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        var /** @type {?} */ dialogInjector = new DialogInjector(userInjector || this._injector, dialogRef, config.data);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null));\n        }\n        else {\n            var /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, null, dialogInjector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    };\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n    MdDialog.prototype._removeOpenDialog = function (dialogRef) {\n        var /** @type {?} */ index = this._openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this._openDialogs.splice(index, 1);\n            // no open dialogs are left, call next on afterAllClosed Subject\n            if (!this._openDialogs.length) {\n                this._afterAllClosed.next();\n                document.removeEventListener('keydown', this._boundKeydown);\n            }\n        }\n    };\n    /**\n     * Handles global key presses while there are open dialogs. Closes the\n     * top dialog when the user presses escape.\n     * @param {?} event\n     * @return {?}\n     */\n    MdDialog.prototype._handleKeydown = function (event) {\n        var /** @type {?} */ topDialog = this._openDialogs[this._openDialogs.length - 1];\n        if (event.keyCode === ESCAPE && topDialog &&\n            !topDialog._containerInstance.dialogConfig.disableClose) {\n            topDialog.close();\n        }\n    };\n    return MdDialog;\n}());\nMdDialog.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nMdDialog.ctorParameters = function () { return [\n    { type: Overlay, },\n    { type: Injector, },\n    { type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf },] },\n]; };\n/**\n * Applies default options to the dialog config.\n * @param {?} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults$1(config) {\n    return extendObject(new MdDialogConfig(), config);\n}\n/**\n * Button that will close the current dialog.\n */\nvar MdDialogClose = (function () {\n    /**\n     * @param {?} dialogRef\n     */\n    function MdDialogClose(dialogRef) {\n        this.dialogRef = dialogRef;\n        /** Screenreader label for the button. */\n        this.ariaLabel = 'Close dialog';\n    }\n    return MdDialogClose;\n}());\nMdDialogClose.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[md-dialog-close], button[mat-dialog-close]',\n                host: {\n                    '(click)': 'dialogRef.close()',\n                    '[attr.aria-label]': 'ariaLabel',\n                    'type': 'button',\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDialogClose.ctorParameters = function () { return [\n    { type: MdDialogRef, },\n]; };\nMdDialogClose.propDecorators = {\n    'ariaLabel': [{ type: Input, args: ['aria-label',] },],\n};\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nvar MdDialogTitle = (function () {\n    function MdDialogTitle() {\n    }\n    return MdDialogTitle;\n}());\nMdDialogTitle.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-dialog-title], [mat-dialog-title]',\n                host: {\n                    '[class.mat-dialog-title]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDialogTitle.ctorParameters = function () { return []; };\n/**\n * Scrollable content container of a dialog.\n */\nvar MdDialogContent = (function () {\n    function MdDialogContent() {\n    }\n    return MdDialogContent;\n}());\nMdDialogContent.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content',\n                host: {\n                    '[class.mat-dialog-content]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDialogContent.ctorParameters = function () { return []; };\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nvar MdDialogActions = (function () {\n    function MdDialogActions() {\n    }\n    return MdDialogActions;\n}());\nMdDialogActions.decorators = [\n    { type: Directive, args: [{\n                selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions',\n                host: {\n                    '[class.mat-dialog-actions]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDialogActions.ctorParameters = function () { return []; };\nvar MdDialogModule = (function () {\n    function MdDialogModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdDialogModule.forRoot = function () {\n        return {\n            ngModule: MdDialogModule,\n            providers: [],\n        };\n    };\n    return MdDialogModule;\n}());\nMdDialogModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    A11yModule,\n                    CompatibilityModule,\n                ],\n                exports: [\n                    MdDialogContainer,\n                    MdDialogClose,\n                    MdDialogTitle,\n                    MdDialogContent,\n                    MdDialogActions,\n                    CompatibilityModule,\n                ],\n                declarations: [\n                    MdDialogContainer,\n                    MdDialogClose,\n                    MdDialogTitle,\n                    MdDialogActions,\n                    MdDialogContent,\n                ],\n                providers: [\n                    MdDialog,\n                ],\n                entryComponents: [MdDialogContainer],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdDialogModule.ctorParameters = function () { return []; };\nvar ActiveDescendantKeyManager = (function (_super) {\n    __extends(ActiveDescendantKeyManager, _super);\n    /**\n     * @param {?} items\n     */\n    function ActiveDescendantKeyManager(items) {\n        return _super.call(this, items) || this;\n    }\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     * @param {?} index\n     * @return {?}\n     */\n    ActiveDescendantKeyManager.prototype.setActiveItem = function (index) {\n        var _this = this;\n        Promise.resolve().then(function () {\n            if (_this.activeItem) {\n                _this.activeItem.setInactiveStyles();\n            }\n            _super.prototype.setActiveItem.call(_this, index);\n            if (_this.activeItem) {\n                _this.activeItem.setActiveStyles();\n            }\n        });\n    };\n    return ActiveDescendantKeyManager;\n}(ListKeyManager));\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nvar _uniqueAutocompleteIdCounter = 0;\nvar MdAutocomplete = (function () {\n    function MdAutocomplete() {\n        /** Whether the autocomplete panel displays above or below its trigger. */\n        this.positionY = 'below';\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = \"md-autocomplete-\" + _uniqueAutocompleteIdCounter++;\n    }\n    /**\n     * @return {?}\n     */\n    MdAutocomplete.prototype.ngAfterContentInit = function () {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n    };\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display\n     * options below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    MdAutocomplete.prototype._setScrollTop = function (scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    };\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    MdAutocomplete.prototype._setVisibility = function () {\n        var _this = this;\n        Promise.resolve().then(function () { return _this.showPanel = !!_this.options.length; });\n    };\n    /**\n     * Sets a class on the panel based on its position (used to set y-offset).\n     * @return {?}\n     */\n    MdAutocomplete.prototype._getClassList = function () {\n        return {\n            'mat-autocomplete-panel-below': this.positionY === 'below',\n            'mat-autocomplete-panel-above': this.positionY === 'above',\n            'mat-autocomplete-visible': this.showPanel,\n            'mat-autocomplete-hidden': !this.showPanel\n        };\n    };\n    return MdAutocomplete;\n}());\nMdAutocomplete.decorators = [\n    { type: Component, args: [{ selector: 'md-autocomplete, mat-autocomplete',\n                template: \"<ng-template> <div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_getClassList()\\\" #panel> <ng-content></ng-content> </div> </ng-template> \",\n                styles: [\".mat-autocomplete-panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative}.mat-autocomplete-panel.mat-autocomplete-panel-below{top:6px}.mat-autocomplete-panel.mat-autocomplete-panel-above{top:-24px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden} /*# sourceMappingURL=autocomplete.css.map */ \"],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'mdAutocomplete',\n                host: {\n                    '[class.mat-autocomplete]': 'true'\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMdAutocomplete.ctorParameters = function () { return []; };\nMdAutocomplete.propDecorators = {\n    'template': [{ type: ViewChild, args: [TemplateRef,] },],\n    'panel': [{ type: ViewChild, args: ['panel',] },],\n    'options': [{ type: ContentChildren, args: [MdOption,] },],\n    'displayWith': [{ type: Input },],\n};\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/** The height of each autocomplete option. */\nvar AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** The total height of the autocomplete panel. */\nvar AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nvar MD_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MdAutocompleteTrigger; }),\n    multi: true\n};\nvar MdAutocompleteTrigger = (function () {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _dir\n     * @param {?} _zone\n     * @param {?} _inputContainer\n     */\n    function MdAutocompleteTrigger(_element, _overlay, _viewContainerRef, _dir, _zone, _inputContainer) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._zone = _zone;\n        this._inputContainer = _inputContainer;\n        this._panelOpen = false;\n        this._blurStream = new Subject();\n        this._manuallyFloatingPlaceholder = false;\n        /** View -> model callback called when value changes */\n        this._onChange = function (value) { };\n        /** View -> model callback called when autocomplete has been touched */\n        this._onTouched = function () { };\n    }\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"_matAutocomplete\", {\n        /**\n         * Property with mat- prefix for no-conflict mode.\n         * @return {?}\n         */\n        get: function () {\n            return this.autocomplete;\n        },\n        /**\n         * @param {?} autocomplete\n         * @return {?}\n         */\n        set: function (autocomplete) {\n            this.autocomplete = autocomplete;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.ngOnDestroy = function () {\n        if (this._panelPositionSubscription) {\n            this._panelPositionSubscription.unsubscribe();\n        }\n        this._destroyPanel();\n    };\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"panelOpen\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._panelOpen && this.autocomplete.showPanel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.openPanel = function () {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            /** Update the panel width, in case the host width has changed */\n            this._overlayRef.getState().width = this._getHostWidth();\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._portal);\n            this._subscribeToClosingActions();\n        }\n        this.autocomplete._setVisibility();\n        this._floatPlaceholder();\n        this._panelOpen = true;\n    };\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.closePanel = function () {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._panelOpen = false;\n        this._resetPlaceholder();\n    };\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"panelClosingActions\", {\n        /**\n         * A stream of actions that should close the autocomplete panel, including\n         * when an option is selected, on blur, and when TAB is pressed.\n         * @return {?}\n         */\n        get: function () {\n            return Observable.merge(this.optionSelections, this._blurStream.asObservable(), this.autocomplete._keyManager.tabOut);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"optionSelections\", {\n        /**\n         * Stream of autocomplete option selections.\n         * @return {?}\n         */\n        get: function () {\n            return Observable.merge.apply(Observable, this.autocomplete.options.map(function (option) { return option.onSelectionChange; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"activeOption\", {\n        /**\n         * The currently active option, coerced to MdOption type.\n         * @return {?}\n         */\n        get: function () {\n            if (this.autocomplete._keyManager) {\n                return (this.autocomplete._keyManager.activeItem);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.writeValue = function (value) {\n        var _this = this;\n        Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });\n    };\n    /**\n     * Saves a callback function to be invoked when the autocomplete's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.registerOnChange = function (fn) {\n        this._onChange = fn;\n    };\n    /**\n     * Saves a callback function to be invoked when the autocomplete is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._handleKeydown = function (event) {\n        var _this = this;\n        if (this.activeOption && event.keyCode === ENTER) {\n            this.activeOption._selectViaInteraction();\n            event.preventDefault();\n        }\n        else {\n            this.autocomplete._keyManager.onKeydown(event);\n            if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n                this.openPanel();\n                Promise.resolve().then(function () { return _this._scrollToOption(); });\n            }\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._handleInput = function (event) {\n        // We need to ensure that the input is focused, because IE will fire the `input`\n        // event on focus/blur/load if the input has a placeholder. See:\n        // https://connect.microsoft.com/IE/feedback/details/885747/\n        if (document.activeElement === event.target) {\n            this._onChange(((event.target)).value);\n            this.openPanel();\n        }\n    };\n    /**\n     * @param {?} newlyFocusedTag\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._handleBlur = function (newlyFocusedTag) {\n        this._onTouched();\n        // Only emit blur event if the new focus is *not* on an option.\n        if (newlyFocusedTag !== 'MD-OPTION') {\n            this._blurStream.next(null);\n        }\n    };\n    /**\n     * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the placeholder until the panel can be closed.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._floatPlaceholder = function () {\n        if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n            this._inputContainer.floatPlaceholder = 'always';\n            this._manuallyFloatingPlaceholder = true;\n        }\n    };\n    /**\n     * If the placeholder has been manually elevated, return it to its normal state.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._resetPlaceholder = function () {\n        if (this._manuallyFloatingPlaceholder) {\n            this._inputContainer.floatPlaceholder = 'auto';\n            this._manuallyFloatingPlaceholder = false;\n        }\n    };\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. The new scrollTop will be that offset - the panel height + the option\n     * height, so the active option will be just visible at the bottom of the panel.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._scrollToOption = function () {\n        var /** @type {?} */ optionOffset = this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT;\n        var /** @type {?} */ newScrollTop = Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n        this.autocomplete._setScrollTop(newScrollTop);\n    };\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._subscribeToClosingActions = function () {\n        var _this = this;\n        // When the zone is stable initially, and when the option list changes...\n        Observable.merge(this._zone.onStable.first(), this.autocomplete.options.changes)\n            .switchMap(function () {\n            _this._resetPanel();\n            return _this.panelClosingActions;\n        })\n            .first()\n            .subscribe(function (event) { return _this._setValueAndClose(event); });\n    };\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._destroyPanel = function () {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._setTriggerValue = function (value) {\n        var /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n        this._element.nativeElement.value = toDisplay || '';\n    };\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @param {?} event\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._setValueAndClose = function (event) {\n        if (event) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n        }\n        this.closePanel();\n    };\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @param {?} skip\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._clearPreviousSelectedOption = function (skip) {\n        this.autocomplete.options.forEach(function (option) {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._createOverlay = function () {\n        this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n        this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    };\n    /**\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._getOverlayConfig = function () {\n        var /** @type {?} */ overlayState = new OverlayState();\n        overlayState.positionStrategy = this._getOverlayPosition();\n        overlayState.width = this._getHostWidth();\n        overlayState.direction = this._dir ? this._dir.value : 'ltr';\n        return overlayState;\n    };\n    /**\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._getOverlayPosition = function () {\n        this._positionStrategy = this._overlay.position().connectedTo(this._element, { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })\n            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' });\n        this._subscribeToPositionChanges(this._positionStrategy);\n        return this._positionStrategy;\n    };\n    /**\n     * This method subscribes to position changes in the autocomplete panel, so the panel's\n     * y-offset can be adjusted to match the new position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._subscribeToPositionChanges = function (strategy) {\n        var _this = this;\n        this._panelPositionSubscription = strategy.onPositionChange.subscribe(function (change) {\n            _this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n        });\n    };\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._getHostWidth = function () {\n        return this._element.nativeElement.getBoundingClientRect().width;\n    };\n    /**\n     * Reset active item to null so arrow events will activate the correct options.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._resetActiveItem = function () {\n        this.autocomplete._keyManager.setActiveItem(null);\n    };\n    /**\n     * Resets the active item and re-calculates alignment of the panel in case its size\n     * has changed due to fewer or greater number of options.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._resetPanel = function () {\n        this._resetActiveItem();\n        this._positionStrategy.recalculateLastPosition();\n        this.autocomplete._setVisibility();\n    };\n    return MdAutocompleteTrigger;\n}());\nMdAutocompleteTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[mdAutocomplete], input[matAutocomplete]',\n                host: {\n                    'role': 'combobox',\n                    'autocomplete': 'off',\n                    'aria-autocomplete': 'list',\n                    'aria-multiline': 'false',\n                    '[attr.aria-activedescendant]': 'activeOption?.id',\n                    '[attr.aria-expanded]': 'panelOpen.toString()',\n                    '[attr.aria-owns]': 'autocomplete?.id',\n                    '(focus)': 'openPanel()',\n                    '(blur)': '_handleBlur($event.relatedTarget?.tagName)',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                },\n                providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nMdAutocompleteTrigger.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Overlay, },\n    { type: ViewContainerRef, },\n    { type: Dir, decorators: [{ type: Optional },] },\n    { type: NgZone, },\n    { type: MdInputContainer, decorators: [{ type: Optional }, { type: Host },] },\n]; };\nMdAutocompleteTrigger.propDecorators = {\n    'autocomplete': [{ type: Input, args: ['mdAutocomplete',] },],\n    '_matAutocomplete': [{ type: Input, args: ['matAutocomplete',] },],\n};\nvar MdAutocompleteModule = (function () {\n    function MdAutocompleteModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MdAutocompleteModule.forRoot = function () {\n        return {\n            ngModule: MdAutocompleteModule,\n            providers: [OVERLAY_PROVIDERS]\n        };\n    };\n    return MdAutocompleteModule;\n}());\nMdAutocompleteModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MdOptionModule, OverlayModule, CompatibilityModule, CommonModule],\n                exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, CompatibilityModule],\n                declarations: [MdAutocomplete, MdAutocompleteTrigger],\n            },] },\n];\n/**\n * @nocollapse\n */\nMdAutocompleteModule.ctorParameters = function () { return []; };\nvar MATERIAL_MODULES = [\n    MdAutocompleteModule,\n    MdButtonModule,\n    MdButtonToggleModule,\n    MdCardModule,\n    MdChipsModule,\n    MdCheckboxModule,\n    MdDialogModule,\n    MdGridListModule,\n    MdIconModule,\n    MdInputModule,\n    MdListModule,\n    MdMenuModule,\n    MdProgressBarModule,\n    MdProgressSpinnerModule,\n    MdRadioModule,\n    MdRippleModule,\n    MdSelectModule,\n    MdSidenavModule,\n    MdSliderModule,\n    MdSlideToggleModule,\n    MdSnackBarModule,\n    MdTabsModule,\n    MdToolbarModule,\n    MdTooltipModule,\n    OverlayModule,\n    PortalModule,\n    RtlModule,\n    StyleModule,\n    A11yModule,\n    PlatformModule,\n    CompatibilityModule,\n    ObserveContentModule\n];\n/**\n * @deprecated\n */\nvar MaterialRootModule = (function () {\n    function MaterialRootModule() {\n    }\n    return MaterialRootModule;\n}());\nMaterialRootModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    MdAutocompleteModule.forRoot(),\n                    MdButtonModule.forRoot(),\n                    MdCardModule.forRoot(),\n                    MdChipsModule.forRoot(),\n                    MdCheckboxModule.forRoot(),\n                    MdGridListModule.forRoot(),\n                    MdInputModule.forRoot(),\n                    MdListModule.forRoot(),\n                    MdProgressBarModule.forRoot(),\n                    MdProgressSpinnerModule.forRoot(),\n                    MdRippleModule.forRoot(),\n                    MdSelectModule.forRoot(),\n                    MdSidenavModule.forRoot(),\n                    MdTabsModule.forRoot(),\n                    MdToolbarModule.forRoot(),\n                    PortalModule.forRoot(),\n                    RtlModule.forRoot(),\n                    ObserveContentModule.forRoot(),\n                    // These modules include providers.\n                    A11yModule.forRoot(),\n                    MdButtonToggleModule.forRoot(),\n                    MdDialogModule.forRoot(),\n                    MdIconModule.forRoot(),\n                    MdMenuModule.forRoot(),\n                    MdRadioModule.forRoot(),\n                    MdSliderModule.forRoot(),\n                    MdSlideToggleModule.forRoot(),\n                    MdSnackBarModule.forRoot(),\n                    MdTooltipModule.forRoot(),\n                    PlatformModule.forRoot(),\n                    OverlayModule.forRoot(),\n                    CompatibilityModule.forRoot(),\n                ],\n                exports: MATERIAL_MODULES,\n            },] },\n];\n/**\n * @nocollapse\n */\nMaterialRootModule.ctorParameters = function () { return []; };\n/**\n * @deprecated\n */\nvar MaterialModule = (function () {\n    function MaterialModule() {\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n    MaterialModule.forRoot = function () {\n        return { ngModule: MaterialRootModule };\n    };\n    return MaterialModule;\n}());\nMaterialModule.decorators = [\n    { type: NgModule, args: [{\n                imports: MATERIAL_MODULES,\n                exports: MATERIAL_MODULES,\n            },] },\n];\n/**\n * @nocollapse\n */\nMaterialModule.ctorParameters = function () { return []; };\n/**\n * @module\n * @description\n * Entry point for all public APIs of Angular Material.\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { Dir, RtlModule, ObserveContentModule, ObserveContent, MdOptionModule, MdOption, Portal, BasePortalHost, ComponentPortal, TemplatePortal, PortalHostDirective, TemplatePortalDirective, PortalModule, DomPortalHost, Overlay, OVERLAY_PROVIDERS, OverlayContainer, FullscreenOverlayContainer, OverlayRef, OverlayState, ConnectedOverlayDirective, OverlayOrigin, OverlayModule, ScrollDispatcher, GestureConfig, LiveAnnouncer, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_PROVIDER, InteractivityChecker, isFakeMousedownFromScreenReader, A11yModule, UniqueSelectionDispatcher, UNIQUE_SELECTION_DISPATCHER_PROVIDER, MdLineModule, MdLine, MdLineSetter, MdError, coerceBooleanProperty, coerceNumberProperty, CompatibilityModule, NoConflictStyleCompatibilityMode, MdCoreModule, PlatformModule, Platform, getSupportedInputTypes, GlobalPositionStrategy, ConnectedPositionStrategy, ConnectionPositionPair, ScrollableViewProperties, ConnectedOverlayPositionChange, MdRipple, MD_RIPPLE_GLOBAL_OPTIONS, RippleRef, RippleState, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION, MdRippleModule, SelectionModel, SelectionChange, FocusTrap, FocusTrapFactory, FocusTrapDeprecatedDirective, FocusTrapDirective, StyleModule, TOUCH_BUFFER_MS, FocusOriginMonitor, CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY, FOCUS_ORIGIN_MONITOR_PROVIDER, applyCssTransform, UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, PAGE_UP, PAGE_DOWN, HOME, END, ENTER, SPACE, TAB, ESCAPE, BACKSPACE, DELETE, MATERIAL_COMPATIBILITY_MODE, MAT_ELEMENTS_SELECTOR, MD_ELEMENTS_SELECTOR, MatPrefixRejector, MdPrefixRejector, AnimationCurves, AnimationDurations, MdSelectionModule, MdPseudoCheckbox, MaterialRootModule, MaterialModule, MdAutocompleteModule, MdAutocomplete, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MD_AUTOCOMPLETE_VALUE_ACCESSOR, MdAutocompleteTrigger, MdButtonModule, MdButtonCssMatStyler, MdRaisedButtonCssMatStyler, MdIconButtonCssMatStyler, MdFabCssMatStyler, MdMiniFabCssMatStyler, MdButton, MdAnchor, MdButtonToggleModule, MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MdButtonToggleChange, MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle, MdCardModule, MdCardContent, MdCardTitle, MdCardSubtitle, MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage, MdCardXlImage, MdCardAvatar, MdCard, MdCardHeader, MdCardTitleGroup, MdChipsModule, MdChipList, MdChip, MdCheckboxModule, MD_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MdCheckboxChange, MdCheckbox, MdDialogModule, MD_DIALOG_DATA, MdDialog, MdDialogContainer, MdDialogClose, MdDialogTitle, MdDialogContent, MdDialogActions, MdDialogConfig, MdDialogRef, MdGridListModule, MdGridList, MdIconModule, MdIconRegistry, MdIconInvalidNameError, MdIcon, ICON_REGISTRY_PROVIDER_FACTORY, ICON_REGISTRY_PROVIDER, MdInputModule, MdTextareaAutosize, MdPlaceholder, MdHint, MdErrorDirective, MdPrefix, MdSuffix, MdInputDirective, MdInputContainer, MdInputContainerPlaceholderConflictError, MdInputContainerUnsupportedTypeError, MdInputContainerDuplicatedHintError, MdInputContainerMissingMdInputError, MdListModule, MdListDivider, LIST_TYPE_TOKEN, MdList, MdListCssMatStyler, MdNavListCssMatStyler, MdNavListTokenSetter, MdDividerCssMatStyler, MdListAvatarCssMatStyler, MdListIconCssMatStyler, MdListSubheaderCssMatStyler, MdListItem, MdMenuModule, fadeInItems, transformMenu, MdMenu, MdMenuItem, MdMenuTrigger, MdProgressBarModule, MdProgressBar, MdProgressSpinnerModule, MdProgressSpinnerCssMatStyler, MdProgressSpinner, MdSpinner, MdRadioModule, MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MdRadioChange, MdRadioGroup, MdRadioButton, MdSelectModule, fadeInContent, transformPanel, transformPlaceholder, SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT, SELECT_MAX_OPTIONS_DISPLAYED, SELECT_TRIGGER_HEIGHT, SELECT_OPTION_HEIGHT_ADJUSTMENT, SELECT_PANEL_PADDING_X, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_PADDING_Y, SELECT_PANEL_VIEWPORT_PADDING, MdSelectChange, MdSelect, MdSidenavModule, MdDuplicatedSidenavError, MdSidenavToggleResult, MdSidenav, MdSidenavContainer, MdSliderModule, MD_SLIDER_VALUE_ACCESSOR, MdSliderChange, MdSlider, SliderRenderer, MdSlideToggleModule, MD_SLIDE_TOGGLE_VALUE_ACCESSOR, MdSlideToggleChange, MdSlideToggle, MdSnackBarModule, MdSnackBar, SHOW_ANIMATION, HIDE_ANIMATION, MdSnackBarContainer, MdSnackBarConfig, MdSnackBarRef, SimpleSnackBar, MdTabsModule, MdInkBar, MdTabBody, MdTabHeader, MdTabLabelWrapper, MdTab, MdTabLabel, MdTabChangeEvent, MdTabGroup, MdTabNavBar, MdTabLink, MdTabLinkRipple, MdToolbarModule, MdToolbarRow, MdToolbar, MdTooltipModule, TOUCHEND_HIDE_DELAY, SCROLL_THROTTLE_MS, MdTooltip, TooltipComponent, LIVE_ANNOUNCER_PROVIDER_FACTORY as ɵf, UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY as ɵg, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, OverlayPositionBuilder as ɵk, VIEWPORT_RULER_PROVIDER as ɵj, VIEWPORT_RULER_PROVIDER_FACTORY as ɵi, ViewportRuler as ɵh, SCROLL_DISPATCHER_PROVIDER as ɵd, SCROLL_DISPATCHER_PROVIDER_FACTORY as ɵc, Scrollable as ɵl, RippleRenderer as ɵe, MdGridAvatarCssMatStyler as ɵo, MdGridTile as ɵm, MdGridTileFooterCssMatStyler as ɵq, MdGridTileHeaderCssMatStyler as ɵp, MdGridTileText as ɵn };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@angular/material/@angular/material.es5.js\n// module id = 121\n// module chunks = 6","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * @license Angular v4.1.0\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { AUTO_STYLE, NoopAnimationPlayer, sequence, style, ɵAnimationGroupPlayer } from '@angular/animations';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @experimental\n */\nvar NoopAnimationDriver = (function () {\n    function NoopAnimationDriver() {\n    }\n    NoopAnimationDriver.prototype.animate = function (element, keyframes, duration, delay, easing, previousPlayers) {\n        if (previousPlayers === void 0) { previousPlayers = []; }\n        return new NoopAnimationPlayer();\n    };\n    return NoopAnimationDriver;\n}());\n/**\n * @experimental\n */\nvar AnimationDriver = (function () {\n    function AnimationDriver() {\n    }\n    return AnimationDriver;\n}());\nAnimationDriver.NOOP = new NoopAnimationDriver();\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @abstract\n */\nvar AnimationEngine = (function () {\n    function AnimationEngine() {\n    }\n    /**\n     * @abstract\n     * @param {?} trigger\n     * @param {?=} name\n     * @return {?}\n     */\n    AnimationEngine.prototype.registerTrigger = function (trigger, name) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} domFn\n     * @return {?}\n     */\n    AnimationEngine.prototype.onInsert = function (element, domFn) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} domFn\n     * @return {?}\n     */\n    AnimationEngine.prototype.onRemove = function (element, domFn) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    AnimationEngine.prototype.setProperty = function (element, property, value) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} eventPhase\n     * @param {?} callback\n     * @return {?}\n     */\n    AnimationEngine.prototype.listen = function (element, eventName, eventPhase, callback) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationEngine.prototype.flush = function () { };\n    Object.defineProperty(AnimationEngine.prototype, \"activePlayers\", {\n        /**\n         * @return {?}\n         */\n        get: function () { throw new Error('...'); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationEngine.prototype, \"queuedPlayers\", {\n        /**\n         * @return {?}\n         */\n        get: function () { throw new Error('...'); },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimationEngine;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ONE_SECOND = 1000;\n/**\n * @param {?} exp\n * @param {?} errors\n * @return {?}\n */\nfunction parseTimeExpression(exp, errors) {\n    var /** @type {?} */ regex = /^([\\.\\d]+)(m?s)(?:\\s+([\\.\\d]+)(m?s))?(?:\\s+([-a-z]+(?:\\(.+?\\))?))?$/i;\n    var /** @type {?} */ duration;\n    var /** @type {?} */ delay = 0;\n    var /** @type {?} */ easing = null;\n    if (typeof exp === 'string') {\n        var /** @type {?} */ matches = exp.match(regex);\n        if (matches === null) {\n            errors.push(\"The provided timing value \\\"\" + exp + \"\\\" is invalid.\");\n            return { duration: 0, delay: 0, easing: null };\n        }\n        var /** @type {?} */ durationMatch = parseFloat(matches[1]);\n        var /** @type {?} */ durationUnit = matches[2];\n        if (durationUnit == 's') {\n            durationMatch *= ONE_SECOND;\n        }\n        duration = Math.floor(durationMatch);\n        var /** @type {?} */ delayMatch = matches[3];\n        var /** @type {?} */ delayUnit = matches[4];\n        if (delayMatch != null) {\n            var /** @type {?} */ delayVal = parseFloat(delayMatch);\n            if (delayUnit != null && delayUnit == 's') {\n                delayVal *= ONE_SECOND;\n            }\n            delay = Math.floor(delayVal);\n        }\n        var /** @type {?} */ easingVal = matches[5];\n        if (easingVal) {\n            easing = easingVal;\n        }\n    }\n    else {\n        duration = (exp);\n    }\n    return { duration: duration, delay: delay, easing: easing };\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction normalizeStyles(styles) {\n    var /** @type {?} */ normalizedStyles = {};\n    if (Array.isArray(styles)) {\n        styles.forEach(function (data) { return copyStyles(data, false, normalizedStyles); });\n    }\n    else {\n        copyStyles(styles, false, normalizedStyles);\n    }\n    return normalizedStyles;\n}\n/**\n * @param {?} styles\n * @param {?} readPrototype\n * @param {?=} destination\n * @return {?}\n */\nfunction copyStyles(styles, readPrototype, destination) {\n    if (destination === void 0) { destination = {}; }\n    if (readPrototype) {\n        // we make use of a for-in loop so that the\n        // prototypically inherited properties are\n        // revealed from the backFill map\n        for (var /** @type {?} */ prop in styles) {\n            destination[prop] = styles[prop];\n        }\n    }\n    else {\n        Object.keys(styles).forEach(function (prop) { return destination[prop] = styles[prop]; });\n    }\n    return destination;\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @return {?}\n */\nfunction setStyles(element, styles) {\n    if (element['style']) {\n        Object.keys(styles).forEach(function (prop) { return element.style[prop] = styles[prop]; });\n    }\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @return {?}\n */\nfunction eraseStyles(element, styles) {\n    if (element['style']) {\n        Object.keys(styles).forEach(function (prop) {\n            // IE requires '' instead of null\n            // see https://github.com/angular/angular/issues/7916\n            element.style[prop] = '';\n        });\n    }\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} visitor\n * @param {?} node\n * @param {?} context\n * @return {?}\n */\nfunction visitAnimationNode(visitor, node, context) {\n    switch (node.type) {\n        case 0 /* State */:\n            return visitor.visitState(/** @type {?} */ (node), context);\n        case 1 /* Transition */:\n            return visitor.visitTransition(/** @type {?} */ (node), context);\n        case 2 /* Sequence */:\n            return visitor.visitSequence(/** @type {?} */ (node), context);\n        case 3 /* Group */:\n            return visitor.visitGroup(/** @type {?} */ (node), context);\n        case 4 /* Animate */:\n            return visitor.visitAnimate(/** @type {?} */ (node), context);\n        case 5 /* KeyframeSequence */:\n            return visitor.visitKeyframeSequence(/** @type {?} */ (node), context);\n        case 6 /* Style */:\n            return visitor.visitStyle(/** @type {?} */ (node), context);\n        default:\n            throw new Error(\"Unable to resolve animation metadata node #\" + node.type);\n    }\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ANY_STATE = '*';\n/**\n * @param {?} transitionValue\n * @param {?} errors\n * @return {?}\n */\nfunction parseTransitionExpr(transitionValue, errors) {\n    var /** @type {?} */ expressions = [];\n    if (typeof transitionValue == 'string') {\n        ((transitionValue))\n            .split(/\\s*,\\s*/)\n            .forEach(function (str) { return parseInnerTransitionStr(str, expressions, errors); });\n    }\n    else {\n        expressions.push(/** @type {?} */ (transitionValue));\n    }\n    return expressions;\n}\n/**\n * @param {?} eventStr\n * @param {?} expressions\n * @param {?} errors\n * @return {?}\n */\nfunction parseInnerTransitionStr(eventStr, expressions, errors) {\n    if (eventStr[0] == ':') {\n        eventStr = parseAnimationAlias(eventStr, errors);\n    }\n    var /** @type {?} */ match = eventStr.match(/^(\\*|[-\\w]+)\\s*(<?[=-]>)\\s*(\\*|[-\\w]+)$/);\n    if (match == null || match.length < 4) {\n        errors.push(\"The provided transition expression \\\"\" + eventStr + \"\\\" is not supported\");\n        return expressions;\n    }\n    var /** @type {?} */ fromState = match[1];\n    var /** @type {?} */ separator = match[2];\n    var /** @type {?} */ toState = match[3];\n    expressions.push(makeLambdaFromStates(fromState, toState));\n    var /** @type {?} */ isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;\n    if (separator[0] == '<' && !isFullAnyStateExpr) {\n        expressions.push(makeLambdaFromStates(toState, fromState));\n    }\n}\n/**\n * @param {?} alias\n * @param {?} errors\n * @return {?}\n */\nfunction parseAnimationAlias(alias, errors) {\n    switch (alias) {\n        case ':enter':\n            return 'void => *';\n        case ':leave':\n            return '* => void';\n        default:\n            errors.push(\"The transition alias value \\\"\" + alias + \"\\\" is not supported\");\n            return '* => *';\n    }\n}\n/**\n * @param {?} lhs\n * @param {?} rhs\n * @return {?}\n */\nfunction makeLambdaFromStates(lhs, rhs) {\n    return function (fromState, toState) {\n        var /** @type {?} */ lhsMatch = lhs == ANY_STATE || lhs == fromState;\n        var /** @type {?} */ rhsMatch = rhs == ANY_STATE || rhs == toState;\n        return lhsMatch && rhsMatch;\n    };\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} keyframes\n * @param {?} duration\n * @param {?} delay\n * @param {?} easing\n * @return {?}\n */\nfunction createTimelineInstruction(keyframes, duration, delay, easing) {\n    return {\n        type: 1 /* TimelineAnimation */,\n        keyframes: keyframes,\n        duration: duration,\n        delay: delay,\n        totalTime: duration + delay, easing: easing\n    };\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} ast\n * @param {?=} startingStyles\n * @param {?=} finalStyles\n * @return {?}\n */\nfunction buildAnimationKeyframes(ast, startingStyles, finalStyles) {\n    if (startingStyles === void 0) { startingStyles = {}; }\n    if (finalStyles === void 0) { finalStyles = {}; }\n    var /** @type {?} */ normalizedAst = Array.isArray(ast) ? sequence(/** @type {?} */ (ast)) : (ast);\n    return new AnimationTimelineVisitor().buildKeyframes(normalizedAst, startingStyles, finalStyles);\n}\nvar AnimationTimelineContext = (function () {\n    /**\n     * @param {?} errors\n     * @param {?} timelines\n     * @param {?=} initialTimeline\n     */\n    function AnimationTimelineContext(errors, timelines, initialTimeline) {\n        this.errors = errors;\n        this.timelines = timelines;\n        this.previousNode = ({});\n        this.subContextCount = 0;\n        this.currentTimeline = initialTimeline || new TimelineBuilder(0);\n        timelines.push(this.currentTimeline);\n    }\n    /**\n     * @return {?}\n     */\n    AnimationTimelineContext.prototype.createSubContext = function () {\n        var /** @type {?} */ context = new AnimationTimelineContext(this.errors, this.timelines, this.currentTimeline.fork());\n        context.previousNode = this.previousNode;\n        context.currentAnimateTimings = this.currentAnimateTimings;\n        this.subContextCount++;\n        return context;\n    };\n    /**\n     * @param {?=} newTime\n     * @return {?}\n     */\n    AnimationTimelineContext.prototype.transformIntoNewTimeline = function (newTime) {\n        if (newTime === void 0) { newTime = 0; }\n        this.currentTimeline = this.currentTimeline.fork(newTime);\n        this.timelines.push(this.currentTimeline);\n        return this.currentTimeline;\n    };\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    AnimationTimelineContext.prototype.incrementTime = function (time) {\n        this.currentTimeline.forwardTime(this.currentTimeline.duration + time);\n    };\n    return AnimationTimelineContext;\n}());\nvar AnimationTimelineVisitor = (function () {\n    function AnimationTimelineVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} startingStyles\n     * @param {?} finalStyles\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.buildKeyframes = function (ast, startingStyles, finalStyles) {\n        var /** @type {?} */ context = new AnimationTimelineContext([], []);\n        context.currentTimeline.setStyles(startingStyles);\n        visitAnimationNode(this, ast, context);\n        // this checks to see if an actual animation happened\n        var /** @type {?} */ timelines = context.timelines.filter(function (timeline) { return timeline.hasStyling(); });\n        if (timelines.length && Object.keys(finalStyles).length) {\n            var /** @type {?} */ tl = timelines[timelines.length - 1];\n            if (!tl.allowOnlyTimelineStyles()) {\n                tl.setStyles(finalStyles);\n            }\n        }\n        return timelines.length ? timelines.map(function (timeline) { return timeline.buildKeyframes(); }) :\n            [createTimelineInstruction([], 0, 0, '')];\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitState = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitTransition = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitSequence = function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ subContextCount = context.subContextCount;\n        if (context.previousNode.type == 6 /* Style */) {\n            context.currentTimeline.forwardFrame();\n            context.currentTimeline.snapshotCurrentStyles();\n        }\n        ast.steps.forEach(function (s) { return visitAnimationNode(_this, s, context); });\n        // this means that some animation function within the sequence\n        // ended up creating a sub timeline (which means the current\n        // timeline cannot overlap with the contents of the sequence)\n        if (context.subContextCount > subContextCount) {\n            context.transformIntoNewTimeline();\n        }\n        context.previousNode = ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitGroup = function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ innerTimelines = [];\n        var /** @type {?} */ furthestTime = context.currentTimeline.currentTime;\n        ast.steps.forEach(function (s) {\n            var /** @type {?} */ innerContext = context.createSubContext();\n            visitAnimationNode(_this, s, innerContext);\n            furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);\n            innerTimelines.push(innerContext.currentTimeline);\n        });\n        // this operation is run after the AST loop because otherwise\n        // if the parent timeline's collected styles were updated then\n        // it would pass in invalid data into the new-to-be forked items\n        innerTimelines.forEach(function (timeline) { return context.currentTimeline.mergeTimelineCollectedStyles(timeline); });\n        context.transformIntoNewTimeline(furthestTime);\n        context.previousNode = ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitAnimate = function (ast, context) {\n        var /** @type {?} */ timings = ast.timings.hasOwnProperty('duration') ? (ast.timings) :\n            parseTimeExpression(/** @type {?} */ (ast.timings), context.errors);\n        context.currentAnimateTimings = timings;\n        if (timings.delay) {\n            context.incrementTime(timings.delay);\n            context.currentTimeline.snapshotCurrentStyles();\n        }\n        var /** @type {?} */ astType = ast.styles ? ast.styles.type : -1;\n        if (astType == 5 /* KeyframeSequence */) {\n            this.visitKeyframeSequence(/** @type {?} */ (ast.styles), context);\n        }\n        else {\n            var /** @type {?} */ styleAst = (ast.styles);\n            if (!styleAst) {\n                var /** @type {?} */ newStyleData = {};\n                if (timings.easing) {\n                    newStyleData['easing'] = timings.easing;\n                }\n                styleAst = style(newStyleData);\n                ((styleAst))['treatAsEmptyStep'] = true;\n            }\n            context.incrementTime(timings.duration);\n            if (styleAst) {\n                this.visitStyle(styleAst, context);\n            }\n        }\n        context.currentAnimateTimings = null;\n        context.previousNode = ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitStyle = function (ast, context) {\n        // this is a special case when a style() call is issued directly after\n        // a call to animate(). If the clock is not forwarded by one frame then\n        // the style() calls will be merged into the previous animate() call\n        // which is incorrect.\n        if (!context.currentAnimateTimings &&\n            context.previousNode.type == 4 /* Animate */) {\n            context.currentTimeline.forwardFrame();\n        }\n        var /** @type {?} */ normalizedStyles = normalizeStyles(ast.styles);\n        var /** @type {?} */ easing = context.currentAnimateTimings && context.currentAnimateTimings.easing;\n        this._applyStyles(normalizedStyles, easing, ((ast))['treatAsEmptyStep'] ? true : false, context);\n        context.previousNode = ast;\n    };\n    /**\n     * @param {?} styles\n     * @param {?} easing\n     * @param {?} treatAsEmptyStep\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype._applyStyles = function (styles, easing, treatAsEmptyStep, context) {\n        if (styles.hasOwnProperty('easing')) {\n            easing = easing || (styles['easing']);\n            delete styles['easing'];\n        }\n        context.currentTimeline.setStyles(styles, easing, treatAsEmptyStep);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTimelineVisitor.prototype.visitKeyframeSequence = function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ MAX_KEYFRAME_OFFSET = 1;\n        var /** @type {?} */ limit = ast.steps.length - 1;\n        var /** @type {?} */ firstKeyframe = ast.steps[0];\n        var /** @type {?} */ offsetGap = 0;\n        var /** @type {?} */ containsOffsets = getOffset(firstKeyframe) != null;\n        if (!containsOffsets) {\n            offsetGap = MAX_KEYFRAME_OFFSET / limit;\n        }\n        var /** @type {?} */ startTime = context.currentTimeline.duration;\n        var /** @type {?} */ duration = ((context.currentAnimateTimings)).duration;\n        var /** @type {?} */ innerContext = context.createSubContext();\n        var /** @type {?} */ innerTimeline = innerContext.currentTimeline;\n        innerTimeline.easing = ((context.currentAnimateTimings)).easing;\n        ast.steps.forEach(function (step, i) {\n            var /** @type {?} */ normalizedStyles = normalizeStyles(step.styles);\n            var /** @type {?} */ offset = containsOffsets ?\n                (step.offset != null ? step.offset : parseFloat(/** @type {?} */ (normalizedStyles['offset']))) :\n                (i == limit ? MAX_KEYFRAME_OFFSET : i * offsetGap);\n            innerTimeline.forwardTime(offset * duration);\n            _this._applyStyles(normalizedStyles, null, false, innerContext);\n        });\n        // this will ensure that the parent timeline gets all the styles from\n        // the child even if the new timeline below is not used\n        context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);\n        // we do this because the window between this timeline and the sub timeline\n        // should ensure that the styles within are exactly the same as they were before\n        context.transformIntoNewTimeline(startTime + duration);\n        context.previousNode = ast;\n    };\n    return AnimationTimelineVisitor;\n}());\nvar TimelineBuilder = (function () {\n    /**\n     * @param {?} startTime\n     * @param {?=} globalTimelineStyles\n     */\n    function TimelineBuilder(startTime, globalTimelineStyles) {\n        this.startTime = startTime;\n        this.duration = 0;\n        this.easing = '';\n        this._previousKeyframe = {};\n        this._keyframes = new Map();\n        this._styleSummary = {};\n        this._backFill = {};\n        this._currentEmptyStepKeyframe = null;\n        this._localTimelineStyles = Object.create(this._backFill, {});\n        this._globalTimelineStyles =\n            globalTimelineStyles ? globalTimelineStyles : this._localTimelineStyles;\n        this._loadKeyframe();\n    }\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype.hasStyling = function () { return this._keyframes.size > 1; };\n    Object.defineProperty(TimelineBuilder.prototype, \"currentTime\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.startTime + this.duration; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?=} currentTime\n     * @return {?}\n     */\n    TimelineBuilder.prototype.fork = function (currentTime) {\n        if (currentTime === void 0) { currentTime = 0; }\n        return new TimelineBuilder(currentTime || this.currentTime, this._globalTimelineStyles);\n    };\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype._loadKeyframe = function () {\n        if (this._currentKeyframe) {\n            this._previousKeyframe = this._currentKeyframe;\n        }\n        this._currentKeyframe = ((this._keyframes.get(this.duration)));\n        if (!this._currentKeyframe) {\n            this._currentKeyframe = Object.create(this._backFill, {});\n            this._keyframes.set(this.duration, this._currentKeyframe);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype.forwardFrame = function () {\n        this.duration++;\n        this._loadKeyframe();\n    };\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    TimelineBuilder.prototype.forwardTime = function (time) {\n        this.duration = time;\n        this._loadKeyframe();\n    };\n    /**\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    TimelineBuilder.prototype._updateStyle = function (prop, value) {\n        this._localTimelineStyles[prop] = value; /** @type {?} */\n        ((this._globalTimelineStyles))[prop] = value;\n        this._styleSummary[prop] = { time: this.currentTime, value: value };\n    };\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype.allowOnlyTimelineStyles = function () { return this._currentEmptyStepKeyframe !== this._currentKeyframe; };\n    /**\n     * @param {?} styles\n     * @param {?=} easing\n     * @param {?=} treatAsEmptyStep\n     * @return {?}\n     */\n    TimelineBuilder.prototype.setStyles = function (styles, easing, treatAsEmptyStep) {\n        var _this = this;\n        if (easing === void 0) { easing = null; }\n        if (treatAsEmptyStep === void 0) { treatAsEmptyStep = false; }\n        if (easing) {\n            ((this._previousKeyframe))['easing'] = easing;\n        }\n        if (treatAsEmptyStep) {\n            // special case for animate(duration):\n            // all missing styles are filled with a `*` value then\n            // if any destination styles are filled in later on the same\n            // keyframe then they will override the overridden styles\n            // We use `_globalTimelineStyles` here because there may be\n            // styles in previous keyframes that are not present in this timeline\n            Object.keys(this._globalTimelineStyles).forEach(function (prop) {\n                _this._backFill[prop] = _this._globalTimelineStyles[prop] || AUTO_STYLE;\n                _this._currentKeyframe[prop] = AUTO_STYLE;\n            });\n            this._currentEmptyStepKeyframe = this._currentKeyframe;\n        }\n        else {\n            Object.keys(styles).forEach(function (prop) {\n                if (prop !== 'offset') {\n                    var /** @type {?} */ val = styles[prop];\n                    _this._currentKeyframe[prop] = val;\n                    if (!_this._localTimelineStyles[prop]) {\n                        _this._backFill[prop] = _this._globalTimelineStyles[prop] || AUTO_STYLE;\n                    }\n                    _this._updateStyle(prop, val);\n                }\n            });\n            Object.keys(this._localTimelineStyles).forEach(function (prop) {\n                if (!_this._currentKeyframe.hasOwnProperty(prop)) {\n                    _this._currentKeyframe[prop] = _this._localTimelineStyles[prop];\n                }\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype.snapshotCurrentStyles = function () { copyStyles(this._localTimelineStyles, false, this._currentKeyframe); };\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype.getFinalKeyframe = function () { return ((this._keyframes.get(this.duration))); };\n    Object.defineProperty(TimelineBuilder.prototype, \"properties\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ properties = [];\n            for (var /** @type {?} */ prop in this._currentKeyframe) {\n                properties.push(prop);\n            }\n            return properties;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} timeline\n     * @return {?}\n     */\n    TimelineBuilder.prototype.mergeTimelineCollectedStyles = function (timeline) {\n        var _this = this;\n        Object.keys(timeline._styleSummary).forEach(function (prop) {\n            var /** @type {?} */ details0 = _this._styleSummary[prop];\n            var /** @type {?} */ details1 = timeline._styleSummary[prop];\n            if (!details0 || details1.time > details0.time) {\n                _this._updateStyle(prop, details1.value);\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    TimelineBuilder.prototype.buildKeyframes = function () {\n        var _this = this;\n        var /** @type {?} */ finalKeyframes = [];\n        // special case for when there are only start/destination\n        // styles but no actual animation animate steps...\n        if (this.duration == 0) {\n            var /** @type {?} */ targetKeyframe = this.getFinalKeyframe();\n            var /** @type {?} */ firstKeyframe = copyStyles(targetKeyframe, true);\n            firstKeyframe['offset'] = 0;\n            finalKeyframes.push(firstKeyframe);\n            var /** @type {?} */ lastKeyframe = copyStyles(targetKeyframe, true);\n            lastKeyframe['offset'] = 1;\n            finalKeyframes.push(lastKeyframe);\n        }\n        else {\n            this._keyframes.forEach(function (keyframe, time) {\n                var /** @type {?} */ finalKeyframe = copyStyles(keyframe, true);\n                finalKeyframe['offset'] = time / _this.duration;\n                finalKeyframes.push(finalKeyframe);\n            });\n        }\n        return createTimelineInstruction(finalKeyframes, this.duration, this.startTime, this.easing);\n    };\n    return TimelineBuilder;\n}());\n/**\n * @param {?} ast\n * @return {?}\n */\nfunction getOffset(ast) {\n    var /** @type {?} */ offset = ast.offset;\n    if (offset == null) {\n        var /** @type {?} */ styles = ast.styles;\n        if (Array.isArray(styles)) {\n            for (var /** @type {?} */ i = 0; i < styles.length; i++) {\n                var /** @type {?} */ o = (styles[i]['offset']);\n                if (o != null) {\n                    offset = o;\n                    break;\n                }\n            }\n        }\n        else {\n            offset = (styles['offset']);\n        }\n    }\n    return ((offset));\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} isRemovalTransition\n * @param {?} fromStyles\n * @param {?} toStyles\n * @param {?} timelines\n * @return {?}\n */\nfunction createTransitionInstruction(triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines) {\n    return {\n        type: 0 /* TransitionAnimation */,\n        triggerName: triggerName,\n        isRemovalTransition: isRemovalTransition,\n        fromState: fromState,\n        fromStyles: fromStyles,\n        toState: toState,\n        toStyles: toStyles,\n        timelines: timelines\n    };\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar AnimationTransitionFactory = (function () {\n    /**\n     * @param {?} _triggerName\n     * @param {?} ast\n     * @param {?} matchFns\n     * @param {?} _stateStyles\n     */\n    function AnimationTransitionFactory(_triggerName, ast, matchFns, _stateStyles) {\n        this._triggerName = _triggerName;\n        this.matchFns = matchFns;\n        this._stateStyles = _stateStyles;\n        var normalizedAst = Array.isArray(ast.animation) ?\n            sequence(ast.animation) :\n            ast.animation;\n        this._animationAst = normalizedAst;\n    }\n    /**\n     * @param {?} currentState\n     * @param {?} nextState\n     * @return {?}\n     */\n    AnimationTransitionFactory.prototype.match = function (currentState, nextState) {\n        if (!oneOrMoreTransitionsMatch(this.matchFns, currentState, nextState))\n            return;\n        var /** @type {?} */ backupStateStyles = this._stateStyles['*'] || {};\n        var /** @type {?} */ currentStateStyles = this._stateStyles[currentState] || backupStateStyles;\n        var /** @type {?} */ nextStateStyles = this._stateStyles[nextState] || backupStateStyles;\n        var /** @type {?} */ timelines = buildAnimationKeyframes(this._animationAst, currentStateStyles, nextStateStyles);\n        return createTransitionInstruction(this._triggerName, currentState, nextState, nextState === 'void', currentStateStyles, nextStateStyles, timelines);\n    };\n    return AnimationTransitionFactory;\n}());\n/**\n * @param {?} matchFns\n * @param {?} currentState\n * @param {?} nextState\n * @return {?}\n */\nfunction oneOrMoreTransitionsMatch(matchFns, currentState, nextState) {\n    return matchFns.some(function (fn) { return fn(currentState, nextState); });\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} ast\n * @return {?}\n */\nfunction validateAnimationSequence(ast) {\n    var /** @type {?} */ normalizedAst = Array.isArray(ast) ? sequence(/** @type {?} */ (ast)) : (ast);\n    return new AnimationValidatorVisitor().validate(normalizedAst);\n}\nvar AnimationValidatorVisitor = (function () {\n    function AnimationValidatorVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.validate = function (ast) {\n        var /** @type {?} */ context = new AnimationValidatorContext();\n        visitAnimationNode(this, ast, context);\n        return context.errors;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitState = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitTransition = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitSequence = function (ast, context) {\n        var _this = this;\n        ast.steps.forEach(function (step) { return visitAnimationNode(_this, step, context); });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitGroup = function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ currentTime = context.currentTime;\n        var /** @type {?} */ furthestTime = 0;\n        ast.steps.forEach(function (step) {\n            context.currentTime = currentTime;\n            visitAnimationNode(_this, step, context);\n            furthestTime = Math.max(furthestTime, context.currentTime);\n        });\n        context.currentTime = furthestTime;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitAnimate = function (ast, context) {\n        // we reassign the timings here so that they are not reparsed each\n        // time an animation occurs\n        context.currentAnimateTimings = ast.timings =\n            parseTimeExpression(/** @type {?} */ (ast.timings), context.errors);\n        var /** @type {?} */ astType = ast.styles && ast.styles.type;\n        if (astType == 5 /* KeyframeSequence */) {\n            this.visitKeyframeSequence(/** @type {?} */ (ast.styles), context);\n        }\n        else {\n            context.currentTime +=\n                context.currentAnimateTimings.duration + context.currentAnimateTimings.delay;\n            if (astType == 6 /* Style */) {\n                this.visitStyle(/** @type {?} */ (ast.styles), context);\n            }\n        }\n        context.currentAnimateTimings = null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitStyle = function (ast, context) {\n        var /** @type {?} */ styleData = normalizeStyles(ast.styles);\n        var /** @type {?} */ timings = context.currentAnimateTimings;\n        var /** @type {?} */ endTime = context.currentTime;\n        var /** @type {?} */ startTime = context.currentTime;\n        if (timings && startTime > 0) {\n            startTime -= timings.duration + timings.delay;\n        }\n        Object.keys(styleData).forEach(function (prop) {\n            var /** @type {?} */ collectedEntry = context.collectedStyles[prop];\n            var /** @type {?} */ updateCollectedStyle = true;\n            if (collectedEntry) {\n                if (startTime != endTime && startTime >= collectedEntry.startTime &&\n                    endTime <= collectedEntry.endTime) {\n                    context.errors.push(\"The CSS property \\\"\" + prop + \"\\\" that exists between the times of \\\"\" + collectedEntry.startTime + \"ms\\\" and \\\"\" + collectedEntry.endTime + \"ms\\\" is also being animated in a parallel animation between the times of \\\"\" + startTime + \"ms\\\" and \\\"\" + endTime + \"ms\\\"\");\n                    updateCollectedStyle = false;\n                }\n                // we always choose the smaller start time value since we\n                // want to have a record of the entire animation window where\n                // the style property is being animated in between\n                startTime = collectedEntry.startTime;\n            }\n            if (updateCollectedStyle) {\n                context.collectedStyles[prop] = { startTime: startTime, endTime: endTime };\n            }\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationValidatorVisitor.prototype.visitKeyframeSequence = function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ totalKeyframesWithOffsets = 0;\n        var /** @type {?} */ offsets = [];\n        var /** @type {?} */ offsetsOutOfOrder = false;\n        var /** @type {?} */ keyframesOutOfRange = false;\n        var /** @type {?} */ previousOffset = 0;\n        ast.steps.forEach(function (step) {\n            var /** @type {?} */ styleData = normalizeStyles(step.styles);\n            var /** @type {?} */ offset = 0;\n            if (styleData.hasOwnProperty('offset')) {\n                totalKeyframesWithOffsets++;\n                offset = (styleData['offset']);\n            }\n            keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;\n            offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;\n            previousOffset = offset;\n            offsets.push(offset);\n        });\n        if (keyframesOutOfRange) {\n            context.errors.push(\"Please ensure that all keyframe offsets are between 0 and 1\");\n        }\n        if (offsetsOutOfOrder) {\n            context.errors.push(\"Please ensure that all keyframe offsets are in order\");\n        }\n        var /** @type {?} */ length = ast.steps.length;\n        var /** @type {?} */ generatedOffset = 0;\n        if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {\n            context.errors.push(\"Not all style() steps within the declared keyframes() contain offsets\");\n        }\n        else if (totalKeyframesWithOffsets == 0) {\n            generatedOffset = 1 / length;\n        }\n        var /** @type {?} */ limit = length - 1;\n        var /** @type {?} */ currentTime = context.currentTime;\n        var /** @type {?} */ animateDuration = ((context.currentAnimateTimings)).duration;\n        ast.steps.forEach(function (step, i) {\n            var /** @type {?} */ offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];\n            var /** @type {?} */ durationUpToThisFrame = offset * animateDuration;\n            context.currentTime =\n                currentTime + ((context.currentAnimateTimings)).delay + durationUpToThisFrame; /** @type {?} */\n            ((context.currentAnimateTimings)).duration = durationUpToThisFrame;\n            _this.visitStyle(step, context);\n        });\n    };\n    return AnimationValidatorVisitor;\n}());\nvar AnimationValidatorContext = (function () {\n    function AnimationValidatorContext() {\n        this.errors = [];\n        this.currentTime = 0;\n        this.collectedStyles = {};\n    }\n    return AnimationValidatorContext;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} definitions\n * @return {?}\n */\nfunction buildTrigger(name, definitions) {\n    return new AnimationTriggerVisitor().buildTrigger(name, definitions);\n}\n/**\n * \\@experimental Animation support is experimental.\n */\nvar AnimationTrigger = (function () {\n    /**\n     * @param {?} name\n     * @param {?} states\n     * @param {?} _transitionAsts\n     */\n    function AnimationTrigger(name, states, _transitionAsts) {\n        var _this = this;\n        this.name = name;\n        this._transitionAsts = _transitionAsts;\n        this.transitionFactories = [];\n        this.states = {};\n        Object.keys(states).forEach(function (stateName) { _this.states[stateName] = copyStyles(states[stateName], false); });\n        var errors = [];\n        _transitionAsts.forEach(function (ast) {\n            var exprs = parseTransitionExpr(ast.expr, errors);\n            var sequenceErrors = validateAnimationSequence(ast);\n            if (sequenceErrors.length) {\n                errors.push.apply(errors, sequenceErrors);\n            }\n            else {\n                _this.transitionFactories.push(new AnimationTransitionFactory(_this.name, ast, exprs, states));\n            }\n        });\n        if (errors.length) {\n            var LINE_START = '\\n - ';\n            throw new Error(\"Animation parsing for the \" + name + \" trigger have failed:\" + LINE_START + errors.join(LINE_START));\n        }\n    }\n    /**\n     * @param {?} currentState\n     * @param {?} nextState\n     * @return {?}\n     */\n    AnimationTrigger.prototype.createFallbackInstruction = function (currentState, nextState) {\n        var /** @type {?} */ backupStateStyles = this.states['*'] || {};\n        var /** @type {?} */ currentStateStyles = this.states[currentState] || backupStateStyles;\n        var /** @type {?} */ nextStateStyles = this.states[nextState] || backupStateStyles;\n        return createTransitionInstruction(this.name, currentState, nextState, nextState == 'void', currentStateStyles, nextStateStyles, []);\n    };\n    /**\n     * @param {?} currentState\n     * @param {?} nextState\n     * @return {?}\n     */\n    AnimationTrigger.prototype.matchTransition = function (currentState, nextState) {\n        for (var /** @type {?} */ i = 0; i < this.transitionFactories.length; i++) {\n            var /** @type {?} */ result = this.transitionFactories[i].match(currentState, nextState);\n            if (result)\n                return result;\n        }\n        return null;\n    };\n    return AnimationTrigger;\n}());\nvar AnimationTriggerContext = (function () {\n    function AnimationTriggerContext() {\n        this.errors = [];\n        this.states = {};\n        this.transitions = [];\n    }\n    return AnimationTriggerContext;\n}());\nvar AnimationTriggerVisitor = (function () {\n    function AnimationTriggerVisitor() {\n    }\n    /**\n     * @param {?} name\n     * @param {?} definitions\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.buildTrigger = function (name, definitions) {\n        var _this = this;\n        var /** @type {?} */ context = new AnimationTriggerContext();\n        definitions.forEach(function (def) { return visitAnimationNode(_this, def, context); });\n        return new AnimationTrigger(name, context.states, context.transitions);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitState = function (ast, context) {\n        var /** @type {?} */ styles = normalizeStyles(ast.styles.styles);\n        ast.name.split(/\\s*,\\s*/).forEach(function (name) { context.states[name] = styles; });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitTransition = function (ast, context) {\n        context.transitions.push(ast);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitSequence = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitGroup = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitAnimate = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitStyle = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AnimationTriggerVisitor.prototype.visitKeyframeSequence = function (ast, context) {\n        // these values are not visited in this AST\n    };\n    return AnimationTriggerVisitor;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MARKED_FOR_ANIMATION_CLASSNAME = 'ng-animating';\nvar MARKED_FOR_ANIMATION_SELECTOR = '.ng-animating';\nvar MARKED_FOR_REMOVAL = '$$ngRemove';\nvar VOID_STATE = 'void';\nvar DomAnimationEngine = (function () {\n    /**\n     * @param {?} _driver\n     * @param {?} _normalizer\n     */\n    function DomAnimationEngine(_driver, _normalizer) {\n        this._driver = _driver;\n        this._normalizer = _normalizer;\n        this._flaggedInserts = new Set();\n        this._queuedRemovals = new Map();\n        this._queuedTransitionAnimations = [];\n        this._activeTransitionAnimations = new Map();\n        this._activeElementAnimations = new Map();\n        this._elementTriggerStates = new Map();\n        this._triggers = Object.create(null);\n        this._triggerListeners = new Map();\n        this._pendingListenerRemovals = new Map();\n    }\n    Object.defineProperty(DomAnimationEngine.prototype, \"queuedPlayers\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._queuedTransitionAnimations.map(function (q) { return q.player; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DomAnimationEngine.prototype, \"activePlayers\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ players = [];\n            this._activeElementAnimations.forEach(function (activePlayers) { return players.push.apply(players, activePlayers); });\n            return players;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} trigger\n     * @param {?=} name\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.registerTrigger = function (trigger, name) {\n        name = name || trigger.name;\n        if (this._triggers[name]) {\n            return;\n        }\n        this._triggers[name] = buildTrigger(name, trigger.definitions);\n    };\n    /**\n     * @param {?} element\n     * @param {?} domFn\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.onInsert = function (element, domFn) {\n        if (element['nodeType'] == 1) {\n            this._flaggedInserts.add(element);\n        }\n        domFn();\n    };\n    /**\n     * @param {?} element\n     * @param {?} domFn\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.onRemove = function (element, domFn) {\n        var _this = this;\n        if (element['nodeType'] != 1) {\n            domFn();\n            return;\n        }\n        var /** @type {?} */ lookupRef = this._elementTriggerStates.get(element);\n        if (lookupRef) {\n            var /** @type {?} */ possibleTriggers = Object.keys(lookupRef);\n            var /** @type {?} */ hasRemoval = possibleTriggers.some(function (triggerName) {\n                var /** @type {?} */ oldValue = ((lookupRef))[triggerName];\n                var /** @type {?} */ instruction = _this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);\n                return !!instruction;\n            });\n            if (hasRemoval) {\n                element[MARKED_FOR_REMOVAL] = true;\n                this._queuedRemovals.set(element, domFn);\n                return;\n            }\n        }\n        // this means that there are no animations to take on this\n        // leave operation therefore we should fire the done|start callbacks\n        if (this._triggerListeners.has(element)) {\n            element[MARKED_FOR_REMOVAL] = true;\n            this._queuedRemovals.set(element, function () { });\n        }\n        this._onRemovalTransition(element).forEach(function (player) { return player.destroy(); });\n        domFn();\n    };\n    /**\n     * @param {?} element\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.setProperty = function (element, property, value) {\n        var /** @type {?} */ trigger = this._triggers[property];\n        if (!trigger) {\n            throw new Error(\"The provided animation trigger \\\"\" + property + \"\\\" has not been registered!\");\n        }\n        var /** @type {?} */ lookupRef = this._elementTriggerStates.get(element);\n        if (!lookupRef) {\n            this._elementTriggerStates.set(element, lookupRef = {});\n        }\n        var /** @type {?} */ oldValue = lookupRef.hasOwnProperty(property) ? lookupRef[property] : VOID_STATE;\n        if (oldValue !== value) {\n            value = normalizeTriggerValue(value);\n            var /** @type {?} */ instruction = trigger.matchTransition(oldValue, value);\n            if (!instruction) {\n                // we do this to make sure we always have an animation player so\n                // that callback operations are properly called\n                instruction = trigger.createFallbackInstruction(oldValue, value);\n            }\n            this.animateTransition(element, instruction);\n            lookupRef[property] = value;\n        }\n    };\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} eventPhase\n     * @param {?} callback\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.listen = function (element, eventName, eventPhase, callback) {\n        var _this = this;\n        if (!eventPhase) {\n            throw new Error(\"Unable to listen on the animation trigger \\\"\" + eventName + \"\\\" because the provided event is undefined!\");\n        }\n        if (!this._triggers[eventName]) {\n            throw new Error(\"Unable to listen on the animation trigger event \\\"\" + eventPhase + \"\\\" because the animation trigger \\\"\" + eventName + \"\\\" doesn't exist!\");\n        }\n        var /** @type {?} */ elementListeners = this._triggerListeners.get(element);\n        if (!elementListeners) {\n            this._triggerListeners.set(element, elementListeners = []);\n        }\n        validatePlayerEvent(eventName, eventPhase);\n        var /** @type {?} */ tuple = ({ triggerName: eventName, phase: eventPhase, callback: callback });\n        elementListeners.push(tuple);\n        return function () {\n            // this is queued up in the event that a removal animation is set\n            // to fire on the element (the listeners need to be set during flush)\n            getOrSetAsInMap(_this._pendingListenerRemovals, element, []).push(tuple);\n        };\n    };\n    /**\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._clearPendingListenerRemovals = function () {\n        var _this = this;\n        this._pendingListenerRemovals.forEach(function (tuples, element) {\n            var /** @type {?} */ elementListeners = _this._triggerListeners.get(element);\n            if (elementListeners) {\n                tuples.forEach(function (tuple) {\n                    var /** @type {?} */ index = elementListeners.indexOf(tuple);\n                    if (index >= 0) {\n                        elementListeners.splice(index, 1);\n                    }\n                });\n            }\n        });\n        this._pendingListenerRemovals.clear();\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._onRemovalTransition = function (element) {\n        // when a parent animation is set to trigger a removal we want to\n        // find all of the children that are currently animating and clear\n        // them out by destroying each of them.\n        var /** @type {?} */ elms = element.querySelectorAll(MARKED_FOR_ANIMATION_SELECTOR);\n        var _loop_1 = function (i) {\n            var /** @type {?} */ elm = elms[i];\n            var /** @type {?} */ activePlayers = this_1._activeElementAnimations.get(elm);\n            if (activePlayers) {\n                activePlayers.forEach(function (player) { return player.destroy(); });\n            }\n            var /** @type {?} */ activeTransitions = this_1._activeTransitionAnimations.get(elm);\n            if (activeTransitions) {\n                Object.keys(activeTransitions).forEach(function (triggerName) {\n                    var /** @type {?} */ player = activeTransitions[triggerName];\n                    if (player) {\n                        player.destroy();\n                    }\n                });\n            }\n        };\n        var this_1 = this;\n        for (var /** @type {?} */ i = 0; i < elms.length; i++) {\n            _loop_1(/** @type {?} */ i);\n        }\n        // we make a copy of the array because the actual source array is modified\n        // each time a player is finished/destroyed (the forEach loop would fail otherwise)\n        return copyArray(/** @type {?} */ ((this._activeElementAnimations.get(element))));\n    };\n    /**\n     * @param {?} element\n     * @param {?} instruction\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.animateTransition = function (element, instruction) {\n        var _this = this;\n        var /** @type {?} */ triggerName = instruction.triggerName;\n        var /** @type {?} */ previousPlayers;\n        if (instruction.isRemovalTransition) {\n            previousPlayers = this._onRemovalTransition(element);\n        }\n        else {\n            previousPlayers = [];\n            var /** @type {?} */ existingTransitions = this._activeTransitionAnimations.get(element);\n            var /** @type {?} */ existingPlayer = existingTransitions ? existingTransitions[triggerName] : null;\n            if (existingPlayer) {\n                previousPlayers.push(existingPlayer);\n            }\n        }\n        // it's important to do this step before destroying the players\n        // so that the onDone callback below won't fire before this\n        eraseStyles(element, instruction.fromStyles);\n        // we first run this so that the previous animation player\n        // data can be passed into the successive animation players\n        var /** @type {?} */ totalTime = 0;\n        var /** @type {?} */ players = instruction.timelines.map(function (timelineInstruction, i) {\n            totalTime = Math.max(totalTime, timelineInstruction.totalTime);\n            return _this._buildPlayer(element, timelineInstruction, previousPlayers, i);\n        });\n        previousPlayers.forEach(function (previousPlayer) { return previousPlayer.destroy(); });\n        var /** @type {?} */ player = optimizeGroupPlayer(players);\n        player.onDone(function () {\n            player.destroy();\n            var /** @type {?} */ elmTransitionMap = _this._activeTransitionAnimations.get(element);\n            if (elmTransitionMap) {\n                delete elmTransitionMap[triggerName];\n                if (Object.keys(elmTransitionMap).length == 0) {\n                    _this._activeTransitionAnimations.delete(element);\n                }\n            }\n            deleteFromArrayMap(_this._activeElementAnimations, element, player);\n            setStyles(element, instruction.toStyles);\n        });\n        var /** @type {?} */ elmTransitionMap = getOrSetAsInMap(this._activeTransitionAnimations, element, {});\n        elmTransitionMap[triggerName] = player;\n        this._queuePlayer(element, triggerName, player, makeAnimationEvent(element, triggerName, instruction.fromState, instruction.toState, null, // this will be filled in during event creation\n        totalTime));\n        return player;\n    };\n    /**\n     * @param {?} element\n     * @param {?} instructions\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.animateTimeline = function (element, instructions, previousPlayers) {\n        var _this = this;\n        if (previousPlayers === void 0) { previousPlayers = []; }\n        var /** @type {?} */ players = instructions.map(function (instruction, i) {\n            var /** @type {?} */ player = _this._buildPlayer(element, instruction, previousPlayers, i);\n            player.onDestroy(function () { deleteFromArrayMap(_this._activeElementAnimations, element, player); });\n            _this._markPlayerAsActive(element, player);\n            return player;\n        });\n        return optimizeGroupPlayer(players);\n    };\n    /**\n     * @param {?} element\n     * @param {?} instruction\n     * @param {?} previousPlayers\n     * @param {?=} index\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._buildPlayer = function (element, instruction, previousPlayers, index) {\n        if (index === void 0) { index = 0; }\n        // only the very first animation can absorb the previous styles. This\n        // is here to prevent the an overlap situation where a group animation\n        // absorbs previous styles multiple times for the same element.\n        if (index && previousPlayers.length) {\n            previousPlayers = [];\n        }\n        return this._driver.animate(element, this._normalizeKeyframes(instruction.keyframes), instruction.duration, instruction.delay, instruction.easing, previousPlayers);\n    };\n    /**\n     * @param {?} keyframes\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._normalizeKeyframes = function (keyframes) {\n        var _this = this;\n        var /** @type {?} */ errors = [];\n        var /** @type {?} */ normalizedKeyframes = [];\n        keyframes.forEach(function (kf) {\n            var /** @type {?} */ normalizedKeyframe = {};\n            Object.keys(kf).forEach(function (prop) {\n                var /** @type {?} */ normalizedProp = prop;\n                var /** @type {?} */ normalizedValue = kf[prop];\n                if (prop != 'offset') {\n                    normalizedProp = _this._normalizer.normalizePropertyName(prop, errors);\n                    normalizedValue =\n                        _this._normalizer.normalizeStyleValue(prop, normalizedProp, kf[prop], errors);\n                }\n                normalizedKeyframe[normalizedProp] = normalizedValue;\n            });\n            normalizedKeyframes.push(normalizedKeyframe);\n        });\n        if (errors.length) {\n            var /** @type {?} */ LINE_START = '\\n - ';\n            throw new Error(\"Unable to animate due to the following errors:\" + LINE_START + errors.join(LINE_START));\n        }\n        return normalizedKeyframes;\n    };\n    /**\n     * @param {?} element\n     * @param {?} player\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._markPlayerAsActive = function (element, player) {\n        var /** @type {?} */ elementAnimations = getOrSetAsInMap(this._activeElementAnimations, element, []);\n        elementAnimations.push(player);\n    };\n    /**\n     * @param {?} element\n     * @param {?} triggerName\n     * @param {?} player\n     * @param {?} event\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._queuePlayer = function (element, triggerName, player, event) {\n        var /** @type {?} */ tuple = ({ element: element, player: player, triggerName: triggerName, event: event });\n        this._queuedTransitionAnimations.push(tuple);\n        player.init();\n        element.classList.add(MARKED_FOR_ANIMATION_CLASSNAME);\n        player.onDone(function () { element.classList.remove(MARKED_FOR_ANIMATION_CLASSNAME); });\n    };\n    /**\n     * @return {?}\n     */\n    DomAnimationEngine.prototype._flushQueuedAnimations = function () {\n        var _loop_2 = function () {\n            var _a = ((this_2._queuedTransitionAnimations.shift())), player = _a.player, element = _a.element, triggerName = _a.triggerName, event = _a.event;\n            var /** @type {?} */ parent = element;\n            while (parent = parent.parentNode) {\n                // this means that a parent element will or will not\n                // have its own animation operation which in this case\n                // there's no point in even trying to do an animation\n                if (parent[MARKED_FOR_REMOVAL])\n                    return \"continue-parentLoop\";\n            }\n            var /** @type {?} */ listeners = this_2._triggerListeners.get(element);\n            if (listeners) {\n                listeners.forEach(function (tuple) {\n                    if (tuple.triggerName == triggerName) {\n                        listenOnPlayer(player, tuple.phase, event, tuple.callback);\n                    }\n                });\n            }\n            // if a removal exists for the given element then we need cancel\n            // all the queued players so that a proper removal animation can go\n            if (this_2._queuedRemovals.has(element)) {\n                player.destroy();\n                return \"continue\";\n            }\n            this_2._markPlayerAsActive(element, player);\n            // in the event that an animation throws an error then we do\n            // not want to re-run animations on any previous animations\n            // if they have already been kicked off beforehand\n            player.init();\n            if (!player.hasStarted()) {\n                player.play();\n            }\n        };\n        var this_2 = this;\n        parentLoop: while (this._queuedTransitionAnimations.length) {\n            var state_1 = _loop_2();\n            switch (state_1) {\n                case \"continue-parentLoop\": continue parentLoop;\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DomAnimationEngine.prototype.flush = function () {\n        var _this = this;\n        var /** @type {?} */ leaveListeners = new Map();\n        this._queuedRemovals.forEach(function (callback, element) {\n            var /** @type {?} */ tuple = _this._pendingListenerRemovals.get(element);\n            if (tuple) {\n                leaveListeners.set(element, tuple);\n                _this._pendingListenerRemovals.delete(element);\n            }\n        });\n        this._clearPendingListenerRemovals();\n        this._pendingListenerRemovals = leaveListeners;\n        this._flushQueuedAnimations();\n        var /** @type {?} */ flushAgain = false;\n        this._queuedRemovals.forEach(function (callback, element) {\n            // an item that was inserted/removed in the same flush means\n            // that an animation should not happen anyway\n            if (_this._flaggedInserts.has(element))\n                return;\n            var /** @type {?} */ parent = element;\n            var /** @type {?} */ players = [];\n            while (parent = parent.parentNode) {\n                // there is no reason to even try to\n                if (parent[MARKED_FOR_REMOVAL]) {\n                    callback();\n                    return;\n                }\n                var /** @type {?} */ match = _this._activeElementAnimations.get(parent);\n                if (match) {\n                    players.push.apply(players, match);\n                    break;\n                }\n            }\n            // the loop was unable to find an parent that is animating even\n            // though this element has set to be removed, so the algorithm\n            // should check to see if there are any triggers on the element\n            // that are present to handle a leave animation and then setup\n            // those players to facilitate the callback after done\n            if (players.length == 0) {\n                // this means that the element has valid state triggers\n                var /** @type {?} */ stateDetails_1 = _this._elementTriggerStates.get(element);\n                if (stateDetails_1) {\n                    Object.keys(stateDetails_1).forEach(function (triggerName) {\n                        flushAgain = true;\n                        var /** @type {?} */ oldValue = stateDetails_1[triggerName];\n                        var /** @type {?} */ instruction = _this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);\n                        if (instruction) {\n                            players.push(_this.animateTransition(element, instruction));\n                        }\n                        else {\n                            var /** @type {?} */ event = makeAnimationEvent(element, triggerName, oldValue, VOID_STATE, '', 0);\n                            var /** @type {?} */ player = new NoopAnimationPlayer();\n                            _this._queuePlayer(element, triggerName, player, event);\n                        }\n                    });\n                }\n            }\n            if (players.length) {\n                optimizeGroupPlayer(players).onDone(callback);\n            }\n            else {\n                callback();\n            }\n        });\n        this._queuedRemovals.clear();\n        this._flaggedInserts.clear();\n        // this means that one or more leave animations were detected\n        if (flushAgain) {\n            this._flushQueuedAnimations();\n            this._clearPendingListenerRemovals();\n        }\n    };\n    return DomAnimationEngine;\n}());\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} defaultValue\n * @return {?}\n */\nfunction getOrSetAsInMap(map, key, defaultValue) {\n    var /** @type {?} */ value = map.get(key);\n    if (!value) {\n        map.set(key, value = defaultValue);\n    }\n    return value;\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction deleteFromArrayMap(map, key, value) {\n    var /** @type {?} */ arr = map.get(key);\n    if (arr) {\n        var /** @type {?} */ index = arr.indexOf(value);\n        if (index >= 0) {\n            arr.splice(index, 1);\n            if (arr.length == 0) {\n                map.delete(key);\n            }\n        }\n    }\n}\n/**\n * @param {?} players\n * @return {?}\n */\nfunction optimizeGroupPlayer(players) {\n    switch (players.length) {\n        case 0:\n            return new NoopAnimationPlayer();\n        case 1:\n            return players[0];\n        default:\n            return new ɵAnimationGroupPlayer(players);\n    }\n}\n/**\n * @param {?} source\n * @return {?}\n */\nfunction copyArray(source) {\n    return source ? source.splice(0) : [];\n}\n/**\n * @param {?} triggerName\n * @param {?} eventName\n * @return {?}\n */\nfunction validatePlayerEvent(triggerName, eventName) {\n    switch (eventName) {\n        case 'start':\n        case 'done':\n            return;\n        default:\n            throw new Error(\"The provided animation trigger event \\\"\" + eventName + \"\\\" for the animation trigger \\\"\" + triggerName + \"\\\" is not supported!\");\n    }\n}\n/**\n * @param {?} player\n * @param {?} eventName\n * @param {?} baseEvent\n * @param {?} callback\n * @return {?}\n */\nfunction listenOnPlayer(player, eventName, baseEvent, callback) {\n    switch (eventName) {\n        case 'start':\n            player.onStart(function () {\n                var /** @type {?} */ event = copyAnimationEvent(baseEvent);\n                event.phaseName = 'start';\n                callback(event);\n            });\n            break;\n        case 'done':\n            player.onDone(function () {\n                var /** @type {?} */ event = copyAnimationEvent(baseEvent);\n                event.phaseName = 'done';\n                callback(event);\n            });\n            break;\n    }\n}\n/**\n * @param {?} e\n * @return {?}\n */\nfunction copyAnimationEvent(e) {\n    return makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, e.phaseName, e.totalTime);\n}\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} phaseName\n * @param {?} totalTime\n * @return {?}\n */\nfunction makeAnimationEvent(element, triggerName, fromState, toState, phaseName, totalTime) {\n    return ({ element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime });\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeTriggerValue(value) {\n    switch (typeof value) {\n        case 'boolean':\n            return value ? '1' : '0';\n        default:\n            return value ? value.toString() : null;\n    }\n}\n/**\n * \\@experimental Animation support is experimental.\n * @abstract\n */\nvar AnimationStyleNormalizer = (function () {\n    function AnimationStyleNormalizer() {\n    }\n    /**\n     * @abstract\n     * @param {?} propertyName\n     * @param {?} errors\n     * @return {?}\n     */\n    AnimationStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) { };\n    /**\n     * @abstract\n     * @param {?} userProvidedProperty\n     * @param {?} normalizedProperty\n     * @param {?} value\n     * @param {?} errors\n     * @return {?}\n     */\n    AnimationStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) { };\n    return AnimationStyleNormalizer;\n}());\n/**\n * \\@experimental Animation support is experimental.\n */\nvar NoopAnimationStyleNormalizer = (function () {\n    function NoopAnimationStyleNormalizer() {\n    }\n    /**\n     * @param {?} propertyName\n     * @param {?} errors\n     * @return {?}\n     */\n    NoopAnimationStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) { return propertyName; };\n    /**\n     * @param {?} userProvidedProperty\n     * @param {?} normalizedProperty\n     * @param {?} value\n     * @param {?} errors\n     * @return {?}\n     */\n    NoopAnimationStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) {\n        return (value);\n    };\n    return NoopAnimationStyleNormalizer;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar Animation = (function () {\n    /**\n     * @param {?} input\n     */\n    function Animation(input) {\n        var ast = Array.isArray(input) ? sequence(input) : input;\n        var errors = validateAnimationSequence(ast);\n        if (errors.length) {\n            var errorMessage = \"animation validation failed:\\n\" + errors.join(\"\\n\");\n            throw new Error(errorMessage);\n        }\n        this._animationAst = ast;\n    }\n    /**\n     * @param {?} startingStyles\n     * @param {?} destinationStyles\n     * @return {?}\n     */\n    Animation.prototype.buildTimelines = function (startingStyles, destinationStyles) {\n        var /** @type {?} */ start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : (startingStyles);\n        var /** @type {?} */ dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : (destinationStyles);\n        return buildAnimationKeyframes(this._animationAst, start, dest);\n    };\n    /**\n     * @param {?} injector\n     * @param {?} element\n     * @param {?=} startingStyles\n     * @param {?=} destinationStyles\n     * @return {?}\n     */\n    Animation.prototype.create = function (injector, element, startingStyles, destinationStyles) {\n        if (startingStyles === void 0) { startingStyles = {}; }\n        if (destinationStyles === void 0) { destinationStyles = {}; }\n        var /** @type {?} */ instructions = this.buildTimelines(startingStyles, destinationStyles);\n        // note the code below is only here to make the tests happy (once the new renderer is\n        // within core then the code below will interact with Renderer.transition(...))\n        var /** @type {?} */ driver = injector.get(AnimationDriver);\n        var /** @type {?} */ normalizer = injector.get(AnimationStyleNormalizer);\n        var /** @type {?} */ engine = new DomAnimationEngine(driver, normalizer);\n        return engine.animateTimeline(element, instructions);\n    };\n    return Animation;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar WebAnimationsStyleNormalizer = (function (_super) {\n    __extends(WebAnimationsStyleNormalizer, _super);\n    function WebAnimationsStyleNormalizer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} propertyName\n     * @param {?} errors\n     * @return {?}\n     */\n    WebAnimationsStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) {\n        return dashCaseToCamelCase(propertyName);\n    };\n    /**\n     * @param {?} userProvidedProperty\n     * @param {?} normalizedProperty\n     * @param {?} value\n     * @param {?} errors\n     * @return {?}\n     */\n    WebAnimationsStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) {\n        var /** @type {?} */ unit = '';\n        var /** @type {?} */ strVal = value.toString().trim();\n        if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {\n            if (typeof value === 'number') {\n                unit = 'px';\n            }\n            else {\n                var /** @type {?} */ valAndSuffixMatch = value.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n                    errors.push(\"Please provide a CSS unit value for \" + userProvidedProperty + \":\" + value);\n                }\n            }\n        }\n        return strVal + unit;\n    };\n    return WebAnimationsStyleNormalizer;\n}(AnimationStyleNormalizer));\nvar DIMENSIONAL_PROP_MAP = makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent'\n    .split(','));\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction makeBooleanMap(keys) {\n    var /** @type {?} */ map = {};\n    keys.forEach(function (key) { return map[key] = true; });\n    return map;\n}\nvar DASH_CASE_REGEXP = /-+([a-z0-9])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return m[1].toUpperCase();\n    });\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DEFAULT_STATE_VALUE = 'void';\nvar DEFAULT_STATE_STYLES = '*';\nvar NoopAnimationEngine = (function (_super) {\n    __extends(NoopAnimationEngine, _super);\n    function NoopAnimationEngine() {\n        var _this = _super.apply(this, arguments) || this;\n        _this._listeners = new Map();\n        _this._changes = [];\n        _this._flaggedRemovals = new Set();\n        _this._onDoneFns = [];\n        _this._triggerStyles = Object.create(null);\n        return _this;\n    }\n    /**\n     * @param {?} trigger\n     * @param {?=} name\n     * @return {?}\n     */\n    NoopAnimationEngine.prototype.registerTrigger = function (trigger, name) {\n        name = name || trigger.name;\n        if (this._triggerStyles[name]) {\n            return;\n        }\n        var /** @type {?} */ stateMap = {};\n        trigger.definitions.forEach(function (def) {\n            if (def.type === 0 /* State */) {\n                var /** @type {?} */ stateDef = (def);\n                stateMap[stateDef.name] = normalizeStyles(stateDef.styles.styles);\n            }\n        });\n        this._triggerStyles[name] = stateMap;\n    };\n    /**\n     * @param {?} element\n     * @param {?} domFn\n     * @return {?}\n     */\n    NoopAnimationEngine.prototype.onInsert = function (element, domFn) { domFn(); };\n    /**\n     * @param {?} element\n     * @param {?} domFn\n     * @return {?}\n     */\n    NoopAnimationEngine.prototype.onRemove = function (element, domFn) {\n        domFn();\n        if (element['nodeType'] == 1) {\n            this._flaggedRemovals.add(element);\n        }\n    };\n    /**\n     * @param {?} element\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    NoopAnimationEngine.prototype.setProperty = function (element, property, value) {\n        var /** @type {?} */ storageProp = makeStorageProp(property);\n        var /** @type {?} */ oldValue = element[storageProp] || DEFAULT_STATE_VALUE;\n        this._changes.push(/** @type {?} */ ({ element: element, oldValue: oldValue, newValue: value, triggerName: property }));\n        var /** @type {?} */ triggerStateStyles = this._triggerStyles[property] || {};\n        var /** @type {?} */ fromStateStyles = triggerStateStyles[oldValue] || triggerStateStyles[DEFAULT_STATE_STYLES];\n        if (fromStateStyles) {\n            eraseStyles(element, fromStateStyles);\n        }\n        element[storageProp] = value;\n        this._onDoneFns.push(function () {\n            var /** @type {?} */ toStateStyles = triggerStateStyles[value] || triggerStateStyles[DEFAULT_STATE_STYLES];\n            if (toStateStyles) {\n                setStyles(element, toStateStyles);\n            }\n        });\n    };\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} eventPhase\n     * @param {?} callback\n     * @return {?}\n     */\n    NoopAnimationEngine.prototype.listen = function (element, eventName, eventPhase, callback) {\n        var /** @type {?} */ listeners = this._listeners.get(element);\n        if (!listeners) {\n            this._listeners.set(element, listeners = []);\n        }\n        var /** @type {?} */ tuple = ({ triggerName: eventName, eventPhase: eventPhase, callback: callback });\n        listeners.push(tuple);\n        return function () { return tuple.doRemove = true; };\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationEngine.prototype.flush = function () {\n        var _this = this;\n        var /** @type {?} */ onStartCallbacks = [];\n        var /** @type {?} */ onDoneCallbacks = [];\n        /**\n         * @param {?} listener\n         * @param {?} data\n         * @return {?}\n         */\n        function handleListener(listener, data) {\n            var /** @type {?} */ phase = listener.eventPhase;\n            var /** @type {?} */ event = makeAnimationEvent$1(data.element, data.triggerName, data.oldValue, data.newValue, phase, 0);\n            if (phase == 'start') {\n                onStartCallbacks.push(function () { return listener.callback(event); });\n            }\n            else if (phase == 'done') {\n                onDoneCallbacks.push(function () { return listener.callback(event); });\n            }\n        }\n        this._changes.forEach(function (change) {\n            var /** @type {?} */ element = change.element;\n            var /** @type {?} */ listeners = _this._listeners.get(element);\n            if (listeners) {\n                listeners.forEach(function (listener) {\n                    if (listener.triggerName == change.triggerName) {\n                        handleListener(listener, change);\n                    }\n                });\n            }\n        });\n        // upon removal ALL the animation triggers need to get fired\n        this._flaggedRemovals.forEach(function (element) {\n            var /** @type {?} */ listeners = _this._listeners.get(element);\n            if (listeners) {\n                listeners.forEach(function (listener) {\n                    var /** @type {?} */ triggerName = listener.triggerName;\n                    var /** @type {?} */ storageProp = makeStorageProp(triggerName);\n                    handleListener(listener, /** @type {?} */ ({\n                        element: element,\n                        triggerName: triggerName,\n                        oldValue: element[storageProp] || DEFAULT_STATE_VALUE,\n                        newValue: DEFAULT_STATE_VALUE\n                    }));\n                });\n            }\n        });\n        // remove all the listeners after everything is complete\n        Array.from(this._listeners.keys()).forEach(function (element) {\n            var /** @type {?} */ listenersToKeep = ((_this._listeners.get(element))).filter(function (l) { return !l.doRemove; });\n            if (listenersToKeep.length) {\n                _this._listeners.set(element, listenersToKeep);\n            }\n            else {\n                _this._listeners.delete(element);\n            }\n        });\n        onStartCallbacks.forEach(function (fn) { return fn(); });\n        onDoneCallbacks.forEach(function (fn) { return fn(); });\n        this._flaggedRemovals.clear();\n        this._changes = [];\n        this._onDoneFns.forEach(function (doneFn) { return doneFn(); });\n        this._onDoneFns = [];\n    };\n    Object.defineProperty(NoopAnimationEngine.prototype, \"activePlayers\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NoopAnimationEngine.prototype, \"queuedPlayers\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    return NoopAnimationEngine;\n}(AnimationEngine));\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} phaseName\n * @param {?} totalTime\n * @return {?}\n */\nfunction makeAnimationEvent$1(element, triggerName, fromState, toState, phaseName, totalTime) {\n    return ({ element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime });\n}\n/**\n * @param {?} property\n * @return {?}\n */\nfunction makeStorageProp(property) {\n    return '_@_' + property;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar WebAnimationsPlayer = (function () {\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} options\n     * @param {?=} previousPlayers\n     */\n    function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {\n        if (previousPlayers === void 0) { previousPlayers = []; }\n        var _this = this;\n        this.element = element;\n        this.keyframes = keyframes;\n        this.options = options;\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._initialized = false;\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this.time = 0;\n        this.parentPlayer = null;\n        this._duration = options['duration'];\n        this._delay = options['delay'] || 0;\n        this.time = this._duration + this._delay;\n        this.previousStyles = {};\n        previousPlayers.forEach(function (player) {\n            var styles = player._captureStyles();\n            Object.keys(styles).forEach(function (prop) { return _this.previousStyles[prop] = styles[prop]; });\n        });\n    }\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype._onFinish = function () {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(function (fn) { return fn(); });\n            this._onDoneFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.init = function () {\n        var _this = this;\n        if (this._initialized)\n            return;\n        this._initialized = true;\n        var /** @type {?} */ keyframes = this.keyframes.map(function (styles) {\n            var /** @type {?} */ formattedKeyframe = {};\n            Object.keys(styles).forEach(function (prop, index) {\n                var /** @type {?} */ value = styles[prop];\n                if (value == AUTO_STYLE) {\n                    value = _computeStyle(_this.element, prop);\n                }\n                if (value != undefined) {\n                    formattedKeyframe[prop] = value;\n                }\n            });\n            return formattedKeyframe;\n        });\n        var /** @type {?} */ previousStyleProps = Object.keys(this.previousStyles);\n        if (previousStyleProps.length) {\n            var /** @type {?} */ startingKeyframe_1 = keyframes[0];\n            var /** @type {?} */ missingStyleProps_1 = [];\n            previousStyleProps.forEach(function (prop) {\n                if (!startingKeyframe_1.hasOwnProperty(prop)) {\n                    missingStyleProps_1.push(prop);\n                }\n                startingKeyframe_1[prop] = _this.previousStyles[prop];\n            });\n            if (missingStyleProps_1.length) {\n                var /** @type {?} */ self_1 = this;\n                var _loop_3 = function () {\n                    var /** @type {?} */ kf = keyframes[i];\n                    missingStyleProps_1.forEach(function (prop) {\n                        kf[prop] = _computeStyle(self_1.element, prop);\n                    });\n                };\n                // tslint:disable-next-line\n                for (var /** @type {?} */ i = 1; i < keyframes.length; i++) {\n                    _loop_3();\n                }\n            }\n        }\n        this._player = this._triggerWebAnimation(this.element, keyframes, this.options);\n        this._finalKeyframe =\n            keyframes.length ? _copyKeyframeStyles(keyframes[keyframes.length - 1]) : {};\n        // this is required so that the player doesn't start to animate right away\n        this._resetDomPlayerState();\n        this._player.addEventListener('finish', function () { return _this._onFinish(); });\n    };\n    /**\n     * \\@internal\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} options\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {\n        // jscompiler doesn't seem to know animate is a native property because it's not fully\n        // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]\n        return (element['animate'](keyframes, options));\n    };\n    Object.defineProperty(WebAnimationsPlayer.prototype, \"domPlayer\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._player; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.play = function () {\n        this.init();\n        if (!this.hasStarted()) {\n            this._onStartFns.forEach(function (fn) { return fn(); });\n            this._onStartFns = [];\n            this._started = true;\n        }\n        this._player.play();\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.pause = function () {\n        this.init();\n        this._player.pause();\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.finish = function () {\n        this.init();\n        this._onFinish();\n        this._player.finish();\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.reset = function () {\n        this._resetDomPlayerState();\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype._resetDomPlayerState = function () {\n        if (this._player) {\n            this._player.cancel();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.restart = function () {\n        this.reset();\n        this.play();\n    };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.hasStarted = function () { return this._started; };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.destroy = function () {\n        if (!this._destroyed) {\n            this._resetDomPlayerState();\n            this._onFinish();\n            this._destroyed = true;\n            this._onDestroyFns.forEach(function (fn) { return fn(); });\n            this._onDestroyFns = [];\n        }\n    };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.setPosition = function (p) { this._player.currentTime = p * this.time; };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype.getPosition = function () { return this._player.currentTime / this.time; };\n    /**\n     * @return {?}\n     */\n    WebAnimationsPlayer.prototype._captureStyles = function () {\n        var _this = this;\n        var /** @type {?} */ styles = {};\n        if (this.hasStarted()) {\n            Object.keys(this._finalKeyframe).forEach(function (prop) {\n                if (prop != 'offset') {\n                    styles[prop] =\n                        _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);\n                }\n            });\n        }\n        return styles;\n    };\n    return WebAnimationsPlayer;\n}());\n/**\n * @param {?} element\n * @param {?} prop\n * @return {?}\n */\nfunction _computeStyle(element, prop) {\n    return ((window.getComputedStyle(element)))[prop];\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction _copyKeyframeStyles(styles) {\n    var /** @type {?} */ newStyles = {};\n    Object.keys(styles).forEach(function (prop) {\n        if (prop != 'offset') {\n            newStyles[prop] = styles[prop];\n        }\n    });\n    return newStyles;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar WebAnimationsDriver = (function () {\n    function WebAnimationsDriver() {\n    }\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    WebAnimationsDriver.prototype.animate = function (element, keyframes, duration, delay, easing, previousPlayers) {\n        if (previousPlayers === void 0) { previousPlayers = []; }\n        var /** @type {?} */ playerOptions = { 'duration': duration, 'delay': delay, 'fill': 'forwards' };\n        // we check for this to avoid having a null|undefined value be present\n        // for the easing (which results in an error for certain browsers #9752)\n        if (easing) {\n            playerOptions['easing'] = easing;\n        }\n        var /** @type {?} */ previousWebAnimationPlayers = (previousPlayers.filter(function (player) { return player instanceof WebAnimationsPlayer; }));\n        return new WebAnimationsPlayer(element, keyframes, playerOptions, previousWebAnimationPlayers);\n    };\n    return WebAnimationsDriver;\n}());\n/**\n * @return {?}\n */\nfunction supportsWebAnimations() {\n    return typeof Element !== 'undefined' && typeof ((Element)).prototype['animate'] === 'function';\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation browser package.\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the animation package.\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { AnimationDriver, AnimationEngine as ɵAnimationEngine, Animation as ɵAnimation, AnimationStyleNormalizer as ɵAnimationStyleNormalizer, NoopAnimationStyleNormalizer as ɵNoopAnimationStyleNormalizer, WebAnimationsStyleNormalizer as ɵWebAnimationsStyleNormalizer, NoopAnimationDriver as ɵNoopAnimationDriver, DomAnimationEngine as ɵDomAnimationEngine, NoopAnimationEngine as ɵNoopAnimationEngine, WebAnimationsDriver as ɵWebAnimationsDriver, supportsWebAnimations as ɵsupportsWebAnimations, WebAnimationsPlayer as ɵWebAnimationsPlayer };\n//# sourceMappingURL=browser.es5.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@angular/animations/@angular/animations/browser.es5.js\n// module id = 132\n// module chunks = 6","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * @license Angular v4.0.0\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { Injectable, NgModule, NgZone, RendererFactory2 } from '@angular/core';\nimport { BrowserModule, ɵDomRendererFactory2 } from '@angular/platform-browser';\nimport { AnimationDriver, ɵAnimationEngine, ɵAnimationStyleNormalizer, ɵDomAnimationEngine, ɵNoopAnimationDriver, ɵNoopAnimationEngine, ɵWebAnimationsDriver, ɵWebAnimationsStyleNormalizer, ɵsupportsWebAnimations } from '@angular/animations/browser';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar AnimationRendererFactory = (function () {\n    /**\n     * @param {?} delegate\n     * @param {?} _engine\n     * @param {?} _zone\n     */\n    function AnimationRendererFactory(delegate, _engine, _zone) {\n        this.delegate = delegate;\n        this._engine = _engine;\n        this._zone = _zone;\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} type\n     * @return {?}\n     */\n    AnimationRendererFactory.prototype.createRenderer = function (hostElement, type) {\n        var _this = this;\n        var /** @type {?} */ delegate = this.delegate.createRenderer(hostElement, type);\n        if (!hostElement || !type || !type.data || !type.data['animation'])\n            return delegate;\n        var /** @type {?} */ namespaceId = type.id;\n        var /** @type {?} */ animationTriggers = (type.data['animation']);\n        animationTriggers.forEach(function (trigger) { return _this._engine.registerTrigger(trigger, namespaceify(namespaceId, trigger.name)); });\n        return new AnimationRenderer(delegate, this._engine, this._zone, namespaceId);\n    };\n    return AnimationRendererFactory;\n}());\nAnimationRendererFactory.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nAnimationRendererFactory.ctorParameters = function () { return [\n    { type: RendererFactory2, },\n    { type: ɵAnimationEngine, },\n    { type: NgZone, },\n]; };\nvar AnimationRenderer = (function () {\n    /**\n     * @param {?} delegate\n     * @param {?} _engine\n     * @param {?} _zone\n     * @param {?} _namespaceId\n     */\n    function AnimationRenderer(delegate, _engine, _zone, _namespaceId) {\n        this.delegate = delegate;\n        this._engine = _engine;\n        this._zone = _zone;\n        this._namespaceId = _namespaceId;\n        this.destroyNode = null;\n        this._flushPromise = null;\n        this.destroyNode = this.delegate.destroyNode ? function (n) { return delegate.destroyNode(n); } : null;\n    }\n    Object.defineProperty(AnimationRenderer.prototype, \"data\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.delegate.data; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    AnimationRenderer.prototype.destroy = function () { this.delegate.destroy(); };\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    AnimationRenderer.prototype.createElement = function (name, namespace) {\n        return this.delegate.createElement(name, namespace);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    AnimationRenderer.prototype.createComment = function (value) { return this.delegate.createComment(value); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    AnimationRenderer.prototype.createText = function (value) { return this.delegate.createText(value); };\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    AnimationRenderer.prototype.selectRootElement = function (selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    AnimationRenderer.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    AnimationRenderer.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    AnimationRenderer.prototype.setAttribute = function (el, name, value, namespace) {\n        this.delegate.setAttribute(el, name, value, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    AnimationRenderer.prototype.removeAttribute = function (el, name, namespace) {\n        this.delegate.removeAttribute(el, name, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    AnimationRenderer.prototype.addClass = function (el, name) { this.delegate.addClass(el, name); };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    AnimationRenderer.prototype.removeClass = function (el, name) { this.delegate.removeClass(el, name); };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    AnimationRenderer.prototype.setStyle = function (el, style, value, flags) {\n        this.delegate.setStyle(el, style, value, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    AnimationRenderer.prototype.removeStyle = function (el, style, flags) {\n        this.delegate.removeStyle(el, style, flags);\n    };\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    AnimationRenderer.prototype.setValue = function (node, value) { this.delegate.setValue(node, value); };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    AnimationRenderer.prototype.appendChild = function (parent, newChild) {\n        var _this = this;\n        this._engine.onInsert(newChild, function () { return _this.delegate.appendChild(parent, newChild); });\n        this._queueFlush();\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    AnimationRenderer.prototype.insertBefore = function (parent, newChild, refChild) {\n        var _this = this;\n        this._engine.onInsert(newChild, function () { return _this.delegate.insertBefore(parent, newChild, refChild); });\n        this._queueFlush();\n    };\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    AnimationRenderer.prototype.removeChild = function (parent, oldChild) {\n        var _this = this;\n        this._engine.onRemove(oldChild, function () {\n            // Note: if an component element has a leave animation, and the component\n            // a host leave animation, the view engine will call `removeChild` for the parent\n            // component renderer as well as for the child component renderer.\n            // Therefore, we need to check if we already removed the element.\n            if (_this.delegate.parentNode(oldChild)) {\n                _this.delegate.removeChild(parent, oldChild);\n            }\n        });\n        this._queueFlush();\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    AnimationRenderer.prototype.setProperty = function (el, name, value) {\n        if (name.charAt(0) == '@') {\n            this._engine.setProperty(el, namespaceify(this._namespaceId, name.substr(1)), value);\n            this._queueFlush();\n        }\n        else {\n            this.delegate.setProperty(el, name, value);\n        }\n    };\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    AnimationRenderer.prototype.listen = function (target, eventName, callback) {\n        var _this = this;\n        if (eventName.charAt(0) == '@') {\n            var /** @type {?} */ element = resolveElementFromTarget(target);\n            var _a = parseTriggerCallbackName(eventName.substr(1)), name = _a[0], phase = _a[1];\n            return this._engine.listen(element, namespaceify(this._namespaceId, name), phase, function (event) {\n                var /** @type {?} */ e = (event);\n                if (e.triggerName) {\n                    e.triggerName = deNamespaceify(_this._namespaceId, e.triggerName);\n                }\n                _this._zone.run(function () { return callback(event); });\n            });\n        }\n        return this.delegate.listen(target, eventName, callback);\n    };\n    /**\n     * @return {?}\n     */\n    AnimationRenderer.prototype._queueFlush = function () {\n        var _this = this;\n        if (!this._flushPromise) {\n            this._zone.runOutsideAngular(function () {\n                _this._flushPromise = Promise.resolve(null).then(function () {\n                    _this._flushPromise = null;\n                    _this._engine.flush();\n                });\n            });\n        }\n    };\n    return AnimationRenderer;\n}());\n/**\n * @param {?} target\n * @return {?}\n */\nfunction resolveElementFromTarget(target) {\n    switch (target) {\n        case 'body':\n            return document.body;\n        case 'document':\n            return document;\n        case 'window':\n            return window;\n        default:\n            return target;\n    }\n}\n/**\n * @param {?} triggerName\n * @return {?}\n */\nfunction parseTriggerCallbackName(triggerName) {\n    var /** @type {?} */ dotIndex = triggerName.indexOf('.');\n    var /** @type {?} */ trigger = triggerName.substring(0, dotIndex);\n    var /** @type {?} */ phase = triggerName.substr(dotIndex + 1);\n    return [trigger, phase];\n}\n/**\n * @param {?} namespaceId\n * @param {?} value\n * @return {?}\n */\nfunction namespaceify(namespaceId, value) {\n    return namespaceId + \"#\" + value;\n}\n/**\n * @param {?} namespaceId\n * @param {?} value\n * @return {?}\n */\nfunction deNamespaceify(namespaceId, value) {\n    return value.replace(namespaceId + '#', '');\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar InjectableAnimationEngine = (function (_super) {\n    __extends(InjectableAnimationEngine, _super);\n    /**\n     * @param {?} driver\n     * @param {?} normalizer\n     */\n    function InjectableAnimationEngine(driver, normalizer) {\n        return _super.call(this, driver, normalizer) || this;\n    }\n    return InjectableAnimationEngine;\n}(ɵDomAnimationEngine));\nInjectableAnimationEngine.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nInjectableAnimationEngine.ctorParameters = function () { return [\n    { type: AnimationDriver, },\n    { type: ɵAnimationStyleNormalizer, },\n]; };\n/**\n * @return {?}\n */\nfunction instantiateSupportedAnimationDriver() {\n    if (ɵsupportsWebAnimations()) {\n        return new ɵWebAnimationsDriver();\n    }\n    return new ɵNoopAnimationDriver();\n}\n/**\n * @return {?}\n */\nfunction instantiateDefaultStyleNormalizer() {\n    return new ɵWebAnimationsStyleNormalizer();\n}\n/**\n * @param {?} renderer\n * @param {?} engine\n * @param {?} zone\n * @return {?}\n */\nfunction instantiateRendererFactory(renderer, engine, zone) {\n    return new AnimationRendererFactory(renderer, engine, zone);\n}\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserModule.\n */\nvar BROWSER_ANIMATIONS_PROVIDERS = [\n    { provide: AnimationDriver, useFactory: instantiateSupportedAnimationDriver },\n    { provide: ɵAnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer },\n    { provide: ɵAnimationEngine, useClass: InjectableAnimationEngine }, {\n        provide: RendererFactory2,\n        useFactory: instantiateRendererFactory,\n        deps: [ɵDomRendererFactory2, ɵAnimationEngine, NgZone]\n    }\n];\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserTestingModule.\n */\nvar BROWSER_NOOP_ANIMATIONS_PROVIDERS = [\n    { provide: ɵAnimationEngine, useClass: ɵNoopAnimationEngine }, {\n        provide: RendererFactory2,\n        useFactory: instantiateRendererFactory,\n        deps: [ɵDomRendererFactory2, ɵAnimationEngine, NgZone]\n    }\n];\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@experimental Animation support is experimental.\n */\nvar BrowserAnimationsModule = (function () {\n    function BrowserAnimationsModule() {\n    }\n    return BrowserAnimationsModule;\n}());\nBrowserAnimationsModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [BrowserModule],\n                providers: BROWSER_ANIMATIONS_PROVIDERS,\n            },] },\n];\n/**\n * @nocollapse\n */\nBrowserAnimationsModule.ctorParameters = function () { return []; };\n/**\n * \\@experimental Animation support is experimental.\n */\nvar NoopAnimationsModule = (function () {\n    function NoopAnimationsModule() {\n    }\n    return NoopAnimationsModule;\n}());\nNoopAnimationsModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [BrowserModule],\n                providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,\n            },] },\n];\n/**\n * @nocollapse\n */\nNoopAnimationsModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation browser package.\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the animation package.\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { BrowserAnimationsModule, NoopAnimationsModule, AnimationRenderer as ɵAnimationRenderer, AnimationRendererFactory as ɵAnimationRendererFactory, BROWSER_ANIMATIONS_PROVIDERS as ɵe, BROWSER_NOOP_ANIMATIONS_PROVIDERS as ɵf, InjectableAnimationEngine as ɵa, instantiateDefaultStyleNormalizer as ɵc, instantiateRendererFactory as ɵd, instantiateSupportedAnimationDriver as ɵb };\n//# sourceMappingURL=animations.es5.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@angular/platform-browser/@angular/platform-browser/animations.es5.js\n// module id = 134\n// module chunks = 6","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar http_1 = require(\"@angular/http\");\nvar core_1 = require(\"@angular/core\");\nvar Observable_1 = require(\"rxjs/Observable\");\nrequire(\"rxjs/add/observable/fromPromise\");\nrequire(\"rxjs/add/operator/mergeMap\");\nvar AuthConfigConsts = (function () {\n    function AuthConfigConsts() {\n    }\n    AuthConfigConsts.DEFAULT_TOKEN_NAME = 'id_token';\n    AuthConfigConsts.DEFAULT_HEADER_NAME = 'Authorization';\n    AuthConfigConsts.HEADER_PREFIX_BEARER = 'Bearer ';\n    return AuthConfigConsts;\n}());\nexports.AuthConfigConsts = AuthConfigConsts;\nvar AuthConfigDefaults = {\n    headerName: AuthConfigConsts.DEFAULT_HEADER_NAME,\n    headerPrefix: null,\n    tokenName: AuthConfigConsts.DEFAULT_TOKEN_NAME,\n    tokenGetter: function () { return localStorage.getItem(AuthConfigDefaults.tokenName); },\n    noJwtError: false,\n    noClientCheck: false,\n    globalHeaders: [],\n    noTokenScheme: false\n};\n/**\n * Sets up the authentication configuration.\n */\nvar AuthConfig = (function () {\n    function AuthConfig(config) {\n        config = config || {};\n        this._config = objectAssign({}, AuthConfigDefaults, config);\n        if (this._config.headerPrefix) {\n            this._config.headerPrefix += ' ';\n        }\n        else if (this._config.noTokenScheme) {\n            this._config.headerPrefix = '';\n        }\n        else {\n            this._config.headerPrefix = AuthConfigConsts.HEADER_PREFIX_BEARER;\n        }\n        if (config.tokenName && !config.tokenGetter) {\n            this._config.tokenGetter = function () { return localStorage.getItem(config.tokenName); };\n        }\n    }\n    AuthConfig.prototype.getConfig = function () {\n        return this._config;\n    };\n    return AuthConfig;\n}());\nexports.AuthConfig = AuthConfig;\nvar AuthHttpError = (function (_super) {\n    __extends(AuthHttpError, _super);\n    function AuthHttpError() {\n        _super.apply(this, arguments);\n    }\n    return AuthHttpError;\n}(Error));\nexports.AuthHttpError = AuthHttpError;\n/**\n * Allows for explicit authenticated HTTP requests.\n */\nvar AuthHttp = (function () {\n    function AuthHttp(options, http, defOpts) {\n        var _this = this;\n        this.http = http;\n        this.defOpts = defOpts;\n        this.config = options.getConfig();\n        this.tokenStream = new Observable_1.Observable(function (obs) {\n            obs.next(_this.config.tokenGetter());\n        });\n    }\n    AuthHttp.prototype.mergeOptions = function (providedOpts, defaultOpts) {\n        var newOptions = defaultOpts || new http_1.RequestOptions();\n        if (this.config.globalHeaders) {\n            this.setGlobalHeaders(this.config.globalHeaders, providedOpts);\n        }\n        newOptions = newOptions.merge(new http_1.RequestOptions(providedOpts));\n        return newOptions;\n    };\n    AuthHttp.prototype.requestHelper = function (requestArgs, additionalOptions) {\n        var options = new http_1.RequestOptions(requestArgs);\n        if (additionalOptions) {\n            options = options.merge(additionalOptions);\n        }\n        return this.request(new http_1.Request(this.mergeOptions(options, this.defOpts)));\n    };\n    AuthHttp.prototype.requestWithToken = function (req, token) {\n        if (!this.config.noClientCheck && !tokenNotExpired(undefined, token)) {\n            if (!this.config.noJwtError) {\n                return new Observable_1.Observable(function (obs) {\n                    obs.error(new AuthHttpError('No JWT present or has expired'));\n                });\n            }\n        }\n        else {\n            req.headers.set(this.config.headerName, this.config.headerPrefix + token);\n        }\n        return this.http.request(req);\n    };\n    AuthHttp.prototype.setGlobalHeaders = function (headers, request) {\n        if (!request.headers) {\n            request.headers = new http_1.Headers();\n        }\n        headers.forEach(function (header) {\n            var key = Object.keys(header)[0];\n            var headerValue = header[key];\n            request.headers.set(key, headerValue);\n        });\n    };\n    AuthHttp.prototype.request = function (url, options) {\n        var _this = this;\n        if (typeof url === 'string') {\n            return this.get(url, options); // Recursion: transform url from String to Request\n        }\n        // else if ( ! url instanceof Request ) {\n        //   throw new Error('First argument must be a url string or Request instance.');\n        // }\n        // from this point url is always an instance of Request;\n        var req = url;\n        var token = this.config.tokenGetter();\n        if (token instanceof Promise) {\n            return Observable_1.Observable.fromPromise(token).mergeMap(function (jwtToken) { return _this.requestWithToken(req, jwtToken); });\n        }\n        else {\n            return this.requestWithToken(req, token);\n        }\n    };\n    AuthHttp.prototype.get = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Get, url: url }, options);\n    };\n    AuthHttp.prototype.post = function (url, body, options) {\n        return this.requestHelper({ body: body, method: http_1.RequestMethod.Post, url: url }, options);\n    };\n    AuthHttp.prototype.put = function (url, body, options) {\n        return this.requestHelper({ body: body, method: http_1.RequestMethod.Put, url: url }, options);\n    };\n    AuthHttp.prototype.delete = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Delete, url: url }, options);\n    };\n    AuthHttp.prototype.patch = function (url, body, options) {\n        return this.requestHelper({ body: body, method: http_1.RequestMethod.Patch, url: url }, options);\n    };\n    AuthHttp.prototype.head = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Head, url: url }, options);\n    };\n    AuthHttp.prototype.options = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Options, url: url }, options);\n    };\n    AuthHttp = __decorate([\n        core_1.Injectable(), \n        __metadata('design:paramtypes', [AuthConfig, http_1.Http, http_1.RequestOptions])\n    ], AuthHttp);\n    return AuthHttp;\n}());\nexports.AuthHttp = AuthHttp;\n/**\n * Helper class to decode and find JWT expiration.\n */\nvar JwtHelper = (function () {\n    function JwtHelper() {\n    }\n    JwtHelper.prototype.urlBase64Decode = function (str) {\n        var output = str.replace(/-/g, '+').replace(/_/g, '/');\n        switch (output.length % 4) {\n            case 0: {\n                break;\n            }\n            case 2: {\n                output += '==';\n                break;\n            }\n            case 3: {\n                output += '=';\n                break;\n            }\n            default: {\n                throw 'Illegal base64url string!';\n            }\n        }\n        return this.b64DecodeUnicode(output);\n    };\n    // credits for decoder goes to https://github.com/atk\n    JwtHelper.prototype.b64decode = function (str) {\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        var output = '';\n        str = String(str).replace(/=+$/, '');\n        if (str.length % 4 == 1) {\n            throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n        }\n        for (var bc = 0, bs = void 0, buffer = void 0, idx = 0; \n        // get next character\n        buffer = str.charAt(idx++); \n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n        return output;\n    };\n    // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n    JwtHelper.prototype.b64DecodeUnicode = function (str) {\n        return decodeURIComponent(Array.prototype.map.call(this.b64decode(str), function (c) {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    };\n    JwtHelper.prototype.decodeToken = function (token) {\n        var parts = token.split('.');\n        if (parts.length !== 3) {\n            throw new Error('JWT must have 3 parts');\n        }\n        var decoded = this.urlBase64Decode(parts[1]);\n        if (!decoded) {\n            throw new Error('Cannot decode the token');\n        }\n        return JSON.parse(decoded);\n    };\n    JwtHelper.prototype.getTokenExpirationDate = function (token) {\n        var decoded;\n        decoded = this.decodeToken(token);\n        if (!decoded.hasOwnProperty('exp')) {\n            return null;\n        }\n        var date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(decoded.exp);\n        return date;\n    };\n    JwtHelper.prototype.isTokenExpired = function (token, offsetSeconds) {\n        var date = this.getTokenExpirationDate(token);\n        offsetSeconds = offsetSeconds || 0;\n        if (date == null) {\n            return false;\n        }\n        // Token expired?\n        return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\n    };\n    return JwtHelper;\n}());\nexports.JwtHelper = JwtHelper;\n/**\n * Checks for presence of token and that token hasn't expired.\n * For use with the @CanActivate router decorator and NgIf\n */\nfunction tokenNotExpired(tokenName, jwt) {\n    if (tokenName === void 0) { tokenName = AuthConfigConsts.DEFAULT_TOKEN_NAME; }\n    var token = jwt || localStorage.getItem(tokenName);\n    var jwtHelper = new JwtHelper();\n    return token != null && !jwtHelper.isTokenExpired(token);\n}\nexports.tokenNotExpired = tokenNotExpired;\nexports.AUTH_PROVIDERS = [\n    {\n        provide: AuthHttp,\n        deps: [http_1.Http, http_1.RequestOptions],\n        useFactory: function (http, options) {\n            return new AuthHttp(new AuthConfig(), http, options);\n        }\n    }\n];\nfunction provideAuth(config) {\n    return [\n        {\n            provide: AuthHttp,\n            deps: [http_1.Http, http_1.RequestOptions],\n            useFactory: function (http, options) {\n                return new AuthHttp(new AuthConfig(config), http, options);\n            }\n        }\n    ];\n}\nexports.provideAuth = provideAuth;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\nfunction toObject(val) {\n    if (val === null || val === undefined) {\n        throw new TypeError('Object.assign cannot be called with null or undefined');\n    }\n    return Object(val);\n}\nfunction objectAssign(target) {\n    var source = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        source[_i - 1] = arguments[_i];\n    }\n    var from;\n    var to = toObject(target);\n    var symbols;\n    for (var s = 1; s < arguments.length; s++) {\n        from = Object(arguments[s]);\n        for (var key in from) {\n            if (hasOwnProperty.call(from, key)) {\n                to[key] = from[key];\n            }\n        }\n        if (Object.getOwnPropertySymbols) {\n            symbols = Object.getOwnPropertySymbols(from);\n            for (var i = 0; i < symbols.length; i++) {\n                if (propIsEnumerable.call(from, symbols[i])) {\n                    to[symbols[i]] = from[symbols[i]];\n                }\n            }\n        }\n    }\n    return to;\n}\n/**\n * Module for angular2-jwt\n * @experimental\n */\nvar AuthModule = (function () {\n    function AuthModule(parentModule) {\n        if (parentModule) {\n            throw new Error('AuthModule is already loaded. Import it in the AppModule only');\n        }\n    }\n    AuthModule.forRoot = function (config) {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                { provide: AuthConfig, useValue: config }\n            ]\n        };\n    };\n    AuthModule = __decorate([\n        core_1.NgModule({\n            imports: [http_1.HttpModule],\n            providers: [AuthHttp, JwtHelper]\n        }),\n        __param(0, core_1.Optional()),\n        __param(0, core_1.SkipSelf()), \n        __metadata('design:paramtypes', [AuthModule])\n    ], AuthModule);\n    return AuthModule;\n}());\nexports.AuthModule = AuthModule;\n//# sourceMappingURL=angular2-jwt.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/angular2-jwt/angular2-jwt.js\n// module id = 136\n// module chunks = 6","import { Component, AfterViewInit }     from '@angular/core';\nimport {  Router,\n          Event as RouterEvent,\n          NavigationStart,\n          NavigationEnd,\n          NavigationCancel,\n          NavigationError }             from '@angular/router';\nimport { Auth }                         from './shared';\nimport { tokenNotExpired }              from 'angular2-jwt';\n\nimport '../style/app.scss';\n\ndeclare var $: any;\ndeclare var skel: any;\n\n@Component({\n  selector: 'my-app', // <my-app></my-app>\n  template: require('./app.component.html'),\n  styles: [require('./app.component.scss')]\n})\nexport class AppComponent {\n  private url = 'https://github.com/CLTracker';\n  private title: string = 'hello';\n  private data: string;\n  private loading: boolean = false;\n\n  get perms(): string {\n    if(this.auth.userProfile) {\n      return this.auth.userProfile.userType;\n    } else {\n      return '';\n    }\n  }\n\n  constructor(private auth: Auth, private router: Router) {\n\n    this.router.events.subscribe((event: RouterEvent) => {\n      this.navigationInterceptor(event);\n    })\n\n    // get jquery handles to body\n    var\t$window = $(window),\n    $body = $('body');\n\n    // Disable animations/transitions until the page has loaded.\n    $body.addClass('is-loading');\n\n    // Remove loading class once DOM is loaded, so we can trigger the\n    // intro animations\n    $window.on('load', function() {\n      window.setTimeout(function() {\n        $body.removeClass('is-loading');\n      }, 100);\n    });\n  }\n\n  ngAfterViewInit() {\n    // Menu initialization. Since the menu element is dynamic (does not exist at startup, since it is a decendent of the\n    // angular zone) we need to initialize it's jquery after the view is finished rendering. The code below will init the\n    // menu so that it properly propagates.\n\n    // get reference to body and #menu element\n    let $menu = $('#menu');\n    let $body = $('body');\n    let\t$window = $(window);\n    let $header = $('#header');\n    let $banner = $('#banner');\n\n    // Header.\n    if (skel.vars.IEVersion < 9)\n      $header.removeClass('alt');\n\n    if ($banner.length > 0\n    &&\t$header.hasClass('alt')) {\n\n      $window.on('resize', function() { $window.trigger('scroll'); });\n\n      $banner.scrollex({\n        bottom:\t\t$header.outerHeight(),\n        terminate:\tfunction() { $header.removeClass('alt'); },\n        enter:\t\tfunction() { $header.addClass('alt'); },\n        leave:\t\tfunction() { $header.removeClass('alt'); }\n      });\n    }\n\n    // Stops the menu from being opened again.\n    $menu._locked = false;\n\n    $menu._lock = function() {\n      if ($menu._locked) {\n        return false;\n      }\n      $menu._locked = true;\n\n      window.setTimeout(function() {\n        $menu._locked = false;\n      }, 350);\n\n      return true;\n    };\n\n    // grabs a lock then displays the menu\n    $menu._show = function() {\n      if ($menu._lock())\n        $body.addClass('is-menu-visible');\n    };\n\n    // removes a lock then hides the menu\n    $menu._hide = function() {\n      if ($menu._lock())\n        $body.removeClass('is-menu-visible');\n    };\n\n    // same thing as above, alternate function\n    $menu._toggle = function() {\n      if ($menu._lock())\n        $body.toggleClass('is-menu-visible');\n    };\n\n    $menu\n      .appendTo($body)\n      .on('click', function(event) {\n        // prevent element from bubbling up propagation tree\n        event.stopPropagation();\n        // hide\n        $menu._hide();\n      })\n      .find('.inner')\n      .on('click', '.close', function(event) {\n        // stop all dat propagation\n        event.preventDefault();\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n        // hide\n        $menu._hide();\n      })\n      .on('click', function(event) {\n        // we really hate propagation if you haven't noticed\n        event.stopPropagation();\n      })\n      .on('click', 'a', function(event) {\n        // TODO use angular router here instead of jquery href\n        if ($(this).attr('href')) {\n        \n          let href = $(this).attr('href');\n\n          event.preventDefault();\n          event.stopPropagation();\n\n          // hide\n          $menu._hide();\n\n          // redirect\n          window.setTimeout(function() {\n            window.location.href = href;\n          }, 350);\n        }\n      });\n\n      $body\n        .on('click', 'a[href=\"#menu\"]', function(event) {\n          event.stopPropagation();\n          event.preventDefault();\n          // toggle.\n        $menu._toggle();\n        })\n        .on('keydown', function(event) {\n          // Hide on escape.\n            if (event.keyCode == 27)\n              $menu._hide();\n        });\n  }\n\n  navigationInterceptor(event: RouterEvent): void {\n    if (event instanceof NavigationStart) {\n      this.loading = true;\n    }\n\n    if (event instanceof NavigationEnd) {\n      this.loading = false;\n    }\n\n    // Set loading state to false in both of the below events to hide the spinner in case a request fails\n    if (event instanceof NavigationCancel) {\n        this.loading = false;\n    }\n    if (event instanceof NavigationError) {\n        this.loading = false;\n    }\n  }\n\n  public gotoProfile() {\n    if(this.auth.userProfile.user_metadata && this.auth.userProfile.user_metadata.permissions) {\n      this.router.navigate([\n        this.auth.userProfile.user_metadata.permissions,\n        'profile'\n      ]);\n    } else {\n      console.log('user has no permissions but is logged in?');\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/@angularclass/hmr-loader!./~/angular2-router-loader/src!./~/tslint-loader!./src/app/app.component.ts","import { RouterModule, Routes } from '@angular/router';\n\nimport { HomeComponent }  from './home/home.component';\nimport { AboutComponent } from './about/about.component';\n\nimport { RouteGuard }      from './shared';\n\n// TODO: implement these routes\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'org/profile', loadChildren: () => new Promise(function (resolve) {  (require as any).ensure([], function (require: any) {    resolve(require('./+organizer/profile.module')['OrganizerProfileModule']);  });}) },\n  { path: 'xhb/profile', loadChildren: () => new Promise(function (resolve) {  (require as any).ensure([], function (require: any) {    resolve(require('./+exhibitor/profile.module')['ExhibitorProfileModule']);  });}) },\n  { path: 'adm/profile', loadChildren: () => new Promise(function (resolve) {  (require as any).ensure([], function (require: any) {    resolve(require('./+administrator/profile.module')['AdminProfileModule']);  });}) },\n  { path: 'notloggedin', loadChildren: () => new Promise(function (resolve) {  (require as any).ensure([], function (require: any) {    resolve(require('./+notloggedin/login.module')['LoginModule']);  });}) },\n  { path: 'join/:portal', canActivate: [RouteGuard], loadChildren: () => new Promise(function (resolve) {  (require as any).ensure([], function (require: any) {    resolve(require('./+join/join.module')['JoinModule']);  });}) },\n  { path: 'about', component: AboutComponent}\n];\n\nexport const routing = RouterModule.forRoot(routes);\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/@angularclass/hmr-loader!./~/angular2-router-loader/src!./~/tslint-loader!./src/app/app.routing.ts","import { Injectable }       from '@angular/core';\nimport { \n    CanActivateChild, Router,\n    ActivatedRouteSnapshot,\n    RouterStateSnapshot}    from '@angular/router';\nimport { Auth }  from './auth.service';\n\n@Injectable()\nexport class AdmRouteGuard implements CanActivateChild {\n    constructor(private auth: Auth,\n        private router: Router) { } \n\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        this.auth.refresh();\n\n        let url: string = state.url;\n        return true;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/@angularclass/hmr-loader!./~/angular2-router-loader/src!./~/tslint-loader!./src/app/shared/route-guard-adm.service.ts","import { Injectable }       from '@angular/core';\nimport { \n    CanActivate, Router,\n    ActivatedRouteSnapshot,\n    RouterStateSnapshot}    from '@angular/router';\nimport { Auth }  from './auth.service';\n\n@Injectable()\nexport class RouteGuard implements CanActivate {\n    constructor(private router: Router, private auth: Auth) { } \n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        // This function protects the 'join' router by checking to make sure that\n        // if the user is at the join page, they actually belong there and should \n        // not be redirected\n\n        let url: string = state.url;\n\n        if(!this.auth.authenticated()) {\n            // redirect away from /join and into /notloggedin\n            this.router.navigate(['/notloggedin']);\n            return false;\n        }\n\n        // otherwise, user is authenticated so let them through\n        return true;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/@angularclass/hmr-loader!./~/angular2-router-loader/src!./~/tslint-loader!./src/app/shared/route-guard-all.service.ts","import { Injectable }       from '@angular/core';\nimport { \n    CanActivateChild, Router,\n    ActivatedRouteSnapshot,\n    RouterStateSnapshot}    from '@angular/router';\nimport { Auth }  from './auth.service';\n\n@Injectable()\nexport class OrgRouteGuard implements CanActivateChild {\n    constructor(private auth: Auth,\n        private router: Router) { } \n\n    private hasOrg(): boolean { \n        return this.auth.userProfile\n    }\n\n    private hasPermissions(): boolean {\n        return this.auth.userProfile && this.auth.userProfile.userType === 'org';\n    }\n\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        // TODO: change from Auth0 database to our own database\n\n        this.auth.refresh();\n\n        let url: Array<string> = state.url.split('/');\n\n        // if user is no longer signed in\n        if(!this.auth.authenticated()) {\n            this.router.navigate(['/notloggedin']);\n            return false;\n        }\n\n        // if the user doesn't have an organization yet, redirect them\n        if(!this.hasOrg()) {\n            this.router.navigate(['/join', url[1]]);\n            return false;\n        }\n\n        // if the user has permissions but they aren't as an exhibitor, do not allow\n        if(!this.hasPermissions()) {\n            this.router.navigate(['']);\n            return false;\n        }\n\n        // otherwise, user has is logged in and has an organization, so we let them through\n        return true;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/@angularclass/hmr-loader!./~/angular2-router-loader/src!./~/tslint-loader!./src/app/shared/route-guard-org.service.ts","import { Injectable }       from '@angular/core';\nimport { \n    CanActivateChild, Router,\n    ActivatedRouteSnapshot,\n    RouterStateSnapshot}    from '@angular/router';\nimport { Auth }  from './auth.service';\n\n@Injectable()\nexport class XhbRouteGuard implements CanActivateChild {\n    constructor(private auth: Auth,\n        private router: Router) { } \n\n    private hasOrg(): boolean { \n        return this.auth.userProfile\n    }\n\n    private hasPermissions(): boolean {\n        return this.auth.userProfile && this.auth.userProfile.userType === 'xhb';\n    }\n\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        // TODO: change from Auth0 database to our own database\n\n        this.auth.refresh();\n\n        let url: Array<string> = state.url.split('/');\n\n        // if user is no longer signed in\n        if(!this.auth.authenticated()) {\n            this.router.navigate(['/notloggedin']);\n            return false;\n        }\n\n        // if the user doesn't have an organization yet, redirect them\n        if(!this.hasOrg()) {\n            this.router.navigate(['/join', url[1]]);\n            return false;\n        }\n\n        // if the user has permissions but they aren't as an exhibitor, do not allow\n        if(!this.hasPermissions()) {\n            this.router.navigate(['']);\n            return false;\n        }\n\n        // otherwise, user has is logged in and has an organization, so we let them through\n        return true;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/@angularclass/hmr-loader!./~/angular2-router-loader/src!./~/tslint-loader!./src/app/shared/route-guard-xhb.service.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\n// depending on the env mode, enable prod mode or add debugging modules\nif (process.env.ENV === 'build') {\n  enableProdMode();\n}\n\nexport function main() {\n  return platformBrowserDynamic().bootstrapModule(AppModule).then(function(MODULE_REF) {   if (module[\"hot\"]) {     module[\"hot\"][\"accept\"]();          if (MODULE_REF.instance[\"hmrOnInit\"]) {       module[\"hot\"][\"data\"] && MODULE_REF.instance[\"hmrOnInit\"](module[\"hot\"][\"data\"]);     }     if (MODULE_REF.instance[\"hmrOnStatus\"]) {       module[\"hot\"][\"apply\"](function(status) {         MODULE_REF.instance[\"hmrOnStatus\"](status);       });     }     if (MODULE_REF.instance[\"hmrOnCheck\"]) {       module[\"hot\"][\"check\"](function(err, outdatedModules) {         MODULE_REF.instance[\"hmrOnCheck\"](err, outdatedModules);       });     }     if (MODULE_REF.instance[\"hmrOnDecline\"]) {       module[\"hot\"][\"decline\"](function(dependencies) {         MODULE_REF.instance[\"hmrOnDecline\"](dependencies);       });     }     module[\"hot\"][\"dispose\"](function(store) {       MODULE_REF.instance[\"hmrOnDestroy\"] && MODULE_REF.instance[\"hmrOnDestroy\"](store);       MODULE_REF.destroy();       MODULE_REF.instance[\"hmrAfterDestroy\"] && MODULE_REF.instance[\"hmrAfterDestroy\"](store);     });   }   return MODULE_REF; });\n}\n\nif (document.readyState === 'complete') {\n  main();\n} else {\n  document.addEventListener('DOMContentLoaded', main);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/@angularclass/hmr-loader!./~/angular2-router-loader/src!./~/tslint-loader!./src/main.ts","module.exports = \"* {\\n  color: #f87c08; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/about/about.component.scss\n// module id = 151\n// module chunks = 6","module.exports = \"#menu ul li a {\\n  cursor: pointer; }\\n\\n#menu ul li a:hover {\\n  text-decoration: underline; }\\n\\n#spinner {\\n  position: fixed;\\n  top: 45%;\\n  left: 45%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.scss\n// module id = 152\n// module chunks = 6","module.exports = \".table-wrapper {\\n  -webkit-overflow-scrolling: touch;\\n  overflow-x: auto; }\\n\\ntable {\\n  margin: 0 0 _size(element-margin) 0;\\n  width: 100%; }\\n  table tbody tr {\\n    border: solid 1px _palette(border);\\n    border-left: 0;\\n    border-right: 0; }\\n    table tbody tr:nth-child(2n + 1) {\\n      background-color: _palette(border-bg); }\\n  table td {\\n    padding: 0.75em 0.75em; }\\n  table th {\\n    color: _palette(fg-bold);\\n    font-size: 0.9em;\\n    font-weight: _font(weight-bold);\\n    padding: 0 0.75em 0.75em 0.75em;\\n    text-align: left; }\\n  table thead {\\n    border-bottom: solid 2px _palette(border); }\\n  table tfoot {\\n    border-top: solid 2px _palette(border); }\\n  table.alt {\\n    border-collapse: separate; }\\n    table.alt tbody tr td {\\n      border: solid 1px _palette(border);\\n      border-left-width: 0;\\n      border-top-width: 0; }\\n      table.alt tbody tr td:first-child {\\n        border-left-width: 1px; }\\n    table.alt tbody tr:first-child td {\\n      border-top-width: 1px; }\\n    table.alt thead {\\n      border-bottom: 0; }\\n    table.alt tfoot {\\n      border-top: 0; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/home.component.scss\n// module id = 153\n// module chunks = 6","module.exports = \"<p>\\n  About Works!\\n</p>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/about/about.component.html\n// module id = 154\n// module chunks = 6","module.exports = \"<div id=\\\"page-wrapper\\\">\\n\\n  <!-- Header -->\\n  <header id=\\\"header\\\" class=\\\"alt\\\">\\n    <h1><a href=\\\"\\\">CLTracker</a></h1>\\n    <nav>\\n      <a href=\\\"#menu\\\">Menu</a>\\n    </nav>\\n  </header>\\n\\n  <!-- Menu -->\\n  <nav id=\\\"menu\\\">\\n    <div class=\\\"inner\\\">\\n      <h2>Menu</h2>\\n      <ul class=\\\"links\\\">\\n        <li><a href=\\\"\\\">Home</a></li>\\n        <li><a href=\\\"\\\">Conventions</a></li>\\n        <li *ngIf=\\\"!auth.authenticated()\\\" ><a (click)=\\\"auth.loginOrganizer()\\\">Organizer Log In/Sign Up</a></li>\\n        <li *ngIf=\\\"!auth.authenticated()\\\" ><a (click)=\\\"auth.loginExhibitor()\\\">Exhibitor Log In/Sign Up</a></li>\\n        <li *ngIf=\\\"auth.authenticated() && perms === 'org'\\\" ><a href=\\\"/org/profile\\\">Profile</a></li>\\n        <li *ngIf=\\\"auth.authenticated() && perms === 'xhb'\\\" ><a href=\\\"/xhb/profile\\\">Profile</a></li>\\n        <li *ngIf=\\\"auth.authenticated() && perms === 'adm'\\\" ><a href=\\\"/adm/profile\\\">Profile</a></li>\\n        <li *ngIf=\\\"auth.authenticated()\\\" ><a href=\\\"\\\" (click)=\\\"auth.logout()\\\">Log Out</a></li>\\n      </ul>\\n      <a href=\\\"#\\\" class=\\\"close\\\">Close</a>\\n    </div>\\n  </nav>\\n\\n  <md-spinner *ngIf=\\\"loading\\\" id=\\\"spinner\\\"></md-spinner>\\n\\n  <!-- Content -->\\n  <router-outlet></router-outlet>\\n\\n</div>\\n \\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = 155\n// module chunks = 6","module.exports = \"<!-- Banner -->\\n<section id=\\\"banner\\\">\\n<div class=\\\"inner\\\">\\n  <div class=\\\"logo\\\"><img src=\\\"img/logo.png\\\"></div>\\n  <h2>Convention Logistics Tracker</h2>\\n  <p>Changing the Conference Experience</p>\\n</div>\\n</section>\\n\\n<!-- Wrapper -->\\n<section id=\\\"wrapper\\\">\\n\\n<!-- One -->\\n  <section id=\\\"one\\\" class=\\\"wrapper spotlight style1\\\">\\n    <div class=\\\"inner\\\">\\n      <a href=\\\"#\\\" class=\\\"image\\\"><img src=\\\"img/convention.jpg\\\" alt=\\\"\\\" /></a>\\n      <div class=\\\"content\\\">\\n        <h2 class=\\\"major\\\">The Problem</h2>\\n        <p>Convention planning requires exceedingly large amounts of time, labor, and money; for a city such as Las Vegas, conventions produce a sizeable amount of revenue.  According to IBIS World report on Trade Show and Conference Planning, the planning industry generates $14 billion in revenue where technology will play a key role in the growth of this industry. In order to plan and oversee a large convention such as CES or CONEXPO-CON/AGG takes the better part of a year to secure a site, organize exhibitors and contact speakers to host seminars.</p>\\n        <a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>\\n      </div>\\n    </div>\\n  </section>\\n\\n<!-- Two -->\\n  <section id=\\\"two\\\" class=\\\"wrapper alt spotlight style2\\\">\\n    <div class=\\\"inner\\\">\\n      <a href=\\\"#\\\" class=\\\"image\\\"><img src=\\\"img/paper.jpeg\\\" alt=\\\"\\\" /></a>\\n      <div class=\\\"content\\\">\\n        <h2 class=\\\"major\\\">What's out there?</h2>\\n        <p>A paper map is the current standard, but comes at a hefty cost for the event organizer. Using paper maps is a cumbersome experience for large conventions. An alternative option consists of mobile applications with possibly spotty performance during larger conventions. Additionally, these applications often take considerable development hours to produce and are not reusable solutions across different conferences.</p>\\n        <a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>\\n      </div>\\n    </div>\\n  </section>\\n\\n<!-- Three -->\\n  <section id=\\\"three\\\" class=\\\"wrapper spotlight style3\\\">\\n      <div class=\\\"inner\\\">\\n          <p></p>\\n          <img src=\\\"img/mobile_web.png\\\" alt=\\\"\\\" style=\\\"width:300px;height:450px\\\">\\n          <div class=\\\"content\\\">\\n              <h2 class=\\\"major\\\">The CLT Suite</h2>\\n              <p>Convention Logistics Tracker (CLT) aims to simplify the convention planning process; this software suite will offer programs aimed at convention organizers, exhibitors and attendees. Convention organizers will have control over exhibitor actions, the ability to adjust pricing & mapping, and scheduling. Exhibitors will be able to edit their company information through the Exhibitor Portal, plan out schedules for speakers & demonstrations, and send out real-time event updates. Attendees will have the ability to view information about various aspects about the convention including exhibitor booths, event schedules, and navigation around the convention grounds.</p>\\n              <!--<a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>-->\\n          </div>\\n      </div>\\n \\n  </section>\\n\\n<!-- Four -->\\n  <section id=\\\"four\\\" class=\\\"wrapper alt style1\\\">\\n    <div class=\\\"inner\\\">\\n      <h2 class=\\\"major\\\">Features of CLT</h2>\\n        <!--<p>Cras mattis ante fermentum, malesuada neque vitae, eleifend erat. Phasellus non pulvinar era</p>-->\\n      <section class=\\\"features\\\">\\n        <article>\\n          <a href=\\\"#\\\" class=\\\"image\\\"><img src=\\\"img/pic04.jpg\\\" alt=\\\"\\\" /></a>\\n          <h3 class=\\\"major\\\">Organizer Portal</h3>\\n          <p>Separate web portal for organizers to manage mobile app announcements, vendor information, and other event logistics.</p>\\n          <!--<a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>-->\\n        </article>\\n        <article>\\n          <a href=\\\"#\\\" class=\\\"image\\\"><img src=\\\"img/pic05.jpg\\\" alt=\\\"\\\" /></a>\\n          <h3 class=\\\"major\\\">Exhibitor Portal</h3>\\n          <p>Separate web portal for exhibitors to register for your conference with your special key. Exhibitors can schedule announcements to all attendees and post a schedule. </p>\\n          <!--<a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>-->\\n        </article>\\n        <article>\\n          <a href=\\\"#\\\" class=\\\"image\\\"><img src=\\\"img/pic06.jpg\\\" alt=\\\"\\\" /></a>\\n          <h3 class=\\\"major\\\">Consumer App</h3>\\n          <p>Attendees can download your customizable mobile app where attendees can access the official map, receive announcements, and set a schedule.</p>\\n          <!--<a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>-->\\n        </article>\\n        <article>\\n          <a href=\\\"#\\\" class=\\\"image\\\"><img src=\\\"img/pic07.jpg\\\" alt=\\\"\\\" /></a>\\n          <h3 class=\\\"major\\\">Consumer Focus</h3>\\n          <p>CLT Suite Mobile App is focused on your attendees' experience to be enhanced by your awesome conference. The Mobile App allows push notifications by organiers and exhibitors, and real time updates to the mobile app. </p>\\n          <!--<a href=\\\"#\\\" class=\\\"special\\\">Learn more</a>-->\\n        </article>\\n      </section>\\n       <ul class=\\\"actions\\\">\\n        <li><a href=\\\"#\\\" class=\\\"button\\\">See More</a></li>\\n      </ul> \\n    </div>\\n  </section>\\n\\n  <!-- Footer -->\\n  <section id=\\\"footer\\\">\\n    <div class=\\\"inner\\\">\\n      <h2 class=\\\"major\\\">Get in touch</h2>\\n      <p>Have questions or would like to request a demo? Reach out to us below.</p>\\n      <form method=\\\"post\\\" action=\\\"#\\\">\\n        <div class=\\\"field\\\">\\n          <label for=\\\"name\\\">Name</label>\\n          <input type=\\\"text\\\" name=\\\"name\\\" id=\\\"name\\\" />\\n        </div>\\n        <div class=\\\"field\\\">\\n          <label for=\\\"email\\\">Email</label>\\n          <input type=\\\"email\\\" name=\\\"email\\\" id=\\\"email\\\" />\\n        </div>\\n        <div class=\\\"field\\\">\\n          <label for=\\\"message\\\">Message</label>\\n          <textarea name=\\\"message\\\" id=\\\"message\\\" rows=\\\"4\\\"></textarea>\\n        </div>\\n        <ul class=\\\"actions\\\">\\n          <li><input type=\\\"submit\\\" value=\\\"Send Message\\\" /></li>\\n        </ul>\\n      </form>\\n      <ul class=\\\"contact\\\">\\n        <li class=\\\"fa-home\\\">\\n          Convention Logistics Tracker<br />\\n          4505 S. Maryland Pkwy<br />\\n          Las Vegas, NV 89154\\n        </li>\\n        <!--<li class=\\\"fa-phone\\\">(000) 000-0000</li>-->\\n        <li class=\\\"fa-envelope\\\"><a href=\\\"mailto:conventionlogisticstracker@gmail.com\\\">conventionlogisticstracker@gmail.com</a></li>\\n        <!--<li class=\\\"fa-twitter\\\"><a href=\\\"#\\\">twitter.com/untitled-tld</a></li>\\n        <li class=\\\"fa-facebook\\\"><a href=\\\"#\\\">facebook.com/untitled-tld</a></li>\\n        <li class=\\\"fa-instagram\\\"><a href=\\\"#\\\">instagram.com/untitled-tld</a></li>-->\\n      </ul>\\n      <ul class=\\\"copyright\\\">\\n        <li>&copy; CLT Inc. All rights reserved.</li><li>Template: <a href=\\\"http://html5up.net\\\">HTML5 UP</a></li>\\n      </ul>\\n    </div>\\n  </section>\\n\\n</section>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/home.component.html\n// module id = 156\n// module chunks = 6","import { Injectable }       from '@angular/core';\nimport { tokenNotExpired }  from 'angular2-jwt';\nimport { Router }           from '@angular/router';\nimport { Http, Response }   from '@angular/http';\nimport { Observable }       from 'rxjs/Observable';\n\ndeclare var Auth0Lock: any;\n\nconst prod: string = 'production-test';\n\n@Injectable()\nexport class Auth {\n\n    public ImageUploadUrl: string;\n    \n    private UsersInfoUrl: string;\n    private LoginUrl: string;\n    private ConferenceInfoUrl: string;\n    private ConferenceEditUrl: string;\n    private ExhibitorsInfoUrl: string;\n    private ExhibitorsUsersInfoUrl: string;\n    private ExhibitorEditUrl: string;\n    private NewsInfoUrl: string;\n    private NewsEditUrl: string;\n    private ScheduleInfoUrl: string;\n    private ScheduleEditUrl: string;\n\n    Lock = new Auth0Lock(\n        'jyb8nxXVywA8ezS3Vin9CnEhkY3FH7fC', \n        'clt-global.auth0.com', \n        {  \n            theme: {\n                logo: 'http://i.imgur.com/XDKwjRv.png',\n                primaryColor: '#0F4c60'\n            },\n            languageDictionary: {\n                title: \"CLTracker\"\n            },\n        }\n    );\n\n    userProfile: any;\n    authToken: any;\n\n    constructor(private router: Router, private http: Http) {\n        \n        if (prod === 'production-test') {\n            this.ImageUploadUrl = 'http://cltglobal.ddns.net:5000/img';\n            this.UsersInfoUrl = 'http://cltglobal.ddns.net:5000/user';\n            this.LoginUrl = 'http://cltglobal.ddns.net:5000/login';\n            this.ConferenceEditUrl = 'http://cltglobal.ddns.net:5000/edit/conference/1';\n            this.ConferenceInfoUrl = 'http://cltglobal.ddns.net:5000/info/1';\n            this.ExhibitorsInfoUrl = 'http://cltglobal.ddns.net:5000/exhibitors/1';\n            this.ExhibitorsUsersInfoUrl = 'http://cltglobal.ddns.net:5000/user/exhibitors/1';\n            this.ExhibitorEditUrl = 'http://cltglobal.ddns.net:5000/edit/exhibitors/1';\n            this.NewsInfoUrl = 'http://cltglobal.ddns.net:5000/news/1';\n            this.NewsEditUrl = 'http://cltglobal.ddns.net:5000/edit/news/1';\n            this.ScheduleInfoUrl ='http://cltglobal.ddns.net:5000/schedule/1';\n            this.ScheduleEditUrl = 'http://cltglobal.ddns.net:5000/edit/schedule/1';\n        } else if (prod === 'production') {\n            this.ImageUploadUrl = 'http://cltglobal.ddns.net:8080/img';\n            this.UsersInfoUrl = 'http://cltglobal.ddns.net:8080/user';\n            this.LoginUrl = 'http://cltglobal.ddns.net:8080/login';\n            this.ConferenceEditUrl = 'http://cltglobal.ddns.net:8080/edit/conference/1';\n            this.ConferenceInfoUrl = 'http://cltglobal.ddns.net:8080/info/1';\n            this.ExhibitorsInfoUrl = 'http://cltglobal.ddns.net:8080/exhibitors/1';\n            this.ExhibitorsUsersInfoUrl = 'http://cltglobal.ddns.net:8080/user/exhibitors/1';\n            this.ExhibitorEditUrl = 'http://cltglobal.ddns.net:8080/edit/exhibitors/1';\n            this.NewsInfoUrl = 'http://cltglobal.ddns.net:8080/news/1';\n            this.NewsEditUrl = 'http://cltglobal.ddns.net:8080/edit/news/1';\n            this.ScheduleInfoUrl = 'http://cltglobal.ddns.net:8080/schedule/1';\n            this.ScheduleEditUrl = 'http://cltglobal.ddns.net:8080/edit/schedule/1';\n        } else {\n            this.ImageUploadUrl = 'http://localhost:5000/img';\n            this.UsersInfoUrl = 'http://localhost:5000/user';\n            this.LoginUrl = 'http://localhost:5000/login';\n            this.ConferenceEditUrl = 'http://localhost:5000/edit/conference/1';\n            this.ConferenceInfoUrl = 'http://localhost:5000/info/1';\n            this.ExhibitorsInfoUrl = 'http://localhost:5000/exhibitors/1';\n            this.ExhibitorsUsersInfoUrl = 'http://localhost:5000/user/exhibitors/1';\n            this.ExhibitorEditUrl = 'http://localhost:5000/edit/exhibitors/1';\n            this.NewsInfoUrl = 'http://localhost:5000/news/1';\n            this.NewsEditUrl = 'http://localhost:5000/edit/news/1';\n            this.ScheduleInfoUrl = 'http://localhost:5000/schedule/1';\n            this.ScheduleEditUrl = 'http://localhost:5000/edit/schedule/1';\n        }\n\n        this.authToken = JSON.parse(sessionStorage.getItem('authToken'));\n        this.userProfile = JSON.parse(localStorage.getItem('profile'));\n\n        // callback event for authenticated users\n        this.Lock.on('authenticated', (authResult) => {\n            localStorage.setItem('id_token', authResult.idToken);\n            this.Lock.getProfile(authResult.idToken, (error, profile) => {\n                if (error) {\n                    alert(error);\n                    return;\n                }\n\n                this.authToken = profile;\n                sessionStorage.setItem('authToken', JSON.stringify(profile));\n                let redirectUrl = JSON.parse(sessionStorage.getItem('redir'));\n                this.router.navigate(redirectUrl);\n            });\n        });\n    }\n\n    public setProfile(profile: Object) {\n        localStorage.setItem('profile', JSON.stringify(profile));\n        this.userProfile = profile;\n    }\n\n    public loginOrganizer() {\n        sessionStorage.setItem('redir', JSON.stringify(['org', 'profile']));\n        this.Lock.show();\n    }\n\n    public loginExhibitor() {\n        sessionStorage.setItem('redir', JSON.stringify(['xhb', 'profile']));\n        this.Lock.show();\n    }\n\n    public loginAdministrator() {\n        sessionStorage.setItem('redir', JSON.stringify(['adm', 'profile']));\n        this.Lock.show();\n    }\n\n    public refresh() {\n        this.userProfile = JSON.parse(localStorage.getItem('profile'));\n    }\n\n    public getConferenceInfo() {\n        return this.http\n            .get(`${this.ConferenceInfoUrl}`)\n            .map((r: Response) => r.json());\n    }\n\n    public addExhibitor(data: Object) {\n        return this.http\n            .post(`${this.ExhibitorEditUrl}`, data)\n            .map((r: Response) => r.json());\n    }\n\n    public getExhibitors() {\n        return this.http\n            .get(`${this.ExhibitorsUsersInfoUrl}`)\n            .map((r: Response) => r.json());\n    }\n\n    public getNews() {\n        return this.http\n            .get(`${this.NewsInfoUrl}`)\n            .map((r: Response) => r.json());\n    }\n\n    public patchConference(data: Object) {\n        return this.http\n            .patch(`${this.ConferenceEditUrl}`, data)\n            .map((r: Response) => r.json());\n    }\n\n    public postLogin(data: any) {\n        return this.http\n            .post(`${this.LoginUrl}`, data)\n            .map((r: Response) => r.json());\n    }\n\n    public postNewsItem(data: any) {\n        return this.http\n            .post(`${this.NewsEditUrl}`, data)\n            .map((r: Response) => r.json());\n    }\n\n    public deleteNewsItem(data: any) {\n        return this.http\n            .patch(`${this.NewsEditUrl}`, data)\n            .map((r: Response) => r.json());\n    }\n\n    public modifyNewsItem(data: any) {\n        return this.http\n            .put(`${this.NewsEditUrl}`, data)\n            .map((r: Response) => r.json());\n    }\n\n    public getScheduleEvents() {\n        return this.http\n            .get(`${this.ScheduleInfoUrl}`)\n            .map((r: Response) => r.json());\n    }\n\n    public patchScheduleEvents(data: any) {\n        return this.http\n            .patch(`${this.ScheduleEditUrl}`, data)\n            .map((r: Response) => r.json());\n    }\n\n    public authenticated() {\n        // check if JWT is expired\n        return tokenNotExpired();\n    }\n\n    public logout() {\n        // removes id token from storage so user is no longer authenticated\n        localStorage.removeItem('id_token');\n        localStorage.removeItem('profile');\n        this.userProfile = undefined;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/@angularclass/hmr-loader!./~/angular2-router-loader/src!./~/tslint-loader!./src/app/shared/auth.service.ts","export * from './auth.service';\nexport * from './route-guard-all.service';\nexport * from './route-guard-adm.service';\nexport * from './route-guard-xhb.service';\nexport * from './route-guard-org.service';\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/@angularclass/hmr-loader!./~/angular2-router-loader/src!./~/tslint-loader!./src/app/shared/index.ts","/* jquery.scrollex v0.2.1 | (c) @ajlkn | github.com/ajlkn/jquery.scrollex | MIT licensed */\r\n!function(t){function e(t,e,n){return\"string\"==typeof t&&(\"%\"==t.slice(-1)?t=parseInt(t.substring(0,t.length-1))/100*e:\"vh\"==t.slice(-2)?t=parseInt(t.substring(0,t.length-2))/100*n:\"px\"==t.slice(-2)&&(t=parseInt(t.substring(0,t.length-2)))),t}var n=t(window),i=1,o={};n.on(\"scroll\",function(){var e=n.scrollTop();t.map(o,function(t){window.clearTimeout(t.timeoutId),t.timeoutId=window.setTimeout(function(){t.handler(e)},t.options.delay)})}).on(\"load\",function(){n.trigger(\"scroll\")}),jQuery.fn.scrollex=function(l){var s=t(this);if(0==this.length)return s;if(this.length>1){for(var r=0;r<this.length;r++)t(this[r]).scrollex(l);return s}if(s.data(\"_scrollexId\"))return s;var a,u,h,c,p;switch(a=i++,u=jQuery.extend({top:0,bottom:0,delay:0,mode:\"default\",enter:null,leave:null,initialize:null,terminate:null,scroll:null},l),u.mode){case\"top\":h=function(t,e,n,i,o){return t>=i&&o>=t};break;case\"bottom\":h=function(t,e,n,i,o){return n>=i&&o>=n};break;case\"middle\":h=function(t,e,n,i,o){return e>=i&&o>=e};break;case\"top-only\":h=function(t,e,n,i,o){return i>=t&&n>=i};break;case\"bottom-only\":h=function(t,e,n,i,o){return n>=o&&o>=t};break;default:case\"default\":h=function(t,e,n,i,o){return n>=i&&o>=t}}return c=function(t){var i,o,l,s,r,a,u=this.state,h=!1,c=this.$element.offset();i=n.height(),o=t+i/2,l=t+i,s=this.$element.outerHeight(),r=c.top+e(this.options.top,s,i),a=c.top+s-e(this.options.bottom,s,i),h=this.test(t,o,l,r,a),h!=u&&(this.state=h,h?this.options.enter&&this.options.enter.apply(this.element):this.options.leave&&this.options.leave.apply(this.element)),this.options.scroll&&this.options.scroll.apply(this.element,[(o-r)/(a-r)])},p={id:a,options:u,test:h,handler:c,state:null,element:this,$element:s,timeoutId:null},o[a]=p,s.data(\"_scrollexId\",p.id),p.options.initialize&&p.options.initialize.apply(this),s},jQuery.fn.unscrollex=function(){var e=t(this);if(0==this.length)return e;if(this.length>1){for(var n=0;n<this.length;n++)t(this[n]).unscrollex();return e}var i,l;return(i=e.data(\"_scrollexId\"))?(l=o[i],window.clearTimeout(l.timeoutId),delete o[i],e.removeData(\"_scrollexId\"),l.options.terminate&&l.options.terminate.apply(this),e):e}}(jQuery);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/public/js/jquery.scrollex.min.js\n// module id = 394\n// module chunks = 6","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * @license Angular v4.0.0\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { Directive, ElementRef, EventEmitter, Host, Inject, Injectable, InjectionToken, Injector, Input, NgModule, Optional, Output, Renderer, Self, SkipSelf, Version, forwardRef, ɵisObservable, ɵisPromise, ɵlooseIdentical, ɵmerge } from '@angular/core';\nimport { forkJoin } from 'rxjs/observable/forkJoin';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { map } from 'rxjs/operator/map';\nimport { ɵgetDOM } from '@angular/platform-browser';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base class for control directives.\n *\n * Only used internally in the forms module.\n *\n * \\@stable\n * @abstract\n */\nvar AbstractControlDirective = (function () {\n    function AbstractControlDirective() {\n    }\n    Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { throw new Error('unimplemented'); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.value : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.valid : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.invalid : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.pending : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.errors : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.pristine : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.dirty : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.touched : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.untouched : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.disabled : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.enabled : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.statusChanges : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.control ? this.control.valueChanges : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.reset = function (value) {\n        if (value === void 0) { value = undefined; }\n        if (this.control)\n            this.control.reset(value);\n    };\n    /**\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.hasError = function (errorCode, path) {\n        if (path === void 0) { path = null; }\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    };\n    /**\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.getError = function (errorCode, path) {\n        if (path === void 0) { path = null; }\n        return this.control ? this.control.getError(errorCode, path) : null;\n    };\n    return AbstractControlDirective;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A directive that contains multiple {\\@link NgControl}s.\n *\n * Only used by the forms module.\n *\n * \\@stable\n */\nvar ControlContainer = (function (_super) {\n    __extends(ControlContainer, _super);\n    function ControlContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n        /**\n         * Get the form to which this container belongs.\n         * @return {?}\n         */\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ControlContainer.prototype, \"path\", {\n        /**\n         * Get the path to this container.\n         * @return {?}\n         */\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    return ControlContainer;\n}(AbstractControlDirective));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmptyInputValue(value) {\n    // we don't check for string here so it also works with arrays\n    return value == null || value.length === 0;\n}\n/**\n * Providers for validators to be used for {\\@link FormControl}s in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * ### Example\n *\n * {\\@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n * \\@stable\n */\nvar NG_VALIDATORS = new InjectionToken('NgValidators');\n/**\n * Providers for asynchronous validators to be used for {\\@link FormControl}s\n * in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * See {\\@link NG_VALIDATORS} for more details.\n *\n * \\@stable\n */\nvar NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');\nvar EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n/**\n * Provides a set of validators used by form controls.\n *\n * A validator is a function that processes a {\\@link FormControl} or collection of\n * controls and returns a map of errors. A null map means that validation has passed.\n *\n * ### Example\n *\n * ```typescript\n * var loginControl = new FormControl(\"\", Validators.required)\n * ```\n *\n * \\@stable\n */\nvar Validators = (function () {\n    function Validators() {\n    }\n    /**\n     * Validator that requires controls to have a non-empty value.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.required = function (control) {\n        return isEmptyInputValue(control.value) ? { 'required': true } : null;\n    };\n    /**\n     * Validator that requires control value to be true.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.requiredTrue = function (control) {\n        return control.value === true ? null : { 'required': true };\n    };\n    /**\n     * Validator that performs email validation.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.email = function (control) {\n        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n    };\n    /**\n     * Validator that requires controls to have a value of a minimum length.\n     * @param {?} minLength\n     * @return {?}\n     */\n    Validators.minLength = function (minLength) {\n        return function (control) {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\n            return length < minLength ?\n                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a value of a maximum length.\n     * @param {?} maxLength\n     * @return {?}\n     */\n    Validators.maxLength = function (maxLength) {\n        return function (control) {\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\n            return length > maxLength ?\n                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                null;\n        };\n    };\n    /**\n     * Validator that requires a control to match a regex to its value.\n     * @param {?} pattern\n     * @return {?}\n     */\n    Validators.pattern = function (pattern) {\n        if (!pattern)\n            return Validators.nullValidator;\n        var /** @type {?} */ regex;\n        var /** @type {?} */ regexStr;\n        if (typeof pattern === 'string') {\n            regexStr = \"^\" + pattern + \"$\";\n            regex = new RegExp(regexStr);\n        }\n        else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        return function (control) {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = control.value;\n            return regex.test(value) ? null :\n                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n        };\n    };\n    /**\n     * No-op validator.\n     * @param {?} c\n     * @return {?}\n     */\n    Validators.nullValidator = function (c) { return null; };\n    /**\n     * Compose multiple validators into a single function that returns the union\n     * of the individual error maps.\n     * @param {?} validators\n     * @return {?}\n     */\n    Validators.compose = function (validators) {\n        if (!validators)\n            return null;\n        var /** @type {?} */ presentValidators = validators.filter(isPresent);\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            return _mergeErrors(_executeValidators(control, presentValidators));\n        };\n    };\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    Validators.composeAsync = function (validators) {\n        if (!validators)\n            return null;\n        var /** @type {?} */ presentValidators = validators.filter(isPresent);\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            var /** @type {?} */ observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n            return map.call(forkJoin(observables), _mergeErrors);\n        };\n    };\n    return Validators;\n}());\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPresent(o) {\n    return o != null;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction toObservable(r) {\n    var /** @type {?} */ obs = ɵisPromise(r) ? fromPromise(r) : r;\n    if (!(ɵisObservable(obs))) {\n        throw new Error(\"Expected validator to return Promise or Observable.\");\n    }\n    return obs;\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeValidators(control, validators) {\n    return validators.map(function (v) { return v(control); });\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeAsyncValidators(control, validators) {\n    return validators.map(function (v) { return v(control); });\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\nfunction _mergeErrors(arrayOfErrors) {\n    var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\n        return errors != null ? ɵmerge(res, errors) : res;\n    }, {});\n    return Object.keys(res).length === 0 ? null : res;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a {\\@link ControlValueAccessor} for form controls.\n *\n * See {\\@link DefaultValueAccessor} for how to implement one.\n * \\@stable\n */\nvar NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return CheckboxControlValueAccessor; }),\n    multi: true,\n};\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n *  ### Example\n *  ```\n *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n *  ```\n *\n *  \\@stable\n */\nvar CheckboxControlValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function CheckboxControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    return CheckboxControlValueAccessor;\n}());\nCheckboxControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                providers: [CHECKBOX_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nCheckboxControlValueAccessor.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return DefaultValueAccessor; }),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\nfunction _isAndroid() {\n    var /** @type {?} */ userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * Turn this mode on if you want form directives to buffer IME input until compositionend\n * \\@experimental\n */\nvar COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');\n/**\n * The default accessor for writing a value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"text\" name=\"searchQuery\" ngModel>\n *  ```\n *\n *  \\@stable\n */\nvar DefaultValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _compositionMode\n     */\n    function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.writeValue = function (value) {\n        var /** @type {?} */ normalizedValue = value == null ? '' : value;\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._handleInput = function (value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._compositionStart = function () { this._composing = true; };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._compositionEnd = function (value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    };\n    return DefaultValueAccessor;\n}());\nDefaultValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                // TODO: vsavkin replace the above selector with the one below it once\n                // https://github.com/angular/angular/issues/3011 is implemented\n                // selector: '[ngModel],[formControl],[formControlName]',\n                host: {\n                    '(input)': '_handleInput($event.target.value)',\n                    '(blur)': 'onTouched()',\n                    '(compositionstart)': '_compositionStart()',\n                    '(compositionend)': '_compositionEnd($event.target.value)'\n                },\n                providers: [DEFAULT_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nDefaultValueAccessor.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeValidator(validator) {\n    if (((validator)).validate) {\n        return function (c) { return ((validator)).validate(c); };\n    }\n    else {\n        return (validator);\n    }\n}\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeAsyncValidator(validator) {\n    if (((validator)).validate) {\n        return function (c) { return ((validator)).validate(c); };\n    }\n    else {\n        return (validator);\n    }\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NumberValueAccessor; }),\n    multi: true\n};\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"number\" [(ngModel)]=\"age\">\n *  ```\n */\nvar NumberValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function NumberValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.writeValue = function (value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        var /** @type {?} */ normalizedValue = value == null ? '' : value;\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.registerOnChange = function (fn) {\n        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    return NumberValueAccessor;\n}());\nNumberValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [NUMBER_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nNumberValueAccessor.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction unimplemented() {\n    throw new Error('unimplemented');\n}\n/**\n * A base class that all control directive extend.\n * It binds a {\\@link FormControl} object to a DOM element.\n *\n * Used internally by Angular forms.\n *\n * \\@stable\n * @abstract\n */\nvar NgControl = (function (_super) {\n    __extends(NgControl, _super);\n    function NgControl() {\n        var _this = _super.apply(this, arguments) || this;\n        /**\n         * \\@internal\n         */\n        _this._parent = null;\n        _this.name = null;\n        _this.valueAccessor = null;\n        /**\n         * \\@internal\n         */\n        _this._rawValidators = [];\n        /**\n         * \\@internal\n         */\n        _this._rawAsyncValidators = [];\n        return _this;\n    }\n    Object.defineProperty(NgControl.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return (unimplemented()); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return (unimplemented()); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @abstract\n     * @param {?} newValue\n     * @return {?}\n     */\n    NgControl.prototype.viewToModelUpdate = function (newValue) { };\n    return NgControl;\n}(AbstractControlDirective));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return RadioControlValueAccessor; }),\n    multi: true\n};\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\nvar RadioControlRegistry = (function () {\n    function RadioControlRegistry() {\n        this._accessors = [];\n    }\n    /**\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.add = function (control, accessor) {\n        this._accessors.push([control, accessor]);\n    };\n    /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.remove = function (accessor) {\n        for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    };\n    /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.select = function (accessor) {\n        var _this = this;\n        this._accessors.forEach(function (c) {\n            if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    };\n    /**\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    };\n    return RadioControlRegistry;\n}());\nRadioControlRegistry.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nRadioControlRegistry.ctorParameters = function () { return []; };\n/**\n * \\@whatItDoes Writes radio control values and listens to radio control changes.\n *\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n *\n * \\@howToUse\n *\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use radio buttons with form directives\n *\n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n *\n * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n *\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n *\n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n *  * **npm package**: `\\@angular/forms`\n *\n *  \\@stable\n */\nvar RadioControlValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _registry\n     * @param {?} _injector\n     */\n    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        this.onChange = function () { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.ngOnInit = function () {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.writeValue = function (value) {\n        this._state = value === this.value;\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n        var _this = this;\n        this._fn = fn;\n        this.onChange = function () {\n            fn(_this.value);\n            _this._registry.select(_this);\n        };\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype._checkName = function () {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this._throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype._throwNameError = function () {\n        throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n    };\n    return RadioControlValueAccessor;\n}());\nRadioControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                providers: [RADIO_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nRadioControlValueAccessor.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n    { type: RadioControlRegistry, },\n    { type: Injector, },\n]; };\nRadioControlValueAccessor.propDecorators = {\n    'name': [{ type: Input },],\n    'formControlName': [{ type: Input },],\n    'value': [{ type: Input },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return RangeValueAccessor; }),\n    multi: true\n};\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"range\" [(ngModel)]=\"age\" >\n *  ```\n */\nvar RangeValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function RangeValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.writeValue = function (value) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.registerOnChange = function (fn) {\n        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    return RangeValueAccessor;\n}());\nRangeValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [RANGE_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nRangeValueAccessor.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return SelectControlValueAccessor; }),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return \"\" + value;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return (id + \": \" + value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * \\@whatItDoes Writes values and listens to changes on a select element.\n *\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n *\n * \\@howToUse\n *\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use select controls with form directives\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n *\n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n *\n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Caveat: Option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * #### Syntax\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar SelectControlValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function SelectControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._compareWith = ɵlooseIdentical;\n    }\n    Object.defineProperty(SelectControlValueAccessor.prototype, \"compareWith\", {\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        set: function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\n            }\n            this._compareWith = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.writeValue = function (value) {\n        this.value = value;\n        var /** @type {?} */ id = this._getOptionId(value);\n        if (id == null) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n        }\n        var /** @type {?} */ valueString = _buildValueString(id, value);\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n        var _this = this;\n        this.onChange = function (valueString) {\n            _this.value = valueString;\n            fn(_this._getOptionValue(valueString));\n        };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._getOptionId = function (value) {\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n            var id = _a[_i];\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    };\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n        var /** @type {?} */ id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    };\n    return SelectControlValueAccessor;\n}());\nSelectControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                providers: [SELECT_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nSelectControlValueAccessor.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n]; };\nSelectControlValueAccessor.propDecorators = {\n    'compareWith': [{ type: Input },],\n};\n/**\n * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * \\@howToUse\n *\n * See docs for {\\@link SelectControlValueAccessor} for usage examples.\n *\n * \\@stable\n */\nvar NgSelectOption = (function () {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    function NgSelectOption(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._select == null)\n                return;\n            this._select._optionMap.set(this.id, value);\n            this._setElementValue(_buildValueString(this.id, value));\n            this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgSelectOption.prototype, \"value\", {\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._setElementValue(value);\n            if (this._select)\n                this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    NgSelectOption.prototype._setElementValue = function (value) {\n        this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n    };\n    /**\n     * @return {?}\n     */\n    NgSelectOption.prototype.ngOnDestroy = function () {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    };\n    return NgSelectOption;\n}());\nNgSelectOption.decorators = [\n    { type: Directive, args: [{ selector: 'option' },] },\n];\n/**\n * @nocollapse\n */\nNgSelectOption.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },\n]; };\nNgSelectOption.propDecorators = {\n    'ngValue': [{ type: Input, args: ['ngValue',] },],\n    'value': [{ type: Input, args: ['value',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return \"\" + value;\n    if (typeof value === 'string')\n        value = \"'\" + value + \"'\";\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return (id + \": \" + value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * The accessor for writing a value and listening to changes on a select element.\n *\n *  ### Caveat: Options selection\n *\n * Angular uses object identity to select options. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects options by the return value of the function.\n *\n * #### Syntax\n *\n * ```\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * \\@stable\n */\nvar SelectMultipleControlValueAccessor = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._compareWith = ɵlooseIdentical;\n    }\n    Object.defineProperty(SelectMultipleControlValueAccessor.prototype, \"compareWith\", {\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        set: function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\n            }\n            this._compareWith = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n        var _this = this;\n        this.value = value;\n        var /** @type {?} */ optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\n        }\n        else {\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n        var _this = this;\n        this.onChange = function (_) {\n            var /** @type {?} */ selected = [];\n            if (_.hasOwnProperty('selectedOptions')) {\n                var /** @type {?} */ options = _.selectedOptions;\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                    var /** @type {?} */ opt = options.item(i);\n                    var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            else {\n                var /** @type {?} */ options = (_.options);\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                    var /** @type {?} */ opt = options.item(i);\n                    if (opt.selected) {\n                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            _this.value = selected;\n            fn(selected);\n        };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n        var /** @type {?} */ id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    };\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n            var id = _a[_i];\n            if (this._compareWith(this._optionMap.get(id)._value, value))\n                return id;\n        }\n        return null;\n    };\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n        var /** @type {?} */ id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n    };\n    return SelectMultipleControlValueAccessor;\n}());\nSelectMultipleControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nSelectMultipleControlValueAccessor.ctorParameters = function () { return [\n    { type: Renderer, },\n    { type: ElementRef, },\n]; };\nSelectMultipleControlValueAccessor.propDecorators = {\n    'compareWith': [{ type: Input },],\n};\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * ### Example\n *\n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n */\nvar NgSelectMultipleOption = (function () {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    function NgSelectMultipleOption(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._select == null)\n                return;\n            this._value = value;\n            this._setElementValue(_buildValueString$1(this.id, value));\n            this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._select) {\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            }\n            else {\n                this._setElementValue(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype._setElementValue = function (value) {\n        this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n    };\n    /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype._setSelected = function (selected) {\n        this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n    };\n    /**\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    };\n    return NgSelectMultipleOption;\n}());\nNgSelectMultipleOption.decorators = [\n    { type: Directive, args: [{ selector: 'option' },] },\n];\n/**\n * @nocollapse\n */\nNgSelectMultipleOption.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },\n]; };\nNgSelectMultipleOption.propDecorators = {\n    'ngValue': [{ type: Input, args: ['ngValue',] },],\n    'value': [{ type: Input, args: ['value',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} name\n * @param {?} parent\n * @return {?}\n */\nfunction controlPath(name, parent) {\n    return parent.path.concat([name]);\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpControl(control, dir) {\n    if (!control)\n        _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor)\n        _throwError(dir, 'No value accessor for form control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n    dir.valueAccessor.writeValue(control.value);\n    // view -> model\n    dir.valueAccessor.registerOnChange(function (newValue) {\n        dir.viewToModelUpdate(newValue);\n        control.markAsDirty();\n        control.setValue(newValue, { emitModelToViewChange: false });\n    });\n    // touched\n    dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n    control.registerOnChange(function (newValue, emitModelEvent) {\n        // control -> view\n        dir.valueAccessor.writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    });\n    if (dir.valueAccessor.setDisabledState) {\n        control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n    }\n    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    dir._rawValidators.forEach(function (validator) {\n        if (((validator)).registerOnValidatorChange)\n            ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n    });\n    dir._rawAsyncValidators.forEach(function (validator) {\n        if (((validator)).registerOnValidatorChange)\n            ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction cleanUpControl(control, dir) {\n    dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n    dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n    dir._rawValidators.forEach(function (validator) {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    dir._rawAsyncValidators.forEach(function (validator) {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    if (control)\n        control._clearChangeFns();\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpFormContainer(control, dir) {\n    if (control == null)\n        _throwError(dir, 'Cannot find control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n/**\n * @param {?} dir\n * @return {?}\n */\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n/**\n * @param {?} dir\n * @param {?} message\n * @return {?}\n */\nfunction _throwError(dir, message) {\n    var /** @type {?} */ messageEnd;\n    if (dir.path.length > 1) {\n        messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n    }\n    else if (dir.path[0]) {\n        messageEnd = \"name: '\" + dir.path + \"'\";\n    }\n    else {\n        messageEnd = 'unspecified name attribute';\n    }\n    throw new Error(message + \" \" + messageEnd);\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeValidators(validators) {\n    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n        null;\n}\n/**\n * @param {?} changes\n * @param {?} viewModel\n * @return {?}\n */\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    var /** @type {?} */ change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !ɵlooseIdentical(viewModel, change.currentValue);\n}\nvar BUILTIN_ACCESSORS = [\n    CheckboxControlValueAccessor,\n    RangeValueAccessor,\n    NumberValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n];\n/**\n * @param {?} valueAccessor\n * @return {?}\n */\nfunction isBuiltInAccessor(valueAccessor) {\n    return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n}\n/**\n * @param {?} dir\n * @param {?} valueAccessors\n * @return {?}\n */\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    var /** @type {?} */ defaultAccessor;\n    var /** @type {?} */ builtinAccessor;\n    var /** @type {?} */ customAccessor;\n    valueAccessors.forEach(function (v) {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor)\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor)\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    });\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    _throwError(dir, 'No valid value accessor for form control with');\n    return null;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This is a base class for code shared between {\\@link NgModelGroup} and {\\@link FormGroupName}.\n *\n * \\@stable\n */\nvar AbstractFormGroupDirective = (function (_super) {\n    __extends(AbstractFormGroupDirective, _super);\n    function AbstractFormGroupDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype.ngOnInit = function () {\n        this._checkParentType();\n        this.formDirective.addFormGroup(this);\n    };\n    /**\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n        if (this.formDirective) {\n            this.formDirective.removeFormGroup(this);\n        }\n    };\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n        /**\n         * Get the {\\@link FormGroup} backing this binding.\n         * @return {?}\n         */\n        get: function () { return this.formDirective.getFormGroup(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n        /**\n         * Get the path to this control group.\n         * @return {?}\n         */\n        get: function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n        /**\n         * Get the {\\@link Form} to which this group belongs.\n         * @return {?}\n         */\n        get: function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._validators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeAsyncValidators(this._asyncValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype._checkParentType = function () { };\n    return AbstractFormGroupDirective;\n}(ControlContainer));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar AbstractControlStatus = (function () {\n    /**\n     * @param {?} cd\n     */\n    function AbstractControlStatus(cd) {\n        this._cd = cd;\n    }\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.untouched : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.touched : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.pristine : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.dirty : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.valid : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.invalid : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cd.control ? this._cd.control.pending : false; },\n        enumerable: true,\n        configurable: true\n    });\n    return AbstractControlStatus;\n}());\nvar ngControlStatusHost = {\n    '[class.ng-untouched]': 'ngClassUntouched',\n    '[class.ng-touched]': 'ngClassTouched',\n    '[class.ng-pristine]': 'ngClassPristine',\n    '[class.ng-dirty]': 'ngClassDirty',\n    '[class.ng-valid]': 'ngClassValid',\n    '[class.ng-invalid]': 'ngClassInvalid',\n    '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * \\@stable\n */\nvar NgControlStatus = (function (_super) {\n    __extends(NgControlStatus, _super);\n    /**\n     * @param {?} cd\n     */\n    function NgControlStatus(cd) {\n        return _super.call(this, cd) || this;\n    }\n    return NgControlStatus;\n}(AbstractControlStatus));\nNgControlStatus.decorators = [\n    { type: Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n];\n/**\n * @nocollapse\n */\nNgControlStatus.ctorParameters = function () { return [\n    { type: NgControl, decorators: [{ type: Self },] },\n]; };\n/**\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * \\@stable\n */\nvar NgControlStatusGroup = (function (_super) {\n    __extends(NgControlStatusGroup, _super);\n    /**\n     * @param {?} cd\n     */\n    function NgControlStatusGroup(cd) {\n        return _super.call(this, cd) || this;\n    }\n    return NgControlStatusGroup;\n}(AbstractControlStatus));\nNgControlStatusGroup.decorators = [\n    { type: Directive, args: [{\n                selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                host: ngControlStatusHost\n            },] },\n];\n/**\n * @nocollapse\n */\nNgControlStatusGroup.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: Self },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nvar VALID = 'VALID';\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nvar INVALID = 'INVALID';\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nvar PENDING = 'PENDING';\n/**\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n * calculations of validity or value.\n */\nvar DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\nfunction _find(control, path, delimiter) {\n    if (path == null)\n        return null;\n    if (!(path instanceof Array)) {\n        path = ((path)).split(delimiter);\n    }\n    if (path instanceof Array && (path.length === 0))\n        return null;\n    return ((path)).reduce(function (v, name) {\n        if (v instanceof FormGroup) {\n            return v.controls[name] || null;\n        }\n        if (v instanceof FormArray) {\n            return v.at(/** @type {?} */ (name)) || null;\n        }\n        return null;\n    }, control);\n}\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction coerceToValidator(validator) {\n    return Array.isArray(validator) ? composeValidators(validator) : validator;\n}\n/**\n * @param {?} asyncValidator\n * @return {?}\n */\nfunction coerceToAsyncValidator(asyncValidator) {\n    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n}\n/**\n * \\@whatItDoes This is the base class for {\\@link FormControl}, {\\@link FormGroup}, and\n * {\\@link FormArray}.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * \\@stable\n * @abstract\n */\nvar AbstractControl = (function () {\n    /**\n     * @param {?} validator\n     * @param {?} asyncValidator\n     */\n    function AbstractControl(validator, asyncValidator) {\n        this.validator = validator;\n        this.asyncValidator = asyncValidator;\n        /**\n         * \\@internal\n         */\n        this._onCollectionChange = function () { };\n        this._pristine = true;\n        this._touched = false;\n        /**\n         * \\@internal\n         */\n        this._onDisabledChange = [];\n    }\n    Object.defineProperty(AbstractControl.prototype, \"value\", {\n        /**\n         * The value of the control.\n         * @return {?}\n         */\n        get: function () { return this._value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"parent\", {\n        /**\n         * The parent control.\n         * @return {?}\n         */\n        get: function () { return this._parent; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"status\", {\n        /**\n         * The validation status of the control. There are four possible\n         * validation statuses:\n         *\n         * * **VALID**:  control has passed all validation checks\n         * * **INVALID**: control has failed at least one validation check\n         * * **PENDING**: control is in the midst of conducting a validation check\n         * * **DISABLED**: control is exempt from validation checks\n         *\n         * These statuses are mutually exclusive, so a control cannot be\n         * both valid AND invalid or invalid AND disabled.\n         * @return {?}\n         */\n        get: function () { return this._status; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"valid\", {\n        /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         * @return {?}\n         */\n        get: function () { return this._status === VALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n        /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         * @return {?}\n         */\n        get: function () { return this._status === INVALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"pending\", {\n        /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         * @return {?}\n         */\n        get: function () { return this._status == PENDING; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n        /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         * @return {?}\n         */\n        get: function () { return this._status === DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n        /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         * @return {?}\n         */\n        get: function () { return this._status !== DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"errors\", {\n        /**\n         * Returns any errors generated by failing validation. If there\n         * are no errors, it will return null.\n         * @return {?}\n         */\n        get: function () { return this._errors; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        get: function () { return this._pristine; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n        /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        get: function () { return !this.pristine; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"touched\", {\n        /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        get: function () { return this._touched; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n        /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        get: function () { return !this._touched; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n        /**\n         * Emits an event every time the value of the control changes, in\n         * the UI or programmatically.\n         * @return {?}\n         */\n        get: function () { return this._valueChanges; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n        /**\n         * Emits an event every time the validation status of the control\n         * is re-calculated.\n         * @return {?}\n         */\n        get: function () { return this._statusChanges; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setValidators = function (newValidator) {\n        this.validator = coerceToValidator(newValidator);\n    };\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\n    };\n    /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n    /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n    /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsTouched = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._touched = true;\n        if (this._parent && !onlySelf) {\n            this._parent.markAsTouched({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsUntouched = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._touched = false;\n        this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n        if (this._parent && !onlySelf) {\n            this._parent._updateTouched({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsDirty = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._pristine = false;\n        if (this._parent && !onlySelf) {\n            this._parent.markAsDirty({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPristine = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._pristine = true;\n        this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n        if (this._parent && !onlySelf) {\n            this._parent._updatePristine({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * Marks the control as `pending`.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPending = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._status = PENDING;\n        if (this._parent && !onlySelf) {\n            this._parent.markAsPending({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.disable = function (_a) {\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._status = DISABLED;\n        this._errors = null;\n        this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n        this._updateValue();\n        if (emitEvent !== false) {\n            this._valueChanges.emit(this._value);\n            this._statusChanges.emit(this._status);\n        }\n        this._updateAncestors(onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n    };\n    /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.enable = function (_a) {\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._status = VALID;\n        this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n        this._updateAncestors(onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n    };\n    /**\n     * @param {?} onlySelf\n     * @return {?}\n     */\n    AbstractControl.prototype._updateAncestors = function (onlySelf) {\n        if (this._parent && !onlySelf) {\n            this._parent.updateValueAndValidity();\n            this._parent._updatePristine();\n            this._parent._updateTouched();\n        }\n    };\n    /**\n     * @param {?} parent\n     * @return {?}\n     */\n    AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n    /**\n     * Sets the value of the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.setValue = function (value, options) { };\n    /**\n     * Patches the value of the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.patchValue = function (value, options) { };\n    /**\n     * Resets the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.reset = function (value, options) { };\n    /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype.updateValueAndValidity = function (_a) {\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            this._errors = this._runValidator();\n            this._status = this._calculateStatus();\n            if (this._status === VALID || this._status === PENDING) {\n                this._runAsyncValidator(emitEvent);\n            }\n        }\n        if (emitEvent !== false) {\n            this._valueChanges.emit(this._value);\n            this._statusChanges.emit(this._status);\n        }\n        if (this._parent && !onlySelf) {\n            this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTreeValidity = function (_a) {\n        var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n        this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._runValidator = function () {\n        return this.validator ? this.validator(this) : null;\n    };\n    /**\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n        var _this = this;\n        if (this.asyncValidator) {\n            this._status = PENDING;\n            var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription =\n                obs.subscribe(function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._cancelExistingSubscription = function () {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} __1\n     * @return {?}\n     */\n    AbstractControl.prototype.setErrors = function (errors, _a) {\n        var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n        this._errors = errors;\n        this._updateControlsErrors(emitEvent !== false);\n    };\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path\n     * @return {?}\n     */\n    AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.getError = function (errorCode, path) {\n        if (path === void 0) { path = null; }\n        var /** @type {?} */ control = path ? this.get(path) : this;\n        return control && control._errors ? control._errors[errorCode] : null;\n    };\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.hasError = function (errorCode, path) {\n        if (path === void 0) { path = null; }\n        return !!this.getError(errorCode, path);\n    };\n    Object.defineProperty(AbstractControl.prototype, \"root\", {\n        /**\n         * Retrieves the top-level ancestor of this control.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ x = this;\n            while (x._parent) {\n                x = x._parent;\n            }\n            return x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n        this._status = this._calculateStatus();\n        if (emitEvent) {\n            this._statusChanges.emit(this._status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._initObservables = function () {\n        this._valueChanges = new EventEmitter();\n        this._statusChanges = new EventEmitter();\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._calculateStatus = function () {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this._errors)\n            return INVALID;\n        if (this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    };\n    /**\n     * \\@internal\n     * @abstract\n     * @return {?}\n     */\n    AbstractControl.prototype._updateValue = function () { };\n    /**\n     * \\@internal\n     * @abstract\n     * @param {?} cb\n     * @return {?}\n     */\n    AbstractControl.prototype._forEachChild = function (cb) { };\n    /**\n     * \\@internal\n     * @abstract\n     * @param {?} condition\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControls = function (condition) { };\n    /**\n     * \\@internal\n     * @abstract\n     * @return {?}\n     */\n    AbstractControl.prototype._allControlsDisabled = function () { };\n    /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n        return this._anyControls(function (control) { return control.status === status; });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsDirty = function () {\n        return this._anyControls(function (control) { return control.dirty; });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsTouched = function () {\n        return this._anyControls(function (control) { return control.touched; });\n    };\n    /**\n     * \\@internal\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype._updatePristine = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._pristine = !this._anyControlsDirty();\n        if (this._parent && !onlySelf) {\n            this._parent._updatePristine({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?=} __0\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTouched = function (_a) {\n        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n        this._touched = this._anyControlsTouched();\n        if (this._parent && !onlySelf) {\n            this._parent._updateTouched({ onlySelf: onlySelf });\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    AbstractControl.prototype._isBoxedValue = function (formState) {\n        return typeof formState === 'object' && formState !== null &&\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    };\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n    return AbstractControl;\n}());\n/**\n * \\@whatItDoes Tracks the value and validation status of an individual form control.\n *\n * It is one of the three fundamental building blocks of Angular forms, along with\n * {\\@link FormGroup} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\n * first argument. Example:\n *\n * ```ts\n * const ctrl = new FormControl('some value');\n * console.log(ctrl.value);     // 'some value'\n * ```\n *\n * You can also initialize the control with a form state object on instantiation,\n * which includes both the value and whether or not the control is disabled.\n * You can't use the value key without the disabled key; both are required\n * to use this way of initialization.\n *\n * ```ts\n * const ctrl = new FormControl({value: 'n/a', disabled: true});\n * console.log(ctrl.value);     // 'n/a'\n * console.log(ctrl.status);   // 'DISABLED'\n * ```\n *\n * To include a sync validator (or an array of sync validators) with the control,\n * pass it in as the second argument. Async validators are also supported, but\n * have to be passed in separately as the third arg.\n *\n * ```ts\n * const ctrl = new FormControl('', Validators.required);\n * console.log(ctrl.value);     // ''\n * console.log(ctrl.status);   // 'INVALID'\n * ```\n *\n * See its superclass, {\\@link AbstractControl}, for more properties and methods.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormControl = (function (_super) {\n    __extends(FormControl, _super);\n    /**\n     * @param {?=} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     */\n    function FormControl(formState, validator, asyncValidator) {\n        if (formState === void 0) { formState = null; }\n        if (validator === void 0) { validator = null; }\n        if (asyncValidator === void 0) { asyncValidator = null; }\n        var _this = _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator)) || this;\n        /**\n         * \\@internal\n         */\n        _this._onChange = [];\n        _this._applyFormState(formState);\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        _this._initObservables();\n        return _this;\n    }\n    /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     * @param {?} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormControl.prototype.setValue = function (value, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n        this._value = value;\n        if (this._onChange.length && emitModelToViewChange !== false) {\n            this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });\n        }\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n    };\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl.setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n     * where it does behave differently.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.patchValue = function (value, options) {\n        if (options === void 0) { options = {}; }\n        this.setValue(value, options);\n    };\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     * @param {?=} formState\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormControl.prototype.reset = function (formState, _a) {\n        if (formState === void 0) { formState = null; }\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._applyFormState(formState);\n        this.markAsPristine({ onlySelf: onlySelf });\n        this.markAsUntouched({ onlySelf: onlySelf });\n        this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._updateValue = function () { };\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormControl.prototype._anyControls = function (condition) { return false; };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n    /**\n     * Register a listener for change events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._clearChangeFns = function () {\n        this._onChange = [];\n        this._onDisabledChange = [];\n        this._onCollectionChange = function () { };\n    };\n    /**\n     * Register a listener for disabled events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnDisabledChange = function (fn) {\n        this._onDisabledChange.push(fn);\n    };\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormControl.prototype._forEachChild = function (cb) { };\n    /**\n     * @param {?} formState\n     * @return {?}\n     */\n    FormControl.prototype._applyFormState = function (formState) {\n        if (this._isBoxedValue(formState)) {\n            this._value = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            this._value = formState;\n        }\n    };\n    return FormControl;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\n * instances.\n *\n * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\n * with each control name as the key.  It calculates its status by reducing the statuses\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\n * argument. The key for each child will be the name under which it is registered.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * You can also include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormGroup = (function (_super) {\n    __extends(FormGroup, _super);\n    /**\n     * @param {?} controls\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     */\n    function FormGroup(controls, validator, asyncValidator) {\n        if (validator === void 0) { validator = null; }\n        if (asyncValidator === void 0) { asyncValidator = null; }\n        var _this = _super.call(this, validator, asyncValidator) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update value or validity of the control, so for\n     * most cases you'll want to use {\\@link FormGroup.addControl} instead.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.registerControl = function (name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    };\n    /**\n     * Add a control to this group.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.addControl = function (name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Remove a control from this group.\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype.removeControl = function (name) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Replace an existing control.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.setControl = function (name, control) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for\n     * existence in the group only, use {\\@link AbstractControl.get} instead.\n     * @param {?} controlName\n     * @return {?}\n     */\n    FormGroup.prototype.contains = function (controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    };\n    /**\n     *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormGroup.prototype.setValue = function (value, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._checkAllValuesPresent(value);\n        Object.keys(value).forEach(function (name) {\n            _this._throwIfControlMissing(name);\n            _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n        });\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n    };\n    /**\n     *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormGroup.prototype.patchValue = function (value, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        Object.keys(value).forEach(function (name) {\n            if (_this.controls[name]) {\n                _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n            }\n        });\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n    };\n    /**\n     * Resets the {\\@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormGroup.prototype.reset = function (value, _a) {\n        if (value === void 0) { value = {}; }\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._forEachChild(function (control, name) {\n            control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });\n        });\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        this._updatePristine({ onlySelf: onlySelf });\n        this._updateTouched({ onlySelf: onlySelf });\n    };\n    /**\n     * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     * @return {?}\n     */\n    FormGroup.prototype.getRawValue = function () {\n        return this._reduceChildren({}, function (acc, control, name) {\n            acc[name] = control instanceof FormControl ? control.value : ((control)).getRawValue();\n            return acc;\n        });\n    };\n    /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype._throwIfControlMissing = function (name) {\n        if (!Object.keys(this.controls).length) {\n            throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.controls[name]) {\n            throw new Error(\"Cannot find form control with name: \" + name + \".\");\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormGroup.prototype._forEachChild = function (cb) {\n        var _this = this;\n        Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._setUpControls = function () {\n        var _this = this;\n        this._forEachChild(function (control) {\n            control.setParent(_this);\n            control._registerOnCollectionChange(_this._onCollectionChange);\n        });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormGroup.prototype._anyControls = function (condition) {\n        var _this = this;\n        var /** @type {?} */ res = false;\n        this._forEachChild(function (control, name) {\n            res = res || (_this.contains(name) && condition(control));\n        });\n        return res;\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._reduceValue = function () {\n        var _this = this;\n        return this._reduceChildren({}, function (acc, control, name) {\n            if (control.enabled || _this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    };\n    /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    FormGroup.prototype._reduceChildren = function (initValue, fn) {\n        var /** @type {?} */ res = initValue;\n        this._forEachChild(function (control, name) { res = fn(res, control, name); });\n        return res;\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._allControlsDisabled = function () {\n        for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n            var controlName = _a[_i];\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    };\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroup.prototype._checkAllValuesPresent = function (value) {\n        this._forEachChild(function (control, name) {\n            if (value[name] === undefined) {\n                throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n            }\n        });\n    };\n    return FormGroup;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl},\n * {\\@link FormGroup} or {\\@link FormArray} instances.\n *\n * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\n * It calculates its status by reducing the statuses of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormGroup}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\n * argument.\n *\n * ### Example\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * You can also include array-level validators as the second arg, or array-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ### Adding or removing controls\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormArray = (function (_super) {\n    __extends(FormArray, _super);\n    /**\n     * @param {?} controls\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     */\n    function FormArray(controls, validator, asyncValidator) {\n        if (validator === void 0) { validator = null; }\n        if (asyncValidator === void 0) { asyncValidator = null; }\n        var _this = _super.call(this, validator, asyncValidator) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Get the {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.at = function (index) { return this.controls[index]; };\n    /**\n     * Insert a new {\\@link AbstractControl} at the end of the array.\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.push = function (control) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.insert = function (index, control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Remove the control at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.removeAt = function (index) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Replace an existing control.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.setControl = function (index, control) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        if (control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    Object.defineProperty(FormArray.prototype, \"length\", {\n        /**\n         * Length of the control array.\n         * @return {?}\n         */\n        get: function () { return this.controls.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     * @param {?} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormArray.prototype.setValue = function (value, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._checkAllValuesPresent(value);\n        value.forEach(function (newValue, index) {\n            _this._throwIfControlMissing(index);\n            _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n        });\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n    };\n    /**\n     *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     * @param {?} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormArray.prototype.patchValue = function (value, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        value.forEach(function (newValue, index) {\n            if (_this.at(index)) {\n                _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n            }\n        });\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n    };\n    /**\n     * Resets the {\\@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} __1\n     * @return {?}\n     */\n    FormArray.prototype.reset = function (value, _a) {\n        if (value === void 0) { value = []; }\n        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n        this._forEachChild(function (control, index) {\n            control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });\n        });\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        this._updatePristine({ onlySelf: onlySelf });\n        this._updateTouched({ onlySelf: onlySelf });\n    };\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    FormArray.prototype.getRawValue = function () {\n        return this.controls.map(function (control) {\n            return control instanceof FormControl ? control.value : ((control)).getRawValue();\n        });\n    };\n    /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype._throwIfControlMissing = function (index) {\n        if (!this.controls.length) {\n            throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.at(index)) {\n            throw new Error(\"Cannot find form control at index \" + index);\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormArray.prototype._forEachChild = function (cb) {\n        this.controls.forEach(function (control, index) { cb(control, index); });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._updateValue = function () {\n        var _this = this;\n        this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n            .map(function (control) { return control.value; });\n    };\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormArray.prototype._anyControls = function (condition) {\n        return this.controls.some(function (control) { return control.enabled && condition(control); });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._setUpControls = function () {\n        var _this = this;\n        this._forEachChild(function (control) { return _this._registerControl(control); });\n    };\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormArray.prototype._checkAllValuesPresent = function (value) {\n        this._forEachChild(function (control, i) {\n            if (value[i] === undefined) {\n                throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n            }\n        });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._allControlsDisabled = function () {\n        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n            var control = _a[_i];\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    };\n    /**\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype._registerControl = function (control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    };\n    return FormArray;\n}(AbstractControl));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return NgForm; })\n};\nvar resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * \\@howToUse\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n * sub-groups within the form.\n *\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgForm = (function (_super) {\n    __extends(NgForm, _super);\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function NgForm(validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._submitted = false;\n        _this.ngSubmit = new EventEmitter();\n        _this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        return _this;\n    }\n    Object.defineProperty(NgForm.prototype, \"submitted\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._submitted; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"controls\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.form.controls; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addControl = function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            dir._control = (container.registerControl(dir.name, dir.control));\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeControl = function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addFormGroup = function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            var /** @type {?} */ group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeFormGroup = function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.updateModel = function (dir, value) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ ctrl = (_this.form.get(dir.path));\n            ctrl.setValue(value);\n        });\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgForm.prototype.onSubmit = function ($event) {\n        this._submitted = true;\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    NgForm.prototype.onReset = function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    NgForm.prototype.resetForm = function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        this._submitted = false;\n    };\n    /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    NgForm.prototype._findContainer = function (path) {\n        path.pop();\n        return path.length ? (this.form.get(path)) : this.form;\n    };\n    return NgForm;\n}(ControlContainer));\nNgForm.decorators = [\n    { type: Directive, args: [{\n                selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                providers: [formDirectiveProvider],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                outputs: ['ngSubmit'],\n                exportAs: 'ngForm'\n            },] },\n];\n/**\n * @nocollapse\n */\nNgForm.ctorParameters = function () { return [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar FormErrorExamples = {\n    formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n    formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n    formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; index as i\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n    ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n    ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TemplateDrivenErrors = (function () {\n    function TemplateDrivenErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelParentException = function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + FormErrorExamples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + FormErrorExamples.ngModelWithFormGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.formGroupNameException = function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.missingNameException = function () {\n        throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelGroupParentException = function () {\n        throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    return TemplateDrivenErrors;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return NgModelGroup; })\n};\n/**\n * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used as a child of {\\@link NgForm} (or in other words,\n * within `<form>` tags).\n *\n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n *\n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n * \\@stable\n */\nvar NgModelGroup = (function (_super) {\n    __extends(NgModelGroup, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function NgModelGroup(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    NgModelGroup.prototype._checkParentType = function () {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelGroupParentException();\n        }\n    };\n    return NgModelGroup;\n}(AbstractFormGroupDirective));\nNgModelGroup.decorators = [\n    { type: Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n];\n/**\n * @nocollapse\n */\nNgModelGroup.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\nNgModelGroup.propDecorators = {\n    'name': [{ type: Input, args: ['ngModelGroup',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(function () { return NgModel; })\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nvar resolvedPromise$1 = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n * to a form control element.\n *\n * The {\\@link FormControl} instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n *\n * \\@howToUse\n *\n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional {\\@link \\@Input}. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n *\n * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in {\\@link AbstractControlDirective}.\n *\n * The following is an example of a simple standalone control using `ngModel`:\n *\n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * Take a look at an example of using `ngModel` within a form:\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * To see `ngModel` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgModel = (function (_super) {\n    __extends(NgModel, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    function NgModel(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        /**\n         * \\@internal\n         */\n        _this._control = new FormControl();\n        /**\n         * \\@internal\n         */\n        _this._registered = false;\n        _this.update = new EventEmitter();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype.ngOnChanges = function (changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n    Object.defineProperty(NgModel.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._control; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._parent ? controlPath(this.name, this._parent) : [this.name];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    NgModel.prototype.viewToModelUpdate = function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpControl = function () {\n        this._isStandalone() ? this._setUpStandalone() :\n            this.formDirective.addControl(this);\n        this._registered = true;\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._isStandalone = function () {\n        return !this._parent || (this.options && this.options.standalone);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpStandalone = function () {\n        setUpControl(this._control, this);\n        this._control.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkForErrors = function () {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkParentType = function () {\n        if (!(this._parent instanceof NgModelGroup) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            TemplateDrivenErrors.formGroupNameException();\n        }\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkName = function () {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name) {\n            TemplateDrivenErrors.missingNameException();\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgModel.prototype._updateValue = function (value) {\n        var _this = this;\n        resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype._updateDisabled = function (changes) {\n        var _this = this;\n        var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n        var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise$1.then(function () {\n            if (isDisabled && !_this.control.disabled) {\n                _this.control.disable();\n            }\n            else if (!isDisabled && _this.control.disabled) {\n                _this.control.enable();\n            }\n        });\n    };\n    return NgModel;\n}(NgControl));\nNgModel.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngModel]:not([formControlName]):not([formControl])',\n                providers: [formControlBinding],\n                exportAs: 'ngModel'\n            },] },\n];\n/**\n * @nocollapse\n */\nNgModel.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },\n]; };\nNgModel.propDecorators = {\n    'name': [{ type: Input },],\n    'isDisabled': [{ type: Input, args: ['disabled',] },],\n    'model': [{ type: Input, args: ['ngModel',] },],\n    'options': [{ type: Input, args: ['ngModelOptions',] },],\n    'update': [{ type: Output, args: ['ngModelChange',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ReactiveErrors = (function () {\n    function ReactiveErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.controlParentException = function () {\n        throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.ngModelGroupException = function () {\n        throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + FormErrorExamples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.missingFormException = function () {\n        throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.groupParentException = function () {\n        throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formGroupName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.arrayParentException = function () {\n        throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + FormErrorExamples.formArrayName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.disabledAttrWarning = function () {\n        console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n    };\n    return ReactiveErrors;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: forwardRef(function () { return FormControlDirective; })\n};\n/**\n * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n * {\\@link FormControlDirective}.\n *\n * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n * it does not require that your {\\@link FormControl} instance be part of any parent\n * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n * exists above it.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormControl} instance. See a full list of available properties in\n * {\\@link AbstractControl}.\n *\n * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n * or you can set it programmatically later using {\\@link AbstractControl.setValue} or\n * {\\@link AbstractControl.patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n *  \\@stable\n */\nvar FormControlDirective = (function (_super) {\n    __extends(FormControlDirective, _super);\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    function FormControlDirective(validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this.update = new EventEmitter();\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype.ngOnChanges = function (changes) {\n        if (this._isControlChanged(changes)) {\n            setUpControl(this.form, this);\n            if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                this.valueAccessor.setDisabledState(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    Object.defineProperty(FormControlDirective.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype._isControlChanged = function (changes) {\n        return changes.hasOwnProperty('form');\n    };\n    return FormControlDirective;\n}(NgControl));\nFormControlDirective.decorators = [\n    { type: Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n];\n/**\n * @nocollapse\n */\nFormControlDirective.ctorParameters = function () { return [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },\n]; };\nFormControlDirective.propDecorators = {\n    'form': [{ type: Input, args: ['formControl',] },],\n    'model': [{ type: Input, args: ['ngModel',] },],\n    'update': [{ type: Output, args: ['ngModelChange',] },],\n    'isDisabled': [{ type: Input, args: ['disabled',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return FormGroupDirective; })\n};\n/**\n * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive accepts an existing {\\@link FormGroup} instance. It will then use this\n * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},\n * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},\n * and {\\@link FormArrayName} directives.\n *\n * **Set value**: You can set the form's initial value when instantiating the\n * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s\n * {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the {\\@link FormGroup}'s {\\@link AbstractControl.valueChanges} event.  You can also listen to\n * its {\\@link AbstractControl.statusChanges} event to be notified when the validation status is\n * re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormGroupDirective = (function (_super) {\n    __extends(FormGroupDirective, _super);\n    /**\n     * @param {?} _validators\n     * @param {?} _asyncValidators\n     */\n    function FormGroupDirective(_validators, _asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._validators = _validators;\n        _this._asyncValidators = _asyncValidators;\n        _this._submitted = false;\n        _this.directives = [];\n        _this.form = null;\n        _this.ngSubmit = new EventEmitter();\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormGroupDirective.prototype.ngOnChanges = function (changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n        }\n    };\n    Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._submitted; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addControl = function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeControl = function (dir) { remove(this.directives, dir); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormGroup = function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormArray = function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormArray = function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.updateModel = function (dir, value) {\n        var /** @type {?} */ ctrl = (this.form.get(dir.path));\n        ctrl.setValue(value);\n    };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onSubmit = function ($event) {\n        this._submitted = true;\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.resetForm = function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        this._submitted = false;\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateDomValue = function () {\n        var _this = this;\n        this.directives.forEach(function (dir) {\n            var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n            if (dir._control !== newCtrl) {\n                cleanUpControl(dir._control, dir);\n                if (newCtrl)\n                    setUpControl(newCtrl, dir);\n                dir._control = newCtrl;\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateRegistrations = function () {\n        var _this = this;\n        this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n        if (this._oldForm)\n            this._oldForm._registerOnCollectionChange(function () { });\n        this._oldForm = this.form;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateValidators = function () {\n        var /** @type {?} */ sync = composeValidators(this._validators);\n        this.form.validator = Validators.compose([this.form.validator, sync]);\n        var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n        this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._checkFormPresent = function () {\n        if (!this.form) {\n            ReactiveErrors.missingFormException();\n        }\n    };\n    return FormGroupDirective;\n}(ControlContainer));\nFormGroupDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[formGroup]',\n                providers: [formDirectiveProvider$1],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                exportAs: 'ngForm'\n            },] },\n];\n/**\n * @nocollapse\n */\nFormGroupDirective.ctorParameters = function () { return [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\nFormGroupDirective.propDecorators = {\n    'form': [{ type: Input, args: ['formGroup',] },],\n    'ngSubmit': [{ type: Output },],\n};\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    var /** @type {?} */ index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return FormGroupName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n * will look for a {\\@link FormGroup} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n *\n * **Access the group**: You can access the associated {\\@link FormGroup} using the\n * {\\@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n *\n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormGroup}, or you can set it programmatically later using\n * {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormGroupName = (function (_super) {\n    __extends(FormGroupName, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function FormGroupName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupName.prototype._checkParentType = function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.groupParentException();\n        }\n    };\n    return FormGroupName;\n}(AbstractFormGroupDirective));\nFormGroupName.decorators = [\n    { type: Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n];\n/**\n * @nocollapse\n */\nFormGroupName.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\nFormGroupName.propDecorators = {\n    'name': [{ type: Input, args: ['formGroupName',] },],\n};\nvar formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return FormArrayName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n * will look for a {\\@link FormArray} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n *\n * **Access the array**: You can access the associated {\\@link FormArray} using the\n * {\\@link AbstractControl.get} method on the parent {\\@link FormGroup}.\n * Ex: `this.form.get('cities')`.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormArray}, or you can set the value programmatically later using the\n * {\\@link FormArray}'s {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}\n * methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl.valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl.statusChanges} event to be notified when the validation\n * status is re-calculated.\n *\n * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by\n * calling its {\\@link FormArray.push} method.\n *  Ex: `this.form.get('cities').push(new FormControl());`\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormArrayName = (function (_super) {\n    __extends(FormArrayName, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function FormArrayName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnInit = function () {\n        this._checkParentType();\n        this.formDirective.addFormArray(this);\n    };\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnDestroy = function () {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    };\n    Object.defineProperty(FormArrayName.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.formDirective.getFormArray(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._parent ? (this._parent.formDirective) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._validators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeAsyncValidators(this._asyncValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype._checkParentType = function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.arrayParentException();\n        }\n    };\n    return FormArrayName;\n}(ControlContainer));\nFormArrayName.decorators = [\n    { type: Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n];\n/**\n * @nocollapse\n */\nFormArrayName.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\nFormArrayName.propDecorators = {\n    'name': [{ type: Input, args: ['formArrayName',] },],\n};\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar controlNameBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(function () { return FormControlName; })\n};\n/**\n * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n * element by name.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the {\\@link FormControl} instance you want to\n * link, and will look for a {\\@link FormControl} registered with that name in the\n * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n *\n * **Access the control**: You can access the {\\@link FormControl} associated with\n * this directive by using the {\\@link AbstractControl.get} method.\n * Ex: `this.form.get('first');`\n *\n * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n * See a full list of available properties in {\\@link AbstractControl}.\n *\n *  **Set value**: You can set an initial value for the control when instantiating the\n *  {\\@link FormControl}, or you can set it programmatically later using\n *  {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormControlName = (function (_super) {\n    __extends(FormControlName, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this._added = false;\n        _this.update = new EventEmitter();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnChanges = function (changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnDestroy = function () {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    };\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlName.prototype.viewToModelUpdate = function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    Object.defineProperty(FormControlName.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._control; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._checkParentType = function () {\n        if (!(this._parent instanceof FormGroupName) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            ReactiveErrors.ngModelGroupException();\n        }\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n            !(this._parent instanceof FormArrayName)) {\n            ReactiveErrors.controlParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._setUpControl = function () {\n        this._checkParentType();\n        this._control = this.formDirective.addControl(this);\n        if (this.control.disabled && this.valueAccessor.setDisabledState) {\n            this.valueAccessor.setDisabledState(true);\n        }\n        this._added = true;\n    };\n    return FormControlName;\n}(NgControl));\nFormControlName.decorators = [\n    { type: Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n];\n/**\n * @nocollapse\n */\nFormControlName.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },\n]; };\nFormControlName.propDecorators = {\n    'name': [{ type: Input, args: ['formControlName',] },],\n    'model': [{ type: Input, args: ['ngModel',] },],\n    'update': [{ type: Output, args: ['ngModelChange',] },],\n    'isDisabled': [{ type: Input, args: ['disabled',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return RequiredValidator; }),\n    multi: true\n};\nvar CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return CheckboxRequiredValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * \\@stable\n */\nvar RequiredValidator = (function () {\n    function RequiredValidator() {\n    }\n    Object.defineProperty(RequiredValidator.prototype, \"required\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._required = value != null && value !== false && \"\" + value !== 'false';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    RequiredValidator.prototype.validate = function (c) {\n        return this.required ? Validators.required(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    return RequiredValidator;\n}());\nRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                providers: [REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nRequiredValidator.ctorParameters = function () { return []; };\nRequiredValidator.propDecorators = {\n    'required': [{ type: Input },],\n};\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * \\@experimental\n */\nvar CheckboxRequiredValidator = (function (_super) {\n    __extends(CheckboxRequiredValidator, _super);\n    function CheckboxRequiredValidator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    CheckboxRequiredValidator.prototype.validate = function (c) {\n        return this.required ? Validators.requiredTrue(c) : null;\n    };\n    return CheckboxRequiredValidator;\n}(RequiredValidator));\nCheckboxRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nCheckboxRequiredValidator.ctorParameters = function () { return []; };\n/**\n * Provider which adds {@link EmailValidator} to {@link NG_VALIDATORS}.\n */\nvar EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return EmailValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * \\@experimental\n */\nvar EmailValidator = (function () {\n    function EmailValidator() {\n    }\n    Object.defineProperty(EmailValidator.prototype, \"email\", {\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._enabled = value === '' || value === true || value === 'true';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    EmailValidator.prototype.validate = function (c) {\n        return this._enabled ? Validators.email(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    EmailValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    return EmailValidator;\n}());\nEmailValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                providers: [EMAIL_VALIDATOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nEmailValidator.ctorParameters = function () { return []; };\nEmailValidator.propDecorators = {\n    'email': [{ type: Input },],\n};\n/**\n * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='min'}\n */\nvar MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MinLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * \\@stable\n */\nvar MinLengthValidator = (function () {\n    function MinLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MinLengthValidator.prototype.ngOnChanges = function (changes) {\n        if ('minlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MinLengthValidator.prototype.validate = function (c) {\n        return this.minlength == null ? null : this._validator(c);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MinLengthValidator.prototype._createValidator = function () {\n        this._validator = Validators.minLength(parseInt(this.minlength, 10));\n    };\n    return MinLengthValidator;\n}());\nMinLengthValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                providers: [MIN_LENGTH_VALIDATOR],\n                host: { '[attr.minlength]': 'minlength ? minlength : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nMinLengthValidator.ctorParameters = function () { return []; };\nMinLengthValidator.propDecorators = {\n    'minlength': [{ type: Input },],\n};\n/**\n * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='max'}\n */\nvar MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MaxLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n * `formControl`,\n * or control with `ngModel` that also has a `maxlength` attribute.\n *\n * \\@stable\n */\nvar MaxLengthValidator = (function () {\n    function MaxLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n        if ('maxlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.validate = function (c) {\n        return this.maxlength != null ? this._validator(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MaxLengthValidator.prototype._createValidator = function () {\n        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n    };\n    return MaxLengthValidator;\n}());\nMaxLengthValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                providers: [MAX_LENGTH_VALIDATOR],\n                host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nMaxLengthValidator.ctorParameters = function () { return []; };\nMaxLengthValidator.propDecorators = {\n    'maxlength': [{ type: Input },],\n};\nvar PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return PatternValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n * \\@stable\n */\nvar PatternValidator = (function () {\n    function PatternValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    PatternValidator.prototype.ngOnChanges = function (changes) {\n        if ('pattern' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    PatternValidator.prototype.validate = function (c) { return this._validator(c); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n    return PatternValidator;\n}());\nPatternValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                providers: [PATTERN_VALIDATOR],\n                host: { '[attr.pattern]': 'pattern ? pattern : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nPatternValidator.ctorParameters = function () { return []; };\nPatternValidator.propDecorators = {\n    'pattern': [{ type: Input },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n *\n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n *\n * \\@howToUse\n *\n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n *\n * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n *\n *  * **npm package**: `\\@angular/forms`\n *\n *  * **NgModule**: {\\@link ReactiveFormsModule}\n *\n * \\@stable\n */\nvar FormBuilder = (function () {\n    function FormBuilder() {\n    }\n    /**\n     * Construct a new {\\@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {\\@link FormGroup} constructor for more details.\n     * @param {?} controlsConfig\n     * @param {?=} extra\n     * @return {?}\n     */\n    FormBuilder.prototype.group = function (controlsConfig, extra) {\n        if (extra === void 0) { extra = null; }\n        var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n        var /** @type {?} */ validator = extra != null ? extra['validator'] : null;\n        var /** @type {?} */ asyncValidator = extra != null ? extra['asyncValidator'] : null;\n        return new FormGroup(controls, validator, asyncValidator);\n    };\n    /**\n     * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     * @param {?} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n        if (validator === void 0) { validator = null; }\n        if (asyncValidator === void 0) { asyncValidator = null; }\n        return new FormControl(formState, validator, asyncValidator);\n    };\n    /**\n     * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     * @param {?} controlsConfig\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n        var _this = this;\n        if (validator === void 0) { validator = null; }\n        if (asyncValidator === void 0) { asyncValidator = null; }\n        var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n        return new FormArray(controls, validator, asyncValidator);\n    };\n    /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._reduceControls = function (controlsConfig) {\n        var _this = this;\n        var /** @type {?} */ controls = {};\n        Object.keys(controlsConfig).forEach(function (controlName) {\n            controls[controlName] = _this._createControl(controlsConfig[controlName]);\n        });\n        return controls;\n    };\n    /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._createControl = function (controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (Array.isArray(controlConfig)) {\n            var /** @type {?} */ value = controlConfig[0];\n            var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    };\n    return FormBuilder;\n}());\nFormBuilder.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nFormBuilder.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nvar VERSION = new Version('4.0.0');\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * \\@experimental\n */\nvar NgNoValidate = (function () {\n    function NgNoValidate() {\n    }\n    return NgNoValidate;\n}());\nNgNoValidate.decorators = [\n    { type: Directive, args: [{\n                selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                host: { 'novalidate': '' },\n            },] },\n];\n/**\n * @nocollapse\n */\nNgNoValidate.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SHARED_FORM_DIRECTIVES = [\n    NgNoValidate,\n    NgSelectOption,\n    NgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n];\nvar TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\nvar REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nvar InternalFormsSharedModule = (function () {\n    function InternalFormsSharedModule() {\n    }\n    return InternalFormsSharedModule;\n}());\nInternalFormsSharedModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: SHARED_FORM_DIRECTIVES,\n                exports: SHARED_FORM_DIRECTIVES,\n            },] },\n];\n/**\n * @nocollapse\n */\nInternalFormsSharedModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The ng module for forms.\n * \\@stable\n */\nvar FormsModule = (function () {\n    function FormsModule() {\n    }\n    return FormsModule;\n}());\nFormsModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                providers: [RadioControlRegistry],\n                exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n            },] },\n];\n/**\n * @nocollapse\n */\nFormsModule.ctorParameters = function () { return []; };\n/**\n * The ng module for reactive forms.\n * \\@stable\n */\nvar ReactiveFormsModule = (function () {\n    function ReactiveFormsModule() {\n    }\n    return ReactiveFormsModule;\n}());\nReactiveFormsModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                providers: [FormBuilder, RadioControlRegistry],\n                exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n            },] },\n];\n/**\n * @nocollapse\n */\nReactiveFormsModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * This module is used for handling user input, by defining and building a {@link FormGroup} that\n * consists of {@link FormControl} objects, and mapping them onto the DOM. {@link FormControl}\n * objects can then be used to read information from the form DOM elements.\n *\n * Forms providers are not included in default providers; you must import these providers\n * explicitly.\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the forms package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n/**\n * Generated bundle index. Do not edit.\n */\nexport { AbstractControlDirective, AbstractFormGroupDirective, CheckboxControlValueAccessor, ControlContainer, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE, DefaultValueAccessor, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, RadioControlValueAccessor, FormControlDirective, FormControlName, FormGroupDirective, FormArrayName, FormGroupName, NgSelectOption, SelectControlValueAccessor, SelectMultipleControlValueAccessor, CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator, FormBuilder, AbstractControl, FormArray, FormControl, FormGroup, NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators, VERSION, FormsModule, ReactiveFormsModule, InternalFormsSharedModule as ɵba, REACTIVE_DRIVEN_DIRECTIVES as ɵz, SHARED_FORM_DIRECTIVES as ɵx, TEMPLATE_DRIVEN_DIRECTIVES as ɵy, CHECKBOX_VALUE_ACCESSOR as ɵa, DEFAULT_VALUE_ACCESSOR as ɵb, AbstractControlStatus as ɵc, ngControlStatusHost as ɵd, formDirectiveProvider as ɵe, formControlBinding as ɵf, modelGroupProvider as ɵg, NgNoValidate as ɵbf, NUMBER_VALUE_ACCESSOR as ɵbb, NumberValueAccessor as ɵbc, RADIO_VALUE_ACCESSOR as ɵh, RadioControlRegistry as ɵi, RANGE_VALUE_ACCESSOR as ɵbd, RangeValueAccessor as ɵbe, formControlBinding$1 as ɵj, controlNameBinding as ɵk, formDirectiveProvider$1 as ɵl, formArrayNameProvider as ɵn, formGroupNameProvider as ɵm, SELECT_VALUE_ACCESSOR as ɵo, NgSelectMultipleOption as ɵq, SELECT_MULTIPLE_VALUE_ACCESSOR as ɵp, CHECKBOX_REQUIRED_VALIDATOR as ɵs, EMAIL_VALIDATOR as ɵt, MAX_LENGTH_VALIDATOR as ɵv, MIN_LENGTH_VALIDATOR as ɵu, PATTERN_VALIDATOR as ɵw, REQUIRED_VALIDATOR as ɵr };\n//# sourceMappingURL=forms.es5.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@angular/forms/@angular/forms.es5.js\n// module id = 53\n// module chunks = 6","/**\n * @license Angular v4.1.0\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * \\@experimental Animation support is experimental.\n */\nvar AUTO_STYLE = '*';\n/**\n * `trigger` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `trigger` Creates an animation trigger which will a list of {\\@link state state} and {\\@link\n * transition transition} entries that will be evaluated when the expression bound to the trigger\n * changes.\n *\n * Triggers are registered within the component annotation data under the {\\@link\n * Component#animations-anchor animations section}. An animation trigger can be placed on an element\n * within a template by referencing the name of the trigger followed by the expression value that the\n * trigger is bound to (in the form of `[\\@triggerName]=\"expression\"`.\n *\n * ### Usage\n *\n * `trigger` will create an animation trigger reference based on the provided `name` value. The\n * provided `animation` value is expected to be an array consisting of {\\@link state state} and {\\@link\n * transition transition} declarations.\n *\n * ```typescript\n * \\@Component({\n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n *\n * The template associated with this component will make use of the `myAnimationTrigger` animation\n * trigger by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * tools/gulp-tasks/validate-commit-message.js ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} definitions\n * @return {?}\n */\nfunction trigger(name, definitions) {\n    return { name: name, definitions: definitions };\n}\n/**\n * `animate` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `animate` specifies an animation step that will apply the provided `styles` data for a given\n * amount of time based on the provided `timing` expression value. Calls to `animate` are expected\n * to be used within {\\@link sequence an animation sequence}, {\\@link group group}, or {\\@link\n * transition transition}.\n *\n * ### Usage\n *\n * The `animate` function accepts two input parameters: `timing` and `styles`:\n *\n * - `timing` is a string based value that can be a combination of a duration with optional delay\n * and easing values. The format for the expression breaks down to `duration delay easing`\n * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\n * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the\n * `duration` value in millisecond form.\n * - `styles` is the style input data which can either be a call to {\\@link style style} or {\\@link\n * keyframes keyframes}. If left empty then the styles from the destination state will be collected\n * and used (this is useful when describing an animation step that will complete an animation by\n * {\\@link transition#the-final-animate-call animating to the final state}).\n *\n * ```typescript\n * // various functions for specifying timing data\n * animate(500, style(...))\n * animate(\"1s\", style(...))\n * animate(\"100ms 0.5s\", style(...))\n * animate(\"5s ease\", style(...))\n * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n *\n * // either style() of keyframes() can be used\n * animate(500, style({ background: \"red\" }))\n * animate(500, keyframes([\n *   style({ background: \"blue\" })),\n *   style({ background: \"red\" }))\n * ])\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} timings\n * @param {?=} styles\n * @return {?}\n */\nfunction animate(timings, styles) {\n    if (styles === void 0) { styles = null; }\n    return { type: 4 /* Animate */, styles: styles, timings: timings };\n}\n/**\n * `group` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are\n * useful when a series of styles must be animated/closed off at different statrting/ending times.\n *\n * The `group` function can either be used within a {\\@link sequence sequence} or a {\\@link transition\n * transition} and it will only continue to the next instruction once all of the inner animation\n * steps have completed.\n *\n * ### Usage\n *\n * The `steps` data that is passed into the `group` animation function can either consist of {\\@link\n * style style} or {\\@link animate animate} function calls. Each call to `style()` or `animate()`\n * within a group will be executed instantly (use {\\@link keyframes keyframes} or a {\\@link\n * animate#usage animate() with a delay value} to offset styles to be applied at a later time).\n *\n * ```typescript\n * group([\n *   animate(\"1s\", { background: \"black\" }))\n *   animate(\"2s\", { color: \"white\" }))\n * ])\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @return {?}\n */\nfunction group(steps) {\n    return { type: 3 /* Group */, steps: steps };\n}\n/**\n * `sequence` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by\n * default when an array is passed as animation data into {\\@link transition transition}.)\n *\n * The `sequence` function can either be used within a {\\@link group group} or a {\\@link transition\n * transition} and it will only continue to the next instruction once each of the inner animation\n * steps have completed.\n *\n * To perform animation styling in parallel with other animation steps then have a look at the\n * {\\@link group group} animation function.\n *\n * ### Usage\n *\n * The `steps` data that is passed into the `sequence` animation function can either consist of\n * {\\@link style style} or {\\@link animate animate} function calls. A call to `style()` will apply the\n * provided styling data immediately while a call to `animate()` will apply its styling data over a\n * given time depending on its timing data.\n *\n * ```typescript\n * sequence([\n *   style({ opacity: 0 })),\n *   animate(\"1s\", { opacity: 1 }))\n * ])\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @return {?}\n */\nfunction sequence(steps) {\n    return { type: 2 /* Sequence */, steps: steps };\n}\n/**\n * `style` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `style` declares a key/value object containing CSS properties/styles that can then be used for\n * {\\@link state animation states}, within an {\\@link sequence animation sequence}, or as styling data\n * for both {\\@link animate animate} and {\\@link keyframes keyframes}.\n *\n * ### Usage\n *\n * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs\n * to be defined.\n *\n * ```typescript\n * // string values are used for css properties\n * style({ background: \"red\", color: \"blue\" })\n *\n * // numerical (pixel) values are also supported\n * style({ width: 100, height: 0 })\n * ```\n *\n * #### Auto-styles (using `*`)\n *\n * When an asterix (`*`) character is used as a value then it will be detected from the element\n * being animated and applied as animation data when the animation starts.\n *\n * This feature proves useful for a state depending on layout and/or environment factors; in such\n * cases the styles are calculated just before the animation starts.\n *\n * ```typescript\n * // the steps below will animate from 0 to the\n * // actual height of the element\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} tokens\n * @return {?}\n */\nfunction style(tokens) {\n    return { type: 6 /* Style */, styles: tokens };\n}\n/**\n * `state` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `state` declares an animation state within the given trigger. When a state is active within a\n * component then its associated styles will persist on the element that the trigger is attached to\n * (even when the animation ends).\n *\n * To animate between states, have a look at the animation {\\@link transition transition} DSL\n * function. To register states to an animation trigger please have a look at the {\\@link trigger\n * trigger} function.\n *\n * #### The `void` state\n *\n * The `void` state value is a reserved word that angular uses to determine when the element is not\n * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\n * associated element is void).\n *\n * #### The `*` (default) state\n *\n * The `*` state (when styled) is a fallback state that will be used if the state that is being\n * animated is not declared within the trigger.\n *\n * ### Usage\n *\n * `state` will declare an animation state with its associated styles\n * within the given trigger.\n *\n * - `stateNameExpr` can be one or more state names separated by commas.\n * - `styles` refers to the {\\@link style styling data} that will be persisted on the element once\n * the state has been reached.\n *\n * ```typescript\n * // \"void\" is a reserved name for a state and is used to represent\n * // the state in which an element is detached from from the application.\n * state(\"void\", style({ height: 0 }))\n *\n * // user-defined states\n * state(\"closed\", style({ height: 0 }))\n * state(\"open, visible\", style({ height: \"*\" }))\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} styles\n * @return {?}\n */\nfunction state(name, styles) {\n    return { type: 0 /* State */, name: name, styles: styles };\n}\n/**\n * `keyframes` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `keyframes` specifies a collection of {\\@link style style} entries each optionally characterized\n * by an `offset` value.\n *\n * ### Usage\n *\n * The `keyframes` animation function is designed to be used alongside the {\\@link animate animate}\n * animation function. Instead of applying animations from where they are currently to their\n * destination, keyframes can describe how each style entry is applied and at what point within the\n * animation arc (much like CSS Keyframe Animations do).\n *\n * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what\n * percentage of the animate time the styles will be applied.\n *\n * ```typescript\n * // the provided offset values describe when each backgroundColor value is applied.\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n *\n * Alternatively, if there are no `offset` values used within the style entries then the offsets\n * will be calculated automatically.\n *\n * ```typescript\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @return {?}\n */\nfunction keyframes(steps) {\n    return { type: 5 /* KeyframeSequence */, steps: steps };\n}\n/**\n * `transition` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `transition` declares the {\\@link sequence sequence of animation steps} that will be run when the\n * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>\n * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting\n * and/or ending state).\n *\n * A function can also be provided as the `stateChangeExpr` argument for a transition and this\n * function will be executed each time a state change occurs. If the value returned within the\n * function is true then the associated animation will be run.\n *\n * Animation transitions are placed within an {\\@link trigger animation trigger}. For an transition\n * to animate to a state value and persist its styles then one or more {\\@link state animation\n * states} is expected to be defined.\n *\n * ### Usage\n *\n * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\n * what the previous state is and what the current state has become. In other words, if a transition\n * is defined that matches the old/current state criteria then the associated animation will be\n * triggered.\n *\n * ```typescript\n * // all transition/state changes are defined within an animation trigger\n * trigger(\"myAnimationTrigger\", [\n *   // if a state is defined then its styles will be persisted when the\n *   // animation has fully completed itself\n *   state(\"on\", style({ background: \"green\" })),\n *   state(\"off\", style({ background: \"grey\" })),\n *\n *   // a transition animation that will be kicked off when the state value\n *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n *   transition(\"on => off\", animate(500)),\n *\n *   // it is also possible to do run the same animation for both directions\n *   transition(\"on <=> off\", animate(500)),\n *\n *   // or to define multiple states pairs separated by commas\n *   transition(\"on => off, off => void\", animate(500)),\n *\n *   // this is a catch-all state change for when an element is inserted into\n *   // the page and the destination state is unknown\n *   transition(\"void => *\", [\n *     style({ opacity: 0 }),\n *     animate(500)\n *   ]),\n *\n *   // this will capture a state change between any states\n *   transition(\"* => *\", animate(\"1s 0s\")),\n *\n *   // you can also go full out and include a function\n *   transition((fromState, toState) => {\n *     // when `true` then it will allow the animation below to be invoked\n *     return fromState == \"off\" && toState == \"on\";\n *   }, animate(\"1s 0s\"))\n * ])\n * ```\n *\n * The template associated with this component will make use of the `myAnimationTrigger` animation\n * trigger by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * #### The final `animate` call\n *\n * If the final step within the transition steps is a call to `animate()` that **only** uses a\n * timing value with **no style data** then it will be automatically used as the final animation arc\n * for the element to animate itself to the final state. This involves an automatic mix of\n * adding/removing CSS styles so that the element will be in the exact state it should be for the\n * applied state to be presented correctly.\n *\n * ```\n * // start off by hiding the element, but make sure that it animates properly to whatever state\n * // is currently active for \"myAnimationTrigger\"\n * transition(\"void => *\", [\n *   style({ opacity: 0 }),\n *   animate(500)\n * ])\n * ```\n *\n * ### Transition Aliases (`:enter` and `:leave`)\n *\n * Given that enter (insertion) and leave (removal) animations are so common, the `transition`\n * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*\n * => void` state changes.\n *\n * ```\n * transition(\":enter\", [\n *   style({ opacity: 0 }),\n *   animate(500, style({ opacity: 1 }))\n * ])\n * transition(\":leave\", [\n *   animate(500, style({ opacity: 0 }))\n * ])\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} stateChangeExpr\n * @param {?} steps\n * @return {?}\n */\nfunction transition(stateChangeExpr, steps) {\n    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps };\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?} cb\n * @return {?}\n */\nfunction scheduleMicroTask(cb) {\n    Promise.resolve(null).then(cb);\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@experimental Animation support is experimental.\n * @abstract\n */\nvar AnimationPlayer = (function () {\n    function AnimationPlayer() {\n    }\n    /**\n     * @abstract\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationPlayer.prototype.onDone = function (fn) { };\n    /**\n     * @abstract\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationPlayer.prototype.onStart = function (fn) { };\n    /**\n     * @abstract\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationPlayer.prototype.onDestroy = function (fn) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.init = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.hasStarted = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.play = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.pause = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.restart = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.finish = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.destroy = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.reset = function () { };\n    /**\n     * @abstract\n     * @param {?} p\n     * @return {?}\n     */\n    AnimationPlayer.prototype.setPosition = function (p) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    AnimationPlayer.prototype.getPosition = function () { };\n    Object.defineProperty(AnimationPlayer.prototype, \"parentPlayer\", {\n        /**\n         * @return {?}\n         */\n        get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },\n        /**\n         * @param {?} player\n         * @return {?}\n         */\n        set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimationPlayer;\n}());\n/**\n * \\@experimental Animation support is experimental.\n */\nvar NoopAnimationPlayer = (function () {\n    function NoopAnimationPlayer() {\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._started = false;\n        this._destroyed = false;\n        this._finished = false;\n        this.parentPlayer = null;\n    }\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype._onFinish = function () {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(function (fn) { return fn(); });\n            this._onDoneFns = [];\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.hasStarted = function () { return this._started; };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.init = function () { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.play = function () {\n        var _this = this;\n        if (!this.hasStarted()) {\n            scheduleMicroTask(function () { return _this._onFinish(); });\n            this._onStart();\n        }\n        this._started = true;\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype._onStart = function () {\n        this._onStartFns.forEach(function (fn) { return fn(); });\n        this._onStartFns = [];\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.pause = function () { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.restart = function () { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.finish = function () { this._onFinish(); };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.destroy = function () {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            if (!this.hasStarted()) {\n                this._onStart();\n            }\n            this.finish();\n            this._onDestroyFns.forEach(function (fn) { return fn(); });\n            this._onDestroyFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.reset = function () { };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.setPosition = function (p) { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.getPosition = function () { return 0; };\n    return NoopAnimationPlayer;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar AnimationGroupPlayer = (function () {\n    /**\n     * @param {?} _players\n     */\n    function AnimationGroupPlayer(_players) {\n        var _this = this;\n        this._players = _players;\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this._onDestroyFns = [];\n        this.parentPlayer = null;\n        var count = 0;\n        var total = this._players.length;\n        if (total == 0) {\n            scheduleMicroTask(function () { return _this._onFinish(); });\n        }\n        else {\n            this._players.forEach(function (player) {\n                player.parentPlayer = _this;\n                player.onDone(function () {\n                    if (++count >= total) {\n                        _this._onFinish();\n                    }\n                });\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype._onFinish = function () {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(function (fn) { return fn(); });\n            this._onDoneFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.play = function () {\n        if (!this.parentPlayer) {\n            this.init();\n        }\n        if (!this.hasStarted()) {\n            this._onStartFns.forEach(function (fn) { return fn(); });\n            this._onStartFns = [];\n            this._started = true;\n        }\n        this._players.forEach(function (player) { return player.play(); });\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.finish = function () {\n        this._onFinish();\n        this._players.forEach(function (player) { return player.finish(); });\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.destroy = function () {\n        if (!this._destroyed) {\n            this._onFinish();\n            this._players.forEach(function (player) { return player.destroy(); });\n            this._destroyed = true;\n            this._onDestroyFns.forEach(function (fn) { return fn(); });\n            this._onDestroyFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.reset = function () {\n        this._players.forEach(function (player) { return player.reset(); });\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.setPosition = function (p) {\n        this._players.forEach(function (player) { player.setPosition(p); });\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.getPosition = function () {\n        var /** @type {?} */ min = 0;\n        this._players.forEach(function (player) {\n            var /** @type {?} */ p = player.getPosition();\n            min = Math.min(p, min);\n        });\n        return min;\n    };\n    Object.defineProperty(AnimationGroupPlayer.prototype, \"players\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._players; },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimationGroupPlayer;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the animation package.\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { AUTO_STYLE, animate, group, keyframes, sequence, state, style, transition, trigger, AnimationPlayer, NoopAnimationPlayer, AnimationGroupPlayer as ɵAnimationGroupPlayer };\n//# sourceMappingURL=animations.es5.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@angular/animations/@angular/animations.es5.js\n// module id = 58\n// module chunks = 6","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'my-about',\n  template: require('./about.component.html'),\n  styles: [require('./about.component.scss')]\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() {\n    // Do stuff\n  }\n\n  ngOnInit() {\n    console.log('Hello About');\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/@angularclass/hmr-loader!./~/angular2-router-loader/src!./~/tslint-loader!./src/app/about/about.component.ts","import { Component, AfterViewInit } from '@angular/core';\n\nimport '../../public/js/jquery.scrollex.min.js';\n\n@Component({\n  selector: 'my-home',\n  template: require('./home.component.html'),\n  styles: [require('./home.component.scss')]\n})\nexport class HomeComponent implements AfterViewInit {\n\n  constructor() {\n    // Do stuff\n  }\n\n  ngAfterViewInit() {\n    // todo: anything to add here?\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/@angularclass/hmr-loader!./~/angular2-router-loader/src!./~/tslint-loader!./src/app/home/home.component.ts"],"sourceRoot":""}